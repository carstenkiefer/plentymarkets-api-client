<?php
/**
 * AccountingApiTest
 * PHP version 8.1
 *
 * @package  ck/plenty-client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace ck/plenty-client\Test\Api;

use ck/plenty-client\Configuration;
use ck/plenty-client\ApiException;
use ck/plenty-client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * AccountingApiTest Class Doc Comment
 *
 * @package  ck/plenty-client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AccountingApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for restAccountingLocationsExistingAccountsGet
     *
     * Get all unique posting accounts.
     *
     */
    public function testRestAccountingLocationsExistingAccountsGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restAccountingLocationsLocationIdCountriesCountryIdRevenueAccountsGet
     *
     * Get the revenue account configuration of a country.
     *
     */
    public function testRestAccountingLocationsLocationIdCountriesCountryIdRevenueAccountsGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restAccountingLocationsLocationIdDebtorAccountConfigurationsGet
     *
     * Get debtor account configuration of an accounting location.
     *
     */
    public function testRestAccountingLocationsLocationIdDebtorAccountConfigurationsGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restAccountingLocationsLocationIdDebtorAccountsModeGet
     *
     * Lists the debtor accounts by mode..
     *
     */
    public function testRestAccountingLocationsLocationIdDebtorAccountsModeGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restAccountingLocationsLocationIdDelete
     *
     * Delete an accounting location.
     *
     */
    public function testRestAccountingLocationsLocationIdDelete()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restAccountingLocationsLocationIdGet
     *
     * Get an accounting location.
     *
     */
    public function testRestAccountingLocationsLocationIdGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restAccountingLocationsLocationIdPostingAccountsGet
     *
     * Get all posting accounts by locationId.
     *
     */
    public function testRestAccountingLocationsLocationIdPostingAccountsGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restAccountingLocationsLocationIdPostingKeyConfigurationsGet
     *
     * Get a posting key configuration of an accounting location.
     *
     */
    public function testRestAccountingLocationsLocationIdPostingKeyConfigurationsGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restAccountingLocationsLocationIdPut
     *
     * Update an accounting location.
     *
     */
    public function testRestAccountingLocationsLocationIdPut()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restAccountingLocationsLocationIdRevenueAccountConfigurationsGet
     *
     * Get the revenue account configuration of an accounting location.
     *
     */
    public function testRestAccountingLocationsLocationIdRevenueAccountConfigurationsGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restAccountingLocationsLocationIdSettingsGet
     *
     * Get accounting location settings.
     *
     */
    public function testRestAccountingLocationsLocationIdSettingsGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restAccountingLocationsLocationIdTypePostingAccountsGet
     *
     * Get all posting accounts by locationId and type.
     *
     */
    public function testRestAccountingLocationsLocationIdTypePostingAccountsGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restAccountingLocationsPost
     *
     * Create an accounting location.
     *
     */
    public function testRestAccountingLocationsPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restAccountingLocationsPostingAccountsGet
     *
     * Get all posting accounts.
     *
     */
    public function testRestAccountingLocationsPostingAccountsGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restAccountingLocationsPostingAccountsIdDelete
     *
     * Delete an posting account.
     *
     */
    public function testRestAccountingLocationsPostingAccountsIdDelete()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restAccountingLocationsPostingAccountsIdGet
     *
     * Gets posting account by the unique id.
     *
     */
    public function testRestAccountingLocationsPostingAccountsIdGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restAccountingLocationsPostingAccountsPost
     *
     * Save posting accounts.
     *
     */
    public function testRestAccountingLocationsPostingAccountsPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restAccountingLocationsRevenueAccountConfigurationsGet
     *
     * List revenue account configurations.
     *
     */
    public function testRestAccountingLocationsRevenueAccountConfigurationsGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restAccountingLocationsWebstoreIdCountryIdPostingAccountsGet
     *
     * Get all posting accounts for a country of a webstore.
     *
     */
    public function testRestAccountingLocationsWebstoreIdCountryIdPostingAccountsGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restAccountingStoresLocationsGet
     *
     * List all accounting locations.
     *
     */
    public function testRestAccountingStoresLocationsGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restAccountingStoresPlentyIdLocationsGet
     *
     * List accounting locations of a client.
     *
     */
    public function testRestAccountingStoresPlentyIdLocationsGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restStoresPlentyIdLocationsGet
     *
     * Get the ID of an accounting location of a country.
     *
     */
    public function testRestStoresPlentyIdLocationsGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restVatGet
     *
     * List VAT configurations..
     *
     */
    public function testRestVatGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restVatLocationsLocationIdCountriesCountryIdDateDateGet
     *
     * Get a VAT configuration for a country in a location..
     *
     */
    public function testRestVatLocationsLocationIdCountriesCountryIdDateDateGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restVatLocationsLocationIdCountriesCountryIdGet
     *
     * List VAT configurations for one country of delivery.
     *
     */
    public function testRestVatLocationsLocationIdCountriesCountryIdGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restVatLocationsLocationIdGet
     *
     * List VAT configurations of an accounting location.
     *
     */
    public function testRestVatLocationsLocationIdGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restVatPost
     *
     * Create a VAT configuration.
     *
     */
    public function testRestVatPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restVatStandardGet
     *
     * Get a VAT configuration for the standard accounting location of a client.
     *
     */
    public function testRestVatStandardGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restVatVatIdGet
     *
     * Get a VAT configuration by id.
     *
     */
    public function testRestVatVatIdGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restVatVatIdPut
     *
     * Update a VAT configuration.
     *
     */
    public function testRestVatVatIdPut()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
