<?php
/**
 * ReportApi
 * PHP version 8.1
 *
 * @package  ck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ck\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use ck\ApiException;
use ck\Configuration;
use ck\HeaderSelector;
use ck\ObjectSerializer;

/**
 * ReportApi Class Doc Comment
 *
 * @package  ck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ReportApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'restReportsKeyFiguresConfigGet' => [
            'application/json',
        ],
        'restReportsKeyFiguresConfigKeyFigureConfigIdDelete' => [
            'application/json',
        ],
        'restReportsKeyFiguresConfigKeyFigureConfigIdGet' => [
            'application/json',
        ],
        'restReportsKeyFiguresConfigKeyFigureConfigIdPut' => [
            'application/json',
        ],
        'restReportsKeyFiguresConfigPost' => [
            'application/json',
        ],
        'restReportsKeyFiguresConfigTemplatePost' => [
            'application/json',
        ],
        'restReportsKeyFiguresConfigTemplatesGet' => [
            'application/json',
        ],
        'restReportsKeyFiguresConfigsDelete' => [
            'application/json',
        ],
        'restReportsKeyFiguresDetailsKeyFigureNameGet' => [
            'application/json',
        ],
        'restReportsKeyFiguresGet' => [
            'application/json',
        ],
        'restReportsKeyFiguresResultsPost' => [
            'application/json',
        ],
        'restReportsOrderTypesGet' => [
            'application/json',
        ],
        'restReportsRawDataConfigGet' => [
            'application/json',
        ],
        'restReportsRawDataConfigPut' => [
            'application/json',
        ],
        'restReportsRawDataCreatorsConfigsGet' => [
            'application/json',
        ],
        'restReportsRawDataCreatorsGet' => [
            'application/json',
        ],
        'restReportsRawDataFileGet' => [
            'application/json',
        ],
        'restReportsRawDataGet' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation restReportsKeyFiguresConfigGet
     *
     * Returns all key figure configs
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsKeyFiguresConfigGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\KeyFigureConfigSearchResult
     */
    public function restReportsKeyFiguresConfigGet(
        string $contentType = self::contentTypes['restReportsKeyFiguresConfigGet'][0]
    ): \ck\Model\KeyFigureConfigSearchResult
    {
        list($response) = $this->restReportsKeyFiguresConfigGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation restReportsKeyFiguresConfigGetWithHttpInfo
     *
     * Returns all key figure configs
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsKeyFiguresConfigGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\KeyFigureConfigSearchResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function restReportsKeyFiguresConfigGetWithHttpInfo(
        string $contentType = self::contentTypes['restReportsKeyFiguresConfigGet'][0]
    ): array
    {
        $request = $this->restReportsKeyFiguresConfigGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\KeyFigureConfigSearchResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\KeyFigureConfigSearchResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\KeyFigureConfigSearchResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\KeyFigureConfigSearchResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\KeyFigureConfigSearchResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restReportsKeyFiguresConfigGetAsync
     *
     * Returns all key figure configs
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsKeyFiguresConfigGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restReportsKeyFiguresConfigGetAsync(
        string $contentType = self::contentTypes['restReportsKeyFiguresConfigGet'][0]
    ): PromiseInterface
    {
        return $this->restReportsKeyFiguresConfigGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restReportsKeyFiguresConfigGetAsyncWithHttpInfo
     *
     * Returns all key figure configs
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsKeyFiguresConfigGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restReportsKeyFiguresConfigGetAsyncWithHttpInfo(
        string $contentType = self::contentTypes['restReportsKeyFiguresConfigGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\KeyFigureConfigSearchResult';
        $request = $this->restReportsKeyFiguresConfigGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restReportsKeyFiguresConfigGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsKeyFiguresConfigGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restReportsKeyFiguresConfigGetRequest(
        string $contentType = self::contentTypes['restReportsKeyFiguresConfigGet'][0]
    ): Request
    {


        $resourcePath = '/rest/reports/key-figures/config';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restReportsKeyFiguresConfigKeyFigureConfigIdDelete
     *
     * Delete key figure configuration
     *
     * @param  int $key_figure_config_id key_figure_config_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsKeyFiguresConfigKeyFigureConfigIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object
     */
    public function restReportsKeyFiguresConfigKeyFigureConfigIdDelete(
        int $key_figure_config_id,
        string $contentType = self::contentTypes['restReportsKeyFiguresConfigKeyFigureConfigIdDelete'][0]
    ): object
    {
        list($response) = $this->restReportsKeyFiguresConfigKeyFigureConfigIdDeleteWithHttpInfo($key_figure_config_id, $contentType);
        return $response;
    }

    /**
     * Operation restReportsKeyFiguresConfigKeyFigureConfigIdDeleteWithHttpInfo
     *
     * Delete key figure configuration
     *
     * @param  int $key_figure_config_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsKeyFiguresConfigKeyFigureConfigIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restReportsKeyFiguresConfigKeyFigureConfigIdDeleteWithHttpInfo(
        int $key_figure_config_id,
        string $contentType = self::contentTypes['restReportsKeyFiguresConfigKeyFigureConfigIdDelete'][0]
    ): array
    {
        $request = $this->restReportsKeyFiguresConfigKeyFigureConfigIdDeleteRequest($key_figure_config_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restReportsKeyFiguresConfigKeyFigureConfigIdDeleteAsync
     *
     * Delete key figure configuration
     *
     * @param  int $key_figure_config_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsKeyFiguresConfigKeyFigureConfigIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restReportsKeyFiguresConfigKeyFigureConfigIdDeleteAsync(
        int $key_figure_config_id,
        string $contentType = self::contentTypes['restReportsKeyFiguresConfigKeyFigureConfigIdDelete'][0]
    ): PromiseInterface
    {
        return $this->restReportsKeyFiguresConfigKeyFigureConfigIdDeleteAsyncWithHttpInfo($key_figure_config_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restReportsKeyFiguresConfigKeyFigureConfigIdDeleteAsyncWithHttpInfo
     *
     * Delete key figure configuration
     *
     * @param  int $key_figure_config_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsKeyFiguresConfigKeyFigureConfigIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restReportsKeyFiguresConfigKeyFigureConfigIdDeleteAsyncWithHttpInfo(
        $key_figure_config_id,
        string $contentType = self::contentTypes['restReportsKeyFiguresConfigKeyFigureConfigIdDelete'][0]
    ): PromiseInterface
    {
        $returnType = 'object';
        $request = $this->restReportsKeyFiguresConfigKeyFigureConfigIdDeleteRequest($key_figure_config_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restReportsKeyFiguresConfigKeyFigureConfigIdDelete'
     *
     * @param  int $key_figure_config_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsKeyFiguresConfigKeyFigureConfigIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restReportsKeyFiguresConfigKeyFigureConfigIdDeleteRequest(
        $key_figure_config_id,
        string $contentType = self::contentTypes['restReportsKeyFiguresConfigKeyFigureConfigIdDelete'][0]
    ): Request
    {

        // verify the required parameter 'key_figure_config_id' is set
        if ($key_figure_config_id === null || (is_array($key_figure_config_id) && count($key_figure_config_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $key_figure_config_id when calling restReportsKeyFiguresConfigKeyFigureConfigIdDelete'
            );
        }


        $resourcePath = '/rest/reports/key-figures/config/{keyFigureConfigId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($key_figure_config_id !== null) {
            $resourcePath = str_replace(
                '{' . 'keyFigureConfigId' . '}',
                ObjectSerializer::toPathValue($key_figure_config_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restReportsKeyFiguresConfigKeyFigureConfigIdGet
     *
     * Get key figure config
     *
     * @param  int $key_figure_config_id key_figure_config_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsKeyFiguresConfigKeyFigureConfigIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\KeyFigureConfig
     */
    public function restReportsKeyFiguresConfigKeyFigureConfigIdGet(
        int $key_figure_config_id,
        string $contentType = self::contentTypes['restReportsKeyFiguresConfigKeyFigureConfigIdGet'][0]
    ): \ck\Model\KeyFigureConfig
    {
        list($response) = $this->restReportsKeyFiguresConfigKeyFigureConfigIdGetWithHttpInfo($key_figure_config_id, $contentType);
        return $response;
    }

    /**
     * Operation restReportsKeyFiguresConfigKeyFigureConfigIdGetWithHttpInfo
     *
     * Get key figure config
     *
     * @param  int $key_figure_config_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsKeyFiguresConfigKeyFigureConfigIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\KeyFigureConfig, HTTP status code, HTTP response headers (array of strings)
     */
    public function restReportsKeyFiguresConfigKeyFigureConfigIdGetWithHttpInfo(
        int $key_figure_config_id,
        string $contentType = self::contentTypes['restReportsKeyFiguresConfigKeyFigureConfigIdGet'][0]
    ): array
    {
        $request = $this->restReportsKeyFiguresConfigKeyFigureConfigIdGetRequest($key_figure_config_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\KeyFigureConfig' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\KeyFigureConfig' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\KeyFigureConfig', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\KeyFigureConfig';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\KeyFigureConfig',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restReportsKeyFiguresConfigKeyFigureConfigIdGetAsync
     *
     * Get key figure config
     *
     * @param  int $key_figure_config_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsKeyFiguresConfigKeyFigureConfigIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restReportsKeyFiguresConfigKeyFigureConfigIdGetAsync(
        int $key_figure_config_id,
        string $contentType = self::contentTypes['restReportsKeyFiguresConfigKeyFigureConfigIdGet'][0]
    ): PromiseInterface
    {
        return $this->restReportsKeyFiguresConfigKeyFigureConfigIdGetAsyncWithHttpInfo($key_figure_config_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restReportsKeyFiguresConfigKeyFigureConfigIdGetAsyncWithHttpInfo
     *
     * Get key figure config
     *
     * @param  int $key_figure_config_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsKeyFiguresConfigKeyFigureConfigIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restReportsKeyFiguresConfigKeyFigureConfigIdGetAsyncWithHttpInfo(
        $key_figure_config_id,
        string $contentType = self::contentTypes['restReportsKeyFiguresConfigKeyFigureConfigIdGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\KeyFigureConfig';
        $request = $this->restReportsKeyFiguresConfigKeyFigureConfigIdGetRequest($key_figure_config_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restReportsKeyFiguresConfigKeyFigureConfigIdGet'
     *
     * @param  int $key_figure_config_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsKeyFiguresConfigKeyFigureConfigIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restReportsKeyFiguresConfigKeyFigureConfigIdGetRequest(
        $key_figure_config_id,
        string $contentType = self::contentTypes['restReportsKeyFiguresConfigKeyFigureConfigIdGet'][0]
    ): Request
    {

        // verify the required parameter 'key_figure_config_id' is set
        if ($key_figure_config_id === null || (is_array($key_figure_config_id) && count($key_figure_config_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $key_figure_config_id when calling restReportsKeyFiguresConfigKeyFigureConfigIdGet'
            );
        }


        $resourcePath = '/rest/reports/key-figures/config/{keyFigureConfigId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($key_figure_config_id !== null) {
            $resourcePath = str_replace(
                '{' . 'keyFigureConfigId' . '}',
                ObjectSerializer::toPathValue($key_figure_config_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restReportsKeyFiguresConfigKeyFigureConfigIdPut
     *
     * Update key figure configuration
     *
     * @param  int $key_figure_config_id key_figure_config_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsKeyFiguresConfigKeyFigureConfigIdPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\KeyFigureConfig
     */
    public function restReportsKeyFiguresConfigKeyFigureConfigIdPut(
        int $key_figure_config_id,
        string $contentType = self::contentTypes['restReportsKeyFiguresConfigKeyFigureConfigIdPut'][0]
    ): \ck\Model\KeyFigureConfig
    {
        list($response) = $this->restReportsKeyFiguresConfigKeyFigureConfigIdPutWithHttpInfo($key_figure_config_id, $contentType);
        return $response;
    }

    /**
     * Operation restReportsKeyFiguresConfigKeyFigureConfigIdPutWithHttpInfo
     *
     * Update key figure configuration
     *
     * @param  int $key_figure_config_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsKeyFiguresConfigKeyFigureConfigIdPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\KeyFigureConfig, HTTP status code, HTTP response headers (array of strings)
     */
    public function restReportsKeyFiguresConfigKeyFigureConfigIdPutWithHttpInfo(
        int $key_figure_config_id,
        string $contentType = self::contentTypes['restReportsKeyFiguresConfigKeyFigureConfigIdPut'][0]
    ): array
    {
        $request = $this->restReportsKeyFiguresConfigKeyFigureConfigIdPutRequest($key_figure_config_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\KeyFigureConfig' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\KeyFigureConfig' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\KeyFigureConfig', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\KeyFigureConfig';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\KeyFigureConfig',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restReportsKeyFiguresConfigKeyFigureConfigIdPutAsync
     *
     * Update key figure configuration
     *
     * @param  int $key_figure_config_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsKeyFiguresConfigKeyFigureConfigIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restReportsKeyFiguresConfigKeyFigureConfigIdPutAsync(
        int $key_figure_config_id,
        string $contentType = self::contentTypes['restReportsKeyFiguresConfigKeyFigureConfigIdPut'][0]
    ): PromiseInterface
    {
        return $this->restReportsKeyFiguresConfigKeyFigureConfigIdPutAsyncWithHttpInfo($key_figure_config_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restReportsKeyFiguresConfigKeyFigureConfigIdPutAsyncWithHttpInfo
     *
     * Update key figure configuration
     *
     * @param  int $key_figure_config_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsKeyFiguresConfigKeyFigureConfigIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restReportsKeyFiguresConfigKeyFigureConfigIdPutAsyncWithHttpInfo(
        $key_figure_config_id,
        string $contentType = self::contentTypes['restReportsKeyFiguresConfigKeyFigureConfigIdPut'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\KeyFigureConfig';
        $request = $this->restReportsKeyFiguresConfigKeyFigureConfigIdPutRequest($key_figure_config_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restReportsKeyFiguresConfigKeyFigureConfigIdPut'
     *
     * @param  int $key_figure_config_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsKeyFiguresConfigKeyFigureConfigIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restReportsKeyFiguresConfigKeyFigureConfigIdPutRequest(
        $key_figure_config_id,
        string $contentType = self::contentTypes['restReportsKeyFiguresConfigKeyFigureConfigIdPut'][0]
    ): Request
    {

        // verify the required parameter 'key_figure_config_id' is set
        if ($key_figure_config_id === null || (is_array($key_figure_config_id) && count($key_figure_config_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $key_figure_config_id when calling restReportsKeyFiguresConfigKeyFigureConfigIdPut'
            );
        }


        $resourcePath = '/rest/reports/key-figures/config/{keyFigureConfigId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($key_figure_config_id !== null) {
            $resourcePath = str_replace(
                '{' . 'keyFigureConfigId' . '}',
                ObjectSerializer::toPathValue($key_figure_config_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restReportsKeyFiguresConfigPost
     *
     * Add a key figure configuration
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsKeyFiguresConfigPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\KeyFigureConfig
     */
    public function restReportsKeyFiguresConfigPost(
        string $contentType = self::contentTypes['restReportsKeyFiguresConfigPost'][0]
    ): \ck\Model\KeyFigureConfig
    {
        list($response) = $this->restReportsKeyFiguresConfigPostWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation restReportsKeyFiguresConfigPostWithHttpInfo
     *
     * Add a key figure configuration
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsKeyFiguresConfigPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\KeyFigureConfig, HTTP status code, HTTP response headers (array of strings)
     */
    public function restReportsKeyFiguresConfigPostWithHttpInfo(
        string $contentType = self::contentTypes['restReportsKeyFiguresConfigPost'][0]
    ): array
    {
        $request = $this->restReportsKeyFiguresConfigPostRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\KeyFigureConfig' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\KeyFigureConfig' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\KeyFigureConfig', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\KeyFigureConfig';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\KeyFigureConfig',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restReportsKeyFiguresConfigPostAsync
     *
     * Add a key figure configuration
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsKeyFiguresConfigPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restReportsKeyFiguresConfigPostAsync(
        string $contentType = self::contentTypes['restReportsKeyFiguresConfigPost'][0]
    ): PromiseInterface
    {
        return $this->restReportsKeyFiguresConfigPostAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restReportsKeyFiguresConfigPostAsyncWithHttpInfo
     *
     * Add a key figure configuration
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsKeyFiguresConfigPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restReportsKeyFiguresConfigPostAsyncWithHttpInfo(
        string $contentType = self::contentTypes['restReportsKeyFiguresConfigPost'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\KeyFigureConfig';
        $request = $this->restReportsKeyFiguresConfigPostRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restReportsKeyFiguresConfigPost'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsKeyFiguresConfigPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restReportsKeyFiguresConfigPostRequest(
        string $contentType = self::contentTypes['restReportsKeyFiguresConfigPost'][0]
    ): Request
    {


        $resourcePath = '/rest/reports/key-figures/config';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restReportsKeyFiguresConfigTemplatePost
     *
     * Generate key figure config from template class
     *
     * @param  string $key_figure_class Template class name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsKeyFiguresConfigTemplatePost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\KeyFigureConfig
     */
    public function restReportsKeyFiguresConfigTemplatePost(
        string $key_figure_class,
        string $contentType = self::contentTypes['restReportsKeyFiguresConfigTemplatePost'][0]
    ): \ck\Model\KeyFigureConfig
    {
        list($response) = $this->restReportsKeyFiguresConfigTemplatePostWithHttpInfo($key_figure_class, $contentType);
        return $response;
    }

    /**
     * Operation restReportsKeyFiguresConfigTemplatePostWithHttpInfo
     *
     * Generate key figure config from template class
     *
     * @param  string $key_figure_class Template class name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsKeyFiguresConfigTemplatePost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\KeyFigureConfig, HTTP status code, HTTP response headers (array of strings)
     */
    public function restReportsKeyFiguresConfigTemplatePostWithHttpInfo(
        string $key_figure_class,
        string $contentType = self::contentTypes['restReportsKeyFiguresConfigTemplatePost'][0]
    ): array
    {
        $request = $this->restReportsKeyFiguresConfigTemplatePostRequest($key_figure_class, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\KeyFigureConfig' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\KeyFigureConfig' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\KeyFigureConfig', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\KeyFigureConfig';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\KeyFigureConfig',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restReportsKeyFiguresConfigTemplatePostAsync
     *
     * Generate key figure config from template class
     *
     * @param  string $key_figure_class Template class name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsKeyFiguresConfigTemplatePost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restReportsKeyFiguresConfigTemplatePostAsync(
        string $key_figure_class,
        string $contentType = self::contentTypes['restReportsKeyFiguresConfigTemplatePost'][0]
    ): PromiseInterface
    {
        return $this->restReportsKeyFiguresConfigTemplatePostAsyncWithHttpInfo($key_figure_class, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restReportsKeyFiguresConfigTemplatePostAsyncWithHttpInfo
     *
     * Generate key figure config from template class
     *
     * @param  string $key_figure_class Template class name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsKeyFiguresConfigTemplatePost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restReportsKeyFiguresConfigTemplatePostAsyncWithHttpInfo(
        $key_figure_class,
        string $contentType = self::contentTypes['restReportsKeyFiguresConfigTemplatePost'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\KeyFigureConfig';
        $request = $this->restReportsKeyFiguresConfigTemplatePostRequest($key_figure_class, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restReportsKeyFiguresConfigTemplatePost'
     *
     * @param  string $key_figure_class Template class name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsKeyFiguresConfigTemplatePost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restReportsKeyFiguresConfigTemplatePostRequest(
        $key_figure_class,
        string $contentType = self::contentTypes['restReportsKeyFiguresConfigTemplatePost'][0]
    ): Request
    {

        // verify the required parameter 'key_figure_class' is set
        if ($key_figure_class === null || (is_array($key_figure_class) && count($key_figure_class) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $key_figure_class when calling restReportsKeyFiguresConfigTemplatePost'
            );
        }


        $resourcePath = '/rest/reports/key-figures/config/template';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $key_figure_class,
            'keyFigureClass', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restReportsKeyFiguresConfigTemplatesGet
     *
     * Get key figure templates
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsKeyFiguresConfigTemplatesGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object[]
     */
    public function restReportsKeyFiguresConfigTemplatesGet(
        string $contentType = self::contentTypes['restReportsKeyFiguresConfigTemplatesGet'][0]
    ): array
    {
        list($response) = $this->restReportsKeyFiguresConfigTemplatesGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation restReportsKeyFiguresConfigTemplatesGetWithHttpInfo
     *
     * Get key figure templates
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsKeyFiguresConfigTemplatesGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restReportsKeyFiguresConfigTemplatesGetWithHttpInfo(
        string $contentType = self::contentTypes['restReportsKeyFiguresConfigTemplatesGet'][0]
    ): array
    {
        $request = $this->restReportsKeyFiguresConfigTemplatesGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restReportsKeyFiguresConfigTemplatesGetAsync
     *
     * Get key figure templates
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsKeyFiguresConfigTemplatesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restReportsKeyFiguresConfigTemplatesGetAsync(
        string $contentType = self::contentTypes['restReportsKeyFiguresConfigTemplatesGet'][0]
    ): PromiseInterface
    {
        return $this->restReportsKeyFiguresConfigTemplatesGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restReportsKeyFiguresConfigTemplatesGetAsyncWithHttpInfo
     *
     * Get key figure templates
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsKeyFiguresConfigTemplatesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restReportsKeyFiguresConfigTemplatesGetAsyncWithHttpInfo(
        string $contentType = self::contentTypes['restReportsKeyFiguresConfigTemplatesGet'][0]
    ): PromiseInterface
    {
        $returnType = 'object[]';
        $request = $this->restReportsKeyFiguresConfigTemplatesGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restReportsKeyFiguresConfigTemplatesGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsKeyFiguresConfigTemplatesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restReportsKeyFiguresConfigTemplatesGetRequest(
        string $contentType = self::contentTypes['restReportsKeyFiguresConfigTemplatesGet'][0]
    ): Request
    {


        $resourcePath = '/rest/reports/key-figures/config/templates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restReportsKeyFiguresConfigsDelete
     *
     * Delete multiple key figure configurations
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsKeyFiguresConfigsDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object
     */
    public function restReportsKeyFiguresConfigsDelete(
        string $contentType = self::contentTypes['restReportsKeyFiguresConfigsDelete'][0]
    ): object
    {
        list($response) = $this->restReportsKeyFiguresConfigsDeleteWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation restReportsKeyFiguresConfigsDeleteWithHttpInfo
     *
     * Delete multiple key figure configurations
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsKeyFiguresConfigsDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restReportsKeyFiguresConfigsDeleteWithHttpInfo(
        string $contentType = self::contentTypes['restReportsKeyFiguresConfigsDelete'][0]
    ): array
    {
        $request = $this->restReportsKeyFiguresConfigsDeleteRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restReportsKeyFiguresConfigsDeleteAsync
     *
     * Delete multiple key figure configurations
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsKeyFiguresConfigsDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restReportsKeyFiguresConfigsDeleteAsync(
        string $contentType = self::contentTypes['restReportsKeyFiguresConfigsDelete'][0]
    ): PromiseInterface
    {
        return $this->restReportsKeyFiguresConfigsDeleteAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restReportsKeyFiguresConfigsDeleteAsyncWithHttpInfo
     *
     * Delete multiple key figure configurations
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsKeyFiguresConfigsDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restReportsKeyFiguresConfigsDeleteAsyncWithHttpInfo(
        string $contentType = self::contentTypes['restReportsKeyFiguresConfigsDelete'][0]
    ): PromiseInterface
    {
        $returnType = 'object';
        $request = $this->restReportsKeyFiguresConfigsDeleteRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restReportsKeyFiguresConfigsDelete'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsKeyFiguresConfigsDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restReportsKeyFiguresConfigsDeleteRequest(
        string $contentType = self::contentTypes['restReportsKeyFiguresConfigsDelete'][0]
    ): Request
    {


        $resourcePath = '/rest/reports/key-figures/configs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restReportsKeyFiguresDetailsKeyFigureNameGet
     *
     * Return key figure calculation details
     *
     * @param  int $key_figure_name key_figure_name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsKeyFiguresDetailsKeyFigureNameGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\KeyFigure
     */
    public function restReportsKeyFiguresDetailsKeyFigureNameGet(
        int $key_figure_name,
        string $contentType = self::contentTypes['restReportsKeyFiguresDetailsKeyFigureNameGet'][0]
    ): \ck\Model\KeyFigure
    {
        list($response) = $this->restReportsKeyFiguresDetailsKeyFigureNameGetWithHttpInfo($key_figure_name, $contentType);
        return $response;
    }

    /**
     * Operation restReportsKeyFiguresDetailsKeyFigureNameGetWithHttpInfo
     *
     * Return key figure calculation details
     *
     * @param  int $key_figure_name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsKeyFiguresDetailsKeyFigureNameGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\KeyFigure, HTTP status code, HTTP response headers (array of strings)
     */
    public function restReportsKeyFiguresDetailsKeyFigureNameGetWithHttpInfo(
        int $key_figure_name,
        string $contentType = self::contentTypes['restReportsKeyFiguresDetailsKeyFigureNameGet'][0]
    ): array
    {
        $request = $this->restReportsKeyFiguresDetailsKeyFigureNameGetRequest($key_figure_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\KeyFigure' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\KeyFigure' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\KeyFigure', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\KeyFigure';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\KeyFigure',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restReportsKeyFiguresDetailsKeyFigureNameGetAsync
     *
     * Return key figure calculation details
     *
     * @param  int $key_figure_name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsKeyFiguresDetailsKeyFigureNameGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restReportsKeyFiguresDetailsKeyFigureNameGetAsync(
        int $key_figure_name,
        string $contentType = self::contentTypes['restReportsKeyFiguresDetailsKeyFigureNameGet'][0]
    ): PromiseInterface
    {
        return $this->restReportsKeyFiguresDetailsKeyFigureNameGetAsyncWithHttpInfo($key_figure_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restReportsKeyFiguresDetailsKeyFigureNameGetAsyncWithHttpInfo
     *
     * Return key figure calculation details
     *
     * @param  int $key_figure_name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsKeyFiguresDetailsKeyFigureNameGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restReportsKeyFiguresDetailsKeyFigureNameGetAsyncWithHttpInfo(
        $key_figure_name,
        string $contentType = self::contentTypes['restReportsKeyFiguresDetailsKeyFigureNameGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\KeyFigure';
        $request = $this->restReportsKeyFiguresDetailsKeyFigureNameGetRequest($key_figure_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restReportsKeyFiguresDetailsKeyFigureNameGet'
     *
     * @param  int $key_figure_name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsKeyFiguresDetailsKeyFigureNameGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restReportsKeyFiguresDetailsKeyFigureNameGetRequest(
        $key_figure_name,
        string $contentType = self::contentTypes['restReportsKeyFiguresDetailsKeyFigureNameGet'][0]
    ): Request
    {

        // verify the required parameter 'key_figure_name' is set
        if ($key_figure_name === null || (is_array($key_figure_name) && count($key_figure_name) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $key_figure_name when calling restReportsKeyFiguresDetailsKeyFigureNameGet'
            );
        }


        $resourcePath = '/rest/reports/key-figures/details/{keyFigureName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($key_figure_name !== null) {
            $resourcePath = str_replace(
                '{' . 'keyFigureName' . '}',
                ObjectSerializer::toPathValue($key_figure_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restReportsKeyFiguresGet
     *
     * Return list of key figure classes
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsKeyFiguresGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object[]
     */
    public function restReportsKeyFiguresGet(
        string $contentType = self::contentTypes['restReportsKeyFiguresGet'][0]
    ): array
    {
        list($response) = $this->restReportsKeyFiguresGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation restReportsKeyFiguresGetWithHttpInfo
     *
     * Return list of key figure classes
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsKeyFiguresGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restReportsKeyFiguresGetWithHttpInfo(
        string $contentType = self::contentTypes['restReportsKeyFiguresGet'][0]
    ): array
    {
        $request = $this->restReportsKeyFiguresGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restReportsKeyFiguresGetAsync
     *
     * Return list of key figure classes
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsKeyFiguresGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restReportsKeyFiguresGetAsync(
        string $contentType = self::contentTypes['restReportsKeyFiguresGet'][0]
    ): PromiseInterface
    {
        return $this->restReportsKeyFiguresGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restReportsKeyFiguresGetAsyncWithHttpInfo
     *
     * Return list of key figure classes
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsKeyFiguresGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restReportsKeyFiguresGetAsyncWithHttpInfo(
        string $contentType = self::contentTypes['restReportsKeyFiguresGet'][0]
    ): PromiseInterface
    {
        $returnType = 'object[]';
        $request = $this->restReportsKeyFiguresGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restReportsKeyFiguresGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsKeyFiguresGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restReportsKeyFiguresGetRequest(
        string $contentType = self::contentTypes['restReportsKeyFiguresGet'][0]
    ): Request
    {


        $resourcePath = '/rest/reports/key-figures';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restReportsKeyFiguresResultsPost
     *
     * Search for key figure calculation results
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsKeyFiguresResultsPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object
     */
    public function restReportsKeyFiguresResultsPost(
        string $contentType = self::contentTypes['restReportsKeyFiguresResultsPost'][0]
    ): object
    {
        list($response) = $this->restReportsKeyFiguresResultsPostWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation restReportsKeyFiguresResultsPostWithHttpInfo
     *
     * Search for key figure calculation results
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsKeyFiguresResultsPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restReportsKeyFiguresResultsPostWithHttpInfo(
        string $contentType = self::contentTypes['restReportsKeyFiguresResultsPost'][0]
    ): array
    {
        $request = $this->restReportsKeyFiguresResultsPostRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restReportsKeyFiguresResultsPostAsync
     *
     * Search for key figure calculation results
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsKeyFiguresResultsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restReportsKeyFiguresResultsPostAsync(
        string $contentType = self::contentTypes['restReportsKeyFiguresResultsPost'][0]
    ): PromiseInterface
    {
        return $this->restReportsKeyFiguresResultsPostAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restReportsKeyFiguresResultsPostAsyncWithHttpInfo
     *
     * Search for key figure calculation results
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsKeyFiguresResultsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restReportsKeyFiguresResultsPostAsyncWithHttpInfo(
        string $contentType = self::contentTypes['restReportsKeyFiguresResultsPost'][0]
    ): PromiseInterface
    {
        $returnType = 'object';
        $request = $this->restReportsKeyFiguresResultsPostRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restReportsKeyFiguresResultsPost'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsKeyFiguresResultsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restReportsKeyFiguresResultsPostRequest(
        string $contentType = self::contentTypes['restReportsKeyFiguresResultsPost'][0]
    ): Request
    {


        $resourcePath = '/rest/reports/key-figures/results';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restReportsOrderTypesGet
     *
     * Get order types in string format
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsOrderTypesGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object[]
     */
    public function restReportsOrderTypesGet(
        string $contentType = self::contentTypes['restReportsOrderTypesGet'][0]
    ): array
    {
        list($response) = $this->restReportsOrderTypesGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation restReportsOrderTypesGetWithHttpInfo
     *
     * Get order types in string format
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsOrderTypesGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restReportsOrderTypesGetWithHttpInfo(
        string $contentType = self::contentTypes['restReportsOrderTypesGet'][0]
    ): array
    {
        $request = $this->restReportsOrderTypesGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restReportsOrderTypesGetAsync
     *
     * Get order types in string format
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsOrderTypesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restReportsOrderTypesGetAsync(
        string $contentType = self::contentTypes['restReportsOrderTypesGet'][0]
    ): PromiseInterface
    {
        return $this->restReportsOrderTypesGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restReportsOrderTypesGetAsyncWithHttpInfo
     *
     * Get order types in string format
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsOrderTypesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restReportsOrderTypesGetAsyncWithHttpInfo(
        string $contentType = self::contentTypes['restReportsOrderTypesGet'][0]
    ): PromiseInterface
    {
        $returnType = 'object[]';
        $request = $this->restReportsOrderTypesGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restReportsOrderTypesGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsOrderTypesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restReportsOrderTypesGetRequest(
        string $contentType = self::contentTypes['restReportsOrderTypesGet'][0]
    ): Request
    {


        $resourcePath = '/rest/reports/order-types';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restReportsRawDataConfigGet
     *
     * Returns list of all saved configurations
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsRawDataConfigGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\RawDataConfigs
     */
    public function restReportsRawDataConfigGet(
        string $contentType = self::contentTypes['restReportsRawDataConfigGet'][0]
    ): \ck\Model\RawDataConfigs
    {
        list($response) = $this->restReportsRawDataConfigGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation restReportsRawDataConfigGetWithHttpInfo
     *
     * Returns list of all saved configurations
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsRawDataConfigGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\RawDataConfigs, HTTP status code, HTTP response headers (array of strings)
     */
    public function restReportsRawDataConfigGetWithHttpInfo(
        string $contentType = self::contentTypes['restReportsRawDataConfigGet'][0]
    ): array
    {
        $request = $this->restReportsRawDataConfigGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\RawDataConfigs' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\RawDataConfigs' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\RawDataConfigs', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\RawDataConfigs';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\RawDataConfigs',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restReportsRawDataConfigGetAsync
     *
     * Returns list of all saved configurations
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsRawDataConfigGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restReportsRawDataConfigGetAsync(
        string $contentType = self::contentTypes['restReportsRawDataConfigGet'][0]
    ): PromiseInterface
    {
        return $this->restReportsRawDataConfigGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restReportsRawDataConfigGetAsyncWithHttpInfo
     *
     * Returns list of all saved configurations
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsRawDataConfigGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restReportsRawDataConfigGetAsyncWithHttpInfo(
        string $contentType = self::contentTypes['restReportsRawDataConfigGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\RawDataConfigs';
        $request = $this->restReportsRawDataConfigGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restReportsRawDataConfigGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsRawDataConfigGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restReportsRawDataConfigGetRequest(
        string $contentType = self::contentTypes['restReportsRawDataConfigGet'][0]
    ): Request
    {


        $resourcePath = '/rest/reports/raw-data/config';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restReportsRawDataConfigPut
     *
     * Resets all saved raw data configurations with given data
     *
     * @param  int $configs Resets all saved raw data configurations with given configs (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsRawDataConfigPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\RawDataConfigs
     */
    public function restReportsRawDataConfigPut(
        int $configs,
        string $contentType = self::contentTypes['restReportsRawDataConfigPut'][0]
    ): \ck\Model\RawDataConfigs
    {
        list($response) = $this->restReportsRawDataConfigPutWithHttpInfo($configs, $contentType);
        return $response;
    }

    /**
     * Operation restReportsRawDataConfigPutWithHttpInfo
     *
     * Resets all saved raw data configurations with given data
     *
     * @param  int $configs Resets all saved raw data configurations with given configs (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsRawDataConfigPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\RawDataConfigs, HTTP status code, HTTP response headers (array of strings)
     */
    public function restReportsRawDataConfigPutWithHttpInfo(
        int $configs,
        string $contentType = self::contentTypes['restReportsRawDataConfigPut'][0]
    ): array
    {
        $request = $this->restReportsRawDataConfigPutRequest($configs, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\RawDataConfigs' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\RawDataConfigs' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\RawDataConfigs', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\RawDataConfigs';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\RawDataConfigs',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restReportsRawDataConfigPutAsync
     *
     * Resets all saved raw data configurations with given data
     *
     * @param  int $configs Resets all saved raw data configurations with given configs (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsRawDataConfigPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restReportsRawDataConfigPutAsync(
        int $configs,
        string $contentType = self::contentTypes['restReportsRawDataConfigPut'][0]
    ): PromiseInterface
    {
        return $this->restReportsRawDataConfigPutAsyncWithHttpInfo($configs, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restReportsRawDataConfigPutAsyncWithHttpInfo
     *
     * Resets all saved raw data configurations with given data
     *
     * @param  int $configs Resets all saved raw data configurations with given configs (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsRawDataConfigPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restReportsRawDataConfigPutAsyncWithHttpInfo(
        $configs,
        string $contentType = self::contentTypes['restReportsRawDataConfigPut'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\RawDataConfigs';
        $request = $this->restReportsRawDataConfigPutRequest($configs, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restReportsRawDataConfigPut'
     *
     * @param  int $configs Resets all saved raw data configurations with given configs (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsRawDataConfigPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restReportsRawDataConfigPutRequest(
        $configs,
        string $contentType = self::contentTypes['restReportsRawDataConfigPut'][0]
    ): Request
    {

        // verify the required parameter 'configs' is set
        if ($configs === null || (is_array($configs) && count($configs) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $configs when calling restReportsRawDataConfigPut'
            );
        }


        $resourcePath = '/rest/reports/raw-data/config';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $configs,
            'configs', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restReportsRawDataCreatorsConfigsGet
     *
     * Return a list of raw data creators with their configurations
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsRawDataCreatorsConfigsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object
     */
    public function restReportsRawDataCreatorsConfigsGet(
        string $contentType = self::contentTypes['restReportsRawDataCreatorsConfigsGet'][0]
    ): object
    {
        list($response) = $this->restReportsRawDataCreatorsConfigsGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation restReportsRawDataCreatorsConfigsGetWithHttpInfo
     *
     * Return a list of raw data creators with their configurations
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsRawDataCreatorsConfigsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restReportsRawDataCreatorsConfigsGetWithHttpInfo(
        string $contentType = self::contentTypes['restReportsRawDataCreatorsConfigsGet'][0]
    ): array
    {
        $request = $this->restReportsRawDataCreatorsConfigsGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restReportsRawDataCreatorsConfigsGetAsync
     *
     * Return a list of raw data creators with their configurations
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsRawDataCreatorsConfigsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restReportsRawDataCreatorsConfigsGetAsync(
        string $contentType = self::contentTypes['restReportsRawDataCreatorsConfigsGet'][0]
    ): PromiseInterface
    {
        return $this->restReportsRawDataCreatorsConfigsGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restReportsRawDataCreatorsConfigsGetAsyncWithHttpInfo
     *
     * Return a list of raw data creators with their configurations
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsRawDataCreatorsConfigsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restReportsRawDataCreatorsConfigsGetAsyncWithHttpInfo(
        string $contentType = self::contentTypes['restReportsRawDataCreatorsConfigsGet'][0]
    ): PromiseInterface
    {
        $returnType = 'object';
        $request = $this->restReportsRawDataCreatorsConfigsGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restReportsRawDataCreatorsConfigsGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsRawDataCreatorsConfigsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restReportsRawDataCreatorsConfigsGetRequest(
        string $contentType = self::contentTypes['restReportsRawDataCreatorsConfigsGet'][0]
    ): Request
    {


        $resourcePath = '/rest/reports/raw-data/creators-configs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restReportsRawDataCreatorsGet
     *
     * Get list of all raw data creators
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsRawDataCreatorsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object[]
     */
    public function restReportsRawDataCreatorsGet(
        string $contentType = self::contentTypes['restReportsRawDataCreatorsGet'][0]
    ): array
    {
        list($response) = $this->restReportsRawDataCreatorsGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation restReportsRawDataCreatorsGetWithHttpInfo
     *
     * Get list of all raw data creators
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsRawDataCreatorsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restReportsRawDataCreatorsGetWithHttpInfo(
        string $contentType = self::contentTypes['restReportsRawDataCreatorsGet'][0]
    ): array
    {
        $request = $this->restReportsRawDataCreatorsGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restReportsRawDataCreatorsGetAsync
     *
     * Get list of all raw data creators
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsRawDataCreatorsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restReportsRawDataCreatorsGetAsync(
        string $contentType = self::contentTypes['restReportsRawDataCreatorsGet'][0]
    ): PromiseInterface
    {
        return $this->restReportsRawDataCreatorsGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restReportsRawDataCreatorsGetAsyncWithHttpInfo
     *
     * Get list of all raw data creators
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsRawDataCreatorsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restReportsRawDataCreatorsGetAsyncWithHttpInfo(
        string $contentType = self::contentTypes['restReportsRawDataCreatorsGet'][0]
    ): PromiseInterface
    {
        $returnType = 'object[]';
        $request = $this->restReportsRawDataCreatorsGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restReportsRawDataCreatorsGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsRawDataCreatorsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restReportsRawDataCreatorsGetRequest(
        string $contentType = self::contentTypes['restReportsRawDataCreatorsGet'][0]
    ): Request
    {


        $resourcePath = '/rest/reports/raw-data/creators';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restReportsRawDataFileGet
     *
     * Get a raw data file from the storage, the storage path of the file must be specified.
     *
     * @param  string $path The raw data file path (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsRawDataFileGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object
     */
    public function restReportsRawDataFileGet(
        string $path,
        string $contentType = self::contentTypes['restReportsRawDataFileGet'][0]
    ): object
    {
        list($response) = $this->restReportsRawDataFileGetWithHttpInfo($path, $contentType);
        return $response;
    }

    /**
     * Operation restReportsRawDataFileGetWithHttpInfo
     *
     * Get a raw data file from the storage, the storage path of the file must be specified.
     *
     * @param  string $path The raw data file path (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsRawDataFileGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restReportsRawDataFileGetWithHttpInfo(
        string $path,
        string $contentType = self::contentTypes['restReportsRawDataFileGet'][0]
    ): array
    {
        $request = $this->restReportsRawDataFileGetRequest($path, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restReportsRawDataFileGetAsync
     *
     * Get a raw data file from the storage, the storage path of the file must be specified.
     *
     * @param  string $path The raw data file path (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsRawDataFileGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restReportsRawDataFileGetAsync(
        string $path,
        string $contentType = self::contentTypes['restReportsRawDataFileGet'][0]
    ): PromiseInterface
    {
        return $this->restReportsRawDataFileGetAsyncWithHttpInfo($path, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restReportsRawDataFileGetAsyncWithHttpInfo
     *
     * Get a raw data file from the storage, the storage path of the file must be specified.
     *
     * @param  string $path The raw data file path (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsRawDataFileGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restReportsRawDataFileGetAsyncWithHttpInfo(
        $path,
        string $contentType = self::contentTypes['restReportsRawDataFileGet'][0]
    ): PromiseInterface
    {
        $returnType = 'object';
        $request = $this->restReportsRawDataFileGetRequest($path, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restReportsRawDataFileGet'
     *
     * @param  string $path The raw data file path (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsRawDataFileGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restReportsRawDataFileGetRequest(
        $path,
        string $contentType = self::contentTypes['restReportsRawDataFileGet'][0]
    ): Request
    {

        // verify the required parameter 'path' is set
        if ($path === null || (is_array($path) && count($path) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $path when calling restReportsRawDataFileGet'
            );
        }


        $resourcePath = '/rest/reports/raw-data/file';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $path,
            'path', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restReportsRawDataGet
     *
     * Get list of raw data files. Valid filter combinations: (dataName), (dataName &amp; processStatus), (createdAtTimestamp)
     *
     * @param  string|null $data_name Filter that restricts the search result to raw data files e.g. orders,orderItems. (optional)
     * @param  string|null $process_status Current process status, the status is only changed by internal processing. If this filter is used, the filter dataNames may only contain one value. (optional)
     * @param  int|null $created_at_timestamp Timestamp from when daily generated raw data are to be filtered. This filter cannot be combined with the following filters: dataNames, processStatus (optional)
     * @param  int|null $items_per_page The number of raw data files to be returned. The default number of files is 20 and the maximum is 100. (optional)
     * @param  string|null $sort_order Defines the sort order, possible values are: asc, desc (optional)
     * @param  int|null $page Page (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsRawDataGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\RawDataSearchResult
     */
    public function restReportsRawDataGet(
        ?string $data_name = null,
        ?string $process_status = null,
        ?int $created_at_timestamp = null,
        ?int $items_per_page = null,
        ?string $sort_order = null,
        ?int $page = null,
        string $contentType = self::contentTypes['restReportsRawDataGet'][0]
    ): \ck\Model\RawDataSearchResult
    {
        list($response) = $this->restReportsRawDataGetWithHttpInfo($data_name, $process_status, $created_at_timestamp, $items_per_page, $sort_order, $page, $contentType);
        return $response;
    }

    /**
     * Operation restReportsRawDataGetWithHttpInfo
     *
     * Get list of raw data files. Valid filter combinations: (dataName), (dataName &amp; processStatus), (createdAtTimestamp)
     *
     * @param  string|null $data_name Filter that restricts the search result to raw data files e.g. orders,orderItems. (optional)
     * @param  string|null $process_status Current process status, the status is only changed by internal processing. If this filter is used, the filter dataNames may only contain one value. (optional)
     * @param  int|null $created_at_timestamp Timestamp from when daily generated raw data are to be filtered. This filter cannot be combined with the following filters: dataNames, processStatus (optional)
     * @param  int|null $items_per_page The number of raw data files to be returned. The default number of files is 20 and the maximum is 100. (optional)
     * @param  string|null $sort_order Defines the sort order, possible values are: asc, desc (optional)
     * @param  int|null $page Page (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsRawDataGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\RawDataSearchResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function restReportsRawDataGetWithHttpInfo(
        ?string $data_name = null,
        ?string $process_status = null,
        ?int $created_at_timestamp = null,
        ?int $items_per_page = null,
        ?string $sort_order = null,
        ?int $page = null,
        string $contentType = self::contentTypes['restReportsRawDataGet'][0]
    ): array
    {
        $request = $this->restReportsRawDataGetRequest($data_name, $process_status, $created_at_timestamp, $items_per_page, $sort_order, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\RawDataSearchResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\RawDataSearchResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\RawDataSearchResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\RawDataSearchResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\RawDataSearchResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restReportsRawDataGetAsync
     *
     * Get list of raw data files. Valid filter combinations: (dataName), (dataName &amp; processStatus), (createdAtTimestamp)
     *
     * @param  string|null $data_name Filter that restricts the search result to raw data files e.g. orders,orderItems. (optional)
     * @param  string|null $process_status Current process status, the status is only changed by internal processing. If this filter is used, the filter dataNames may only contain one value. (optional)
     * @param  int|null $created_at_timestamp Timestamp from when daily generated raw data are to be filtered. This filter cannot be combined with the following filters: dataNames, processStatus (optional)
     * @param  int|null $items_per_page The number of raw data files to be returned. The default number of files is 20 and the maximum is 100. (optional)
     * @param  string|null $sort_order Defines the sort order, possible values are: asc, desc (optional)
     * @param  int|null $page Page (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsRawDataGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restReportsRawDataGetAsync(
        ?string $data_name = null,
        ?string $process_status = null,
        ?int $created_at_timestamp = null,
        ?int $items_per_page = null,
        ?string $sort_order = null,
        ?int $page = null,
        string $contentType = self::contentTypes['restReportsRawDataGet'][0]
    ): PromiseInterface
    {
        return $this->restReportsRawDataGetAsyncWithHttpInfo($data_name, $process_status, $created_at_timestamp, $items_per_page, $sort_order, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restReportsRawDataGetAsyncWithHttpInfo
     *
     * Get list of raw data files. Valid filter combinations: (dataName), (dataName &amp; processStatus), (createdAtTimestamp)
     *
     * @param  string|null $data_name Filter that restricts the search result to raw data files e.g. orders,orderItems. (optional)
     * @param  string|null $process_status Current process status, the status is only changed by internal processing. If this filter is used, the filter dataNames may only contain one value. (optional)
     * @param  int|null $created_at_timestamp Timestamp from when daily generated raw data are to be filtered. This filter cannot be combined with the following filters: dataNames, processStatus (optional)
     * @param  int|null $items_per_page The number of raw data files to be returned. The default number of files is 20 and the maximum is 100. (optional)
     * @param  string|null $sort_order Defines the sort order, possible values are: asc, desc (optional)
     * @param  int|null $page Page (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsRawDataGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restReportsRawDataGetAsyncWithHttpInfo(
        $data_name = null,
        $process_status = null,
        $created_at_timestamp = null,
        $items_per_page = null,
        $sort_order = null,
        $page = null,
        string $contentType = self::contentTypes['restReportsRawDataGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\RawDataSearchResult';
        $request = $this->restReportsRawDataGetRequest($data_name, $process_status, $created_at_timestamp, $items_per_page, $sort_order, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restReportsRawDataGet'
     *
     * @param  string|null $data_name Filter that restricts the search result to raw data files e.g. orders,orderItems. (optional)
     * @param  string|null $process_status Current process status, the status is only changed by internal processing. If this filter is used, the filter dataNames may only contain one value. (optional)
     * @param  int|null $created_at_timestamp Timestamp from when daily generated raw data are to be filtered. This filter cannot be combined with the following filters: dataNames, processStatus (optional)
     * @param  int|null $items_per_page The number of raw data files to be returned. The default number of files is 20 and the maximum is 100. (optional)
     * @param  string|null $sort_order Defines the sort order, possible values are: asc, desc (optional)
     * @param  int|null $page Page (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restReportsRawDataGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restReportsRawDataGetRequest(
        $data_name = null,
        $process_status = null,
        $created_at_timestamp = null,
        $items_per_page = null,
        $sort_order = null,
        $page = null,
        string $contentType = self::contentTypes['restReportsRawDataGet'][0]
    ): Request
    {








        $resourcePath = '/rest/reports/raw-data';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $data_name,
            'dataName', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $process_status,
            'processStatus', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_at_timestamp,
            'createdAtTimestamp', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $items_per_page,
            'itemsPerPage', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_order,
            'sortOrder', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
