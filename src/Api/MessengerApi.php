<?php
/**
 * MessengerApi
 * PHP version 8.1
 *
 * @package  ck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ck\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use ck\ApiException;
use ck\Configuration;
use ck\HeaderSelector;
use ck\ObjectSerializer;

/**
 * MessengerApi Class Doc Comment
 *
 * @package  ck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MessengerApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'restMessagesGet' => [
            'application/json',
        ],
        'restMessagesGetGet' => [
            'application/json',
        ],
        'restMessagesPost' => [
            'application/json',
        ],
        'restMessagesUuid5AttachmentsGet' => [
            'application/json',
        ],
        'restMessagesUuid5ControlsPut' => [
            'application/json',
        ],
        'restMessagesUuid5Delete' => [
            'application/json',
        ],
        'restMessagesUuid5DonePut' => [
            'application/json',
        ],
        'restMessagesUuid5Get' => [
            'application/json',
        ],
        'restMessagesUuid5ReadByPut' => [
            'application/json',
        ],
        'restMessagesUuid5TagsPut' => [
            'application/json',
        ],
        'restMessagesUuid5VisibilityPut' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation restMessagesGet
     *
     * List message stream of a certain message (excluding message with UUID5)
     *
     * @param  string|null $uuid The reference UUID5 of the message to start from (excluding). (optional)
     * @param  bool|null $successors If set to FALSE, the messages older than the referenced message will be returned. (optional)
     * @param  int|null $amount The number of messages to be listed (defaults to 50) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restMessagesGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\Message[]
     */
    public function restMessagesGet(
        ?string $uuid = null,
        ?bool $successors = null,
        ?int $amount = null,
        string $contentType = self::contentTypes['restMessagesGet'][0]
    ): array
    {
        list($response) = $this->restMessagesGetWithHttpInfo($uuid, $successors, $amount, $contentType);
        return $response;
    }

    /**
     * Operation restMessagesGetWithHttpInfo
     *
     * List message stream of a certain message (excluding message with UUID5)
     *
     * @param  string|null $uuid The reference UUID5 of the message to start from (excluding). (optional)
     * @param  bool|null $successors If set to FALSE, the messages older than the referenced message will be returned. (optional)
     * @param  int|null $amount The number of messages to be listed (defaults to 50) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restMessagesGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\Message[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restMessagesGetWithHttpInfo(
        ?string $uuid = null,
        ?bool $successors = null,
        ?int $amount = null,
        string $contentType = self::contentTypes['restMessagesGet'][0]
    ): array
    {
        $request = $this->restMessagesGetRequest($uuid, $successors, $amount, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\Message[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\Message[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\Message[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\Message[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\Message[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restMessagesGetAsync
     *
     * List message stream of a certain message (excluding message with UUID5)
     *
     * @param  string|null $uuid The reference UUID5 of the message to start from (excluding). (optional)
     * @param  bool|null $successors If set to FALSE, the messages older than the referenced message will be returned. (optional)
     * @param  int|null $amount The number of messages to be listed (defaults to 50) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restMessagesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restMessagesGetAsync(
        ?string $uuid = null,
        ?bool $successors = null,
        ?int $amount = null,
        string $contentType = self::contentTypes['restMessagesGet'][0]
    ): PromiseInterface
    {
        return $this->restMessagesGetAsyncWithHttpInfo($uuid, $successors, $amount, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restMessagesGetAsyncWithHttpInfo
     *
     * List message stream of a certain message (excluding message with UUID5)
     *
     * @param  string|null $uuid The reference UUID5 of the message to start from (excluding). (optional)
     * @param  bool|null $successors If set to FALSE, the messages older than the referenced message will be returned. (optional)
     * @param  int|null $amount The number of messages to be listed (defaults to 50) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restMessagesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restMessagesGetAsyncWithHttpInfo(
        $uuid = null,
        $successors = null,
        $amount = null,
        string $contentType = self::contentTypes['restMessagesGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\Message[]';
        $request = $this->restMessagesGetRequest($uuid, $successors, $amount, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restMessagesGet'
     *
     * @param  string|null $uuid The reference UUID5 of the message to start from (excluding). (optional)
     * @param  bool|null $successors If set to FALSE, the messages older than the referenced message will be returned. (optional)
     * @param  int|null $amount The number of messages to be listed (defaults to 50) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restMessagesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restMessagesGetRequest(
        $uuid = null,
        $successors = null,
        $amount = null,
        string $contentType = self::contentTypes['restMessagesGet'][0]
    ): Request
    {





        $resourcePath = '/rest/messages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $uuid,
            'uuid', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $successors,
            'successors', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $amount,
            'amount', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restMessagesGetGet
     *
     * List messages per page
     *
     * @param  int|null $page The number of the returned page of messages. The default value is 1 (the first). (optional)
     * @param  int|null $items_per_page The number of messages to be listed (defaults to 50). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restMessagesGetGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\Message[]
     */
    public function restMessagesGetGet(
        ?int $page = null,
        ?int $items_per_page = null,
        string $contentType = self::contentTypes['restMessagesGetGet'][0]
    ): array
    {
        list($response) = $this->restMessagesGetGetWithHttpInfo($page, $items_per_page, $contentType);
        return $response;
    }

    /**
     * Operation restMessagesGetGetWithHttpInfo
     *
     * List messages per page
     *
     * @param  int|null $page The number of the returned page of messages. The default value is 1 (the first). (optional)
     * @param  int|null $items_per_page The number of messages to be listed (defaults to 50). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restMessagesGetGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\Message[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restMessagesGetGetWithHttpInfo(
        ?int $page = null,
        ?int $items_per_page = null,
        string $contentType = self::contentTypes['restMessagesGetGet'][0]
    ): array
    {
        $request = $this->restMessagesGetGetRequest($page, $items_per_page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\Message[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\Message[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\Message[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\Message[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\Message[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restMessagesGetGetAsync
     *
     * List messages per page
     *
     * @param  int|null $page The number of the returned page of messages. The default value is 1 (the first). (optional)
     * @param  int|null $items_per_page The number of messages to be listed (defaults to 50). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restMessagesGetGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restMessagesGetGetAsync(
        ?int $page = null,
        ?int $items_per_page = null,
        string $contentType = self::contentTypes['restMessagesGetGet'][0]
    ): PromiseInterface
    {
        return $this->restMessagesGetGetAsyncWithHttpInfo($page, $items_per_page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restMessagesGetGetAsyncWithHttpInfo
     *
     * List messages per page
     *
     * @param  int|null $page The number of the returned page of messages. The default value is 1 (the first). (optional)
     * @param  int|null $items_per_page The number of messages to be listed (defaults to 50). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restMessagesGetGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restMessagesGetGetAsyncWithHttpInfo(
        $page = null,
        $items_per_page = null,
        string $contentType = self::contentTypes['restMessagesGetGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\Message[]';
        $request = $this->restMessagesGetGetRequest($page, $items_per_page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restMessagesGetGet'
     *
     * @param  int|null $page The number of the returned page of messages. The default value is 1 (the first). (optional)
     * @param  int|null $items_per_page The number of messages to be listed (defaults to 50). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restMessagesGetGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restMessagesGetGetRequest(
        $page = null,
        $items_per_page = null,
        string $contentType = self::contentTypes['restMessagesGetGet'][0]
    ): Request
    {




        $resourcePath = '/rest/messages/get';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $items_per_page,
            'itemsPerPage', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restMessagesPost
     *
     * Create message
     *
     * @param  \ck\Model\RestMessagesPostRequest|null $_rest_messages _rest_messages (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restMessagesPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\Message
     */
    public function restMessagesPost(
        ?\ck\Model\RestMessagesPostRequest $_rest_messages = null,
        string $contentType = self::contentTypes['restMessagesPost'][0]
    ): \ck\Model\Message
    {
        list($response) = $this->restMessagesPostWithHttpInfo($_rest_messages, $contentType);
        return $response;
    }

    /**
     * Operation restMessagesPostWithHttpInfo
     *
     * Create message
     *
     * @param  \ck\Model\RestMessagesPostRequest|null $_rest_messages (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restMessagesPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\Message, HTTP status code, HTTP response headers (array of strings)
     */
    public function restMessagesPostWithHttpInfo(
        ?\ck\Model\RestMessagesPostRequest $_rest_messages = null,
        string $contentType = self::contentTypes['restMessagesPost'][0]
    ): array
    {
        $request = $this->restMessagesPostRequest($_rest_messages, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\Message' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\Message' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\Message', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\Message';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\Message',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restMessagesPostAsync
     *
     * Create message
     *
     * @param  \ck\Model\RestMessagesPostRequest|null $_rest_messages (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restMessagesPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restMessagesPostAsync(
        ?\ck\Model\RestMessagesPostRequest $_rest_messages = null,
        string $contentType = self::contentTypes['restMessagesPost'][0]
    ): PromiseInterface
    {
        return $this->restMessagesPostAsyncWithHttpInfo($_rest_messages, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restMessagesPostAsyncWithHttpInfo
     *
     * Create message
     *
     * @param  \ck\Model\RestMessagesPostRequest|null $_rest_messages (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restMessagesPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restMessagesPostAsyncWithHttpInfo(
        $_rest_messages = null,
        string $contentType = self::contentTypes['restMessagesPost'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\Message';
        $request = $this->restMessagesPostRequest($_rest_messages, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restMessagesPost'
     *
     * @param  \ck\Model\RestMessagesPostRequest|null $_rest_messages (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restMessagesPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restMessagesPostRequest(
        $_rest_messages = null,
        string $contentType = self::contentTypes['restMessagesPost'][0]
    ): Request
    {



        $resourcePath = '/rest/messages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($_rest_messages)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_rest_messages));
            } else {
                $httpBody = $_rest_messages;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restMessagesUuid5AttachmentsGet
     *
     * Get attachment by UUID and file name
     *
     * @param  string $uuid5 The UUID of the message (required)
     * @param  string $filename The file name of the attachment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restMessagesUuid5AttachmentsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object
     */
    public function restMessagesUuid5AttachmentsGet(
        string $uuid5,
        string $filename,
        string $contentType = self::contentTypes['restMessagesUuid5AttachmentsGet'][0]
    ): object
    {
        list($response) = $this->restMessagesUuid5AttachmentsGetWithHttpInfo($uuid5, $filename, $contentType);
        return $response;
    }

    /**
     * Operation restMessagesUuid5AttachmentsGetWithHttpInfo
     *
     * Get attachment by UUID and file name
     *
     * @param  string $uuid5 The UUID of the message (required)
     * @param  string $filename The file name of the attachment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restMessagesUuid5AttachmentsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restMessagesUuid5AttachmentsGetWithHttpInfo(
        string $uuid5,
        string $filename,
        string $contentType = self::contentTypes['restMessagesUuid5AttachmentsGet'][0]
    ): array
    {
        $request = $this->restMessagesUuid5AttachmentsGetRequest($uuid5, $filename, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restMessagesUuid5AttachmentsGetAsync
     *
     * Get attachment by UUID and file name
     *
     * @param  string $uuid5 The UUID of the message (required)
     * @param  string $filename The file name of the attachment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restMessagesUuid5AttachmentsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restMessagesUuid5AttachmentsGetAsync(
        string $uuid5,
        string $filename,
        string $contentType = self::contentTypes['restMessagesUuid5AttachmentsGet'][0]
    ): PromiseInterface
    {
        return $this->restMessagesUuid5AttachmentsGetAsyncWithHttpInfo($uuid5, $filename, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restMessagesUuid5AttachmentsGetAsyncWithHttpInfo
     *
     * Get attachment by UUID and file name
     *
     * @param  string $uuid5 The UUID of the message (required)
     * @param  string $filename The file name of the attachment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restMessagesUuid5AttachmentsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restMessagesUuid5AttachmentsGetAsyncWithHttpInfo(
        $uuid5,
        $filename,
        string $contentType = self::contentTypes['restMessagesUuid5AttachmentsGet'][0]
    ): PromiseInterface
    {
        $returnType = 'object';
        $request = $this->restMessagesUuid5AttachmentsGetRequest($uuid5, $filename, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restMessagesUuid5AttachmentsGet'
     *
     * @param  string $uuid5 The UUID of the message (required)
     * @param  string $filename The file name of the attachment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restMessagesUuid5AttachmentsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restMessagesUuid5AttachmentsGetRequest(
        $uuid5,
        $filename,
        string $contentType = self::contentTypes['restMessagesUuid5AttachmentsGet'][0]
    ): Request
    {

        // verify the required parameter 'uuid5' is set
        if ($uuid5 === null || (is_array($uuid5) && count($uuid5) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $uuid5 when calling restMessagesUuid5AttachmentsGet'
            );
        }

        // verify the required parameter 'filename' is set
        if ($filename === null || (is_array($filename) && count($filename) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $filename when calling restMessagesUuid5AttachmentsGet'
            );
        }


        $resourcePath = '/rest/messages/{uuid5}/attachments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filename,
            'filename', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($uuid5 !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid5' . '}',
                ObjectSerializer::toPathValue($uuid5),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restMessagesUuid5ControlsPut
     *
     * Update message controls
     *
     * @param  int $uuid5 uuid5 (required)
     * @param  \ck\Model\RestMessagesUuid5ControlsPutRequest|null $_rest_messages_uuid5_controls _rest_messages_uuid5_controls (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restMessagesUuid5ControlsPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\Message
     */
    public function restMessagesUuid5ControlsPut(
        int $uuid5,
        ?\ck\Model\RestMessagesUuid5ControlsPutRequest $_rest_messages_uuid5_controls = null,
        string $contentType = self::contentTypes['restMessagesUuid5ControlsPut'][0]
    ): \ck\Model\Message
    {
        list($response) = $this->restMessagesUuid5ControlsPutWithHttpInfo($uuid5, $_rest_messages_uuid5_controls, $contentType);
        return $response;
    }

    /**
     * Operation restMessagesUuid5ControlsPutWithHttpInfo
     *
     * Update message controls
     *
     * @param  int $uuid5 (required)
     * @param  \ck\Model\RestMessagesUuid5ControlsPutRequest|null $_rest_messages_uuid5_controls (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restMessagesUuid5ControlsPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\Message, HTTP status code, HTTP response headers (array of strings)
     */
    public function restMessagesUuid5ControlsPutWithHttpInfo(
        int $uuid5,
        ?\ck\Model\RestMessagesUuid5ControlsPutRequest $_rest_messages_uuid5_controls = null,
        string $contentType = self::contentTypes['restMessagesUuid5ControlsPut'][0]
    ): array
    {
        $request = $this->restMessagesUuid5ControlsPutRequest($uuid5, $_rest_messages_uuid5_controls, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\Message' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\Message' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\Message', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\Message';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\Message',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restMessagesUuid5ControlsPutAsync
     *
     * Update message controls
     *
     * @param  int $uuid5 (required)
     * @param  \ck\Model\RestMessagesUuid5ControlsPutRequest|null $_rest_messages_uuid5_controls (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restMessagesUuid5ControlsPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restMessagesUuid5ControlsPutAsync(
        int $uuid5,
        ?\ck\Model\RestMessagesUuid5ControlsPutRequest $_rest_messages_uuid5_controls = null,
        string $contentType = self::contentTypes['restMessagesUuid5ControlsPut'][0]
    ): PromiseInterface
    {
        return $this->restMessagesUuid5ControlsPutAsyncWithHttpInfo($uuid5, $_rest_messages_uuid5_controls, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restMessagesUuid5ControlsPutAsyncWithHttpInfo
     *
     * Update message controls
     *
     * @param  int $uuid5 (required)
     * @param  \ck\Model\RestMessagesUuid5ControlsPutRequest|null $_rest_messages_uuid5_controls (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restMessagesUuid5ControlsPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restMessagesUuid5ControlsPutAsyncWithHttpInfo(
        $uuid5,
        $_rest_messages_uuid5_controls = null,
        string $contentType = self::contentTypes['restMessagesUuid5ControlsPut'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\Message';
        $request = $this->restMessagesUuid5ControlsPutRequest($uuid5, $_rest_messages_uuid5_controls, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restMessagesUuid5ControlsPut'
     *
     * @param  int $uuid5 (required)
     * @param  \ck\Model\RestMessagesUuid5ControlsPutRequest|null $_rest_messages_uuid5_controls (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restMessagesUuid5ControlsPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restMessagesUuid5ControlsPutRequest(
        $uuid5,
        $_rest_messages_uuid5_controls = null,
        string $contentType = self::contentTypes['restMessagesUuid5ControlsPut'][0]
    ): Request
    {

        // verify the required parameter 'uuid5' is set
        if ($uuid5 === null || (is_array($uuid5) && count($uuid5) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $uuid5 when calling restMessagesUuid5ControlsPut'
            );
        }



        $resourcePath = '/rest/messages/{uuid5}/controls';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($uuid5 !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid5' . '}',
                ObjectSerializer::toPathValue($uuid5),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($_rest_messages_uuid5_controls)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_rest_messages_uuid5_controls));
            } else {
                $httpBody = $_rest_messages_uuid5_controls;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restMessagesUuid5Delete
     *
     * Delete message by UUID
     *
     * @param  string $uuid5 The UUID of the message to be deleted (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restMessagesUuid5Delete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object
     */
    public function restMessagesUuid5Delete(
        string $uuid5,
        string $contentType = self::contentTypes['restMessagesUuid5Delete'][0]
    ): object
    {
        list($response) = $this->restMessagesUuid5DeleteWithHttpInfo($uuid5, $contentType);
        return $response;
    }

    /**
     * Operation restMessagesUuid5DeleteWithHttpInfo
     *
     * Delete message by UUID
     *
     * @param  string $uuid5 The UUID of the message to be deleted (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restMessagesUuid5Delete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restMessagesUuid5DeleteWithHttpInfo(
        string $uuid5,
        string $contentType = self::contentTypes['restMessagesUuid5Delete'][0]
    ): array
    {
        $request = $this->restMessagesUuid5DeleteRequest($uuid5, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restMessagesUuid5DeleteAsync
     *
     * Delete message by UUID
     *
     * @param  string $uuid5 The UUID of the message to be deleted (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restMessagesUuid5Delete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restMessagesUuid5DeleteAsync(
        string $uuid5,
        string $contentType = self::contentTypes['restMessagesUuid5Delete'][0]
    ): PromiseInterface
    {
        return $this->restMessagesUuid5DeleteAsyncWithHttpInfo($uuid5, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restMessagesUuid5DeleteAsyncWithHttpInfo
     *
     * Delete message by UUID
     *
     * @param  string $uuid5 The UUID of the message to be deleted (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restMessagesUuid5Delete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restMessagesUuid5DeleteAsyncWithHttpInfo(
        $uuid5,
        string $contentType = self::contentTypes['restMessagesUuid5Delete'][0]
    ): PromiseInterface
    {
        $returnType = 'object';
        $request = $this->restMessagesUuid5DeleteRequest($uuid5, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restMessagesUuid5Delete'
     *
     * @param  string $uuid5 The UUID of the message to be deleted (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restMessagesUuid5Delete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restMessagesUuid5DeleteRequest(
        $uuid5,
        string $contentType = self::contentTypes['restMessagesUuid5Delete'][0]
    ): Request
    {

        // verify the required parameter 'uuid5' is set
        if ($uuid5 === null || (is_array($uuid5) && count($uuid5) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $uuid5 when calling restMessagesUuid5Delete'
            );
        }


        $resourcePath = '/rest/messages/{uuid5}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($uuid5 !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid5' . '}',
                ObjectSerializer::toPathValue($uuid5),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restMessagesUuid5DonePut
     *
     * Set or unset doneAt date of message
     *
     * @param  string $uuid5 The UUID5 of the message (required)
     * @param  string|null $done_at Set (or unset, if doneAt is not given) the doneAt date in the message. (optional)
     * @param  \ck\Model\RestMessagesUuid5DonePutRequest|null $_rest_messages_uuid5_done _rest_messages_uuid5_done (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restMessagesUuid5DonePut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\Message[]
     */
    public function restMessagesUuid5DonePut(
        string $uuid5,
        ?string $done_at = null,
        ?\ck\Model\RestMessagesUuid5DonePutRequest $_rest_messages_uuid5_done = null,
        string $contentType = self::contentTypes['restMessagesUuid5DonePut'][0]
    ): array
    {
        list($response) = $this->restMessagesUuid5DonePutWithHttpInfo($uuid5, $done_at, $_rest_messages_uuid5_done, $contentType);
        return $response;
    }

    /**
     * Operation restMessagesUuid5DonePutWithHttpInfo
     *
     * Set or unset doneAt date of message
     *
     * @param  string $uuid5 The UUID5 of the message (required)
     * @param  string|null $done_at Set (or unset, if doneAt is not given) the doneAt date in the message. (optional)
     * @param  \ck\Model\RestMessagesUuid5DonePutRequest|null $_rest_messages_uuid5_done (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restMessagesUuid5DonePut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\Message[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restMessagesUuid5DonePutWithHttpInfo(
        string $uuid5,
        ?string $done_at = null,
        ?\ck\Model\RestMessagesUuid5DonePutRequest $_rest_messages_uuid5_done = null,
        string $contentType = self::contentTypes['restMessagesUuid5DonePut'][0]
    ): array
    {
        $request = $this->restMessagesUuid5DonePutRequest($uuid5, $done_at, $_rest_messages_uuid5_done, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\Message[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\Message[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\Message[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\Message[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\Message[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restMessagesUuid5DonePutAsync
     *
     * Set or unset doneAt date of message
     *
     * @param  string $uuid5 The UUID5 of the message (required)
     * @param  string|null $done_at Set (or unset, if doneAt is not given) the doneAt date in the message. (optional)
     * @param  \ck\Model\RestMessagesUuid5DonePutRequest|null $_rest_messages_uuid5_done (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restMessagesUuid5DonePut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restMessagesUuid5DonePutAsync(
        string $uuid5,
        ?string $done_at = null,
        ?\ck\Model\RestMessagesUuid5DonePutRequest $_rest_messages_uuid5_done = null,
        string $contentType = self::contentTypes['restMessagesUuid5DonePut'][0]
    ): PromiseInterface
    {
        return $this->restMessagesUuid5DonePutAsyncWithHttpInfo($uuid5, $done_at, $_rest_messages_uuid5_done, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restMessagesUuid5DonePutAsyncWithHttpInfo
     *
     * Set or unset doneAt date of message
     *
     * @param  string $uuid5 The UUID5 of the message (required)
     * @param  string|null $done_at Set (or unset, if doneAt is not given) the doneAt date in the message. (optional)
     * @param  \ck\Model\RestMessagesUuid5DonePutRequest|null $_rest_messages_uuid5_done (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restMessagesUuid5DonePut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restMessagesUuid5DonePutAsyncWithHttpInfo(
        $uuid5,
        $done_at = null,
        $_rest_messages_uuid5_done = null,
        string $contentType = self::contentTypes['restMessagesUuid5DonePut'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\Message[]';
        $request = $this->restMessagesUuid5DonePutRequest($uuid5, $done_at, $_rest_messages_uuid5_done, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restMessagesUuid5DonePut'
     *
     * @param  string $uuid5 The UUID5 of the message (required)
     * @param  string|null $done_at Set (or unset, if doneAt is not given) the doneAt date in the message. (optional)
     * @param  \ck\Model\RestMessagesUuid5DonePutRequest|null $_rest_messages_uuid5_done (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restMessagesUuid5DonePut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restMessagesUuid5DonePutRequest(
        $uuid5,
        $done_at = null,
        $_rest_messages_uuid5_done = null,
        string $contentType = self::contentTypes['restMessagesUuid5DonePut'][0]
    ): Request
    {

        // verify the required parameter 'uuid5' is set
        if ($uuid5 === null || (is_array($uuid5) && count($uuid5) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $uuid5 when calling restMessagesUuid5DonePut'
            );
        }




        $resourcePath = '/rest/messages/{uuid5}/done';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $done_at,
            'doneAt', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($uuid5 !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid5' . '}',
                ObjectSerializer::toPathValue($uuid5),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($_rest_messages_uuid5_done)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_rest_messages_uuid5_done));
            } else {
                $httpBody = $_rest_messages_uuid5_done;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restMessagesUuid5Get
     *
     * Get message for the given UUID5 and all its associated successors
     *
     * @param  string $uuid5 The UUID5 of the message (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restMessagesUuid5Get'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\Message[]
     */
    public function restMessagesUuid5Get(
        string $uuid5,
        string $contentType = self::contentTypes['restMessagesUuid5Get'][0]
    ): array
    {
        list($response) = $this->restMessagesUuid5GetWithHttpInfo($uuid5, $contentType);
        return $response;
    }

    /**
     * Operation restMessagesUuid5GetWithHttpInfo
     *
     * Get message for the given UUID5 and all its associated successors
     *
     * @param  string $uuid5 The UUID5 of the message (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restMessagesUuid5Get'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\Message[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restMessagesUuid5GetWithHttpInfo(
        string $uuid5,
        string $contentType = self::contentTypes['restMessagesUuid5Get'][0]
    ): array
    {
        $request = $this->restMessagesUuid5GetRequest($uuid5, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\Message[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\Message[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\Message[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\Message[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\Message[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restMessagesUuid5GetAsync
     *
     * Get message for the given UUID5 and all its associated successors
     *
     * @param  string $uuid5 The UUID5 of the message (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restMessagesUuid5Get'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restMessagesUuid5GetAsync(
        string $uuid5,
        string $contentType = self::contentTypes['restMessagesUuid5Get'][0]
    ): PromiseInterface
    {
        return $this->restMessagesUuid5GetAsyncWithHttpInfo($uuid5, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restMessagesUuid5GetAsyncWithHttpInfo
     *
     * Get message for the given UUID5 and all its associated successors
     *
     * @param  string $uuid5 The UUID5 of the message (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restMessagesUuid5Get'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restMessagesUuid5GetAsyncWithHttpInfo(
        $uuid5,
        string $contentType = self::contentTypes['restMessagesUuid5Get'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\Message[]';
        $request = $this->restMessagesUuid5GetRequest($uuid5, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restMessagesUuid5Get'
     *
     * @param  string $uuid5 The UUID5 of the message (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restMessagesUuid5Get'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restMessagesUuid5GetRequest(
        $uuid5,
        string $contentType = self::contentTypes['restMessagesUuid5Get'][0]
    ): Request
    {

        // verify the required parameter 'uuid5' is set
        if ($uuid5 === null || (is_array($uuid5) && count($uuid5) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $uuid5 when calling restMessagesUuid5Get'
            );
        }


        $resourcePath = '/rest/messages/{uuid5}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($uuid5 !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid5' . '}',
                ObjectSerializer::toPathValue($uuid5),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restMessagesUuid5ReadByPut
     *
     * Update ReadBy array of message
     *
     * @param  int $read_by The ID of the user who read the message (required)
     * @param  string $uuid5 The UUID of the message (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restMessagesUuid5ReadByPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\Message[]
     */
    public function restMessagesUuid5ReadByPut(
        int $read_by,
        string $uuid5,
        string $contentType = self::contentTypes['restMessagesUuid5ReadByPut'][0]
    ): array
    {
        list($response) = $this->restMessagesUuid5ReadByPutWithHttpInfo($read_by, $uuid5, $contentType);
        return $response;
    }

    /**
     * Operation restMessagesUuid5ReadByPutWithHttpInfo
     *
     * Update ReadBy array of message
     *
     * @param  int $read_by The ID of the user who read the message (required)
     * @param  string $uuid5 The UUID of the message (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restMessagesUuid5ReadByPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\Message[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restMessagesUuid5ReadByPutWithHttpInfo(
        int $read_by,
        string $uuid5,
        string $contentType = self::contentTypes['restMessagesUuid5ReadByPut'][0]
    ): array
    {
        $request = $this->restMessagesUuid5ReadByPutRequest($read_by, $uuid5, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\Message[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\Message[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\Message[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\Message[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\Message[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restMessagesUuid5ReadByPutAsync
     *
     * Update ReadBy array of message
     *
     * @param  int $read_by The ID of the user who read the message (required)
     * @param  string $uuid5 The UUID of the message (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restMessagesUuid5ReadByPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restMessagesUuid5ReadByPutAsync(
        int $read_by,
        string $uuid5,
        string $contentType = self::contentTypes['restMessagesUuid5ReadByPut'][0]
    ): PromiseInterface
    {
        return $this->restMessagesUuid5ReadByPutAsyncWithHttpInfo($read_by, $uuid5, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restMessagesUuid5ReadByPutAsyncWithHttpInfo
     *
     * Update ReadBy array of message
     *
     * @param  int $read_by The ID of the user who read the message (required)
     * @param  string $uuid5 The UUID of the message (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restMessagesUuid5ReadByPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restMessagesUuid5ReadByPutAsyncWithHttpInfo(
        $read_by,
        $uuid5,
        string $contentType = self::contentTypes['restMessagesUuid5ReadByPut'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\Message[]';
        $request = $this->restMessagesUuid5ReadByPutRequest($read_by, $uuid5, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restMessagesUuid5ReadByPut'
     *
     * @param  int $read_by The ID of the user who read the message (required)
     * @param  string $uuid5 The UUID of the message (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restMessagesUuid5ReadByPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restMessagesUuid5ReadByPutRequest(
        $read_by,
        $uuid5,
        string $contentType = self::contentTypes['restMessagesUuid5ReadByPut'][0]
    ): Request
    {

        // verify the required parameter 'read_by' is set
        if ($read_by === null || (is_array($read_by) && count($read_by) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $read_by when calling restMessagesUuid5ReadByPut'
            );
        }

        // verify the required parameter 'uuid5' is set
        if ($uuid5 === null || (is_array($uuid5) && count($uuid5) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $uuid5 when calling restMessagesUuid5ReadByPut'
            );
        }


        $resourcePath = '/rest/messages/{uuid5}/readBy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $read_by,
            'readBy', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($uuid5 !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid5' . '}',
                ObjectSerializer::toPathValue($uuid5),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restMessagesUuid5TagsPut
     *
     * Update tags of message
     *
     * @param  int $tags The tags of the message (required)
     * @param  string $uuid5 The UUID of the message (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restMessagesUuid5TagsPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\Message[]
     */
    public function restMessagesUuid5TagsPut(
        int $tags,
        string $uuid5,
        string $contentType = self::contentTypes['restMessagesUuid5TagsPut'][0]
    ): array
    {
        list($response) = $this->restMessagesUuid5TagsPutWithHttpInfo($tags, $uuid5, $contentType);
        return $response;
    }

    /**
     * Operation restMessagesUuid5TagsPutWithHttpInfo
     *
     * Update tags of message
     *
     * @param  int $tags The tags of the message (required)
     * @param  string $uuid5 The UUID of the message (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restMessagesUuid5TagsPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\Message[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restMessagesUuid5TagsPutWithHttpInfo(
        int $tags,
        string $uuid5,
        string $contentType = self::contentTypes['restMessagesUuid5TagsPut'][0]
    ): array
    {
        $request = $this->restMessagesUuid5TagsPutRequest($tags, $uuid5, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\Message[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\Message[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\Message[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\Message[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\Message[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restMessagesUuid5TagsPutAsync
     *
     * Update tags of message
     *
     * @param  int $tags The tags of the message (required)
     * @param  string $uuid5 The UUID of the message (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restMessagesUuid5TagsPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restMessagesUuid5TagsPutAsync(
        int $tags,
        string $uuid5,
        string $contentType = self::contentTypes['restMessagesUuid5TagsPut'][0]
    ): PromiseInterface
    {
        return $this->restMessagesUuid5TagsPutAsyncWithHttpInfo($tags, $uuid5, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restMessagesUuid5TagsPutAsyncWithHttpInfo
     *
     * Update tags of message
     *
     * @param  int $tags The tags of the message (required)
     * @param  string $uuid5 The UUID of the message (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restMessagesUuid5TagsPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restMessagesUuid5TagsPutAsyncWithHttpInfo(
        $tags,
        $uuid5,
        string $contentType = self::contentTypes['restMessagesUuid5TagsPut'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\Message[]';
        $request = $this->restMessagesUuid5TagsPutRequest($tags, $uuid5, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restMessagesUuid5TagsPut'
     *
     * @param  int $tags The tags of the message (required)
     * @param  string $uuid5 The UUID of the message (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restMessagesUuid5TagsPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restMessagesUuid5TagsPutRequest(
        $tags,
        $uuid5,
        string $contentType = self::contentTypes['restMessagesUuid5TagsPut'][0]
    ): Request
    {

        // verify the required parameter 'tags' is set
        if ($tags === null || (is_array($tags) && count($tags) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $tags when calling restMessagesUuid5TagsPut'
            );
        }

        // verify the required parameter 'uuid5' is set
        if ($uuid5 === null || (is_array($uuid5) && count($uuid5) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $uuid5 when calling restMessagesUuid5TagsPut'
            );
        }


        $resourcePath = '/rest/messages/{uuid5}/tags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tags,
            'tags', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($uuid5 !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid5' . '}',
                ObjectSerializer::toPathValue($uuid5),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restMessagesUuid5VisibilityPut
     *
     * Update message visibility
     *
     * @param  string $uuid5 The UUID of the message (required)
     * @param  \ck\Model\RestMessagesUuid5DonePutRequest|null $_rest_messages_uuid5_visibility _rest_messages_uuid5_visibility (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restMessagesUuid5VisibilityPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\Message[]
     */
    public function restMessagesUuid5VisibilityPut(
        string $uuid5,
        ?\ck\Model\RestMessagesUuid5DonePutRequest $_rest_messages_uuid5_visibility = null,
        string $contentType = self::contentTypes['restMessagesUuid5VisibilityPut'][0]
    ): array
    {
        list($response) = $this->restMessagesUuid5VisibilityPutWithHttpInfo($uuid5, $_rest_messages_uuid5_visibility, $contentType);
        return $response;
    }

    /**
     * Operation restMessagesUuid5VisibilityPutWithHttpInfo
     *
     * Update message visibility
     *
     * @param  string $uuid5 The UUID of the message (required)
     * @param  \ck\Model\RestMessagesUuid5DonePutRequest|null $_rest_messages_uuid5_visibility (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restMessagesUuid5VisibilityPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\Message[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restMessagesUuid5VisibilityPutWithHttpInfo(
        string $uuid5,
        ?\ck\Model\RestMessagesUuid5DonePutRequest $_rest_messages_uuid5_visibility = null,
        string $contentType = self::contentTypes['restMessagesUuid5VisibilityPut'][0]
    ): array
    {
        $request = $this->restMessagesUuid5VisibilityPutRequest($uuid5, $_rest_messages_uuid5_visibility, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\Message[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\Message[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\Message[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\Message[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\Message[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restMessagesUuid5VisibilityPutAsync
     *
     * Update message visibility
     *
     * @param  string $uuid5 The UUID of the message (required)
     * @param  \ck\Model\RestMessagesUuid5DonePutRequest|null $_rest_messages_uuid5_visibility (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restMessagesUuid5VisibilityPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restMessagesUuid5VisibilityPutAsync(
        string $uuid5,
        ?\ck\Model\RestMessagesUuid5DonePutRequest $_rest_messages_uuid5_visibility = null,
        string $contentType = self::contentTypes['restMessagesUuid5VisibilityPut'][0]
    ): PromiseInterface
    {
        return $this->restMessagesUuid5VisibilityPutAsyncWithHttpInfo($uuid5, $_rest_messages_uuid5_visibility, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restMessagesUuid5VisibilityPutAsyncWithHttpInfo
     *
     * Update message visibility
     *
     * @param  string $uuid5 The UUID of the message (required)
     * @param  \ck\Model\RestMessagesUuid5DonePutRequest|null $_rest_messages_uuid5_visibility (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restMessagesUuid5VisibilityPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restMessagesUuid5VisibilityPutAsyncWithHttpInfo(
        $uuid5,
        $_rest_messages_uuid5_visibility = null,
        string $contentType = self::contentTypes['restMessagesUuid5VisibilityPut'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\Message[]';
        $request = $this->restMessagesUuid5VisibilityPutRequest($uuid5, $_rest_messages_uuid5_visibility, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restMessagesUuid5VisibilityPut'
     *
     * @param  string $uuid5 The UUID of the message (required)
     * @param  \ck\Model\RestMessagesUuid5DonePutRequest|null $_rest_messages_uuid5_visibility (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restMessagesUuid5VisibilityPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restMessagesUuid5VisibilityPutRequest(
        $uuid5,
        $_rest_messages_uuid5_visibility = null,
        string $contentType = self::contentTypes['restMessagesUuid5VisibilityPut'][0]
    ): Request
    {

        // verify the required parameter 'uuid5' is set
        if ($uuid5 === null || (is_array($uuid5) && count($uuid5) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $uuid5 when calling restMessagesUuid5VisibilityPut'
            );
        }



        $resourcePath = '/rest/messages/{uuid5}/visibility';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($uuid5 !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid5' . '}',
                ObjectSerializer::toPathValue($uuid5),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($_rest_messages_uuid5_visibility)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_rest_messages_uuid5_visibility));
            } else {
                $httpBody = $_rest_messages_uuid5_visibility;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
