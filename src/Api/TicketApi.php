<?php
/**
 * TicketApi
 * PHP version 8.1
 *
 * @package  ck/plenty-client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ck/plenty-client\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use ck/plenty-client\ApiException;
use ck/plenty-client\Configuration;
use ck/plenty-client\HeaderSelector;
use ck/plenty-client\ObjectSerializer;

/**
 * TicketApi Class Doc Comment
 *
 * @package  ck/plenty-client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TicketApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'restTicketsGet' => [
            'application/json',
        ],
        'restTicketsPost' => [
            'application/json',
        ],
        'restTicketsStatusNamesGet' => [
            'application/json',
        ],
        'restTicketsStatusTypeNamesGet' => [
            'application/json',
        ],
        'restTicketsTicketIdGet' => [
            'application/json',
        ],
        'restTicketsTicketIdPost' => [
            'application/json',
        ],
        'restTicketsTicketIdPut' => [
            'application/json',
        ],
        'restTicketsTypesNamesGet' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation restTicketsGet
     *
     * List tickets by filters
     *
     * @param  int|null $id Filter that restricts the search result to tickets of a specific ticket ID (optional)
     * @param  int|null $type_id Filter that restricts the search result to tickets of specific ticket types (optional)
     * @param  int|null $priority_id Filter that restricts the search result to tickets of a specific ticket priority ID (optional)
     * @param  int|null $parent_ticket_id Filter that restricts the search result to tickets with a specified parent ticket ID (optional)
     * @param  int|null $status_id Filter that restricts the search result to tickets with a specified status ID (optional)
     * @param  int|null $confidential Filter that restricts the search result to tickets of a specific confidential value (optional)
     * @param  int|null $contact_id Filter that restricts the search result to tickets with a specified contact ID (optional)
     * @param  int|null $deadline_at Filter that restricts the search result to tickets with a specified deadline. Valid date formats are &#39;yyyy-mm-dd hh-mm-ss&#39; or &#39;yyyy-mm-dd&#39;. (optional)
     * @param  int|null $title Filter that restricts the search result to tickets with a specified phrase in title (optional)
     * @param  int|null $progress Filter that restricts the search result to tickets with a specified progress in percent (optional)
     * @param  int|null $plenty_id Filter that restricts the search result to tickets with a specified client (store) ID (optional)
     * @param  int|null $source Filter that restricts the search result to tickets with a specific source value (optional)
     * @param  int|null $status_group_id Filter that restricts the search result to tickets with a specified status group ID (optional)
     * @param  int|null $role_id Filter that restricts the search result to tickets with a specified role ID (optional)
     * @param  int|null $owner_id Filter that restricts the search result to tickets with a specified owner ID (optional)
     * @param  int|null $fulltext Filter that restricts the search result to tickets with full-text search. The search includes id, typeId, priorityId, title, source and the contact&#39;s firstName and lastName. (optional)
     * @param  int|null $customer_class_id Filter that restricts the search result to tickets with a specified customer class ID (optional)
     * @param  int|null $resubmission_at Filter that restricts the search result to tickets with a specified resubmission date. Valid date formats are &#39;yyyy-mm-dd hh-mm-ss&#39; or &#39;yyyy-mm-dd&#39;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTicketsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck/plenty-client\Model\RestTicketsGet200Response
     */
    public function restTicketsGet(
        ?int $id = null,
        ?int $type_id = null,
        ?int $priority_id = null,
        ?int $parent_ticket_id = null,
        ?int $status_id = null,
        ?int $confidential = null,
        ?int $contact_id = null,
        ?int $deadline_at = null,
        ?int $title = null,
        ?int $progress = null,
        ?int $plenty_id = null,
        ?int $source = null,
        ?int $status_group_id = null,
        ?int $role_id = null,
        ?int $owner_id = null,
        ?int $fulltext = null,
        ?int $customer_class_id = null,
        ?int $resubmission_at = null,
        string $contentType = self::contentTypes['restTicketsGet'][0]
    ): \ck/plenty-client\Model\RestTicketsGet200Response
    {
        list($response) = $this->restTicketsGetWithHttpInfo($id, $type_id, $priority_id, $parent_ticket_id, $status_id, $confidential, $contact_id, $deadline_at, $title, $progress, $plenty_id, $source, $status_group_id, $role_id, $owner_id, $fulltext, $customer_class_id, $resubmission_at, $contentType);
        return $response;
    }

    /**
     * Operation restTicketsGetWithHttpInfo
     *
     * List tickets by filters
     *
     * @param  int|null $id Filter that restricts the search result to tickets of a specific ticket ID (optional)
     * @param  int|null $type_id Filter that restricts the search result to tickets of specific ticket types (optional)
     * @param  int|null $priority_id Filter that restricts the search result to tickets of a specific ticket priority ID (optional)
     * @param  int|null $parent_ticket_id Filter that restricts the search result to tickets with a specified parent ticket ID (optional)
     * @param  int|null $status_id Filter that restricts the search result to tickets with a specified status ID (optional)
     * @param  int|null $confidential Filter that restricts the search result to tickets of a specific confidential value (optional)
     * @param  int|null $contact_id Filter that restricts the search result to tickets with a specified contact ID (optional)
     * @param  int|null $deadline_at Filter that restricts the search result to tickets with a specified deadline. Valid date formats are &#39;yyyy-mm-dd hh-mm-ss&#39; or &#39;yyyy-mm-dd&#39;. (optional)
     * @param  int|null $title Filter that restricts the search result to tickets with a specified phrase in title (optional)
     * @param  int|null $progress Filter that restricts the search result to tickets with a specified progress in percent (optional)
     * @param  int|null $plenty_id Filter that restricts the search result to tickets with a specified client (store) ID (optional)
     * @param  int|null $source Filter that restricts the search result to tickets with a specific source value (optional)
     * @param  int|null $status_group_id Filter that restricts the search result to tickets with a specified status group ID (optional)
     * @param  int|null $role_id Filter that restricts the search result to tickets with a specified role ID (optional)
     * @param  int|null $owner_id Filter that restricts the search result to tickets with a specified owner ID (optional)
     * @param  int|null $fulltext Filter that restricts the search result to tickets with full-text search. The search includes id, typeId, priorityId, title, source and the contact&#39;s firstName and lastName. (optional)
     * @param  int|null $customer_class_id Filter that restricts the search result to tickets with a specified customer class ID (optional)
     * @param  int|null $resubmission_at Filter that restricts the search result to tickets with a specified resubmission date. Valid date formats are &#39;yyyy-mm-dd hh-mm-ss&#39; or &#39;yyyy-mm-dd&#39;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTicketsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck/plenty-client\Model\RestTicketsGet200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function restTicketsGetWithHttpInfo(
        ?int $id = null,
        ?int $type_id = null,
        ?int $priority_id = null,
        ?int $parent_ticket_id = null,
        ?int $status_id = null,
        ?int $confidential = null,
        ?int $contact_id = null,
        ?int $deadline_at = null,
        ?int $title = null,
        ?int $progress = null,
        ?int $plenty_id = null,
        ?int $source = null,
        ?int $status_group_id = null,
        ?int $role_id = null,
        ?int $owner_id = null,
        ?int $fulltext = null,
        ?int $customer_class_id = null,
        ?int $resubmission_at = null,
        string $contentType = self::contentTypes['restTicketsGet'][0]
    ): array
    {
        $request = $this->restTicketsGetRequest($id, $type_id, $priority_id, $parent_ticket_id, $status_id, $confidential, $contact_id, $deadline_at, $title, $progress, $plenty_id, $source, $status_group_id, $role_id, $owner_id, $fulltext, $customer_class_id, $resubmission_at, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck/plenty-client\Model\RestTicketsGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck/plenty-client\Model\RestTicketsGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck/plenty-client\Model\RestTicketsGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck/plenty-client\Model\RestTicketsGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck/plenty-client\Model\RestTicketsGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restTicketsGetAsync
     *
     * List tickets by filters
     *
     * @param  int|null $id Filter that restricts the search result to tickets of a specific ticket ID (optional)
     * @param  int|null $type_id Filter that restricts the search result to tickets of specific ticket types (optional)
     * @param  int|null $priority_id Filter that restricts the search result to tickets of a specific ticket priority ID (optional)
     * @param  int|null $parent_ticket_id Filter that restricts the search result to tickets with a specified parent ticket ID (optional)
     * @param  int|null $status_id Filter that restricts the search result to tickets with a specified status ID (optional)
     * @param  int|null $confidential Filter that restricts the search result to tickets of a specific confidential value (optional)
     * @param  int|null $contact_id Filter that restricts the search result to tickets with a specified contact ID (optional)
     * @param  int|null $deadline_at Filter that restricts the search result to tickets with a specified deadline. Valid date formats are &#39;yyyy-mm-dd hh-mm-ss&#39; or &#39;yyyy-mm-dd&#39;. (optional)
     * @param  int|null $title Filter that restricts the search result to tickets with a specified phrase in title (optional)
     * @param  int|null $progress Filter that restricts the search result to tickets with a specified progress in percent (optional)
     * @param  int|null $plenty_id Filter that restricts the search result to tickets with a specified client (store) ID (optional)
     * @param  int|null $source Filter that restricts the search result to tickets with a specific source value (optional)
     * @param  int|null $status_group_id Filter that restricts the search result to tickets with a specified status group ID (optional)
     * @param  int|null $role_id Filter that restricts the search result to tickets with a specified role ID (optional)
     * @param  int|null $owner_id Filter that restricts the search result to tickets with a specified owner ID (optional)
     * @param  int|null $fulltext Filter that restricts the search result to tickets with full-text search. The search includes id, typeId, priorityId, title, source and the contact&#39;s firstName and lastName. (optional)
     * @param  int|null $customer_class_id Filter that restricts the search result to tickets with a specified customer class ID (optional)
     * @param  int|null $resubmission_at Filter that restricts the search result to tickets with a specified resubmission date. Valid date formats are &#39;yyyy-mm-dd hh-mm-ss&#39; or &#39;yyyy-mm-dd&#39;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTicketsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restTicketsGetAsync(
        ?int $id = null,
        ?int $type_id = null,
        ?int $priority_id = null,
        ?int $parent_ticket_id = null,
        ?int $status_id = null,
        ?int $confidential = null,
        ?int $contact_id = null,
        ?int $deadline_at = null,
        ?int $title = null,
        ?int $progress = null,
        ?int $plenty_id = null,
        ?int $source = null,
        ?int $status_group_id = null,
        ?int $role_id = null,
        ?int $owner_id = null,
        ?int $fulltext = null,
        ?int $customer_class_id = null,
        ?int $resubmission_at = null,
        string $contentType = self::contentTypes['restTicketsGet'][0]
    ): PromiseInterface
    {
        return $this->restTicketsGetAsyncWithHttpInfo($id, $type_id, $priority_id, $parent_ticket_id, $status_id, $confidential, $contact_id, $deadline_at, $title, $progress, $plenty_id, $source, $status_group_id, $role_id, $owner_id, $fulltext, $customer_class_id, $resubmission_at, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restTicketsGetAsyncWithHttpInfo
     *
     * List tickets by filters
     *
     * @param  int|null $id Filter that restricts the search result to tickets of a specific ticket ID (optional)
     * @param  int|null $type_id Filter that restricts the search result to tickets of specific ticket types (optional)
     * @param  int|null $priority_id Filter that restricts the search result to tickets of a specific ticket priority ID (optional)
     * @param  int|null $parent_ticket_id Filter that restricts the search result to tickets with a specified parent ticket ID (optional)
     * @param  int|null $status_id Filter that restricts the search result to tickets with a specified status ID (optional)
     * @param  int|null $confidential Filter that restricts the search result to tickets of a specific confidential value (optional)
     * @param  int|null $contact_id Filter that restricts the search result to tickets with a specified contact ID (optional)
     * @param  int|null $deadline_at Filter that restricts the search result to tickets with a specified deadline. Valid date formats are &#39;yyyy-mm-dd hh-mm-ss&#39; or &#39;yyyy-mm-dd&#39;. (optional)
     * @param  int|null $title Filter that restricts the search result to tickets with a specified phrase in title (optional)
     * @param  int|null $progress Filter that restricts the search result to tickets with a specified progress in percent (optional)
     * @param  int|null $plenty_id Filter that restricts the search result to tickets with a specified client (store) ID (optional)
     * @param  int|null $source Filter that restricts the search result to tickets with a specific source value (optional)
     * @param  int|null $status_group_id Filter that restricts the search result to tickets with a specified status group ID (optional)
     * @param  int|null $role_id Filter that restricts the search result to tickets with a specified role ID (optional)
     * @param  int|null $owner_id Filter that restricts the search result to tickets with a specified owner ID (optional)
     * @param  int|null $fulltext Filter that restricts the search result to tickets with full-text search. The search includes id, typeId, priorityId, title, source and the contact&#39;s firstName and lastName. (optional)
     * @param  int|null $customer_class_id Filter that restricts the search result to tickets with a specified customer class ID (optional)
     * @param  int|null $resubmission_at Filter that restricts the search result to tickets with a specified resubmission date. Valid date formats are &#39;yyyy-mm-dd hh-mm-ss&#39; or &#39;yyyy-mm-dd&#39;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTicketsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restTicketsGetAsyncWithHttpInfo(
        $id = null,
        $type_id = null,
        $priority_id = null,
        $parent_ticket_id = null,
        $status_id = null,
        $confidential = null,
        $contact_id = null,
        $deadline_at = null,
        $title = null,
        $progress = null,
        $plenty_id = null,
        $source = null,
        $status_group_id = null,
        $role_id = null,
        $owner_id = null,
        $fulltext = null,
        $customer_class_id = null,
        $resubmission_at = null,
        string $contentType = self::contentTypes['restTicketsGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck/plenty-client\Model\RestTicketsGet200Response';
        $request = $this->restTicketsGetRequest($id, $type_id, $priority_id, $parent_ticket_id, $status_id, $confidential, $contact_id, $deadline_at, $title, $progress, $plenty_id, $source, $status_group_id, $role_id, $owner_id, $fulltext, $customer_class_id, $resubmission_at, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restTicketsGet'
     *
     * @param  int|null $id Filter that restricts the search result to tickets of a specific ticket ID (optional)
     * @param  int|null $type_id Filter that restricts the search result to tickets of specific ticket types (optional)
     * @param  int|null $priority_id Filter that restricts the search result to tickets of a specific ticket priority ID (optional)
     * @param  int|null $parent_ticket_id Filter that restricts the search result to tickets with a specified parent ticket ID (optional)
     * @param  int|null $status_id Filter that restricts the search result to tickets with a specified status ID (optional)
     * @param  int|null $confidential Filter that restricts the search result to tickets of a specific confidential value (optional)
     * @param  int|null $contact_id Filter that restricts the search result to tickets with a specified contact ID (optional)
     * @param  int|null $deadline_at Filter that restricts the search result to tickets with a specified deadline. Valid date formats are &#39;yyyy-mm-dd hh-mm-ss&#39; or &#39;yyyy-mm-dd&#39;. (optional)
     * @param  int|null $title Filter that restricts the search result to tickets with a specified phrase in title (optional)
     * @param  int|null $progress Filter that restricts the search result to tickets with a specified progress in percent (optional)
     * @param  int|null $plenty_id Filter that restricts the search result to tickets with a specified client (store) ID (optional)
     * @param  int|null $source Filter that restricts the search result to tickets with a specific source value (optional)
     * @param  int|null $status_group_id Filter that restricts the search result to tickets with a specified status group ID (optional)
     * @param  int|null $role_id Filter that restricts the search result to tickets with a specified role ID (optional)
     * @param  int|null $owner_id Filter that restricts the search result to tickets with a specified owner ID (optional)
     * @param  int|null $fulltext Filter that restricts the search result to tickets with full-text search. The search includes id, typeId, priorityId, title, source and the contact&#39;s firstName and lastName. (optional)
     * @param  int|null $customer_class_id Filter that restricts the search result to tickets with a specified customer class ID (optional)
     * @param  int|null $resubmission_at Filter that restricts the search result to tickets with a specified resubmission date. Valid date formats are &#39;yyyy-mm-dd hh-mm-ss&#39; or &#39;yyyy-mm-dd&#39;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTicketsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restTicketsGetRequest(
        $id = null,
        $type_id = null,
        $priority_id = null,
        $parent_ticket_id = null,
        $status_id = null,
        $confidential = null,
        $contact_id = null,
        $deadline_at = null,
        $title = null,
        $progress = null,
        $plenty_id = null,
        $source = null,
        $status_group_id = null,
        $role_id = null,
        $owner_id = null,
        $fulltext = null,
        $customer_class_id = null,
        $resubmission_at = null,
        string $contentType = self::contentTypes['restTicketsGet'][0]
    ): Request
    {




















        $resourcePath = '/rest/tickets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type_id,
            'typeId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $priority_id,
            'priorityId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $parent_ticket_id,
            'parentTicketId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status_id,
            'statusId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $confidential,
            'confidential', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $contact_id,
            'contactId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $deadline_at,
            'deadlineAt', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $title,
            'title', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $progress,
            'progress', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $plenty_id,
            'plentyId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $source,
            'source', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status_group_id,
            'statusGroupId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $role_id,
            'roleId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $owner_id,
            'ownerId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fulltext,
            'fulltext', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $customer_class_id,
            'customerClassId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $resubmission_at,
            'resubmissionAt', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restTicketsPost
     *
     * Create ticket
     *
     * @param  \ck/plenty-client\Model\RestTicketsPostRequest|null $_rest_tickets _rest_tickets (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTicketsPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck/plenty-client\Model\Ticket
     */
    public function restTicketsPost(
        ?\ck/plenty-client\Model\RestTicketsPostRequest $_rest_tickets = null,
        string $contentType = self::contentTypes['restTicketsPost'][0]
    ): \ck/plenty-client\Model\Ticket
    {
        list($response) = $this->restTicketsPostWithHttpInfo($_rest_tickets, $contentType);
        return $response;
    }

    /**
     * Operation restTicketsPostWithHttpInfo
     *
     * Create ticket
     *
     * @param  \ck/plenty-client\Model\RestTicketsPostRequest|null $_rest_tickets (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTicketsPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck/plenty-client\Model\Ticket, HTTP status code, HTTP response headers (array of strings)
     */
    public function restTicketsPostWithHttpInfo(
        ?\ck/plenty-client\Model\RestTicketsPostRequest $_rest_tickets = null,
        string $contentType = self::contentTypes['restTicketsPost'][0]
    ): array
    {
        $request = $this->restTicketsPostRequest($_rest_tickets, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck/plenty-client\Model\Ticket' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck/plenty-client\Model\Ticket' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck/plenty-client\Model\Ticket', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck/plenty-client\Model\Ticket';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck/plenty-client\Model\Ticket',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restTicketsPostAsync
     *
     * Create ticket
     *
     * @param  \ck/plenty-client\Model\RestTicketsPostRequest|null $_rest_tickets (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTicketsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restTicketsPostAsync(
        ?\ck/plenty-client\Model\RestTicketsPostRequest $_rest_tickets = null,
        string $contentType = self::contentTypes['restTicketsPost'][0]
    ): PromiseInterface
    {
        return $this->restTicketsPostAsyncWithHttpInfo($_rest_tickets, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restTicketsPostAsyncWithHttpInfo
     *
     * Create ticket
     *
     * @param  \ck/plenty-client\Model\RestTicketsPostRequest|null $_rest_tickets (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTicketsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restTicketsPostAsyncWithHttpInfo(
        $_rest_tickets = null,
        string $contentType = self::contentTypes['restTicketsPost'][0]
    ): PromiseInterface
    {
        $returnType = '\ck/plenty-client\Model\Ticket';
        $request = $this->restTicketsPostRequest($_rest_tickets, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restTicketsPost'
     *
     * @param  \ck/plenty-client\Model\RestTicketsPostRequest|null $_rest_tickets (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTicketsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restTicketsPostRequest(
        $_rest_tickets = null,
        string $contentType = self::contentTypes['restTicketsPost'][0]
    ): Request
    {



        $resourcePath = '/rest/tickets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($_rest_tickets)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_rest_tickets));
            } else {
                $httpBody = $_rest_tickets;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restTicketsStatusNamesGet
     *
     * List status names
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTicketsStatusNamesGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck/plenty-client\Model\TicketStatusName[]
     */
    public function restTicketsStatusNamesGet(
        string $contentType = self::contentTypes['restTicketsStatusNamesGet'][0]
    ): array
    {
        list($response) = $this->restTicketsStatusNamesGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation restTicketsStatusNamesGetWithHttpInfo
     *
     * List status names
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTicketsStatusNamesGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck/plenty-client\Model\TicketStatusName[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restTicketsStatusNamesGetWithHttpInfo(
        string $contentType = self::contentTypes['restTicketsStatusNamesGet'][0]
    ): array
    {
        $request = $this->restTicketsStatusNamesGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck/plenty-client\Model\TicketStatusName[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck/plenty-client\Model\TicketStatusName[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck/plenty-client\Model\TicketStatusName[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck/plenty-client\Model\TicketStatusName[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck/plenty-client\Model\TicketStatusName[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restTicketsStatusNamesGetAsync
     *
     * List status names
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTicketsStatusNamesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restTicketsStatusNamesGetAsync(
        string $contentType = self::contentTypes['restTicketsStatusNamesGet'][0]
    ): PromiseInterface
    {
        return $this->restTicketsStatusNamesGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restTicketsStatusNamesGetAsyncWithHttpInfo
     *
     * List status names
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTicketsStatusNamesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restTicketsStatusNamesGetAsyncWithHttpInfo(
        string $contentType = self::contentTypes['restTicketsStatusNamesGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck/plenty-client\Model\TicketStatusName[]';
        $request = $this->restTicketsStatusNamesGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restTicketsStatusNamesGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTicketsStatusNamesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restTicketsStatusNamesGetRequest(
        string $contentType = self::contentTypes['restTicketsStatusNamesGet'][0]
    ): Request
    {


        $resourcePath = '/rest/tickets/status/names';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restTicketsStatusTypeNamesGet
     *
     * List status names with typeId
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTicketsStatusTypeNamesGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck/plenty-client\Model\TicketStatusName[]
     */
    public function restTicketsStatusTypeNamesGet(
        string $contentType = self::contentTypes['restTicketsStatusTypeNamesGet'][0]
    ): array
    {
        list($response) = $this->restTicketsStatusTypeNamesGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation restTicketsStatusTypeNamesGetWithHttpInfo
     *
     * List status names with typeId
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTicketsStatusTypeNamesGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck/plenty-client\Model\TicketStatusName[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restTicketsStatusTypeNamesGetWithHttpInfo(
        string $contentType = self::contentTypes['restTicketsStatusTypeNamesGet'][0]
    ): array
    {
        $request = $this->restTicketsStatusTypeNamesGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck/plenty-client\Model\TicketStatusName[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck/plenty-client\Model\TicketStatusName[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck/plenty-client\Model\TicketStatusName[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck/plenty-client\Model\TicketStatusName[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck/plenty-client\Model\TicketStatusName[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restTicketsStatusTypeNamesGetAsync
     *
     * List status names with typeId
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTicketsStatusTypeNamesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restTicketsStatusTypeNamesGetAsync(
        string $contentType = self::contentTypes['restTicketsStatusTypeNamesGet'][0]
    ): PromiseInterface
    {
        return $this->restTicketsStatusTypeNamesGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restTicketsStatusTypeNamesGetAsyncWithHttpInfo
     *
     * List status names with typeId
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTicketsStatusTypeNamesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restTicketsStatusTypeNamesGetAsyncWithHttpInfo(
        string $contentType = self::contentTypes['restTicketsStatusTypeNamesGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck/plenty-client\Model\TicketStatusName[]';
        $request = $this->restTicketsStatusTypeNamesGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restTicketsStatusTypeNamesGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTicketsStatusTypeNamesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restTicketsStatusTypeNamesGetRequest(
        string $contentType = self::contentTypes['restTicketsStatusTypeNamesGet'][0]
    ): Request
    {


        $resourcePath = '/rest/tickets/status/type/names';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restTicketsTicketIdGet
     *
     * Get ticket
     *
     * @param  int $ticket_id The ID of the ticket to be loaded. (required)
     * @param  int|null $with An array with relations to be loaded with the ticket. Possible values are &#39;order&#39; and &#39;contact&#39; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTicketsTicketIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck/plenty-client\Model\Ticket
     */
    public function restTicketsTicketIdGet(
        int $ticket_id,
        ?int $with = null,
        string $contentType = self::contentTypes['restTicketsTicketIdGet'][0]
    ): \ck/plenty-client\Model\Ticket
    {
        list($response) = $this->restTicketsTicketIdGetWithHttpInfo($ticket_id, $with, $contentType);
        return $response;
    }

    /**
     * Operation restTicketsTicketIdGetWithHttpInfo
     *
     * Get ticket
     *
     * @param  int $ticket_id The ID of the ticket to be loaded. (required)
     * @param  int|null $with An array with relations to be loaded with the ticket. Possible values are &#39;order&#39; and &#39;contact&#39; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTicketsTicketIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck/plenty-client\Model\Ticket, HTTP status code, HTTP response headers (array of strings)
     */
    public function restTicketsTicketIdGetWithHttpInfo(
        int $ticket_id,
        ?int $with = null,
        string $contentType = self::contentTypes['restTicketsTicketIdGet'][0]
    ): array
    {
        $request = $this->restTicketsTicketIdGetRequest($ticket_id, $with, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck/plenty-client\Model\Ticket' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck/plenty-client\Model\Ticket' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck/plenty-client\Model\Ticket', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck/plenty-client\Model\Ticket';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck/plenty-client\Model\Ticket',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restTicketsTicketIdGetAsync
     *
     * Get ticket
     *
     * @param  int $ticket_id The ID of the ticket to be loaded. (required)
     * @param  int|null $with An array with relations to be loaded with the ticket. Possible values are &#39;order&#39; and &#39;contact&#39; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTicketsTicketIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restTicketsTicketIdGetAsync(
        int $ticket_id,
        ?int $with = null,
        string $contentType = self::contentTypes['restTicketsTicketIdGet'][0]
    ): PromiseInterface
    {
        return $this->restTicketsTicketIdGetAsyncWithHttpInfo($ticket_id, $with, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restTicketsTicketIdGetAsyncWithHttpInfo
     *
     * Get ticket
     *
     * @param  int $ticket_id The ID of the ticket to be loaded. (required)
     * @param  int|null $with An array with relations to be loaded with the ticket. Possible values are &#39;order&#39; and &#39;contact&#39; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTicketsTicketIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restTicketsTicketIdGetAsyncWithHttpInfo(
        $ticket_id,
        $with = null,
        string $contentType = self::contentTypes['restTicketsTicketIdGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck/plenty-client\Model\Ticket';
        $request = $this->restTicketsTicketIdGetRequest($ticket_id, $with, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restTicketsTicketIdGet'
     *
     * @param  int $ticket_id The ID of the ticket to be loaded. (required)
     * @param  int|null $with An array with relations to be loaded with the ticket. Possible values are &#39;order&#39; and &#39;contact&#39; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTicketsTicketIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restTicketsTicketIdGetRequest(
        $ticket_id,
        $with = null,
        string $contentType = self::contentTypes['restTicketsTicketIdGet'][0]
    ): Request
    {

        // verify the required parameter 'ticket_id' is set
        if ($ticket_id === null || (is_array($ticket_id) && count($ticket_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $ticket_id when calling restTicketsTicketIdGet'
            );
        }



        $resourcePath = '/rest/tickets/{ticketId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with,
            'with', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($ticket_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ticketId' . '}',
                ObjectSerializer::toPathValue($ticket_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restTicketsTicketIdPost
     *
     * Create message
     *
     * @param  int $ticket_id The ID of the ticket (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTicketsTicketIdPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck/plenty-client\Model\TicketMessage
     */
    public function restTicketsTicketIdPost(
        int $ticket_id,
        string $contentType = self::contentTypes['restTicketsTicketIdPost'][0]
    ): \ck/plenty-client\Model\TicketMessage
    {
        list($response) = $this->restTicketsTicketIdPostWithHttpInfo($ticket_id, $contentType);
        return $response;
    }

    /**
     * Operation restTicketsTicketIdPostWithHttpInfo
     *
     * Create message
     *
     * @param  int $ticket_id The ID of the ticket (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTicketsTicketIdPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck/plenty-client\Model\TicketMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function restTicketsTicketIdPostWithHttpInfo(
        int $ticket_id,
        string $contentType = self::contentTypes['restTicketsTicketIdPost'][0]
    ): array
    {
        $request = $this->restTicketsTicketIdPostRequest($ticket_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck/plenty-client\Model\TicketMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck/plenty-client\Model\TicketMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck/plenty-client\Model\TicketMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck/plenty-client\Model\TicketMessage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck/plenty-client\Model\TicketMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restTicketsTicketIdPostAsync
     *
     * Create message
     *
     * @param  int $ticket_id The ID of the ticket (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTicketsTicketIdPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restTicketsTicketIdPostAsync(
        int $ticket_id,
        string $contentType = self::contentTypes['restTicketsTicketIdPost'][0]
    ): PromiseInterface
    {
        return $this->restTicketsTicketIdPostAsyncWithHttpInfo($ticket_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restTicketsTicketIdPostAsyncWithHttpInfo
     *
     * Create message
     *
     * @param  int $ticket_id The ID of the ticket (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTicketsTicketIdPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restTicketsTicketIdPostAsyncWithHttpInfo(
        $ticket_id,
        string $contentType = self::contentTypes['restTicketsTicketIdPost'][0]
    ): PromiseInterface
    {
        $returnType = '\ck/plenty-client\Model\TicketMessage';
        $request = $this->restTicketsTicketIdPostRequest($ticket_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restTicketsTicketIdPost'
     *
     * @param  int $ticket_id The ID of the ticket (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTicketsTicketIdPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restTicketsTicketIdPostRequest(
        $ticket_id,
        string $contentType = self::contentTypes['restTicketsTicketIdPost'][0]
    ): Request
    {

        // verify the required parameter 'ticket_id' is set
        if ($ticket_id === null || (is_array($ticket_id) && count($ticket_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $ticket_id when calling restTicketsTicketIdPost'
            );
        }


        $resourcePath = '/rest/tickets/{ticketId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ticket_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ticketId' . '}',
                ObjectSerializer::toPathValue($ticket_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restTicketsTicketIdPut
     *
     * Update ticket
     *
     * @param  int $ticket_id The ID of the ticket (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTicketsTicketIdPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck/plenty-client\Model\Ticket
     */
    public function restTicketsTicketIdPut(
        int $ticket_id,
        string $contentType = self::contentTypes['restTicketsTicketIdPut'][0]
    ): \ck/plenty-client\Model\Ticket
    {
        list($response) = $this->restTicketsTicketIdPutWithHttpInfo($ticket_id, $contentType);
        return $response;
    }

    /**
     * Operation restTicketsTicketIdPutWithHttpInfo
     *
     * Update ticket
     *
     * @param  int $ticket_id The ID of the ticket (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTicketsTicketIdPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck/plenty-client\Model\Ticket, HTTP status code, HTTP response headers (array of strings)
     */
    public function restTicketsTicketIdPutWithHttpInfo(
        int $ticket_id,
        string $contentType = self::contentTypes['restTicketsTicketIdPut'][0]
    ): array
    {
        $request = $this->restTicketsTicketIdPutRequest($ticket_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck/plenty-client\Model\Ticket' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck/plenty-client\Model\Ticket' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck/plenty-client\Model\Ticket', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck/plenty-client\Model\Ticket';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck/plenty-client\Model\Ticket',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restTicketsTicketIdPutAsync
     *
     * Update ticket
     *
     * @param  int $ticket_id The ID of the ticket (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTicketsTicketIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restTicketsTicketIdPutAsync(
        int $ticket_id,
        string $contentType = self::contentTypes['restTicketsTicketIdPut'][0]
    ): PromiseInterface
    {
        return $this->restTicketsTicketIdPutAsyncWithHttpInfo($ticket_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restTicketsTicketIdPutAsyncWithHttpInfo
     *
     * Update ticket
     *
     * @param  int $ticket_id The ID of the ticket (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTicketsTicketIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restTicketsTicketIdPutAsyncWithHttpInfo(
        $ticket_id,
        string $contentType = self::contentTypes['restTicketsTicketIdPut'][0]
    ): PromiseInterface
    {
        $returnType = '\ck/plenty-client\Model\Ticket';
        $request = $this->restTicketsTicketIdPutRequest($ticket_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restTicketsTicketIdPut'
     *
     * @param  int $ticket_id The ID of the ticket (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTicketsTicketIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restTicketsTicketIdPutRequest(
        $ticket_id,
        string $contentType = self::contentTypes['restTicketsTicketIdPut'][0]
    ): Request
    {

        // verify the required parameter 'ticket_id' is set
        if ($ticket_id === null || (is_array($ticket_id) && count($ticket_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $ticket_id when calling restTicketsTicketIdPut'
            );
        }


        $resourcePath = '/rest/tickets/{ticketId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ticket_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ticketId' . '}',
                ObjectSerializer::toPathValue($ticket_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restTicketsTypesNamesGet
     *
     * List type names
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTicketsTypesNamesGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck/plenty-client\Model\TicketTypeName[]
     */
    public function restTicketsTypesNamesGet(
        string $contentType = self::contentTypes['restTicketsTypesNamesGet'][0]
    ): array
    {
        list($response) = $this->restTicketsTypesNamesGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation restTicketsTypesNamesGetWithHttpInfo
     *
     * List type names
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTicketsTypesNamesGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck/plenty-client\Model\TicketTypeName[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restTicketsTypesNamesGetWithHttpInfo(
        string $contentType = self::contentTypes['restTicketsTypesNamesGet'][0]
    ): array
    {
        $request = $this->restTicketsTypesNamesGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck/plenty-client\Model\TicketTypeName[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck/plenty-client\Model\TicketTypeName[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck/plenty-client\Model\TicketTypeName[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck/plenty-client\Model\TicketTypeName[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck/plenty-client\Model\TicketTypeName[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restTicketsTypesNamesGetAsync
     *
     * List type names
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTicketsTypesNamesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restTicketsTypesNamesGetAsync(
        string $contentType = self::contentTypes['restTicketsTypesNamesGet'][0]
    ): PromiseInterface
    {
        return $this->restTicketsTypesNamesGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restTicketsTypesNamesGetAsyncWithHttpInfo
     *
     * List type names
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTicketsTypesNamesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restTicketsTypesNamesGetAsyncWithHttpInfo(
        string $contentType = self::contentTypes['restTicketsTypesNamesGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck/plenty-client\Model\TicketTypeName[]';
        $request = $this->restTicketsTypesNamesGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restTicketsTypesNamesGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTicketsTypesNamesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restTicketsTypesNamesGetRequest(
        string $contentType = self::contentTypes['restTicketsTypesNamesGet'][0]
    ): Request
    {


        $resourcePath = '/rest/tickets/types/names';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
