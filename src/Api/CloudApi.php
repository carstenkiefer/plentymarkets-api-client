<?php
/**
 * CloudApi
 * PHP version 8.1
 *
 * @package  ck/plenty-client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ck/plenty-client\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use ck/plenty-client\ApiException;
use ck/plenty-client\Configuration;
use ck/plenty-client\HeaderSelector;
use ck/plenty-client\ObjectSerializer;

/**
 * CloudApi Class Doc Comment
 *
 * @package  ck/plenty-client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CloudApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'restStorageFrontendFileDelete' => [
            'application/json',
        ],
        'restStorageFrontendFileGet' => [
            'application/json',
        ],
        'restStorageFrontendFileMetadataGet' => [
            'application/json',
        ],
        'restStorageFrontendFileMetadataPost' => [
            'application/json',
        ],
        'restStorageFrontendFilePost' => [
            'application/json',
        ],
        'restStorageFrontendFilesDelete' => [
            'application/json',
        ],
        'restStorageFrontendFilesGet' => [
            'application/json',
        ],
        'restStorageFrontendObjectUrlGet' => [
            'application/json',
        ],
        'restStorageLayoutDelete' => [
            'application/json',
        ],
        'restStorageLayoutListGet' => [
            'application/json',
        ],
        'restStorageLayoutObjectUrlGet' => [
            'application/json',
        ],
        'restStorageLayoutPost' => [
            'application/json',
        ],
        'restStorageOrderPropertiesObjectUrlGet' => [
            'application/json',
        ],
        'restStoragePluginsInboxCommitPost' => [
            'application/json',
        ],
        'restStoragePluginsInboxDelete' => [
            'application/json',
        ],
        'restStoragePluginsInboxListGet' => [
            'application/json',
        ],
        'restStoragePluginsInboxObjectUrlGet' => [
            'application/json',
        ],
        'restStoragePluginsInboxPost' => [
            'application/json',
        ],
        'restSystemCloudMetricsGet' => [
            'application/json',
        ],
        'restSystemMetricsPlentyIdDateGet' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation restStorageFrontendFileDelete
     *
     * Remove a single object from frontend storage.
     *
     * @param  string $key The key of the object to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageFrontendFileDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object
     */
    public function restStorageFrontendFileDelete(
        string $key,
        string $contentType = self::contentTypes['restStorageFrontendFileDelete'][0]
    ): object
    {
        list($response) = $this->restStorageFrontendFileDeleteWithHttpInfo($key, $contentType);
        return $response;
    }

    /**
     * Operation restStorageFrontendFileDeleteWithHttpInfo
     *
     * Remove a single object from frontend storage.
     *
     * @param  string $key The key of the object to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageFrontendFileDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restStorageFrontendFileDeleteWithHttpInfo(
        string $key,
        string $contentType = self::contentTypes['restStorageFrontendFileDelete'][0]
    ): array
    {
        $request = $this->restStorageFrontendFileDeleteRequest($key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restStorageFrontendFileDeleteAsync
     *
     * Remove a single object from frontend storage.
     *
     * @param  string $key The key of the object to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageFrontendFileDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restStorageFrontendFileDeleteAsync(
        string $key,
        string $contentType = self::contentTypes['restStorageFrontendFileDelete'][0]
    ): PromiseInterface
    {
        return $this->restStorageFrontendFileDeleteAsyncWithHttpInfo($key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restStorageFrontendFileDeleteAsyncWithHttpInfo
     *
     * Remove a single object from frontend storage.
     *
     * @param  string $key The key of the object to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageFrontendFileDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restStorageFrontendFileDeleteAsyncWithHttpInfo(
        $key,
        string $contentType = self::contentTypes['restStorageFrontendFileDelete'][0]
    ): PromiseInterface
    {
        $returnType = 'object';
        $request = $this->restStorageFrontendFileDeleteRequest($key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restStorageFrontendFileDelete'
     *
     * @param  string $key The key of the object to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageFrontendFileDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restStorageFrontendFileDeleteRequest(
        $key,
        string $contentType = self::contentTypes['restStorageFrontendFileDelete'][0]
    ): Request
    {

        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $key when calling restStorageFrontendFileDelete'
            );
        }


        $resourcePath = '/rest/storage/frontend/file';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $key,
            'key', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restStorageFrontendFileGet
     *
     * Get file information for a single object in frontend storage. Append public cloudfront url to retrieved object.
     *
     * @param  string $key The key of the object to get information about. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageFrontendFileGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object[]
     */
    public function restStorageFrontendFileGet(
        string $key,
        string $contentType = self::contentTypes['restStorageFrontendFileGet'][0]
    ): array
    {
        list($response) = $this->restStorageFrontendFileGetWithHttpInfo($key, $contentType);
        return $response;
    }

    /**
     * Operation restStorageFrontendFileGetWithHttpInfo
     *
     * Get file information for a single object in frontend storage. Append public cloudfront url to retrieved object.
     *
     * @param  string $key The key of the object to get information about. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageFrontendFileGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restStorageFrontendFileGetWithHttpInfo(
        string $key,
        string $contentType = self::contentTypes['restStorageFrontendFileGet'][0]
    ): array
    {
        $request = $this->restStorageFrontendFileGetRequest($key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restStorageFrontendFileGetAsync
     *
     * Get file information for a single object in frontend storage. Append public cloudfront url to retrieved object.
     *
     * @param  string $key The key of the object to get information about. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageFrontendFileGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restStorageFrontendFileGetAsync(
        string $key,
        string $contentType = self::contentTypes['restStorageFrontendFileGet'][0]
    ): PromiseInterface
    {
        return $this->restStorageFrontendFileGetAsyncWithHttpInfo($key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restStorageFrontendFileGetAsyncWithHttpInfo
     *
     * Get file information for a single object in frontend storage. Append public cloudfront url to retrieved object.
     *
     * @param  string $key The key of the object to get information about. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageFrontendFileGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restStorageFrontendFileGetAsyncWithHttpInfo(
        $key,
        string $contentType = self::contentTypes['restStorageFrontendFileGet'][0]
    ): PromiseInterface
    {
        $returnType = 'object[]';
        $request = $this->restStorageFrontendFileGetRequest($key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restStorageFrontendFileGet'
     *
     * @param  string $key The key of the object to get information about. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageFrontendFileGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restStorageFrontendFileGetRequest(
        $key,
        string $contentType = self::contentTypes['restStorageFrontendFileGet'][0]
    ): Request
    {

        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $key when calling restStorageFrontendFileGet'
            );
        }


        $resourcePath = '/rest/storage/frontend/file';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $key,
            'key', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restStorageFrontendFileMetadataGet
     *
     * Get assigend metadata for a single storage object
     *
     * @param  string $key The key of the object to get metadata for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageFrontendFileMetadataGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object[]
     */
    public function restStorageFrontendFileMetadataGet(
        string $key,
        string $contentType = self::contentTypes['restStorageFrontendFileMetadataGet'][0]
    ): array
    {
        list($response) = $this->restStorageFrontendFileMetadataGetWithHttpInfo($key, $contentType);
        return $response;
    }

    /**
     * Operation restStorageFrontendFileMetadataGetWithHttpInfo
     *
     * Get assigend metadata for a single storage object
     *
     * @param  string $key The key of the object to get metadata for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageFrontendFileMetadataGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restStorageFrontendFileMetadataGetWithHttpInfo(
        string $key,
        string $contentType = self::contentTypes['restStorageFrontendFileMetadataGet'][0]
    ): array
    {
        $request = $this->restStorageFrontendFileMetadataGetRequest($key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restStorageFrontendFileMetadataGetAsync
     *
     * Get assigend metadata for a single storage object
     *
     * @param  string $key The key of the object to get metadata for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageFrontendFileMetadataGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restStorageFrontendFileMetadataGetAsync(
        string $key,
        string $contentType = self::contentTypes['restStorageFrontendFileMetadataGet'][0]
    ): PromiseInterface
    {
        return $this->restStorageFrontendFileMetadataGetAsyncWithHttpInfo($key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restStorageFrontendFileMetadataGetAsyncWithHttpInfo
     *
     * Get assigend metadata for a single storage object
     *
     * @param  string $key The key of the object to get metadata for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageFrontendFileMetadataGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restStorageFrontendFileMetadataGetAsyncWithHttpInfo(
        $key,
        string $contentType = self::contentTypes['restStorageFrontendFileMetadataGet'][0]
    ): PromiseInterface
    {
        $returnType = 'object[]';
        $request = $this->restStorageFrontendFileMetadataGetRequest($key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restStorageFrontendFileMetadataGet'
     *
     * @param  string $key The key of the object to get metadata for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageFrontendFileMetadataGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restStorageFrontendFileMetadataGetRequest(
        $key,
        string $contentType = self::contentTypes['restStorageFrontendFileMetadataGet'][0]
    ): Request
    {

        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $key when calling restStorageFrontendFileMetadataGet'
            );
        }


        $resourcePath = '/rest/storage/frontend/file/metadata';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $key,
            'key', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restStorageFrontendFileMetadataPost
     *
     * Update metadata of an storage object
     *
     * @param  string $key The key of the object to update metadata for. (required)
     * @param  int $metadata The metadata to assign to storage object (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageFrontendFileMetadataPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object[]
     */
    public function restStorageFrontendFileMetadataPost(
        string $key,
        int $metadata,
        string $contentType = self::contentTypes['restStorageFrontendFileMetadataPost'][0]
    ): array
    {
        list($response) = $this->restStorageFrontendFileMetadataPostWithHttpInfo($key, $metadata, $contentType);
        return $response;
    }

    /**
     * Operation restStorageFrontendFileMetadataPostWithHttpInfo
     *
     * Update metadata of an storage object
     *
     * @param  string $key The key of the object to update metadata for. (required)
     * @param  int $metadata The metadata to assign to storage object (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageFrontendFileMetadataPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restStorageFrontendFileMetadataPostWithHttpInfo(
        string $key,
        int $metadata,
        string $contentType = self::contentTypes['restStorageFrontendFileMetadataPost'][0]
    ): array
    {
        $request = $this->restStorageFrontendFileMetadataPostRequest($key, $metadata, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restStorageFrontendFileMetadataPostAsync
     *
     * Update metadata of an storage object
     *
     * @param  string $key The key of the object to update metadata for. (required)
     * @param  int $metadata The metadata to assign to storage object (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageFrontendFileMetadataPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restStorageFrontendFileMetadataPostAsync(
        string $key,
        int $metadata,
        string $contentType = self::contentTypes['restStorageFrontendFileMetadataPost'][0]
    ): PromiseInterface
    {
        return $this->restStorageFrontendFileMetadataPostAsyncWithHttpInfo($key, $metadata, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restStorageFrontendFileMetadataPostAsyncWithHttpInfo
     *
     * Update metadata of an storage object
     *
     * @param  string $key The key of the object to update metadata for. (required)
     * @param  int $metadata The metadata to assign to storage object (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageFrontendFileMetadataPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restStorageFrontendFileMetadataPostAsyncWithHttpInfo(
        $key,
        $metadata,
        string $contentType = self::contentTypes['restStorageFrontendFileMetadataPost'][0]
    ): PromiseInterface
    {
        $returnType = 'object[]';
        $request = $this->restStorageFrontendFileMetadataPostRequest($key, $metadata, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restStorageFrontendFileMetadataPost'
     *
     * @param  string $key The key of the object to update metadata for. (required)
     * @param  int $metadata The metadata to assign to storage object (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageFrontendFileMetadataPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restStorageFrontendFileMetadataPostRequest(
        $key,
        $metadata,
        string $contentType = self::contentTypes['restStorageFrontendFileMetadataPost'][0]
    ): Request
    {

        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $key when calling restStorageFrontendFileMetadataPost'
            );
        }

        // verify the required parameter 'metadata' is set
        if ($metadata === null || (is_array($metadata) && count($metadata) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $metadata when calling restStorageFrontendFileMetadataPost'
            );
        }


        $resourcePath = '/rest/storage/frontend/file/metadata';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $key,
            'key', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $metadata,
            'metadata', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restStorageFrontendFilePost
     *
     * Upload a single file to frontend storage.
     *
     * @param  string $key The key for the uploaded object. (required)
     * @param  int|null $max_age Number of seconds until the content of the file expires. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageFrontendFilePost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object[]
     */
    public function restStorageFrontendFilePost(
        string $key,
        ?int $max_age = null,
        string $contentType = self::contentTypes['restStorageFrontendFilePost'][0]
    ): array
    {
        list($response) = $this->restStorageFrontendFilePostWithHttpInfo($key, $max_age, $contentType);
        return $response;
    }

    /**
     * Operation restStorageFrontendFilePostWithHttpInfo
     *
     * Upload a single file to frontend storage.
     *
     * @param  string $key The key for the uploaded object. (required)
     * @param  int|null $max_age Number of seconds until the content of the file expires. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageFrontendFilePost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restStorageFrontendFilePostWithHttpInfo(
        string $key,
        ?int $max_age = null,
        string $contentType = self::contentTypes['restStorageFrontendFilePost'][0]
    ): array
    {
        $request = $this->restStorageFrontendFilePostRequest($key, $max_age, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restStorageFrontendFilePostAsync
     *
     * Upload a single file to frontend storage.
     *
     * @param  string $key The key for the uploaded object. (required)
     * @param  int|null $max_age Number of seconds until the content of the file expires. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageFrontendFilePost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restStorageFrontendFilePostAsync(
        string $key,
        ?int $max_age = null,
        string $contentType = self::contentTypes['restStorageFrontendFilePost'][0]
    ): PromiseInterface
    {
        return $this->restStorageFrontendFilePostAsyncWithHttpInfo($key, $max_age, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restStorageFrontendFilePostAsyncWithHttpInfo
     *
     * Upload a single file to frontend storage.
     *
     * @param  string $key The key for the uploaded object. (required)
     * @param  int|null $max_age Number of seconds until the content of the file expires. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageFrontendFilePost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restStorageFrontendFilePostAsyncWithHttpInfo(
        $key,
        $max_age = null,
        string $contentType = self::contentTypes['restStorageFrontendFilePost'][0]
    ): PromiseInterface
    {
        $returnType = 'object[]';
        $request = $this->restStorageFrontendFilePostRequest($key, $max_age, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restStorageFrontendFilePost'
     *
     * @param  string $key The key for the uploaded object. (required)
     * @param  int|null $max_age Number of seconds until the content of the file expires. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageFrontendFilePost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restStorageFrontendFilePostRequest(
        $key,
        $max_age = null,
        string $contentType = self::contentTypes['restStorageFrontendFilePost'][0]
    ): Request
    {

        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $key when calling restStorageFrontendFilePost'
            );
        }



        $resourcePath = '/rest/storage/frontend/file';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $key,
            'key', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_age,
            'maxAge', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restStorageFrontendFilesDelete
     *
     * Delete files from frontend storage.
     *
     * @param  int $key_list List of storage keys for the files to be deleted. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageFrontendFilesDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object
     */
    public function restStorageFrontendFilesDelete(
        int $key_list,
        string $contentType = self::contentTypes['restStorageFrontendFilesDelete'][0]
    ): object
    {
        list($response) = $this->restStorageFrontendFilesDeleteWithHttpInfo($key_list, $contentType);
        return $response;
    }

    /**
     * Operation restStorageFrontendFilesDeleteWithHttpInfo
     *
     * Delete files from frontend storage.
     *
     * @param  int $key_list List of storage keys for the files to be deleted. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageFrontendFilesDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restStorageFrontendFilesDeleteWithHttpInfo(
        int $key_list,
        string $contentType = self::contentTypes['restStorageFrontendFilesDelete'][0]
    ): array
    {
        $request = $this->restStorageFrontendFilesDeleteRequest($key_list, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restStorageFrontendFilesDeleteAsync
     *
     * Delete files from frontend storage.
     *
     * @param  int $key_list List of storage keys for the files to be deleted. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageFrontendFilesDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restStorageFrontendFilesDeleteAsync(
        int $key_list,
        string $contentType = self::contentTypes['restStorageFrontendFilesDelete'][0]
    ): PromiseInterface
    {
        return $this->restStorageFrontendFilesDeleteAsyncWithHttpInfo($key_list, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restStorageFrontendFilesDeleteAsyncWithHttpInfo
     *
     * Delete files from frontend storage.
     *
     * @param  int $key_list List of storage keys for the files to be deleted. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageFrontendFilesDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restStorageFrontendFilesDeleteAsyncWithHttpInfo(
        $key_list,
        string $contentType = self::contentTypes['restStorageFrontendFilesDelete'][0]
    ): PromiseInterface
    {
        $returnType = 'object';
        $request = $this->restStorageFrontendFilesDeleteRequest($key_list, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restStorageFrontendFilesDelete'
     *
     * @param  int $key_list List of storage keys for the files to be deleted. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageFrontendFilesDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restStorageFrontendFilesDeleteRequest(
        $key_list,
        string $contentType = self::contentTypes['restStorageFrontendFilesDelete'][0]
    ): Request
    {

        // verify the required parameter 'key_list' is set
        if ($key_list === null || (is_array($key_list) && count($key_list) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $key_list when calling restStorageFrontendFilesDelete'
            );
        }


        $resourcePath = '/rest/storage/frontend/files';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $key_list,
            'keyList', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restStorageFrontendFilesGet
     *
     * List files from frontend storage. Append public cloudfront url to each retrieved object.
     *
     * @param  string|null $continuation_token The &lt;code&gt;continuationToken&lt;/code&gt; of a previous request to continue listing objects with. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageFrontendFilesGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object[]
     */
    public function restStorageFrontendFilesGet(
        ?string $continuation_token = null,
        string $contentType = self::contentTypes['restStorageFrontendFilesGet'][0]
    ): array
    {
        list($response) = $this->restStorageFrontendFilesGetWithHttpInfo($continuation_token, $contentType);
        return $response;
    }

    /**
     * Operation restStorageFrontendFilesGetWithHttpInfo
     *
     * List files from frontend storage. Append public cloudfront url to each retrieved object.
     *
     * @param  string|null $continuation_token The &lt;code&gt;continuationToken&lt;/code&gt; of a previous request to continue listing objects with. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageFrontendFilesGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restStorageFrontendFilesGetWithHttpInfo(
        ?string $continuation_token = null,
        string $contentType = self::contentTypes['restStorageFrontendFilesGet'][0]
    ): array
    {
        $request = $this->restStorageFrontendFilesGetRequest($continuation_token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restStorageFrontendFilesGetAsync
     *
     * List files from frontend storage. Append public cloudfront url to each retrieved object.
     *
     * @param  string|null $continuation_token The &lt;code&gt;continuationToken&lt;/code&gt; of a previous request to continue listing objects with. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageFrontendFilesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restStorageFrontendFilesGetAsync(
        ?string $continuation_token = null,
        string $contentType = self::contentTypes['restStorageFrontendFilesGet'][0]
    ): PromiseInterface
    {
        return $this->restStorageFrontendFilesGetAsyncWithHttpInfo($continuation_token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restStorageFrontendFilesGetAsyncWithHttpInfo
     *
     * List files from frontend storage. Append public cloudfront url to each retrieved object.
     *
     * @param  string|null $continuation_token The &lt;code&gt;continuationToken&lt;/code&gt; of a previous request to continue listing objects with. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageFrontendFilesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restStorageFrontendFilesGetAsyncWithHttpInfo(
        $continuation_token = null,
        string $contentType = self::contentTypes['restStorageFrontendFilesGet'][0]
    ): PromiseInterface
    {
        $returnType = 'object[]';
        $request = $this->restStorageFrontendFilesGetRequest($continuation_token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restStorageFrontendFilesGet'
     *
     * @param  string|null $continuation_token The &lt;code&gt;continuationToken&lt;/code&gt; of a previous request to continue listing objects with. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageFrontendFilesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restStorageFrontendFilesGetRequest(
        $continuation_token = null,
        string $contentType = self::contentTypes['restStorageFrontendFilesGet'][0]
    ): Request
    {



        $resourcePath = '/rest/storage/frontend/files';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $continuation_token,
            'continuationToken', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restStorageFrontendObjectUrlGet
     *
     * Get the URL for a layout document
     *
     * @param  string $key The storage key for the frontend document to retrieve the URL for. Include the storage key in the request in a &lt;code&gt;key&lt;/code&gt; field. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageFrontendObjectUrlGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object
     */
    public function restStorageFrontendObjectUrlGet(
        string $key,
        string $contentType = self::contentTypes['restStorageFrontendObjectUrlGet'][0]
    ): object
    {
        list($response) = $this->restStorageFrontendObjectUrlGetWithHttpInfo($key, $contentType);
        return $response;
    }

    /**
     * Operation restStorageFrontendObjectUrlGetWithHttpInfo
     *
     * Get the URL for a layout document
     *
     * @param  string $key The storage key for the frontend document to retrieve the URL for. Include the storage key in the request in a &lt;code&gt;key&lt;/code&gt; field. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageFrontendObjectUrlGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restStorageFrontendObjectUrlGetWithHttpInfo(
        string $key,
        string $contentType = self::contentTypes['restStorageFrontendObjectUrlGet'][0]
    ): array
    {
        $request = $this->restStorageFrontendObjectUrlGetRequest($key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restStorageFrontendObjectUrlGetAsync
     *
     * Get the URL for a layout document
     *
     * @param  string $key The storage key for the frontend document to retrieve the URL for. Include the storage key in the request in a &lt;code&gt;key&lt;/code&gt; field. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageFrontendObjectUrlGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restStorageFrontendObjectUrlGetAsync(
        string $key,
        string $contentType = self::contentTypes['restStorageFrontendObjectUrlGet'][0]
    ): PromiseInterface
    {
        return $this->restStorageFrontendObjectUrlGetAsyncWithHttpInfo($key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restStorageFrontendObjectUrlGetAsyncWithHttpInfo
     *
     * Get the URL for a layout document
     *
     * @param  string $key The storage key for the frontend document to retrieve the URL for. Include the storage key in the request in a &lt;code&gt;key&lt;/code&gt; field. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageFrontendObjectUrlGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restStorageFrontendObjectUrlGetAsyncWithHttpInfo(
        $key,
        string $contentType = self::contentTypes['restStorageFrontendObjectUrlGet'][0]
    ): PromiseInterface
    {
        $returnType = 'object';
        $request = $this->restStorageFrontendObjectUrlGetRequest($key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restStorageFrontendObjectUrlGet'
     *
     * @param  string $key The storage key for the frontend document to retrieve the URL for. Include the storage key in the request in a &lt;code&gt;key&lt;/code&gt; field. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageFrontendObjectUrlGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restStorageFrontendObjectUrlGetRequest(
        $key,
        string $contentType = self::contentTypes['restStorageFrontendObjectUrlGet'][0]
    ): Request
    {

        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $key when calling restStorageFrontendObjectUrlGet'
            );
        }


        $resourcePath = '/rest/storage/frontend/object-url';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $key,
            'key', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restStorageLayoutDelete
     *
     * Delete layout documents
     *
     * @param  int $key_list List of storage keys for the files to be deleted. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageLayoutDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object
     */
    public function restStorageLayoutDelete(
        int $key_list,
        string $contentType = self::contentTypes['restStorageLayoutDelete'][0]
    ): object
    {
        list($response) = $this->restStorageLayoutDeleteWithHttpInfo($key_list, $contentType);
        return $response;
    }

    /**
     * Operation restStorageLayoutDeleteWithHttpInfo
     *
     * Delete layout documents
     *
     * @param  int $key_list List of storage keys for the files to be deleted. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageLayoutDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restStorageLayoutDeleteWithHttpInfo(
        int $key_list,
        string $contentType = self::contentTypes['restStorageLayoutDelete'][0]
    ): array
    {
        $request = $this->restStorageLayoutDeleteRequest($key_list, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restStorageLayoutDeleteAsync
     *
     * Delete layout documents
     *
     * @param  int $key_list List of storage keys for the files to be deleted. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageLayoutDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restStorageLayoutDeleteAsync(
        int $key_list,
        string $contentType = self::contentTypes['restStorageLayoutDelete'][0]
    ): PromiseInterface
    {
        return $this->restStorageLayoutDeleteAsyncWithHttpInfo($key_list, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restStorageLayoutDeleteAsyncWithHttpInfo
     *
     * Delete layout documents
     *
     * @param  int $key_list List of storage keys for the files to be deleted. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageLayoutDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restStorageLayoutDeleteAsyncWithHttpInfo(
        $key_list,
        string $contentType = self::contentTypes['restStorageLayoutDelete'][0]
    ): PromiseInterface
    {
        $returnType = 'object';
        $request = $this->restStorageLayoutDeleteRequest($key_list, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restStorageLayoutDelete'
     *
     * @param  int $key_list List of storage keys for the files to be deleted. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageLayoutDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restStorageLayoutDeleteRequest(
        $key_list,
        string $contentType = self::contentTypes['restStorageLayoutDelete'][0]
    ): Request
    {

        // verify the required parameter 'key_list' is set
        if ($key_list === null || (is_array($key_list) && count($key_list) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $key_list when calling restStorageLayoutDelete'
            );
        }


        $resourcePath = '/rest/storage/layout';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $key_list,
            'keyList', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restStorageLayoutListGet
     *
     * List layout documents
     *
     * @param  string|null $continuation_token Token for listing the next (up to) 1000 layout documents. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageLayoutListGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck/plenty-client\Model\StorageObjectList
     */
    public function restStorageLayoutListGet(
        ?string $continuation_token = null,
        string $contentType = self::contentTypes['restStorageLayoutListGet'][0]
    ): \ck/plenty-client\Model\StorageObjectList
    {
        list($response) = $this->restStorageLayoutListGetWithHttpInfo($continuation_token, $contentType);
        return $response;
    }

    /**
     * Operation restStorageLayoutListGetWithHttpInfo
     *
     * List layout documents
     *
     * @param  string|null $continuation_token Token for listing the next (up to) 1000 layout documents. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageLayoutListGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck/plenty-client\Model\StorageObjectList, HTTP status code, HTTP response headers (array of strings)
     */
    public function restStorageLayoutListGetWithHttpInfo(
        ?string $continuation_token = null,
        string $contentType = self::contentTypes['restStorageLayoutListGet'][0]
    ): array
    {
        $request = $this->restStorageLayoutListGetRequest($continuation_token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck/plenty-client\Model\StorageObjectList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck/plenty-client\Model\StorageObjectList' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck/plenty-client\Model\StorageObjectList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck/plenty-client\Model\StorageObjectList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck/plenty-client\Model\StorageObjectList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restStorageLayoutListGetAsync
     *
     * List layout documents
     *
     * @param  string|null $continuation_token Token for listing the next (up to) 1000 layout documents. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageLayoutListGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restStorageLayoutListGetAsync(
        ?string $continuation_token = null,
        string $contentType = self::contentTypes['restStorageLayoutListGet'][0]
    ): PromiseInterface
    {
        return $this->restStorageLayoutListGetAsyncWithHttpInfo($continuation_token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restStorageLayoutListGetAsyncWithHttpInfo
     *
     * List layout documents
     *
     * @param  string|null $continuation_token Token for listing the next (up to) 1000 layout documents. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageLayoutListGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restStorageLayoutListGetAsyncWithHttpInfo(
        $continuation_token = null,
        string $contentType = self::contentTypes['restStorageLayoutListGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck/plenty-client\Model\StorageObjectList';
        $request = $this->restStorageLayoutListGetRequest($continuation_token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restStorageLayoutListGet'
     *
     * @param  string|null $continuation_token Token for listing the next (up to) 1000 layout documents. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageLayoutListGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restStorageLayoutListGetRequest(
        $continuation_token = null,
        string $contentType = self::contentTypes['restStorageLayoutListGet'][0]
    ): Request
    {



        $resourcePath = '/rest/storage/layout/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $continuation_token,
            'continuationToken', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restStorageLayoutObjectUrlGet
     *
     * Get the URL for a layout document
     *
     * @param  string $key The storage key for the layout document to retrieve the URL for. Include the storage key in the request in a &lt;code&gt;key&lt;/code&gt; field. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageLayoutObjectUrlGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object
     */
    public function restStorageLayoutObjectUrlGet(
        string $key,
        string $contentType = self::contentTypes['restStorageLayoutObjectUrlGet'][0]
    ): object
    {
        list($response) = $this->restStorageLayoutObjectUrlGetWithHttpInfo($key, $contentType);
        return $response;
    }

    /**
     * Operation restStorageLayoutObjectUrlGetWithHttpInfo
     *
     * Get the URL for a layout document
     *
     * @param  string $key The storage key for the layout document to retrieve the URL for. Include the storage key in the request in a &lt;code&gt;key&lt;/code&gt; field. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageLayoutObjectUrlGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restStorageLayoutObjectUrlGetWithHttpInfo(
        string $key,
        string $contentType = self::contentTypes['restStorageLayoutObjectUrlGet'][0]
    ): array
    {
        $request = $this->restStorageLayoutObjectUrlGetRequest($key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restStorageLayoutObjectUrlGetAsync
     *
     * Get the URL for a layout document
     *
     * @param  string $key The storage key for the layout document to retrieve the URL for. Include the storage key in the request in a &lt;code&gt;key&lt;/code&gt; field. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageLayoutObjectUrlGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restStorageLayoutObjectUrlGetAsync(
        string $key,
        string $contentType = self::contentTypes['restStorageLayoutObjectUrlGet'][0]
    ): PromiseInterface
    {
        return $this->restStorageLayoutObjectUrlGetAsyncWithHttpInfo($key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restStorageLayoutObjectUrlGetAsyncWithHttpInfo
     *
     * Get the URL for a layout document
     *
     * @param  string $key The storage key for the layout document to retrieve the URL for. Include the storage key in the request in a &lt;code&gt;key&lt;/code&gt; field. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageLayoutObjectUrlGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restStorageLayoutObjectUrlGetAsyncWithHttpInfo(
        $key,
        string $contentType = self::contentTypes['restStorageLayoutObjectUrlGet'][0]
    ): PromiseInterface
    {
        $returnType = 'object';
        $request = $this->restStorageLayoutObjectUrlGetRequest($key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restStorageLayoutObjectUrlGet'
     *
     * @param  string $key The storage key for the layout document to retrieve the URL for. Include the storage key in the request in a &lt;code&gt;key&lt;/code&gt; field. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageLayoutObjectUrlGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restStorageLayoutObjectUrlGetRequest(
        $key,
        string $contentType = self::contentTypes['restStorageLayoutObjectUrlGet'][0]
    ): Request
    {

        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $key when calling restStorageLayoutObjectUrlGet'
            );
        }


        $resourcePath = '/rest/storage/layout/object-url';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $key,
            'key', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restStorageLayoutPost
     *
     * Upload a layout document
     *
     * @param  string $key The storage key for the layout document to upload. Include the storage key (i.e. file path) in the request in a &lt;code&gt;key&lt;/code&gt; field. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageLayoutPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck/plenty-client\Model\StorageObject
     */
    public function restStorageLayoutPost(
        string $key,
        string $contentType = self::contentTypes['restStorageLayoutPost'][0]
    ): \ck/plenty-client\Model\StorageObject
    {
        list($response) = $this->restStorageLayoutPostWithHttpInfo($key, $contentType);
        return $response;
    }

    /**
     * Operation restStorageLayoutPostWithHttpInfo
     *
     * Upload a layout document
     *
     * @param  string $key The storage key for the layout document to upload. Include the storage key (i.e. file path) in the request in a &lt;code&gt;key&lt;/code&gt; field. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageLayoutPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck/plenty-client\Model\StorageObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function restStorageLayoutPostWithHttpInfo(
        string $key,
        string $contentType = self::contentTypes['restStorageLayoutPost'][0]
    ): array
    {
        $request = $this->restStorageLayoutPostRequest($key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck/plenty-client\Model\StorageObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck/plenty-client\Model\StorageObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck/plenty-client\Model\StorageObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck/plenty-client\Model\StorageObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck/plenty-client\Model\StorageObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restStorageLayoutPostAsync
     *
     * Upload a layout document
     *
     * @param  string $key The storage key for the layout document to upload. Include the storage key (i.e. file path) in the request in a &lt;code&gt;key&lt;/code&gt; field. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageLayoutPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restStorageLayoutPostAsync(
        string $key,
        string $contentType = self::contentTypes['restStorageLayoutPost'][0]
    ): PromiseInterface
    {
        return $this->restStorageLayoutPostAsyncWithHttpInfo($key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restStorageLayoutPostAsyncWithHttpInfo
     *
     * Upload a layout document
     *
     * @param  string $key The storage key for the layout document to upload. Include the storage key (i.e. file path) in the request in a &lt;code&gt;key&lt;/code&gt; field. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageLayoutPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restStorageLayoutPostAsyncWithHttpInfo(
        $key,
        string $contentType = self::contentTypes['restStorageLayoutPost'][0]
    ): PromiseInterface
    {
        $returnType = '\ck/plenty-client\Model\StorageObject';
        $request = $this->restStorageLayoutPostRequest($key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restStorageLayoutPost'
     *
     * @param  string $key The storage key for the layout document to upload. Include the storage key (i.e. file path) in the request in a &lt;code&gt;key&lt;/code&gt; field. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageLayoutPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restStorageLayoutPostRequest(
        $key,
        string $contentType = self::contentTypes['restStorageLayoutPost'][0]
    ): Request
    {

        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $key when calling restStorageLayoutPost'
            );
        }


        $resourcePath = '/rest/storage/layout';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $key,
            'key', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restStorageOrderPropertiesObjectUrlGet
     *
     * Get the URL for a order property file
     *
     * @param  string $key The storage key for the order property      *                        file to retrieve the URL for. Include the storage key in the request in a      *                        &lt;code&gt;key&lt;/code&gt; field. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageOrderPropertiesObjectUrlGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object
     */
    public function restStorageOrderPropertiesObjectUrlGet(
        string $key,
        string $contentType = self::contentTypes['restStorageOrderPropertiesObjectUrlGet'][0]
    ): object
    {
        list($response) = $this->restStorageOrderPropertiesObjectUrlGetWithHttpInfo($key, $contentType);
        return $response;
    }

    /**
     * Operation restStorageOrderPropertiesObjectUrlGetWithHttpInfo
     *
     * Get the URL for a order property file
     *
     * @param  string $key The storage key for the order property      *                        file to retrieve the URL for. Include the storage key in the request in a      *                        &lt;code&gt;key&lt;/code&gt; field. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageOrderPropertiesObjectUrlGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restStorageOrderPropertiesObjectUrlGetWithHttpInfo(
        string $key,
        string $contentType = self::contentTypes['restStorageOrderPropertiesObjectUrlGet'][0]
    ): array
    {
        $request = $this->restStorageOrderPropertiesObjectUrlGetRequest($key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restStorageOrderPropertiesObjectUrlGetAsync
     *
     * Get the URL for a order property file
     *
     * @param  string $key The storage key for the order property      *                        file to retrieve the URL for. Include the storage key in the request in a      *                        &lt;code&gt;key&lt;/code&gt; field. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageOrderPropertiesObjectUrlGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restStorageOrderPropertiesObjectUrlGetAsync(
        string $key,
        string $contentType = self::contentTypes['restStorageOrderPropertiesObjectUrlGet'][0]
    ): PromiseInterface
    {
        return $this->restStorageOrderPropertiesObjectUrlGetAsyncWithHttpInfo($key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restStorageOrderPropertiesObjectUrlGetAsyncWithHttpInfo
     *
     * Get the URL for a order property file
     *
     * @param  string $key The storage key for the order property      *                        file to retrieve the URL for. Include the storage key in the request in a      *                        &lt;code&gt;key&lt;/code&gt; field. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageOrderPropertiesObjectUrlGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restStorageOrderPropertiesObjectUrlGetAsyncWithHttpInfo(
        $key,
        string $contentType = self::contentTypes['restStorageOrderPropertiesObjectUrlGet'][0]
    ): PromiseInterface
    {
        $returnType = 'object';
        $request = $this->restStorageOrderPropertiesObjectUrlGetRequest($key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restStorageOrderPropertiesObjectUrlGet'
     *
     * @param  string $key The storage key for the order property      *                        file to retrieve the URL for. Include the storage key in the request in a      *                        &lt;code&gt;key&lt;/code&gt; field. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStorageOrderPropertiesObjectUrlGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restStorageOrderPropertiesObjectUrlGetRequest(
        $key,
        string $contentType = self::contentTypes['restStorageOrderPropertiesObjectUrlGet'][0]
    ): Request
    {

        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $key when calling restStorageOrderPropertiesObjectUrlGet'
            );
        }


        $resourcePath = '/rest/storage/order-properties/object-url';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $key,
            'key', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restStoragePluginsInboxCommitPost
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStoragePluginsInboxCommitPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object[]
     */
    public function restStoragePluginsInboxCommitPost(
        string $contentType = self::contentTypes['restStoragePluginsInboxCommitPost'][0]
    ): array
    {
        list($response) = $this->restStoragePluginsInboxCommitPostWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation restStoragePluginsInboxCommitPostWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStoragePluginsInboxCommitPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restStoragePluginsInboxCommitPostWithHttpInfo(
        string $contentType = self::contentTypes['restStoragePluginsInboxCommitPost'][0]
    ): array
    {
        $request = $this->restStoragePluginsInboxCommitPostRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restStoragePluginsInboxCommitPostAsync
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStoragePluginsInboxCommitPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restStoragePluginsInboxCommitPostAsync(
        string $contentType = self::contentTypes['restStoragePluginsInboxCommitPost'][0]
    ): PromiseInterface
    {
        return $this->restStoragePluginsInboxCommitPostAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restStoragePluginsInboxCommitPostAsyncWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStoragePluginsInboxCommitPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restStoragePluginsInboxCommitPostAsyncWithHttpInfo(
        string $contentType = self::contentTypes['restStoragePluginsInboxCommitPost'][0]
    ): PromiseInterface
    {
        $returnType = 'object[]';
        $request = $this->restStoragePluginsInboxCommitPostRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restStoragePluginsInboxCommitPost'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStoragePluginsInboxCommitPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restStoragePluginsInboxCommitPostRequest(
        string $contentType = self::contentTypes['restStoragePluginsInboxCommitPost'][0]
    ): Request
    {


        $resourcePath = '/rest/storage/plugins/inbox/commit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restStoragePluginsInboxDelete
     *
     * Delete files from the inbox
     *
     * @param  int $key_list List of storage keys for the files to be deleted. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStoragePluginsInboxDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object
     */
    public function restStoragePluginsInboxDelete(
        int $key_list,
        string $contentType = self::contentTypes['restStoragePluginsInboxDelete'][0]
    ): object
    {
        list($response) = $this->restStoragePluginsInboxDeleteWithHttpInfo($key_list, $contentType);
        return $response;
    }

    /**
     * Operation restStoragePluginsInboxDeleteWithHttpInfo
     *
     * Delete files from the inbox
     *
     * @param  int $key_list List of storage keys for the files to be deleted. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStoragePluginsInboxDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restStoragePluginsInboxDeleteWithHttpInfo(
        int $key_list,
        string $contentType = self::contentTypes['restStoragePluginsInboxDelete'][0]
    ): array
    {
        $request = $this->restStoragePluginsInboxDeleteRequest($key_list, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restStoragePluginsInboxDeleteAsync
     *
     * Delete files from the inbox
     *
     * @param  int $key_list List of storage keys for the files to be deleted. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStoragePluginsInboxDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restStoragePluginsInboxDeleteAsync(
        int $key_list,
        string $contentType = self::contentTypes['restStoragePluginsInboxDelete'][0]
    ): PromiseInterface
    {
        return $this->restStoragePluginsInboxDeleteAsyncWithHttpInfo($key_list, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restStoragePluginsInboxDeleteAsyncWithHttpInfo
     *
     * Delete files from the inbox
     *
     * @param  int $key_list List of storage keys for the files to be deleted. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStoragePluginsInboxDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restStoragePluginsInboxDeleteAsyncWithHttpInfo(
        $key_list,
        string $contentType = self::contentTypes['restStoragePluginsInboxDelete'][0]
    ): PromiseInterface
    {
        $returnType = 'object';
        $request = $this->restStoragePluginsInboxDeleteRequest($key_list, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restStoragePluginsInboxDelete'
     *
     * @param  int $key_list List of storage keys for the files to be deleted. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStoragePluginsInboxDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restStoragePluginsInboxDeleteRequest(
        $key_list,
        string $contentType = self::contentTypes['restStoragePluginsInboxDelete'][0]
    ): Request
    {

        // verify the required parameter 'key_list' is set
        if ($key_list === null || (is_array($key_list) && count($key_list) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $key_list when calling restStoragePluginsInboxDelete'
            );
        }


        $resourcePath = '/rest/storage/plugins/inbox';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $key_list,
            'keyList', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restStoragePluginsInboxListGet
     *
     * List files from the inbox
     *
     * @param  string|null $prefix Prefix to list all files of a specific plugin folder only. The prefix also means the plugin path. The &lt;code&gt;prefix&lt;/code&gt; key with the value &lt;code&gt;PluginA/src/&lt;/code&gt; will only return files in the &lt;b&gt;src&lt;/b&gt; folder of &lt;b&gt;PluginA&lt;/b&gt;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStoragePluginsInboxListGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck/plenty-client\Model\StorageObjectList
     */
    public function restStoragePluginsInboxListGet(
        ?string $prefix = null,
        string $contentType = self::contentTypes['restStoragePluginsInboxListGet'][0]
    ): \ck/plenty-client\Model\StorageObjectList
    {
        list($response) = $this->restStoragePluginsInboxListGetWithHttpInfo($prefix, $contentType);
        return $response;
    }

    /**
     * Operation restStoragePluginsInboxListGetWithHttpInfo
     *
     * List files from the inbox
     *
     * @param  string|null $prefix Prefix to list all files of a specific plugin folder only. The prefix also means the plugin path. The &lt;code&gt;prefix&lt;/code&gt; key with the value &lt;code&gt;PluginA/src/&lt;/code&gt; will only return files in the &lt;b&gt;src&lt;/b&gt; folder of &lt;b&gt;PluginA&lt;/b&gt;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStoragePluginsInboxListGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck/plenty-client\Model\StorageObjectList, HTTP status code, HTTP response headers (array of strings)
     */
    public function restStoragePluginsInboxListGetWithHttpInfo(
        ?string $prefix = null,
        string $contentType = self::contentTypes['restStoragePluginsInboxListGet'][0]
    ): array
    {
        $request = $this->restStoragePluginsInboxListGetRequest($prefix, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck/plenty-client\Model\StorageObjectList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck/plenty-client\Model\StorageObjectList' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck/plenty-client\Model\StorageObjectList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck/plenty-client\Model\StorageObjectList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck/plenty-client\Model\StorageObjectList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restStoragePluginsInboxListGetAsync
     *
     * List files from the inbox
     *
     * @param  string|null $prefix Prefix to list all files of a specific plugin folder only. The prefix also means the plugin path. The &lt;code&gt;prefix&lt;/code&gt; key with the value &lt;code&gt;PluginA/src/&lt;/code&gt; will only return files in the &lt;b&gt;src&lt;/b&gt; folder of &lt;b&gt;PluginA&lt;/b&gt;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStoragePluginsInboxListGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restStoragePluginsInboxListGetAsync(
        ?string $prefix = null,
        string $contentType = self::contentTypes['restStoragePluginsInboxListGet'][0]
    ): PromiseInterface
    {
        return $this->restStoragePluginsInboxListGetAsyncWithHttpInfo($prefix, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restStoragePluginsInboxListGetAsyncWithHttpInfo
     *
     * List files from the inbox
     *
     * @param  string|null $prefix Prefix to list all files of a specific plugin folder only. The prefix also means the plugin path. The &lt;code&gt;prefix&lt;/code&gt; key with the value &lt;code&gt;PluginA/src/&lt;/code&gt; will only return files in the &lt;b&gt;src&lt;/b&gt; folder of &lt;b&gt;PluginA&lt;/b&gt;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStoragePluginsInboxListGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restStoragePluginsInboxListGetAsyncWithHttpInfo(
        $prefix = null,
        string $contentType = self::contentTypes['restStoragePluginsInboxListGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck/plenty-client\Model\StorageObjectList';
        $request = $this->restStoragePluginsInboxListGetRequest($prefix, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restStoragePluginsInboxListGet'
     *
     * @param  string|null $prefix Prefix to list all files of a specific plugin folder only. The prefix also means the plugin path. The &lt;code&gt;prefix&lt;/code&gt; key with the value &lt;code&gt;PluginA/src/&lt;/code&gt; will only return files in the &lt;b&gt;src&lt;/b&gt; folder of &lt;b&gt;PluginA&lt;/b&gt;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStoragePluginsInboxListGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restStoragePluginsInboxListGetRequest(
        $prefix = null,
        string $contentType = self::contentTypes['restStoragePluginsInboxListGet'][0]
    ): Request
    {



        $resourcePath = '/rest/storage/plugins/inbox/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $prefix,
            'prefix', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restStoragePluginsInboxObjectUrlGet
     *
     * Get the content of a file from the inbox
     *
     * @param  string|null $key The storage key for the file to retrieve. Include the storage key in the request in a &lt;code&gt;key&lt;/code&gt; field. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStoragePluginsInboxObjectUrlGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object
     */
    public function restStoragePluginsInboxObjectUrlGet(
        ?string $key = null,
        string $contentType = self::contentTypes['restStoragePluginsInboxObjectUrlGet'][0]
    ): object
    {
        list($response) = $this->restStoragePluginsInboxObjectUrlGetWithHttpInfo($key, $contentType);
        return $response;
    }

    /**
     * Operation restStoragePluginsInboxObjectUrlGetWithHttpInfo
     *
     * Get the content of a file from the inbox
     *
     * @param  string|null $key The storage key for the file to retrieve. Include the storage key in the request in a &lt;code&gt;key&lt;/code&gt; field. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStoragePluginsInboxObjectUrlGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restStoragePluginsInboxObjectUrlGetWithHttpInfo(
        ?string $key = null,
        string $contentType = self::contentTypes['restStoragePluginsInboxObjectUrlGet'][0]
    ): array
    {
        $request = $this->restStoragePluginsInboxObjectUrlGetRequest($key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restStoragePluginsInboxObjectUrlGetAsync
     *
     * Get the content of a file from the inbox
     *
     * @param  string|null $key The storage key for the file to retrieve. Include the storage key in the request in a &lt;code&gt;key&lt;/code&gt; field. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStoragePluginsInboxObjectUrlGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restStoragePluginsInboxObjectUrlGetAsync(
        ?string $key = null,
        string $contentType = self::contentTypes['restStoragePluginsInboxObjectUrlGet'][0]
    ): PromiseInterface
    {
        return $this->restStoragePluginsInboxObjectUrlGetAsyncWithHttpInfo($key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restStoragePluginsInboxObjectUrlGetAsyncWithHttpInfo
     *
     * Get the content of a file from the inbox
     *
     * @param  string|null $key The storage key for the file to retrieve. Include the storage key in the request in a &lt;code&gt;key&lt;/code&gt; field. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStoragePluginsInboxObjectUrlGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restStoragePluginsInboxObjectUrlGetAsyncWithHttpInfo(
        $key = null,
        string $contentType = self::contentTypes['restStoragePluginsInboxObjectUrlGet'][0]
    ): PromiseInterface
    {
        $returnType = 'object';
        $request = $this->restStoragePluginsInboxObjectUrlGetRequest($key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restStoragePluginsInboxObjectUrlGet'
     *
     * @param  string|null $key The storage key for the file to retrieve. Include the storage key in the request in a &lt;code&gt;key&lt;/code&gt; field. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStoragePluginsInboxObjectUrlGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restStoragePluginsInboxObjectUrlGetRequest(
        $key = null,
        string $contentType = self::contentTypes['restStoragePluginsInboxObjectUrlGet'][0]
    ): Request
    {



        $resourcePath = '/rest/storage/plugins/inbox/object-url';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $key,
            'key', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restStoragePluginsInboxPost
     *
     * Upload a file to the inbox
     *
     * @param  string $key The storage key for the file to upload. Include the storage key in the request in a &lt;code&gt;key&lt;/code&gt; field. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStoragePluginsInboxPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck/plenty-client\Model\StorageObject
     */
    public function restStoragePluginsInboxPost(
        string $key,
        string $contentType = self::contentTypes['restStoragePluginsInboxPost'][0]
    ): \ck/plenty-client\Model\StorageObject
    {
        list($response) = $this->restStoragePluginsInboxPostWithHttpInfo($key, $contentType);
        return $response;
    }

    /**
     * Operation restStoragePluginsInboxPostWithHttpInfo
     *
     * Upload a file to the inbox
     *
     * @param  string $key The storage key for the file to upload. Include the storage key in the request in a &lt;code&gt;key&lt;/code&gt; field. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStoragePluginsInboxPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck/plenty-client\Model\StorageObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function restStoragePluginsInboxPostWithHttpInfo(
        string $key,
        string $contentType = self::contentTypes['restStoragePluginsInboxPost'][0]
    ): array
    {
        $request = $this->restStoragePluginsInboxPostRequest($key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck/plenty-client\Model\StorageObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck/plenty-client\Model\StorageObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck/plenty-client\Model\StorageObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck/plenty-client\Model\StorageObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck/plenty-client\Model\StorageObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restStoragePluginsInboxPostAsync
     *
     * Upload a file to the inbox
     *
     * @param  string $key The storage key for the file to upload. Include the storage key in the request in a &lt;code&gt;key&lt;/code&gt; field. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStoragePluginsInboxPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restStoragePluginsInboxPostAsync(
        string $key,
        string $contentType = self::contentTypes['restStoragePluginsInboxPost'][0]
    ): PromiseInterface
    {
        return $this->restStoragePluginsInboxPostAsyncWithHttpInfo($key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restStoragePluginsInboxPostAsyncWithHttpInfo
     *
     * Upload a file to the inbox
     *
     * @param  string $key The storage key for the file to upload. Include the storage key in the request in a &lt;code&gt;key&lt;/code&gt; field. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStoragePluginsInboxPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restStoragePluginsInboxPostAsyncWithHttpInfo(
        $key,
        string $contentType = self::contentTypes['restStoragePluginsInboxPost'][0]
    ): PromiseInterface
    {
        $returnType = '\ck/plenty-client\Model\StorageObject';
        $request = $this->restStoragePluginsInboxPostRequest($key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restStoragePluginsInboxPost'
     *
     * @param  string $key The storage key for the file to upload. Include the storage key in the request in a &lt;code&gt;key&lt;/code&gt; field. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restStoragePluginsInboxPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restStoragePluginsInboxPostRequest(
        $key,
        string $contentType = self::contentTypes['restStoragePluginsInboxPost'][0]
    ): Request
    {

        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $key when calling restStoragePluginsInboxPost'
            );
        }


        $resourcePath = '/rest/storage/plugins/inbox';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $key,
            'key', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restSystemCloudMetricsGet
     *
     * Get the cloud metrics for this system
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restSystemCloudMetricsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck/plenty-client\Model\CloudMetricsList
     */
    public function restSystemCloudMetricsGet(
        string $contentType = self::contentTypes['restSystemCloudMetricsGet'][0]
    ): \ck/plenty-client\Model\CloudMetricsList
    {
        list($response) = $this->restSystemCloudMetricsGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation restSystemCloudMetricsGetWithHttpInfo
     *
     * Get the cloud metrics for this system
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restSystemCloudMetricsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck/plenty-client\Model\CloudMetricsList, HTTP status code, HTTP response headers (array of strings)
     */
    public function restSystemCloudMetricsGetWithHttpInfo(
        string $contentType = self::contentTypes['restSystemCloudMetricsGet'][0]
    ): array
    {
        $request = $this->restSystemCloudMetricsGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck/plenty-client\Model\CloudMetricsList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck/plenty-client\Model\CloudMetricsList' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck/plenty-client\Model\CloudMetricsList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck/plenty-client\Model\CloudMetricsList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck/plenty-client\Model\CloudMetricsList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restSystemCloudMetricsGetAsync
     *
     * Get the cloud metrics for this system
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restSystemCloudMetricsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restSystemCloudMetricsGetAsync(
        string $contentType = self::contentTypes['restSystemCloudMetricsGet'][0]
    ): PromiseInterface
    {
        return $this->restSystemCloudMetricsGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restSystemCloudMetricsGetAsyncWithHttpInfo
     *
     * Get the cloud metrics for this system
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restSystemCloudMetricsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restSystemCloudMetricsGetAsyncWithHttpInfo(
        string $contentType = self::contentTypes['restSystemCloudMetricsGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck/plenty-client\Model\CloudMetricsList';
        $request = $this->restSystemCloudMetricsGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restSystemCloudMetricsGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restSystemCloudMetricsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restSystemCloudMetricsGetRequest(
        string $contentType = self::contentTypes['restSystemCloudMetricsGet'][0]
    ): Request
    {


        $resourcePath = '/rest/system/cloud/metrics';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restSystemMetricsPlentyIdDateGet
     *
     * Supply usage data for given plentymarkets system
     *
     * @param  int $plenty_id plenty_id (required)
     * @param  int $date date (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restSystemMetricsPlentyIdDateGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object
     */
    public function restSystemMetricsPlentyIdDateGet(
        int $plenty_id,
        int $date,
        string $contentType = self::contentTypes['restSystemMetricsPlentyIdDateGet'][0]
    ): object
    {
        list($response) = $this->restSystemMetricsPlentyIdDateGetWithHttpInfo($plenty_id, $date, $contentType);
        return $response;
    }

    /**
     * Operation restSystemMetricsPlentyIdDateGetWithHttpInfo
     *
     * Supply usage data for given plentymarkets system
     *
     * @param  int $plenty_id (required)
     * @param  int $date (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restSystemMetricsPlentyIdDateGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restSystemMetricsPlentyIdDateGetWithHttpInfo(
        int $plenty_id,
        int $date,
        string $contentType = self::contentTypes['restSystemMetricsPlentyIdDateGet'][0]
    ): array
    {
        $request = $this->restSystemMetricsPlentyIdDateGetRequest($plenty_id, $date, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restSystemMetricsPlentyIdDateGetAsync
     *
     * Supply usage data for given plentymarkets system
     *
     * @param  int $plenty_id (required)
     * @param  int $date (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restSystemMetricsPlentyIdDateGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restSystemMetricsPlentyIdDateGetAsync(
        int $plenty_id,
        int $date,
        string $contentType = self::contentTypes['restSystemMetricsPlentyIdDateGet'][0]
    ): PromiseInterface
    {
        return $this->restSystemMetricsPlentyIdDateGetAsyncWithHttpInfo($plenty_id, $date, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restSystemMetricsPlentyIdDateGetAsyncWithHttpInfo
     *
     * Supply usage data for given plentymarkets system
     *
     * @param  int $plenty_id (required)
     * @param  int $date (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restSystemMetricsPlentyIdDateGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restSystemMetricsPlentyIdDateGetAsyncWithHttpInfo(
        $plenty_id,
        $date,
        string $contentType = self::contentTypes['restSystemMetricsPlentyIdDateGet'][0]
    ): PromiseInterface
    {
        $returnType = 'object';
        $request = $this->restSystemMetricsPlentyIdDateGetRequest($plenty_id, $date, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restSystemMetricsPlentyIdDateGet'
     *
     * @param  int $plenty_id (required)
     * @param  int $date (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restSystemMetricsPlentyIdDateGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restSystemMetricsPlentyIdDateGetRequest(
        $plenty_id,
        $date,
        string $contentType = self::contentTypes['restSystemMetricsPlentyIdDateGet'][0]
    ): Request
    {

        // verify the required parameter 'plenty_id' is set
        if ($plenty_id === null || (is_array($plenty_id) && count($plenty_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $plenty_id when calling restSystemMetricsPlentyIdDateGet'
            );
        }

        // verify the required parameter 'date' is set
        if ($date === null || (is_array($date) && count($date) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $date when calling restSystemMetricsPlentyIdDateGet'
            );
        }


        $resourcePath = '/rest/system/metrics/{plentyId}/{date}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($plenty_id !== null) {
            $resourcePath = str_replace(
                '{' . 'plentyId' . '}',
                ObjectSerializer::toPathValue($plenty_id),
                $resourcePath
            );
        }
        // path params
        if ($date !== null) {
            $resourcePath = str_replace(
                '{' . 'date' . '}',
                ObjectSerializer::toPathValue($date),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
