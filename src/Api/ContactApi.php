<?php
/**
 * ContactApi
 * PHP version 8.1
 *
 * @package  ck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ck\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use ck\ApiException;
use ck\Configuration;
use ck\HeaderSelector;
use ck\ObjectSerializer;

/**
 * ContactApi Class Doc Comment
 *
 * @package  ck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ContactApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'restAccountsContactsContactIdDocumentGet' => [
            'application/json',
        ],
        'restAccountsContactsContactIdDocumentPost' => [
            'application/json',
        ],
        'restAccountsContactsContactIdDocumentUrlGet' => [
            'application/json',
        ],
        'restAccountsContactsContactIdDocumentsDelete' => [
            'application/json',
        ],
        'restAccountsContactsContactIdDocumentsGet' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation restAccountsContactsContactIdDocumentGet
     *
     * Get storage object from contact documents
     *
     * @param  string $key The storage key of the object to get from contact documents. (required)
     * @param  int $contact_id The ID of the contact (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsContactsContactIdDocumentGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\StorageObject
     */
    public function restAccountsContactsContactIdDocumentGet(
        string $key,
        int $contact_id,
        string $contentType = self::contentTypes['restAccountsContactsContactIdDocumentGet'][0]
    ): \ck\Model\StorageObject
    {
        list($response) = $this->restAccountsContactsContactIdDocumentGetWithHttpInfo($key, $contact_id, $contentType);
        return $response;
    }

    /**
     * Operation restAccountsContactsContactIdDocumentGetWithHttpInfo
     *
     * Get storage object from contact documents
     *
     * @param  string $key The storage key of the object to get from contact documents. (required)
     * @param  int $contact_id The ID of the contact (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsContactsContactIdDocumentGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\StorageObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function restAccountsContactsContactIdDocumentGetWithHttpInfo(
        string $key,
        int $contact_id,
        string $contentType = self::contentTypes['restAccountsContactsContactIdDocumentGet'][0]
    ): array
    {
        $request = $this->restAccountsContactsContactIdDocumentGetRequest($key, $contact_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\StorageObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\StorageObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\StorageObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\StorageObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\StorageObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restAccountsContactsContactIdDocumentGetAsync
     *
     * Get storage object from contact documents
     *
     * @param  string $key The storage key of the object to get from contact documents. (required)
     * @param  int $contact_id The ID of the contact (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsContactsContactIdDocumentGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restAccountsContactsContactIdDocumentGetAsync(
        string $key,
        int $contact_id,
        string $contentType = self::contentTypes['restAccountsContactsContactIdDocumentGet'][0]
    ): PromiseInterface
    {
        return $this->restAccountsContactsContactIdDocumentGetAsyncWithHttpInfo($key, $contact_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restAccountsContactsContactIdDocumentGetAsyncWithHttpInfo
     *
     * Get storage object from contact documents
     *
     * @param  string $key The storage key of the object to get from contact documents. (required)
     * @param  int $contact_id The ID of the contact (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsContactsContactIdDocumentGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restAccountsContactsContactIdDocumentGetAsyncWithHttpInfo(
        $key,
        $contact_id,
        string $contentType = self::contentTypes['restAccountsContactsContactIdDocumentGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\StorageObject';
        $request = $this->restAccountsContactsContactIdDocumentGetRequest($key, $contact_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restAccountsContactsContactIdDocumentGet'
     *
     * @param  string $key The storage key of the object to get from contact documents. (required)
     * @param  int $contact_id The ID of the contact (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsContactsContactIdDocumentGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restAccountsContactsContactIdDocumentGetRequest(
        $key,
        $contact_id,
        string $contentType = self::contentTypes['restAccountsContactsContactIdDocumentGet'][0]
    ): Request
    {

        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $key when calling restAccountsContactsContactIdDocumentGet'
            );
        }

        // verify the required parameter 'contact_id' is set
        if ($contact_id === null || (is_array($contact_id) && count($contact_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $contact_id when calling restAccountsContactsContactIdDocumentGet'
            );
        }


        $resourcePath = '/rest/accounts/contacts/{contactId}/document';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $key,
            'key', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($contact_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contactId' . '}',
                ObjectSerializer::toPathValue($contact_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restAccountsContactsContactIdDocumentPost
     *
     * Upload document to contact directory
     *
     * @param  string $key The storage key for the file to upload (required)
     * @param  int $contact_id The ID of the contact (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsContactsContactIdDocumentPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\StorageObject
     */
    public function restAccountsContactsContactIdDocumentPost(
        string $key,
        int $contact_id,
        string $contentType = self::contentTypes['restAccountsContactsContactIdDocumentPost'][0]
    ): \ck\Model\StorageObject
    {
        list($response) = $this->restAccountsContactsContactIdDocumentPostWithHttpInfo($key, $contact_id, $contentType);
        return $response;
    }

    /**
     * Operation restAccountsContactsContactIdDocumentPostWithHttpInfo
     *
     * Upload document to contact directory
     *
     * @param  string $key The storage key for the file to upload (required)
     * @param  int $contact_id The ID of the contact (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsContactsContactIdDocumentPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\StorageObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function restAccountsContactsContactIdDocumentPostWithHttpInfo(
        string $key,
        int $contact_id,
        string $contentType = self::contentTypes['restAccountsContactsContactIdDocumentPost'][0]
    ): array
    {
        $request = $this->restAccountsContactsContactIdDocumentPostRequest($key, $contact_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\StorageObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\StorageObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\StorageObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\StorageObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\StorageObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restAccountsContactsContactIdDocumentPostAsync
     *
     * Upload document to contact directory
     *
     * @param  string $key The storage key for the file to upload (required)
     * @param  int $contact_id The ID of the contact (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsContactsContactIdDocumentPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restAccountsContactsContactIdDocumentPostAsync(
        string $key,
        int $contact_id,
        string $contentType = self::contentTypes['restAccountsContactsContactIdDocumentPost'][0]
    ): PromiseInterface
    {
        return $this->restAccountsContactsContactIdDocumentPostAsyncWithHttpInfo($key, $contact_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restAccountsContactsContactIdDocumentPostAsyncWithHttpInfo
     *
     * Upload document to contact directory
     *
     * @param  string $key The storage key for the file to upload (required)
     * @param  int $contact_id The ID of the contact (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsContactsContactIdDocumentPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restAccountsContactsContactIdDocumentPostAsyncWithHttpInfo(
        $key,
        $contact_id,
        string $contentType = self::contentTypes['restAccountsContactsContactIdDocumentPost'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\StorageObject';
        $request = $this->restAccountsContactsContactIdDocumentPostRequest($key, $contact_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restAccountsContactsContactIdDocumentPost'
     *
     * @param  string $key The storage key for the file to upload (required)
     * @param  int $contact_id The ID of the contact (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsContactsContactIdDocumentPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restAccountsContactsContactIdDocumentPostRequest(
        $key,
        $contact_id,
        string $contentType = self::contentTypes['restAccountsContactsContactIdDocumentPost'][0]
    ): Request
    {

        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $key when calling restAccountsContactsContactIdDocumentPost'
            );
        }

        // verify the required parameter 'contact_id' is set
        if ($contact_id === null || (is_array($contact_id) && count($contact_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $contact_id when calling restAccountsContactsContactIdDocumentPost'
            );
        }


        $resourcePath = '/rest/accounts/contacts/{contactId}/document';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $key,
            'key', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($contact_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contactId' . '}',
                ObjectSerializer::toPathValue($contact_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restAccountsContactsContactIdDocumentUrlGet
     *
     * Get temporary url for document
     *
     * @param  string $key The storage key to get temporary url for (required)
     * @param  int $contact_id The ID of the contact (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsContactsContactIdDocumentUrlGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object
     */
    public function restAccountsContactsContactIdDocumentUrlGet(
        string $key,
        int $contact_id,
        string $contentType = self::contentTypes['restAccountsContactsContactIdDocumentUrlGet'][0]
    ): object
    {
        list($response) = $this->restAccountsContactsContactIdDocumentUrlGetWithHttpInfo($key, $contact_id, $contentType);
        return $response;
    }

    /**
     * Operation restAccountsContactsContactIdDocumentUrlGetWithHttpInfo
     *
     * Get temporary url for document
     *
     * @param  string $key The storage key to get temporary url for (required)
     * @param  int $contact_id The ID of the contact (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsContactsContactIdDocumentUrlGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restAccountsContactsContactIdDocumentUrlGetWithHttpInfo(
        string $key,
        int $contact_id,
        string $contentType = self::contentTypes['restAccountsContactsContactIdDocumentUrlGet'][0]
    ): array
    {
        $request = $this->restAccountsContactsContactIdDocumentUrlGetRequest($key, $contact_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restAccountsContactsContactIdDocumentUrlGetAsync
     *
     * Get temporary url for document
     *
     * @param  string $key The storage key to get temporary url for (required)
     * @param  int $contact_id The ID of the contact (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsContactsContactIdDocumentUrlGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restAccountsContactsContactIdDocumentUrlGetAsync(
        string $key,
        int $contact_id,
        string $contentType = self::contentTypes['restAccountsContactsContactIdDocumentUrlGet'][0]
    ): PromiseInterface
    {
        return $this->restAccountsContactsContactIdDocumentUrlGetAsyncWithHttpInfo($key, $contact_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restAccountsContactsContactIdDocumentUrlGetAsyncWithHttpInfo
     *
     * Get temporary url for document
     *
     * @param  string $key The storage key to get temporary url for (required)
     * @param  int $contact_id The ID of the contact (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsContactsContactIdDocumentUrlGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restAccountsContactsContactIdDocumentUrlGetAsyncWithHttpInfo(
        $key,
        $contact_id,
        string $contentType = self::contentTypes['restAccountsContactsContactIdDocumentUrlGet'][0]
    ): PromiseInterface
    {
        $returnType = 'object';
        $request = $this->restAccountsContactsContactIdDocumentUrlGetRequest($key, $contact_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restAccountsContactsContactIdDocumentUrlGet'
     *
     * @param  string $key The storage key to get temporary url for (required)
     * @param  int $contact_id The ID of the contact (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsContactsContactIdDocumentUrlGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restAccountsContactsContactIdDocumentUrlGetRequest(
        $key,
        $contact_id,
        string $contentType = self::contentTypes['restAccountsContactsContactIdDocumentUrlGet'][0]
    ): Request
    {

        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $key when calling restAccountsContactsContactIdDocumentUrlGet'
            );
        }

        // verify the required parameter 'contact_id' is set
        if ($contact_id === null || (is_array($contact_id) && count($contact_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $contact_id when calling restAccountsContactsContactIdDocumentUrlGet'
            );
        }


        $resourcePath = '/rest/accounts/contacts/{contactId}/document/url';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $key,
            'key', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($contact_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contactId' . '}',
                ObjectSerializer::toPathValue($contact_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restAccountsContactsContactIdDocumentsDelete
     *
     * Delete files from contact documents
     *
     * @param  int $key_list List of storage keys to delete (required)
     * @param  int $contact_id The ID of the contact (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsContactsContactIdDocumentsDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object
     */
    public function restAccountsContactsContactIdDocumentsDelete(
        int $key_list,
        int $contact_id,
        string $contentType = self::contentTypes['restAccountsContactsContactIdDocumentsDelete'][0]
    ): object
    {
        list($response) = $this->restAccountsContactsContactIdDocumentsDeleteWithHttpInfo($key_list, $contact_id, $contentType);
        return $response;
    }

    /**
     * Operation restAccountsContactsContactIdDocumentsDeleteWithHttpInfo
     *
     * Delete files from contact documents
     *
     * @param  int $key_list List of storage keys to delete (required)
     * @param  int $contact_id The ID of the contact (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsContactsContactIdDocumentsDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restAccountsContactsContactIdDocumentsDeleteWithHttpInfo(
        int $key_list,
        int $contact_id,
        string $contentType = self::contentTypes['restAccountsContactsContactIdDocumentsDelete'][0]
    ): array
    {
        $request = $this->restAccountsContactsContactIdDocumentsDeleteRequest($key_list, $contact_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restAccountsContactsContactIdDocumentsDeleteAsync
     *
     * Delete files from contact documents
     *
     * @param  int $key_list List of storage keys to delete (required)
     * @param  int $contact_id The ID of the contact (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsContactsContactIdDocumentsDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restAccountsContactsContactIdDocumentsDeleteAsync(
        int $key_list,
        int $contact_id,
        string $contentType = self::contentTypes['restAccountsContactsContactIdDocumentsDelete'][0]
    ): PromiseInterface
    {
        return $this->restAccountsContactsContactIdDocumentsDeleteAsyncWithHttpInfo($key_list, $contact_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restAccountsContactsContactIdDocumentsDeleteAsyncWithHttpInfo
     *
     * Delete files from contact documents
     *
     * @param  int $key_list List of storage keys to delete (required)
     * @param  int $contact_id The ID of the contact (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsContactsContactIdDocumentsDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restAccountsContactsContactIdDocumentsDeleteAsyncWithHttpInfo(
        $key_list,
        $contact_id,
        string $contentType = self::contentTypes['restAccountsContactsContactIdDocumentsDelete'][0]
    ): PromiseInterface
    {
        $returnType = 'object';
        $request = $this->restAccountsContactsContactIdDocumentsDeleteRequest($key_list, $contact_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restAccountsContactsContactIdDocumentsDelete'
     *
     * @param  int $key_list List of storage keys to delete (required)
     * @param  int $contact_id The ID of the contact (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsContactsContactIdDocumentsDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restAccountsContactsContactIdDocumentsDeleteRequest(
        $key_list,
        $contact_id,
        string $contentType = self::contentTypes['restAccountsContactsContactIdDocumentsDelete'][0]
    ): Request
    {

        // verify the required parameter 'key_list' is set
        if ($key_list === null || (is_array($key_list) && count($key_list) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $key_list when calling restAccountsContactsContactIdDocumentsDelete'
            );
        }

        // verify the required parameter 'contact_id' is set
        if ($contact_id === null || (is_array($contact_id) && count($contact_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $contact_id when calling restAccountsContactsContactIdDocumentsDelete'
            );
        }


        $resourcePath = '/rest/accounts/contacts/{contactId}/documents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $key_list,
            'keyList', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($contact_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contactId' . '}',
                ObjectSerializer::toPathValue($contact_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restAccountsContactsContactIdDocumentsGet
     *
     * List documents of a contact
     *
     * @param  int $contact_id The ID of the contact (required)
     * @param  string|null $continuation_token token from previous request to continue listing documents (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsContactsContactIdDocumentsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\StorageObjectList
     */
    public function restAccountsContactsContactIdDocumentsGet(
        int $contact_id,
        ?string $continuation_token = null,
        string $contentType = self::contentTypes['restAccountsContactsContactIdDocumentsGet'][0]
    ): \ck\Model\StorageObjectList
    {
        list($response) = $this->restAccountsContactsContactIdDocumentsGetWithHttpInfo($contact_id, $continuation_token, $contentType);
        return $response;
    }

    /**
     * Operation restAccountsContactsContactIdDocumentsGetWithHttpInfo
     *
     * List documents of a contact
     *
     * @param  int $contact_id The ID of the contact (required)
     * @param  string|null $continuation_token token from previous request to continue listing documents (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsContactsContactIdDocumentsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\StorageObjectList, HTTP status code, HTTP response headers (array of strings)
     */
    public function restAccountsContactsContactIdDocumentsGetWithHttpInfo(
        int $contact_id,
        ?string $continuation_token = null,
        string $contentType = self::contentTypes['restAccountsContactsContactIdDocumentsGet'][0]
    ): array
    {
        $request = $this->restAccountsContactsContactIdDocumentsGetRequest($contact_id, $continuation_token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\StorageObjectList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\StorageObjectList' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\StorageObjectList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\StorageObjectList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\StorageObjectList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restAccountsContactsContactIdDocumentsGetAsync
     *
     * List documents of a contact
     *
     * @param  int $contact_id The ID of the contact (required)
     * @param  string|null $continuation_token token from previous request to continue listing documents (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsContactsContactIdDocumentsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restAccountsContactsContactIdDocumentsGetAsync(
        int $contact_id,
        ?string $continuation_token = null,
        string $contentType = self::contentTypes['restAccountsContactsContactIdDocumentsGet'][0]
    ): PromiseInterface
    {
        return $this->restAccountsContactsContactIdDocumentsGetAsyncWithHttpInfo($contact_id, $continuation_token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restAccountsContactsContactIdDocumentsGetAsyncWithHttpInfo
     *
     * List documents of a contact
     *
     * @param  int $contact_id The ID of the contact (required)
     * @param  string|null $continuation_token token from previous request to continue listing documents (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsContactsContactIdDocumentsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restAccountsContactsContactIdDocumentsGetAsyncWithHttpInfo(
        $contact_id,
        $continuation_token = null,
        string $contentType = self::contentTypes['restAccountsContactsContactIdDocumentsGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\StorageObjectList';
        $request = $this->restAccountsContactsContactIdDocumentsGetRequest($contact_id, $continuation_token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restAccountsContactsContactIdDocumentsGet'
     *
     * @param  int $contact_id The ID of the contact (required)
     * @param  string|null $continuation_token token from previous request to continue listing documents (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsContactsContactIdDocumentsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restAccountsContactsContactIdDocumentsGetRequest(
        $contact_id,
        $continuation_token = null,
        string $contentType = self::contentTypes['restAccountsContactsContactIdDocumentsGet'][0]
    ): Request
    {

        // verify the required parameter 'contact_id' is set
        if ($contact_id === null || (is_array($contact_id) && count($contact_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $contact_id when calling restAccountsContactsContactIdDocumentsGet'
            );
        }



        $resourcePath = '/rest/accounts/contacts/{contactId}/documents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $continuation_token,
            'continuationToken', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($contact_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contactId' . '}',
                ObjectSerializer::toPathValue($contact_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
