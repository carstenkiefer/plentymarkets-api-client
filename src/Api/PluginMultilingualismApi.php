<?php
/**
 * PluginMultilingualismApi
 * PHP version 8.1
 *
 * @package  ck/plenty-client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ck/plenty-client\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use ck/plenty-client\ApiException;
use ck/plenty-client\Configuration;
use ck/plenty-client\HeaderSelector;
use ck/plenty-client\ObjectSerializer;

/**
 * PluginMultilingualismApi Class Doc Comment
 *
 * @package  ck/plenty-client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PluginMultilingualismApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'restLanguagesTranslationsPost' => [
            'application/json',
        ],
        'restLanguagesTranslationsTranslationIdDelete' => [
            'application/json',
        ],
        'restLanguagesTranslationsTranslationIdGet' => [
            'application/json',
        ],
        'restLanguagesTranslationsTranslationIdPut' => [
            'application/json',
        ],
        'restPluginSetsPluginSetIdLanguagesLanguageCodeDelete' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation restLanguagesTranslationsPost
     *
     * Create a new translation
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $plugin_name The name of the plugin (required)
     * @param  string $language_code The language code for the translation (required)
     * @param  string $key The translation key (required)
     * @param  string $value The value of the translation (required)
     * @param  string $file_name The of the file (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restLanguagesTranslationsPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck/plenty-client\Model\PluginTranslation
     */
    public function restLanguagesTranslationsPost(
        int $plugin_set_id,
        string $plugin_name,
        string $language_code,
        string $key,
        string $value,
        string $file_name,
        string $contentType = self::contentTypes['restLanguagesTranslationsPost'][0]
    ): \ck/plenty-client\Model\PluginTranslation
    {
        list($response) = $this->restLanguagesTranslationsPostWithHttpInfo($plugin_set_id, $plugin_name, $language_code, $key, $value, $file_name, $contentType);
        return $response;
    }

    /**
     * Operation restLanguagesTranslationsPostWithHttpInfo
     *
     * Create a new translation
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $plugin_name The name of the plugin (required)
     * @param  string $language_code The language code for the translation (required)
     * @param  string $key The translation key (required)
     * @param  string $value The value of the translation (required)
     * @param  string $file_name The of the file (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restLanguagesTranslationsPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck/plenty-client\Model\PluginTranslation, HTTP status code, HTTP response headers (array of strings)
     */
    public function restLanguagesTranslationsPostWithHttpInfo(
        int $plugin_set_id,
        string $plugin_name,
        string $language_code,
        string $key,
        string $value,
        string $file_name,
        string $contentType = self::contentTypes['restLanguagesTranslationsPost'][0]
    ): array
    {
        $request = $this->restLanguagesTranslationsPostRequest($plugin_set_id, $plugin_name, $language_code, $key, $value, $file_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck/plenty-client\Model\PluginTranslation' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck/plenty-client\Model\PluginTranslation' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck/plenty-client\Model\PluginTranslation', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck/plenty-client\Model\PluginTranslation';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck/plenty-client\Model\PluginTranslation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restLanguagesTranslationsPostAsync
     *
     * Create a new translation
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $plugin_name The name of the plugin (required)
     * @param  string $language_code The language code for the translation (required)
     * @param  string $key The translation key (required)
     * @param  string $value The value of the translation (required)
     * @param  string $file_name The of the file (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restLanguagesTranslationsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restLanguagesTranslationsPostAsync(
        int $plugin_set_id,
        string $plugin_name,
        string $language_code,
        string $key,
        string $value,
        string $file_name,
        string $contentType = self::contentTypes['restLanguagesTranslationsPost'][0]
    ): PromiseInterface
    {
        return $this->restLanguagesTranslationsPostAsyncWithHttpInfo($plugin_set_id, $plugin_name, $language_code, $key, $value, $file_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restLanguagesTranslationsPostAsyncWithHttpInfo
     *
     * Create a new translation
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $plugin_name The name of the plugin (required)
     * @param  string $language_code The language code for the translation (required)
     * @param  string $key The translation key (required)
     * @param  string $value The value of the translation (required)
     * @param  string $file_name The of the file (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restLanguagesTranslationsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restLanguagesTranslationsPostAsyncWithHttpInfo(
        $plugin_set_id,
        $plugin_name,
        $language_code,
        $key,
        $value,
        $file_name,
        string $contentType = self::contentTypes['restLanguagesTranslationsPost'][0]
    ): PromiseInterface
    {
        $returnType = '\ck/plenty-client\Model\PluginTranslation';
        $request = $this->restLanguagesTranslationsPostRequest($plugin_set_id, $plugin_name, $language_code, $key, $value, $file_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restLanguagesTranslationsPost'
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $plugin_name The name of the plugin (required)
     * @param  string $language_code The language code for the translation (required)
     * @param  string $key The translation key (required)
     * @param  string $value The value of the translation (required)
     * @param  string $file_name The of the file (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restLanguagesTranslationsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restLanguagesTranslationsPostRequest(
        $plugin_set_id,
        $plugin_name,
        $language_code,
        $key,
        $value,
        $file_name,
        string $contentType = self::contentTypes['restLanguagesTranslationsPost'][0]
    ): Request
    {

        // verify the required parameter 'plugin_set_id' is set
        if ($plugin_set_id === null || (is_array($plugin_set_id) && count($plugin_set_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $plugin_set_id when calling restLanguagesTranslationsPost'
            );
        }

        // verify the required parameter 'plugin_name' is set
        if ($plugin_name === null || (is_array($plugin_name) && count($plugin_name) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $plugin_name when calling restLanguagesTranslationsPost'
            );
        }

        // verify the required parameter 'language_code' is set
        if ($language_code === null || (is_array($language_code) && count($language_code) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $language_code when calling restLanguagesTranslationsPost'
            );
        }

        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $key when calling restLanguagesTranslationsPost'
            );
        }

        // verify the required parameter 'value' is set
        if ($value === null || (is_array($value) && count($value) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $value when calling restLanguagesTranslationsPost'
            );
        }

        // verify the required parameter 'file_name' is set
        if ($file_name === null || (is_array($file_name) && count($file_name) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $file_name when calling restLanguagesTranslationsPost'
            );
        }


        $resourcePath = '/rest/languages/translations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $plugin_set_id,
            '$pluginSetId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $plugin_name,
            '$pluginName', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $language_code,
            '$languageCode', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $key,
            '$key', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $value,
            '$value', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $file_name,
            '$fileName', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restLanguagesTranslationsTranslationIdDelete
     *
     * Delete a translation
     *
     * @param  int $translation_id The ID of the translation (required)
     * @param  int $translation_id2 translation_id2 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restLanguagesTranslationsTranslationIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return void
     */
    public function restLanguagesTranslationsTranslationIdDelete(
        int $translation_id,
        int $translation_id2,
        string $contentType = self::contentTypes['restLanguagesTranslationsTranslationIdDelete'][0]
    ): void
    {
        $this->restLanguagesTranslationsTranslationIdDeleteWithHttpInfo($translation_id, $translation_id2, $contentType);
    }

    /**
     * Operation restLanguagesTranslationsTranslationIdDeleteWithHttpInfo
     *
     * Delete a translation
     *
     * @param  int $translation_id The ID of the translation (required)
     * @param  int $translation_id2 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restLanguagesTranslationsTranslationIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restLanguagesTranslationsTranslationIdDeleteWithHttpInfo(
        int $translation_id,
        int $translation_id2,
        string $contentType = self::contentTypes['restLanguagesTranslationsTranslationIdDelete'][0]
    ): array
    {
        $request = $this->restLanguagesTranslationsTranslationIdDeleteRequest($translation_id, $translation_id2, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restLanguagesTranslationsTranslationIdDeleteAsync
     *
     * Delete a translation
     *
     * @param  int $translation_id The ID of the translation (required)
     * @param  int $translation_id2 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restLanguagesTranslationsTranslationIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restLanguagesTranslationsTranslationIdDeleteAsync(
        int $translation_id,
        int $translation_id2,
        string $contentType = self::contentTypes['restLanguagesTranslationsTranslationIdDelete'][0]
    ): PromiseInterface
    {
        return $this->restLanguagesTranslationsTranslationIdDeleteAsyncWithHttpInfo($translation_id, $translation_id2, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restLanguagesTranslationsTranslationIdDeleteAsyncWithHttpInfo
     *
     * Delete a translation
     *
     * @param  int $translation_id The ID of the translation (required)
     * @param  int $translation_id2 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restLanguagesTranslationsTranslationIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restLanguagesTranslationsTranslationIdDeleteAsyncWithHttpInfo(
        $translation_id,
        $translation_id2,
        string $contentType = self::contentTypes['restLanguagesTranslationsTranslationIdDelete'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->restLanguagesTranslationsTranslationIdDeleteRequest($translation_id, $translation_id2, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restLanguagesTranslationsTranslationIdDelete'
     *
     * @param  int $translation_id The ID of the translation (required)
     * @param  int $translation_id2 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restLanguagesTranslationsTranslationIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restLanguagesTranslationsTranslationIdDeleteRequest(
        $translation_id,
        $translation_id2,
        string $contentType = self::contentTypes['restLanguagesTranslationsTranslationIdDelete'][0]
    ): Request
    {

        // verify the required parameter 'translation_id' is set
        if ($translation_id === null || (is_array($translation_id) && count($translation_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $translation_id when calling restLanguagesTranslationsTranslationIdDelete'
            );
        }

        // verify the required parameter 'translation_id2' is set
        if ($translation_id2 === null || (is_array($translation_id2) && count($translation_id2) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $translation_id2 when calling restLanguagesTranslationsTranslationIdDelete'
            );
        }


        $resourcePath = '/rest/languages/translations/{translationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $translation_id,
            '$translationId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($translation_id2 !== null) {
            $resourcePath = str_replace(
                '{' . 'translationId' . '}',
                ObjectSerializer::toPathValue($translation_id2),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restLanguagesTranslationsTranslationIdGet
     *
     * Get a translation
     *
     * @param  int $id The ID of the translation (required)
     * @param  int $translation_id translation_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restLanguagesTranslationsTranslationIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck/plenty-client\Model\PluginTranslation
     */
    public function restLanguagesTranslationsTranslationIdGet(
        int $id,
        int $translation_id,
        string $contentType = self::contentTypes['restLanguagesTranslationsTranslationIdGet'][0]
    ): \ck/plenty-client\Model\PluginTranslation
    {
        list($response) = $this->restLanguagesTranslationsTranslationIdGetWithHttpInfo($id, $translation_id, $contentType);
        return $response;
    }

    /**
     * Operation restLanguagesTranslationsTranslationIdGetWithHttpInfo
     *
     * Get a translation
     *
     * @param  int $id The ID of the translation (required)
     * @param  int $translation_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restLanguagesTranslationsTranslationIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck/plenty-client\Model\PluginTranslation, HTTP status code, HTTP response headers (array of strings)
     */
    public function restLanguagesTranslationsTranslationIdGetWithHttpInfo(
        int $id,
        int $translation_id,
        string $contentType = self::contentTypes['restLanguagesTranslationsTranslationIdGet'][0]
    ): array
    {
        $request = $this->restLanguagesTranslationsTranslationIdGetRequest($id, $translation_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck/plenty-client\Model\PluginTranslation' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck/plenty-client\Model\PluginTranslation' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck/plenty-client\Model\PluginTranslation', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck/plenty-client\Model\PluginTranslation';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck/plenty-client\Model\PluginTranslation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restLanguagesTranslationsTranslationIdGetAsync
     *
     * Get a translation
     *
     * @param  int $id The ID of the translation (required)
     * @param  int $translation_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restLanguagesTranslationsTranslationIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restLanguagesTranslationsTranslationIdGetAsync(
        int $id,
        int $translation_id,
        string $contentType = self::contentTypes['restLanguagesTranslationsTranslationIdGet'][0]
    ): PromiseInterface
    {
        return $this->restLanguagesTranslationsTranslationIdGetAsyncWithHttpInfo($id, $translation_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restLanguagesTranslationsTranslationIdGetAsyncWithHttpInfo
     *
     * Get a translation
     *
     * @param  int $id The ID of the translation (required)
     * @param  int $translation_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restLanguagesTranslationsTranslationIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restLanguagesTranslationsTranslationIdGetAsyncWithHttpInfo(
        $id,
        $translation_id,
        string $contentType = self::contentTypes['restLanguagesTranslationsTranslationIdGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck/plenty-client\Model\PluginTranslation';
        $request = $this->restLanguagesTranslationsTranslationIdGetRequest($id, $translation_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restLanguagesTranslationsTranslationIdGet'
     *
     * @param  int $id The ID of the translation (required)
     * @param  int $translation_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restLanguagesTranslationsTranslationIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restLanguagesTranslationsTranslationIdGetRequest(
        $id,
        $translation_id,
        string $contentType = self::contentTypes['restLanguagesTranslationsTranslationIdGet'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling restLanguagesTranslationsTranslationIdGet'
            );
        }

        // verify the required parameter 'translation_id' is set
        if ($translation_id === null || (is_array($translation_id) && count($translation_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $translation_id when calling restLanguagesTranslationsTranslationIdGet'
            );
        }


        $resourcePath = '/rest/languages/translations/{translationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            '$id', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($translation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'translationId' . '}',
                ObjectSerializer::toPathValue($translation_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restLanguagesTranslationsTranslationIdPut
     *
     * Update a translation
     *
     * @param  int $id The ID of the translation (required)
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $plugin_name The name of the plugin (required)
     * @param  string $language_code The language code for the translation (required)
     * @param  string $key The translation key (required)
     * @param  string $value The value of the translation (required)
     * @param  string $file_name The value of the translation (required)
     * @param  int $translation_id translation_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restLanguagesTranslationsTranslationIdPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck/plenty-client\Model\PluginTranslation
     */
    public function restLanguagesTranslationsTranslationIdPut(
        int $id,
        int $plugin_set_id,
        string $plugin_name,
        string $language_code,
        string $key,
        string $value,
        string $file_name,
        int $translation_id,
        string $contentType = self::contentTypes['restLanguagesTranslationsTranslationIdPut'][0]
    ): \ck/plenty-client\Model\PluginTranslation
    {
        list($response) = $this->restLanguagesTranslationsTranslationIdPutWithHttpInfo($id, $plugin_set_id, $plugin_name, $language_code, $key, $value, $file_name, $translation_id, $contentType);
        return $response;
    }

    /**
     * Operation restLanguagesTranslationsTranslationIdPutWithHttpInfo
     *
     * Update a translation
     *
     * @param  int $id The ID of the translation (required)
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $plugin_name The name of the plugin (required)
     * @param  string $language_code The language code for the translation (required)
     * @param  string $key The translation key (required)
     * @param  string $value The value of the translation (required)
     * @param  string $file_name The value of the translation (required)
     * @param  int $translation_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restLanguagesTranslationsTranslationIdPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck/plenty-client\Model\PluginTranslation, HTTP status code, HTTP response headers (array of strings)
     */
    public function restLanguagesTranslationsTranslationIdPutWithHttpInfo(
        int $id,
        int $plugin_set_id,
        string $plugin_name,
        string $language_code,
        string $key,
        string $value,
        string $file_name,
        int $translation_id,
        string $contentType = self::contentTypes['restLanguagesTranslationsTranslationIdPut'][0]
    ): array
    {
        $request = $this->restLanguagesTranslationsTranslationIdPutRequest($id, $plugin_set_id, $plugin_name, $language_code, $key, $value, $file_name, $translation_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck/plenty-client\Model\PluginTranslation' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck/plenty-client\Model\PluginTranslation' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck/plenty-client\Model\PluginTranslation', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck/plenty-client\Model\PluginTranslation';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck/plenty-client\Model\PluginTranslation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restLanguagesTranslationsTranslationIdPutAsync
     *
     * Update a translation
     *
     * @param  int $id The ID of the translation (required)
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $plugin_name The name of the plugin (required)
     * @param  string $language_code The language code for the translation (required)
     * @param  string $key The translation key (required)
     * @param  string $value The value of the translation (required)
     * @param  string $file_name The value of the translation (required)
     * @param  int $translation_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restLanguagesTranslationsTranslationIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restLanguagesTranslationsTranslationIdPutAsync(
        int $id,
        int $plugin_set_id,
        string $plugin_name,
        string $language_code,
        string $key,
        string $value,
        string $file_name,
        int $translation_id,
        string $contentType = self::contentTypes['restLanguagesTranslationsTranslationIdPut'][0]
    ): PromiseInterface
    {
        return $this->restLanguagesTranslationsTranslationIdPutAsyncWithHttpInfo($id, $plugin_set_id, $plugin_name, $language_code, $key, $value, $file_name, $translation_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restLanguagesTranslationsTranslationIdPutAsyncWithHttpInfo
     *
     * Update a translation
     *
     * @param  int $id The ID of the translation (required)
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $plugin_name The name of the plugin (required)
     * @param  string $language_code The language code for the translation (required)
     * @param  string $key The translation key (required)
     * @param  string $value The value of the translation (required)
     * @param  string $file_name The value of the translation (required)
     * @param  int $translation_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restLanguagesTranslationsTranslationIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restLanguagesTranslationsTranslationIdPutAsyncWithHttpInfo(
        $id,
        $plugin_set_id,
        $plugin_name,
        $language_code,
        $key,
        $value,
        $file_name,
        $translation_id,
        string $contentType = self::contentTypes['restLanguagesTranslationsTranslationIdPut'][0]
    ): PromiseInterface
    {
        $returnType = '\ck/plenty-client\Model\PluginTranslation';
        $request = $this->restLanguagesTranslationsTranslationIdPutRequest($id, $plugin_set_id, $plugin_name, $language_code, $key, $value, $file_name, $translation_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restLanguagesTranslationsTranslationIdPut'
     *
     * @param  int $id The ID of the translation (required)
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $plugin_name The name of the plugin (required)
     * @param  string $language_code The language code for the translation (required)
     * @param  string $key The translation key (required)
     * @param  string $value The value of the translation (required)
     * @param  string $file_name The value of the translation (required)
     * @param  int $translation_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restLanguagesTranslationsTranslationIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restLanguagesTranslationsTranslationIdPutRequest(
        $id,
        $plugin_set_id,
        $plugin_name,
        $language_code,
        $key,
        $value,
        $file_name,
        $translation_id,
        string $contentType = self::contentTypes['restLanguagesTranslationsTranslationIdPut'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling restLanguagesTranslationsTranslationIdPut'
            );
        }

        // verify the required parameter 'plugin_set_id' is set
        if ($plugin_set_id === null || (is_array($plugin_set_id) && count($plugin_set_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $plugin_set_id when calling restLanguagesTranslationsTranslationIdPut'
            );
        }

        // verify the required parameter 'plugin_name' is set
        if ($plugin_name === null || (is_array($plugin_name) && count($plugin_name) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $plugin_name when calling restLanguagesTranslationsTranslationIdPut'
            );
        }

        // verify the required parameter 'language_code' is set
        if ($language_code === null || (is_array($language_code) && count($language_code) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $language_code when calling restLanguagesTranslationsTranslationIdPut'
            );
        }

        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $key when calling restLanguagesTranslationsTranslationIdPut'
            );
        }

        // verify the required parameter 'value' is set
        if ($value === null || (is_array($value) && count($value) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $value when calling restLanguagesTranslationsTranslationIdPut'
            );
        }

        // verify the required parameter 'file_name' is set
        if ($file_name === null || (is_array($file_name) && count($file_name) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $file_name when calling restLanguagesTranslationsTranslationIdPut'
            );
        }

        // verify the required parameter 'translation_id' is set
        if ($translation_id === null || (is_array($translation_id) && count($translation_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $translation_id when calling restLanguagesTranslationsTranslationIdPut'
            );
        }


        $resourcePath = '/rest/languages/translations/{translationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            '$id', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $plugin_set_id,
            '$pluginSetId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $plugin_name,
            '$pluginName', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $language_code,
            '$languageCode', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $key,
            '$key', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $value,
            '$value', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $file_name,
            '$fileName', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($translation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'translationId' . '}',
                ObjectSerializer::toPathValue($translation_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPluginSetsPluginSetIdLanguagesLanguageCodeDelete
     *
     * Delete multiple translation
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $language_code The code of the language (required)
     * @param  int $plugin_set_id2 plugin_set_id2 (required)
     * @param  int $language_code2 language_code2 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsPluginSetIdLanguagesLanguageCodeDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return void
     */
    public function restPluginSetsPluginSetIdLanguagesLanguageCodeDelete(
        int $plugin_set_id,
        string $language_code,
        int $plugin_set_id2,
        int $language_code2,
        string $contentType = self::contentTypes['restPluginSetsPluginSetIdLanguagesLanguageCodeDelete'][0]
    ): void
    {
        $this->restPluginSetsPluginSetIdLanguagesLanguageCodeDeleteWithHttpInfo($plugin_set_id, $language_code, $plugin_set_id2, $language_code2, $contentType);
    }

    /**
     * Operation restPluginSetsPluginSetIdLanguagesLanguageCodeDeleteWithHttpInfo
     *
     * Delete multiple translation
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $language_code The code of the language (required)
     * @param  int $plugin_set_id2 (required)
     * @param  int $language_code2 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsPluginSetIdLanguagesLanguageCodeDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginSetsPluginSetIdLanguagesLanguageCodeDeleteWithHttpInfo(
        int $plugin_set_id,
        string $language_code,
        int $plugin_set_id2,
        int $language_code2,
        string $contentType = self::contentTypes['restPluginSetsPluginSetIdLanguagesLanguageCodeDelete'][0]
    ): array
    {
        $request = $this->restPluginSetsPluginSetIdLanguagesLanguageCodeDeleteRequest($plugin_set_id, $language_code, $plugin_set_id2, $language_code2, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginSetsPluginSetIdLanguagesLanguageCodeDeleteAsync
     *
     * Delete multiple translation
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $language_code The code of the language (required)
     * @param  int $plugin_set_id2 (required)
     * @param  int $language_code2 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsPluginSetIdLanguagesLanguageCodeDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginSetsPluginSetIdLanguagesLanguageCodeDeleteAsync(
        int $plugin_set_id,
        string $language_code,
        int $plugin_set_id2,
        int $language_code2,
        string $contentType = self::contentTypes['restPluginSetsPluginSetIdLanguagesLanguageCodeDelete'][0]
    ): PromiseInterface
    {
        return $this->restPluginSetsPluginSetIdLanguagesLanguageCodeDeleteAsyncWithHttpInfo($plugin_set_id, $language_code, $plugin_set_id2, $language_code2, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginSetsPluginSetIdLanguagesLanguageCodeDeleteAsyncWithHttpInfo
     *
     * Delete multiple translation
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $language_code The code of the language (required)
     * @param  int $plugin_set_id2 (required)
     * @param  int $language_code2 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsPluginSetIdLanguagesLanguageCodeDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginSetsPluginSetIdLanguagesLanguageCodeDeleteAsyncWithHttpInfo(
        $plugin_set_id,
        $language_code,
        $plugin_set_id2,
        $language_code2,
        string $contentType = self::contentTypes['restPluginSetsPluginSetIdLanguagesLanguageCodeDelete'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->restPluginSetsPluginSetIdLanguagesLanguageCodeDeleteRequest($plugin_set_id, $language_code, $plugin_set_id2, $language_code2, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginSetsPluginSetIdLanguagesLanguageCodeDelete'
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $language_code The code of the language (required)
     * @param  int $plugin_set_id2 (required)
     * @param  int $language_code2 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsPluginSetIdLanguagesLanguageCodeDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPluginSetsPluginSetIdLanguagesLanguageCodeDeleteRequest(
        $plugin_set_id,
        $language_code,
        $plugin_set_id2,
        $language_code2,
        string $contentType = self::contentTypes['restPluginSetsPluginSetIdLanguagesLanguageCodeDelete'][0]
    ): Request
    {

        // verify the required parameter 'plugin_set_id' is set
        if ($plugin_set_id === null || (is_array($plugin_set_id) && count($plugin_set_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $plugin_set_id when calling restPluginSetsPluginSetIdLanguagesLanguageCodeDelete'
            );
        }

        // verify the required parameter 'language_code' is set
        if ($language_code === null || (is_array($language_code) && count($language_code) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $language_code when calling restPluginSetsPluginSetIdLanguagesLanguageCodeDelete'
            );
        }

        // verify the required parameter 'plugin_set_id2' is set
        if ($plugin_set_id2 === null || (is_array($plugin_set_id2) && count($plugin_set_id2) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $plugin_set_id2 when calling restPluginSetsPluginSetIdLanguagesLanguageCodeDelete'
            );
        }

        // verify the required parameter 'language_code2' is set
        if ($language_code2 === null || (is_array($language_code2) && count($language_code2) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $language_code2 when calling restPluginSetsPluginSetIdLanguagesLanguageCodeDelete'
            );
        }


        $resourcePath = '/rest/plugin_sets/{pluginSetId}/languages/{languageCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $plugin_set_id,
            '$pluginSetId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $language_code,
            '$languageCode', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($plugin_set_id2 !== null) {
            $resourcePath = str_replace(
                '{' . 'pluginSetId' . '}',
                ObjectSerializer::toPathValue($plugin_set_id2),
                $resourcePath
            );
        }
        // path params
        if ($language_code2 !== null) {
            $resourcePath = str_replace(
                '{' . 'languageCode' . '}',
                ObjectSerializer::toPathValue($language_code2),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
