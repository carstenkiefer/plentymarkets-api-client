<?php
/**
 * TagApi
 * PHP version 8.1
 *
 * @package  ck/plenty-client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ck/plenty-client\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use ck/plenty-client\ApiException;
use ck/plenty-client\Configuration;
use ck/plenty-client\HeaderSelector;
use ck/plenty-client\ObjectSerializer;

/**
 * TagApi Class Doc Comment
 *
 * @package  ck/plenty-client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TagApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'restTagsBulkPost' => [
            'application/json',
        ],
        'restTagsBulkPut' => [
            'application/json',
        ],
        'restTagsGet' => [
            'application/json',
        ],
        'restTagsIdDelete' => [
            'application/json',
        ],
        'restTagsIdGet' => [
            'application/json',
        ],
        'restTagsIdPut' => [
            'application/json',
        ],
        'restTagsIdRelationshipsTagTypeRelationshipUUIDDelete' => [
            'application/json',
        ],
        'restTagsPost' => [
            'application/json',
        ],
        'restTagsRelationshipsDelete' => [
            'application/json',
        ],
        'restTagsRelationshipsGet' => [
            'application/json',
        ],
        'restTagsRelationshipsPost' => [
            'application/json',
        ],
        'restTagsRelationshipsRelationshipValueTagTypeIdDelete' => [
            'application/json',
        ],
        'restTagsRelationshipsRelationshipValueTagTypeIdPut' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation restTagsBulkPost
     *
     * Create up to 50 tags
     *
     * @param  \ck/plenty-client\Model\RestTagsPostRequest|null $_rest_tags_bulk _rest_tags_bulk (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsBulkPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object[]
     */
    public function restTagsBulkPost(
        ?\ck/plenty-client\Model\RestTagsPostRequest $_rest_tags_bulk = null,
        string $contentType = self::contentTypes['restTagsBulkPost'][0]
    ): array
    {
        list($response) = $this->restTagsBulkPostWithHttpInfo($_rest_tags_bulk, $contentType);
        return $response;
    }

    /**
     * Operation restTagsBulkPostWithHttpInfo
     *
     * Create up to 50 tags
     *
     * @param  \ck/plenty-client\Model\RestTagsPostRequest|null $_rest_tags_bulk (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsBulkPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restTagsBulkPostWithHttpInfo(
        ?\ck/plenty-client\Model\RestTagsPostRequest $_rest_tags_bulk = null,
        string $contentType = self::contentTypes['restTagsBulkPost'][0]
    ): array
    {
        $request = $this->restTagsBulkPostRequest($_rest_tags_bulk, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restTagsBulkPostAsync
     *
     * Create up to 50 tags
     *
     * @param  \ck/plenty-client\Model\RestTagsPostRequest|null $_rest_tags_bulk (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsBulkPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restTagsBulkPostAsync(
        ?\ck/plenty-client\Model\RestTagsPostRequest $_rest_tags_bulk = null,
        string $contentType = self::contentTypes['restTagsBulkPost'][0]
    ): PromiseInterface
    {
        return $this->restTagsBulkPostAsyncWithHttpInfo($_rest_tags_bulk, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restTagsBulkPostAsyncWithHttpInfo
     *
     * Create up to 50 tags
     *
     * @param  \ck/plenty-client\Model\RestTagsPostRequest|null $_rest_tags_bulk (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsBulkPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restTagsBulkPostAsyncWithHttpInfo(
        $_rest_tags_bulk = null,
        string $contentType = self::contentTypes['restTagsBulkPost'][0]
    ): PromiseInterface
    {
        $returnType = 'object[]';
        $request = $this->restTagsBulkPostRequest($_rest_tags_bulk, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restTagsBulkPost'
     *
     * @param  \ck/plenty-client\Model\RestTagsPostRequest|null $_rest_tags_bulk (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsBulkPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restTagsBulkPostRequest(
        $_rest_tags_bulk = null,
        string $contentType = self::contentTypes['restTagsBulkPost'][0]
    ): Request
    {



        $resourcePath = '/rest/tags/bulk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($_rest_tags_bulk)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_rest_tags_bulk));
            } else {
                $httpBody = $_rest_tags_bulk;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restTagsBulkPut
     *
     * Update up to 50 tags
     *
     * @param  \ck/plenty-client\Model\RestTagsPostRequest|null $_rest_tags_bulk _rest_tags_bulk (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsBulkPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object[]
     */
    public function restTagsBulkPut(
        ?\ck/plenty-client\Model\RestTagsPostRequest $_rest_tags_bulk = null,
        string $contentType = self::contentTypes['restTagsBulkPut'][0]
    ): array
    {
        list($response) = $this->restTagsBulkPutWithHttpInfo($_rest_tags_bulk, $contentType);
        return $response;
    }

    /**
     * Operation restTagsBulkPutWithHttpInfo
     *
     * Update up to 50 tags
     *
     * @param  \ck/plenty-client\Model\RestTagsPostRequest|null $_rest_tags_bulk (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsBulkPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restTagsBulkPutWithHttpInfo(
        ?\ck/plenty-client\Model\RestTagsPostRequest $_rest_tags_bulk = null,
        string $contentType = self::contentTypes['restTagsBulkPut'][0]
    ): array
    {
        $request = $this->restTagsBulkPutRequest($_rest_tags_bulk, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restTagsBulkPutAsync
     *
     * Update up to 50 tags
     *
     * @param  \ck/plenty-client\Model\RestTagsPostRequest|null $_rest_tags_bulk (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsBulkPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restTagsBulkPutAsync(
        ?\ck/plenty-client\Model\RestTagsPostRequest $_rest_tags_bulk = null,
        string $contentType = self::contentTypes['restTagsBulkPut'][0]
    ): PromiseInterface
    {
        return $this->restTagsBulkPutAsyncWithHttpInfo($_rest_tags_bulk, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restTagsBulkPutAsyncWithHttpInfo
     *
     * Update up to 50 tags
     *
     * @param  \ck/plenty-client\Model\RestTagsPostRequest|null $_rest_tags_bulk (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsBulkPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restTagsBulkPutAsyncWithHttpInfo(
        $_rest_tags_bulk = null,
        string $contentType = self::contentTypes['restTagsBulkPut'][0]
    ): PromiseInterface
    {
        $returnType = 'object[]';
        $request = $this->restTagsBulkPutRequest($_rest_tags_bulk, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restTagsBulkPut'
     *
     * @param  \ck/plenty-client\Model\RestTagsPostRequest|null $_rest_tags_bulk (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsBulkPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restTagsBulkPutRequest(
        $_rest_tags_bulk = null,
        string $contentType = self::contentTypes['restTagsBulkPut'][0]
    ): Request
    {



        $resourcePath = '/rest/tags/bulk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($_rest_tags_bulk)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_rest_tags_bulk));
            } else {
                $httpBody = $_rest_tags_bulk;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restTagsGet
     *
     * List tags
     *
     * @param  string|null $with Includes the specified tag information in the results. The following parameters are available: &lt;ul&gt;&lt;li&gt;availabilities &#x3D; The tag availabilities&lt;/li&gt;&lt;li&gt;names &#x3D; The tag names&lt;/li&gt;&lt;li&gt;relationship &#x3D; The tag relationships&lt;/li&gt;&lt;/ul&gt;More than one parameter should be separated by commas. (optional)
     * @param  string|null $tag_name Filter restricts the list of results to tags with the specified tag name. The tag name must be specified. (optional)
     * @param  string|null $tag_availability Filter restricts the list of results to tags with the specified availability type. The availability type must be specified. (optional)
     * @param  string|null $tag_lang Filter restricts the list of results to tags which have names in the specified language. The language must be specified. (optional)
     * @param  string|null $color Filter restricts the list of results to tags with the specified color. The color must be specified. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object
     */
    public function restTagsGet(
        ?string $with = null,
        ?string $tag_name = null,
        ?string $tag_availability = null,
        ?string $tag_lang = null,
        ?string $color = null,
        string $contentType = self::contentTypes['restTagsGet'][0]
    ): object
    {
        list($response) = $this->restTagsGetWithHttpInfo($with, $tag_name, $tag_availability, $tag_lang, $color, $contentType);
        return $response;
    }

    /**
     * Operation restTagsGetWithHttpInfo
     *
     * List tags
     *
     * @param  string|null $with Includes the specified tag information in the results. The following parameters are available: &lt;ul&gt;&lt;li&gt;availabilities &#x3D; The tag availabilities&lt;/li&gt;&lt;li&gt;names &#x3D; The tag names&lt;/li&gt;&lt;li&gt;relationship &#x3D; The tag relationships&lt;/li&gt;&lt;/ul&gt;More than one parameter should be separated by commas. (optional)
     * @param  string|null $tag_name Filter restricts the list of results to tags with the specified tag name. The tag name must be specified. (optional)
     * @param  string|null $tag_availability Filter restricts the list of results to tags with the specified availability type. The availability type must be specified. (optional)
     * @param  string|null $tag_lang Filter restricts the list of results to tags which have names in the specified language. The language must be specified. (optional)
     * @param  string|null $color Filter restricts the list of results to tags with the specified color. The color must be specified. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restTagsGetWithHttpInfo(
        ?string $with = null,
        ?string $tag_name = null,
        ?string $tag_availability = null,
        ?string $tag_lang = null,
        ?string $color = null,
        string $contentType = self::contentTypes['restTagsGet'][0]
    ): array
    {
        $request = $this->restTagsGetRequest($with, $tag_name, $tag_availability, $tag_lang, $color, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restTagsGetAsync
     *
     * List tags
     *
     * @param  string|null $with Includes the specified tag information in the results. The following parameters are available: &lt;ul&gt;&lt;li&gt;availabilities &#x3D; The tag availabilities&lt;/li&gt;&lt;li&gt;names &#x3D; The tag names&lt;/li&gt;&lt;li&gt;relationship &#x3D; The tag relationships&lt;/li&gt;&lt;/ul&gt;More than one parameter should be separated by commas. (optional)
     * @param  string|null $tag_name Filter restricts the list of results to tags with the specified tag name. The tag name must be specified. (optional)
     * @param  string|null $tag_availability Filter restricts the list of results to tags with the specified availability type. The availability type must be specified. (optional)
     * @param  string|null $tag_lang Filter restricts the list of results to tags which have names in the specified language. The language must be specified. (optional)
     * @param  string|null $color Filter restricts the list of results to tags with the specified color. The color must be specified. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restTagsGetAsync(
        ?string $with = null,
        ?string $tag_name = null,
        ?string $tag_availability = null,
        ?string $tag_lang = null,
        ?string $color = null,
        string $contentType = self::contentTypes['restTagsGet'][0]
    ): PromiseInterface
    {
        return $this->restTagsGetAsyncWithHttpInfo($with, $tag_name, $tag_availability, $tag_lang, $color, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restTagsGetAsyncWithHttpInfo
     *
     * List tags
     *
     * @param  string|null $with Includes the specified tag information in the results. The following parameters are available: &lt;ul&gt;&lt;li&gt;availabilities &#x3D; The tag availabilities&lt;/li&gt;&lt;li&gt;names &#x3D; The tag names&lt;/li&gt;&lt;li&gt;relationship &#x3D; The tag relationships&lt;/li&gt;&lt;/ul&gt;More than one parameter should be separated by commas. (optional)
     * @param  string|null $tag_name Filter restricts the list of results to tags with the specified tag name. The tag name must be specified. (optional)
     * @param  string|null $tag_availability Filter restricts the list of results to tags with the specified availability type. The availability type must be specified. (optional)
     * @param  string|null $tag_lang Filter restricts the list of results to tags which have names in the specified language. The language must be specified. (optional)
     * @param  string|null $color Filter restricts the list of results to tags with the specified color. The color must be specified. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restTagsGetAsyncWithHttpInfo(
        $with = null,
        $tag_name = null,
        $tag_availability = null,
        $tag_lang = null,
        $color = null,
        string $contentType = self::contentTypes['restTagsGet'][0]
    ): PromiseInterface
    {
        $returnType = 'object';
        $request = $this->restTagsGetRequest($with, $tag_name, $tag_availability, $tag_lang, $color, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restTagsGet'
     *
     * @param  string|null $with Includes the specified tag information in the results. The following parameters are available: &lt;ul&gt;&lt;li&gt;availabilities &#x3D; The tag availabilities&lt;/li&gt;&lt;li&gt;names &#x3D; The tag names&lt;/li&gt;&lt;li&gt;relationship &#x3D; The tag relationships&lt;/li&gt;&lt;/ul&gt;More than one parameter should be separated by commas. (optional)
     * @param  string|null $tag_name Filter restricts the list of results to tags with the specified tag name. The tag name must be specified. (optional)
     * @param  string|null $tag_availability Filter restricts the list of results to tags with the specified availability type. The availability type must be specified. (optional)
     * @param  string|null $tag_lang Filter restricts the list of results to tags which have names in the specified language. The language must be specified. (optional)
     * @param  string|null $color Filter restricts the list of results to tags with the specified color. The color must be specified. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restTagsGetRequest(
        $with = null,
        $tag_name = null,
        $tag_availability = null,
        $tag_lang = null,
        $color = null,
        string $contentType = self::contentTypes['restTagsGet'][0]
    ): Request
    {







        $resourcePath = '/rest/tags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with,
            'with', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tag_name,
            'tagName', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tag_availability,
            'tagAvailability', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tag_lang,
            'tagLang', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $color,
            'color', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restTagsIdDelete
     *
     * Delete tag
     *
     * @param  int $id The ID of the tag (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return void
     */
    public function restTagsIdDelete(
        int $id,
        string $contentType = self::contentTypes['restTagsIdDelete'][0]
    ): void
    {
        $this->restTagsIdDeleteWithHttpInfo($id, $contentType);
    }

    /**
     * Operation restTagsIdDeleteWithHttpInfo
     *
     * Delete tag
     *
     * @param  int $id The ID of the tag (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restTagsIdDeleteWithHttpInfo(
        int $id,
        string $contentType = self::contentTypes['restTagsIdDelete'][0]
    ): array
    {
        $request = $this->restTagsIdDeleteRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restTagsIdDeleteAsync
     *
     * Delete tag
     *
     * @param  int $id The ID of the tag (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restTagsIdDeleteAsync(
        int $id,
        string $contentType = self::contentTypes['restTagsIdDelete'][0]
    ): PromiseInterface
    {
        return $this->restTagsIdDeleteAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restTagsIdDeleteAsyncWithHttpInfo
     *
     * Delete tag
     *
     * @param  int $id The ID of the tag (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restTagsIdDeleteAsyncWithHttpInfo(
        $id,
        string $contentType = self::contentTypes['restTagsIdDelete'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->restTagsIdDeleteRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restTagsIdDelete'
     *
     * @param  int $id The ID of the tag (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restTagsIdDeleteRequest(
        $id,
        string $contentType = self::contentTypes['restTagsIdDelete'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling restTagsIdDelete'
            );
        }


        $resourcePath = '/rest/tags/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restTagsIdGet
     *
     * Get tag by ID
     *
     * @param  int $id The ID of the tag (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck/plenty-client\Model\Tag
     */
    public function restTagsIdGet(
        int $id,
        string $contentType = self::contentTypes['restTagsIdGet'][0]
    ): \ck/plenty-client\Model\Tag
    {
        list($response) = $this->restTagsIdGetWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation restTagsIdGetWithHttpInfo
     *
     * Get tag by ID
     *
     * @param  int $id The ID of the tag (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck/plenty-client\Model\Tag, HTTP status code, HTTP response headers (array of strings)
     */
    public function restTagsIdGetWithHttpInfo(
        int $id,
        string $contentType = self::contentTypes['restTagsIdGet'][0]
    ): array
    {
        $request = $this->restTagsIdGetRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck/plenty-client\Model\Tag' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck/plenty-client\Model\Tag' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck/plenty-client\Model\Tag', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck/plenty-client\Model\Tag';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck/plenty-client\Model\Tag',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restTagsIdGetAsync
     *
     * Get tag by ID
     *
     * @param  int $id The ID of the tag (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restTagsIdGetAsync(
        int $id,
        string $contentType = self::contentTypes['restTagsIdGet'][0]
    ): PromiseInterface
    {
        return $this->restTagsIdGetAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restTagsIdGetAsyncWithHttpInfo
     *
     * Get tag by ID
     *
     * @param  int $id The ID of the tag (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restTagsIdGetAsyncWithHttpInfo(
        $id,
        string $contentType = self::contentTypes['restTagsIdGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck/plenty-client\Model\Tag';
        $request = $this->restTagsIdGetRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restTagsIdGet'
     *
     * @param  int $id The ID of the tag (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restTagsIdGetRequest(
        $id,
        string $contentType = self::contentTypes['restTagsIdGet'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling restTagsIdGet'
            );
        }


        $resourcePath = '/rest/tags/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restTagsIdPut
     *
     * Update tag
     *
     * @param  int $id The ID of the tag (required)
     * @param  \ck/plenty-client\Model\RestTagsPostRequest|null $_rest_tags_id _rest_tags_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsIdPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck/plenty-client\Model\Tag
     */
    public function restTagsIdPut(
        int $id,
        ?\ck/plenty-client\Model\RestTagsPostRequest $_rest_tags_id = null,
        string $contentType = self::contentTypes['restTagsIdPut'][0]
    ): \ck/plenty-client\Model\Tag
    {
        list($response) = $this->restTagsIdPutWithHttpInfo($id, $_rest_tags_id, $contentType);
        return $response;
    }

    /**
     * Operation restTagsIdPutWithHttpInfo
     *
     * Update tag
     *
     * @param  int $id The ID of the tag (required)
     * @param  \ck/plenty-client\Model\RestTagsPostRequest|null $_rest_tags_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsIdPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck/plenty-client\Model\Tag, HTTP status code, HTTP response headers (array of strings)
     */
    public function restTagsIdPutWithHttpInfo(
        int $id,
        ?\ck/plenty-client\Model\RestTagsPostRequest $_rest_tags_id = null,
        string $contentType = self::contentTypes['restTagsIdPut'][0]
    ): array
    {
        $request = $this->restTagsIdPutRequest($id, $_rest_tags_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck/plenty-client\Model\Tag' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck/plenty-client\Model\Tag' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck/plenty-client\Model\Tag', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck/plenty-client\Model\Tag';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck/plenty-client\Model\Tag',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restTagsIdPutAsync
     *
     * Update tag
     *
     * @param  int $id The ID of the tag (required)
     * @param  \ck/plenty-client\Model\RestTagsPostRequest|null $_rest_tags_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restTagsIdPutAsync(
        int $id,
        ?\ck/plenty-client\Model\RestTagsPostRequest $_rest_tags_id = null,
        string $contentType = self::contentTypes['restTagsIdPut'][0]
    ): PromiseInterface
    {
        return $this->restTagsIdPutAsyncWithHttpInfo($id, $_rest_tags_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restTagsIdPutAsyncWithHttpInfo
     *
     * Update tag
     *
     * @param  int $id The ID of the tag (required)
     * @param  \ck/plenty-client\Model\RestTagsPostRequest|null $_rest_tags_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restTagsIdPutAsyncWithHttpInfo(
        $id,
        $_rest_tags_id = null,
        string $contentType = self::contentTypes['restTagsIdPut'][0]
    ): PromiseInterface
    {
        $returnType = '\ck/plenty-client\Model\Tag';
        $request = $this->restTagsIdPutRequest($id, $_rest_tags_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restTagsIdPut'
     *
     * @param  int $id The ID of the tag (required)
     * @param  \ck/plenty-client\Model\RestTagsPostRequest|null $_rest_tags_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restTagsIdPutRequest(
        $id,
        $_rest_tags_id = null,
        string $contentType = self::contentTypes['restTagsIdPut'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling restTagsIdPut'
            );
        }



        $resourcePath = '/rest/tags/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($_rest_tags_id)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_rest_tags_id));
            } else {
                $httpBody = $_rest_tags_id;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restTagsIdRelationshipsTagTypeRelationshipUUIDDelete
     *
     * Delete tag relationship
     *
     * @param  int $id The ID of the tag (required)
     * @param  string $tag_type The type of the relationship, i.e. &lt;b&gt;board&lt;/b&gt; (required)
     * @param  string $relationship_uuid The UUID of the relationship (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsIdRelationshipsTagTypeRelationshipUUIDDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object
     */
    public function restTagsIdRelationshipsTagTypeRelationshipUUIDDelete(
        int $id,
        string $tag_type,
        string $relationship_uuid,
        string $contentType = self::contentTypes['restTagsIdRelationshipsTagTypeRelationshipUUIDDelete'][0]
    ): object
    {
        list($response) = $this->restTagsIdRelationshipsTagTypeRelationshipUUIDDeleteWithHttpInfo($id, $tag_type, $relationship_uuid, $contentType);
        return $response;
    }

    /**
     * Operation restTagsIdRelationshipsTagTypeRelationshipUUIDDeleteWithHttpInfo
     *
     * Delete tag relationship
     *
     * @param  int $id The ID of the tag (required)
     * @param  string $tag_type The type of the relationship, i.e. &lt;b&gt;board&lt;/b&gt; (required)
     * @param  string $relationship_uuid The UUID of the relationship (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsIdRelationshipsTagTypeRelationshipUUIDDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restTagsIdRelationshipsTagTypeRelationshipUUIDDeleteWithHttpInfo(
        int $id,
        string $tag_type,
        string $relationship_uuid,
        string $contentType = self::contentTypes['restTagsIdRelationshipsTagTypeRelationshipUUIDDelete'][0]
    ): array
    {
        $request = $this->restTagsIdRelationshipsTagTypeRelationshipUUIDDeleteRequest($id, $tag_type, $relationship_uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restTagsIdRelationshipsTagTypeRelationshipUUIDDeleteAsync
     *
     * Delete tag relationship
     *
     * @param  int $id The ID of the tag (required)
     * @param  string $tag_type The type of the relationship, i.e. &lt;b&gt;board&lt;/b&gt; (required)
     * @param  string $relationship_uuid The UUID of the relationship (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsIdRelationshipsTagTypeRelationshipUUIDDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restTagsIdRelationshipsTagTypeRelationshipUUIDDeleteAsync(
        int $id,
        string $tag_type,
        string $relationship_uuid,
        string $contentType = self::contentTypes['restTagsIdRelationshipsTagTypeRelationshipUUIDDelete'][0]
    ): PromiseInterface
    {
        return $this->restTagsIdRelationshipsTagTypeRelationshipUUIDDeleteAsyncWithHttpInfo($id, $tag_type, $relationship_uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restTagsIdRelationshipsTagTypeRelationshipUUIDDeleteAsyncWithHttpInfo
     *
     * Delete tag relationship
     *
     * @param  int $id The ID of the tag (required)
     * @param  string $tag_type The type of the relationship, i.e. &lt;b&gt;board&lt;/b&gt; (required)
     * @param  string $relationship_uuid The UUID of the relationship (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsIdRelationshipsTagTypeRelationshipUUIDDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restTagsIdRelationshipsTagTypeRelationshipUUIDDeleteAsyncWithHttpInfo(
        $id,
        $tag_type,
        $relationship_uuid,
        string $contentType = self::contentTypes['restTagsIdRelationshipsTagTypeRelationshipUUIDDelete'][0]
    ): PromiseInterface
    {
        $returnType = 'object';
        $request = $this->restTagsIdRelationshipsTagTypeRelationshipUUIDDeleteRequest($id, $tag_type, $relationship_uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restTagsIdRelationshipsTagTypeRelationshipUUIDDelete'
     *
     * @param  int $id The ID of the tag (required)
     * @param  string $tag_type The type of the relationship, i.e. &lt;b&gt;board&lt;/b&gt; (required)
     * @param  string $relationship_uuid The UUID of the relationship (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsIdRelationshipsTagTypeRelationshipUUIDDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restTagsIdRelationshipsTagTypeRelationshipUUIDDeleteRequest(
        $id,
        $tag_type,
        $relationship_uuid,
        string $contentType = self::contentTypes['restTagsIdRelationshipsTagTypeRelationshipUUIDDelete'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling restTagsIdRelationshipsTagTypeRelationshipUUIDDelete'
            );
        }

        // verify the required parameter 'tag_type' is set
        if ($tag_type === null || (is_array($tag_type) && count($tag_type) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $tag_type when calling restTagsIdRelationshipsTagTypeRelationshipUUIDDelete'
            );
        }

        // verify the required parameter 'relationship_uuid' is set
        if ($relationship_uuid === null || (is_array($relationship_uuid) && count($relationship_uuid) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $relationship_uuid when calling restTagsIdRelationshipsTagTypeRelationshipUUIDDelete'
            );
        }


        $resourcePath = '/rest/tags/{id}/relationships/{tagType}/{relationshipUUID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($tag_type !== null) {
            $resourcePath = str_replace(
                '{' . 'tagType' . '}',
                ObjectSerializer::toPathValue($tag_type),
                $resourcePath
            );
        }
        // path params
        if ($relationship_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'relationshipUUID' . '}',
                ObjectSerializer::toPathValue($relationship_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restTagsPost
     *
     * Create a tag
     *
     * @param  \ck/plenty-client\Model\RestTagsPostRequest|null $_rest_tags _rest_tags (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck/plenty-client\Model\Tag
     */
    public function restTagsPost(
        ?\ck/plenty-client\Model\RestTagsPostRequest $_rest_tags = null,
        string $contentType = self::contentTypes['restTagsPost'][0]
    ): \ck/plenty-client\Model\Tag
    {
        list($response) = $this->restTagsPostWithHttpInfo($_rest_tags, $contentType);
        return $response;
    }

    /**
     * Operation restTagsPostWithHttpInfo
     *
     * Create a tag
     *
     * @param  \ck/plenty-client\Model\RestTagsPostRequest|null $_rest_tags (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck/plenty-client\Model\Tag, HTTP status code, HTTP response headers (array of strings)
     */
    public function restTagsPostWithHttpInfo(
        ?\ck/plenty-client\Model\RestTagsPostRequest $_rest_tags = null,
        string $contentType = self::contentTypes['restTagsPost'][0]
    ): array
    {
        $request = $this->restTagsPostRequest($_rest_tags, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck/plenty-client\Model\Tag' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck/plenty-client\Model\Tag' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck/plenty-client\Model\Tag', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck/plenty-client\Model\Tag';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck/plenty-client\Model\Tag',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restTagsPostAsync
     *
     * Create a tag
     *
     * @param  \ck/plenty-client\Model\RestTagsPostRequest|null $_rest_tags (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restTagsPostAsync(
        ?\ck/plenty-client\Model\RestTagsPostRequest $_rest_tags = null,
        string $contentType = self::contentTypes['restTagsPost'][0]
    ): PromiseInterface
    {
        return $this->restTagsPostAsyncWithHttpInfo($_rest_tags, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restTagsPostAsyncWithHttpInfo
     *
     * Create a tag
     *
     * @param  \ck/plenty-client\Model\RestTagsPostRequest|null $_rest_tags (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restTagsPostAsyncWithHttpInfo(
        $_rest_tags = null,
        string $contentType = self::contentTypes['restTagsPost'][0]
    ): PromiseInterface
    {
        $returnType = '\ck/plenty-client\Model\Tag';
        $request = $this->restTagsPostRequest($_rest_tags, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restTagsPost'
     *
     * @param  \ck/plenty-client\Model\RestTagsPostRequest|null $_rest_tags (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restTagsPostRequest(
        $_rest_tags = null,
        string $contentType = self::contentTypes['restTagsPost'][0]
    ): Request
    {



        $resourcePath = '/rest/tags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($_rest_tags)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_rest_tags));
            } else {
                $httpBody = $_rest_tags;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restTagsRelationshipsDelete
     *
     * Delete tag relationships
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsRelationshipsDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object
     */
    public function restTagsRelationshipsDelete(
        string $contentType = self::contentTypes['restTagsRelationshipsDelete'][0]
    ): object
    {
        list($response) = $this->restTagsRelationshipsDeleteWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation restTagsRelationshipsDeleteWithHttpInfo
     *
     * Delete tag relationships
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsRelationshipsDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restTagsRelationshipsDeleteWithHttpInfo(
        string $contentType = self::contentTypes['restTagsRelationshipsDelete'][0]
    ): array
    {
        $request = $this->restTagsRelationshipsDeleteRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restTagsRelationshipsDeleteAsync
     *
     * Delete tag relationships
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsRelationshipsDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restTagsRelationshipsDeleteAsync(
        string $contentType = self::contentTypes['restTagsRelationshipsDelete'][0]
    ): PromiseInterface
    {
        return $this->restTagsRelationshipsDeleteAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restTagsRelationshipsDeleteAsyncWithHttpInfo
     *
     * Delete tag relationships
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsRelationshipsDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restTagsRelationshipsDeleteAsyncWithHttpInfo(
        string $contentType = self::contentTypes['restTagsRelationshipsDelete'][0]
    ): PromiseInterface
    {
        $returnType = 'object';
        $request = $this->restTagsRelationshipsDeleteRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restTagsRelationshipsDelete'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsRelationshipsDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restTagsRelationshipsDeleteRequest(
        string $contentType = self::contentTypes['restTagsRelationshipsDelete'][0]
    ): Request
    {


        $resourcePath = '/rest/tags/relationships';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restTagsRelationshipsGet
     *
     * List relationships
     *
     * @param  string|null $with Includes the specified tag information in the results. The following parameters are available: &lt;ul&gt;&lt;li&gt;availability &#x3D; The tag availability&lt;/li&gt;&lt;li&gt;tag &#x3D; The tag&lt;/li&gt;&lt;/ul&gt;More than one parameter should be separated by commas. (optional)
     * @param  int|null $tag_id Filter restricts the list of results to tag relationships with the specified tag ID. The tag ID must be specified. (optional)
     * @param  string|null $tag_type Filter restricts the list of results to tag relationships with the specified tag type. The tag type must be specified. (optional)
     * @param  int|null $relationship_value Filter restricts the list of results to tag relationships with the specified relationship value. This is the ID of the data record. The relationship value must be specified. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsRelationshipsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object
     */
    public function restTagsRelationshipsGet(
        ?string $with = null,
        ?int $tag_id = null,
        ?string $tag_type = null,
        ?int $relationship_value = null,
        string $contentType = self::contentTypes['restTagsRelationshipsGet'][0]
    ): object
    {
        list($response) = $this->restTagsRelationshipsGetWithHttpInfo($with, $tag_id, $tag_type, $relationship_value, $contentType);
        return $response;
    }

    /**
     * Operation restTagsRelationshipsGetWithHttpInfo
     *
     * List relationships
     *
     * @param  string|null $with Includes the specified tag information in the results. The following parameters are available: &lt;ul&gt;&lt;li&gt;availability &#x3D; The tag availability&lt;/li&gt;&lt;li&gt;tag &#x3D; The tag&lt;/li&gt;&lt;/ul&gt;More than one parameter should be separated by commas. (optional)
     * @param  int|null $tag_id Filter restricts the list of results to tag relationships with the specified tag ID. The tag ID must be specified. (optional)
     * @param  string|null $tag_type Filter restricts the list of results to tag relationships with the specified tag type. The tag type must be specified. (optional)
     * @param  int|null $relationship_value Filter restricts the list of results to tag relationships with the specified relationship value. This is the ID of the data record. The relationship value must be specified. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsRelationshipsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restTagsRelationshipsGetWithHttpInfo(
        ?string $with = null,
        ?int $tag_id = null,
        ?string $tag_type = null,
        ?int $relationship_value = null,
        string $contentType = self::contentTypes['restTagsRelationshipsGet'][0]
    ): array
    {
        $request = $this->restTagsRelationshipsGetRequest($with, $tag_id, $tag_type, $relationship_value, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restTagsRelationshipsGetAsync
     *
     * List relationships
     *
     * @param  string|null $with Includes the specified tag information in the results. The following parameters are available: &lt;ul&gt;&lt;li&gt;availability &#x3D; The tag availability&lt;/li&gt;&lt;li&gt;tag &#x3D; The tag&lt;/li&gt;&lt;/ul&gt;More than one parameter should be separated by commas. (optional)
     * @param  int|null $tag_id Filter restricts the list of results to tag relationships with the specified tag ID. The tag ID must be specified. (optional)
     * @param  string|null $tag_type Filter restricts the list of results to tag relationships with the specified tag type. The tag type must be specified. (optional)
     * @param  int|null $relationship_value Filter restricts the list of results to tag relationships with the specified relationship value. This is the ID of the data record. The relationship value must be specified. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsRelationshipsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restTagsRelationshipsGetAsync(
        ?string $with = null,
        ?int $tag_id = null,
        ?string $tag_type = null,
        ?int $relationship_value = null,
        string $contentType = self::contentTypes['restTagsRelationshipsGet'][0]
    ): PromiseInterface
    {
        return $this->restTagsRelationshipsGetAsyncWithHttpInfo($with, $tag_id, $tag_type, $relationship_value, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restTagsRelationshipsGetAsyncWithHttpInfo
     *
     * List relationships
     *
     * @param  string|null $with Includes the specified tag information in the results. The following parameters are available: &lt;ul&gt;&lt;li&gt;availability &#x3D; The tag availability&lt;/li&gt;&lt;li&gt;tag &#x3D; The tag&lt;/li&gt;&lt;/ul&gt;More than one parameter should be separated by commas. (optional)
     * @param  int|null $tag_id Filter restricts the list of results to tag relationships with the specified tag ID. The tag ID must be specified. (optional)
     * @param  string|null $tag_type Filter restricts the list of results to tag relationships with the specified tag type. The tag type must be specified. (optional)
     * @param  int|null $relationship_value Filter restricts the list of results to tag relationships with the specified relationship value. This is the ID of the data record. The relationship value must be specified. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsRelationshipsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restTagsRelationshipsGetAsyncWithHttpInfo(
        $with = null,
        $tag_id = null,
        $tag_type = null,
        $relationship_value = null,
        string $contentType = self::contentTypes['restTagsRelationshipsGet'][0]
    ): PromiseInterface
    {
        $returnType = 'object';
        $request = $this->restTagsRelationshipsGetRequest($with, $tag_id, $tag_type, $relationship_value, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restTagsRelationshipsGet'
     *
     * @param  string|null $with Includes the specified tag information in the results. The following parameters are available: &lt;ul&gt;&lt;li&gt;availability &#x3D; The tag availability&lt;/li&gt;&lt;li&gt;tag &#x3D; The tag&lt;/li&gt;&lt;/ul&gt;More than one parameter should be separated by commas. (optional)
     * @param  int|null $tag_id Filter restricts the list of results to tag relationships with the specified tag ID. The tag ID must be specified. (optional)
     * @param  string|null $tag_type Filter restricts the list of results to tag relationships with the specified tag type. The tag type must be specified. (optional)
     * @param  int|null $relationship_value Filter restricts the list of results to tag relationships with the specified relationship value. This is the ID of the data record. The relationship value must be specified. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsRelationshipsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restTagsRelationshipsGetRequest(
        $with = null,
        $tag_id = null,
        $tag_type = null,
        $relationship_value = null,
        string $contentType = self::contentTypes['restTagsRelationshipsGet'][0]
    ): Request
    {






        $resourcePath = '/rest/tags/relationships';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with,
            'with', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tag_id,
            'tagId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tag_type,
            'tagType', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $relationship_value,
            'relationshipValue', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restTagsRelationshipsPost
     *
     * Create tag relationship
     *
     * @param  int|null $tag_id The ID of the tag. (optional)
     * @param  string|null $tag_type The type of tag. Allowed values are category, ticket, variation, board, contact. (optional)
     * @param  int|null $relationship_value The ID of the data record for which a tag relationship is created. (optional)
     * @param  string|null $relatonship_uuid5 The ID of the data record for which a tag relationship is created. For models with uuid5 as primary key. (optional)
     * @param  \ck/plenty-client\Model\RestTagsRelationshipsPostRequest|null $_rest_tags_relationships _rest_tags_relationships (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsRelationshipsPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck/plenty-client\Model\TagRelationship
     */
    public function restTagsRelationshipsPost(
        ?int $tag_id = null,
        ?string $tag_type = null,
        ?int $relationship_value = null,
        ?string $relatonship_uuid5 = null,
        ?\ck/plenty-client\Model\RestTagsRelationshipsPostRequest $_rest_tags_relationships = null,
        string $contentType = self::contentTypes['restTagsRelationshipsPost'][0]
    ): \ck/plenty-client\Model\TagRelationship
    {
        list($response) = $this->restTagsRelationshipsPostWithHttpInfo($tag_id, $tag_type, $relationship_value, $relatonship_uuid5, $_rest_tags_relationships, $contentType);
        return $response;
    }

    /**
     * Operation restTagsRelationshipsPostWithHttpInfo
     *
     * Create tag relationship
     *
     * @param  int|null $tag_id The ID of the tag. (optional)
     * @param  string|null $tag_type The type of tag. Allowed values are category, ticket, variation, board, contact. (optional)
     * @param  int|null $relationship_value The ID of the data record for which a tag relationship is created. (optional)
     * @param  string|null $relatonship_uuid5 The ID of the data record for which a tag relationship is created. For models with uuid5 as primary key. (optional)
     * @param  \ck/plenty-client\Model\RestTagsRelationshipsPostRequest|null $_rest_tags_relationships (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsRelationshipsPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck/plenty-client\Model\TagRelationship, HTTP status code, HTTP response headers (array of strings)
     */
    public function restTagsRelationshipsPostWithHttpInfo(
        ?int $tag_id = null,
        ?string $tag_type = null,
        ?int $relationship_value = null,
        ?string $relatonship_uuid5 = null,
        ?\ck/plenty-client\Model\RestTagsRelationshipsPostRequest $_rest_tags_relationships = null,
        string $contentType = self::contentTypes['restTagsRelationshipsPost'][0]
    ): array
    {
        $request = $this->restTagsRelationshipsPostRequest($tag_id, $tag_type, $relationship_value, $relatonship_uuid5, $_rest_tags_relationships, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck/plenty-client\Model\TagRelationship' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck/plenty-client\Model\TagRelationship' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck/plenty-client\Model\TagRelationship', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck/plenty-client\Model\TagRelationship';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck/plenty-client\Model\TagRelationship',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restTagsRelationshipsPostAsync
     *
     * Create tag relationship
     *
     * @param  int|null $tag_id The ID of the tag. (optional)
     * @param  string|null $tag_type The type of tag. Allowed values are category, ticket, variation, board, contact. (optional)
     * @param  int|null $relationship_value The ID of the data record for which a tag relationship is created. (optional)
     * @param  string|null $relatonship_uuid5 The ID of the data record for which a tag relationship is created. For models with uuid5 as primary key. (optional)
     * @param  \ck/plenty-client\Model\RestTagsRelationshipsPostRequest|null $_rest_tags_relationships (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsRelationshipsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restTagsRelationshipsPostAsync(
        ?int $tag_id = null,
        ?string $tag_type = null,
        ?int $relationship_value = null,
        ?string $relatonship_uuid5 = null,
        ?\ck/plenty-client\Model\RestTagsRelationshipsPostRequest $_rest_tags_relationships = null,
        string $contentType = self::contentTypes['restTagsRelationshipsPost'][0]
    ): PromiseInterface
    {
        return $this->restTagsRelationshipsPostAsyncWithHttpInfo($tag_id, $tag_type, $relationship_value, $relatonship_uuid5, $_rest_tags_relationships, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restTagsRelationshipsPostAsyncWithHttpInfo
     *
     * Create tag relationship
     *
     * @param  int|null $tag_id The ID of the tag. (optional)
     * @param  string|null $tag_type The type of tag. Allowed values are category, ticket, variation, board, contact. (optional)
     * @param  int|null $relationship_value The ID of the data record for which a tag relationship is created. (optional)
     * @param  string|null $relatonship_uuid5 The ID of the data record for which a tag relationship is created. For models with uuid5 as primary key. (optional)
     * @param  \ck/plenty-client\Model\RestTagsRelationshipsPostRequest|null $_rest_tags_relationships (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsRelationshipsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restTagsRelationshipsPostAsyncWithHttpInfo(
        $tag_id = null,
        $tag_type = null,
        $relationship_value = null,
        $relatonship_uuid5 = null,
        $_rest_tags_relationships = null,
        string $contentType = self::contentTypes['restTagsRelationshipsPost'][0]
    ): PromiseInterface
    {
        $returnType = '\ck/plenty-client\Model\TagRelationship';
        $request = $this->restTagsRelationshipsPostRequest($tag_id, $tag_type, $relationship_value, $relatonship_uuid5, $_rest_tags_relationships, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restTagsRelationshipsPost'
     *
     * @param  int|null $tag_id The ID of the tag. (optional)
     * @param  string|null $tag_type The type of tag. Allowed values are category, ticket, variation, board, contact. (optional)
     * @param  int|null $relationship_value The ID of the data record for which a tag relationship is created. (optional)
     * @param  string|null $relatonship_uuid5 The ID of the data record for which a tag relationship is created. For models with uuid5 as primary key. (optional)
     * @param  \ck/plenty-client\Model\RestTagsRelationshipsPostRequest|null $_rest_tags_relationships (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsRelationshipsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restTagsRelationshipsPostRequest(
        $tag_id = null,
        $tag_type = null,
        $relationship_value = null,
        $relatonship_uuid5 = null,
        $_rest_tags_relationships = null,
        string $contentType = self::contentTypes['restTagsRelationshipsPost'][0]
    ): Request
    {







        $resourcePath = '/rest/tags/relationships';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tag_id,
            'tagId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tag_type,
            'tagType', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $relationship_value,
            'relationshipValue', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $relatonship_uuid5,
            'relatonshipUUID5', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($_rest_tags_relationships)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_rest_tags_relationships));
            } else {
                $httpBody = $_rest_tags_relationships;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restTagsRelationshipsRelationshipValueTagTypeIdDelete
     *
     * Delete tag relationship
     *
     * @param  int $relationship_value The value of the relationship. This value is the ID of the data record the tag is linked to, e.g. item ID 1234. (required)
     * @param  string $relationship_type The type of the relationship, e.g. &lt;b&gt;category&lt;/b&gt;, &lt;b&gt;item&lt;/b&gt; or &lt;b&gt;ticket&lt;/b&gt; (required)
     * @param  string $tag_type The type of the tag (required)
     * @param  int $id The ID of the tag (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsRelationshipsRelationshipValueTagTypeIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return void
     */
    public function restTagsRelationshipsRelationshipValueTagTypeIdDelete(
        int $relationship_value,
        string $relationship_type,
        string $tag_type,
        int $id,
        string $contentType = self::contentTypes['restTagsRelationshipsRelationshipValueTagTypeIdDelete'][0]
    ): void
    {
        $this->restTagsRelationshipsRelationshipValueTagTypeIdDeleteWithHttpInfo($relationship_value, $relationship_type, $tag_type, $id, $contentType);
    }

    /**
     * Operation restTagsRelationshipsRelationshipValueTagTypeIdDeleteWithHttpInfo
     *
     * Delete tag relationship
     *
     * @param  int $relationship_value The value of the relationship. This value is the ID of the data record the tag is linked to, e.g. item ID 1234. (required)
     * @param  string $relationship_type The type of the relationship, e.g. &lt;b&gt;category&lt;/b&gt;, &lt;b&gt;item&lt;/b&gt; or &lt;b&gt;ticket&lt;/b&gt; (required)
     * @param  string $tag_type The type of the tag (required)
     * @param  int $id The ID of the tag (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsRelationshipsRelationshipValueTagTypeIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restTagsRelationshipsRelationshipValueTagTypeIdDeleteWithHttpInfo(
        int $relationship_value,
        string $relationship_type,
        string $tag_type,
        int $id,
        string $contentType = self::contentTypes['restTagsRelationshipsRelationshipValueTagTypeIdDelete'][0]
    ): array
    {
        $request = $this->restTagsRelationshipsRelationshipValueTagTypeIdDeleteRequest($relationship_value, $relationship_type, $tag_type, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restTagsRelationshipsRelationshipValueTagTypeIdDeleteAsync
     *
     * Delete tag relationship
     *
     * @param  int $relationship_value The value of the relationship. This value is the ID of the data record the tag is linked to, e.g. item ID 1234. (required)
     * @param  string $relationship_type The type of the relationship, e.g. &lt;b&gt;category&lt;/b&gt;, &lt;b&gt;item&lt;/b&gt; or &lt;b&gt;ticket&lt;/b&gt; (required)
     * @param  string $tag_type The type of the tag (required)
     * @param  int $id The ID of the tag (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsRelationshipsRelationshipValueTagTypeIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restTagsRelationshipsRelationshipValueTagTypeIdDeleteAsync(
        int $relationship_value,
        string $relationship_type,
        string $tag_type,
        int $id,
        string $contentType = self::contentTypes['restTagsRelationshipsRelationshipValueTagTypeIdDelete'][0]
    ): PromiseInterface
    {
        return $this->restTagsRelationshipsRelationshipValueTagTypeIdDeleteAsyncWithHttpInfo($relationship_value, $relationship_type, $tag_type, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restTagsRelationshipsRelationshipValueTagTypeIdDeleteAsyncWithHttpInfo
     *
     * Delete tag relationship
     *
     * @param  int $relationship_value The value of the relationship. This value is the ID of the data record the tag is linked to, e.g. item ID 1234. (required)
     * @param  string $relationship_type The type of the relationship, e.g. &lt;b&gt;category&lt;/b&gt;, &lt;b&gt;item&lt;/b&gt; or &lt;b&gt;ticket&lt;/b&gt; (required)
     * @param  string $tag_type The type of the tag (required)
     * @param  int $id The ID of the tag (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsRelationshipsRelationshipValueTagTypeIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restTagsRelationshipsRelationshipValueTagTypeIdDeleteAsyncWithHttpInfo(
        $relationship_value,
        $relationship_type,
        $tag_type,
        $id,
        string $contentType = self::contentTypes['restTagsRelationshipsRelationshipValueTagTypeIdDelete'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->restTagsRelationshipsRelationshipValueTagTypeIdDeleteRequest($relationship_value, $relationship_type, $tag_type, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restTagsRelationshipsRelationshipValueTagTypeIdDelete'
     *
     * @param  int $relationship_value The value of the relationship. This value is the ID of the data record the tag is linked to, e.g. item ID 1234. (required)
     * @param  string $relationship_type The type of the relationship, e.g. &lt;b&gt;category&lt;/b&gt;, &lt;b&gt;item&lt;/b&gt; or &lt;b&gt;ticket&lt;/b&gt; (required)
     * @param  string $tag_type The type of the tag (required)
     * @param  int $id The ID of the tag (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsRelationshipsRelationshipValueTagTypeIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restTagsRelationshipsRelationshipValueTagTypeIdDeleteRequest(
        $relationship_value,
        $relationship_type,
        $tag_type,
        $id,
        string $contentType = self::contentTypes['restTagsRelationshipsRelationshipValueTagTypeIdDelete'][0]
    ): Request
    {

        // verify the required parameter 'relationship_value' is set
        if ($relationship_value === null || (is_array($relationship_value) && count($relationship_value) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $relationship_value when calling restTagsRelationshipsRelationshipValueTagTypeIdDelete'
            );
        }

        // verify the required parameter 'relationship_type' is set
        if ($relationship_type === null || (is_array($relationship_type) && count($relationship_type) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $relationship_type when calling restTagsRelationshipsRelationshipValueTagTypeIdDelete'
            );
        }

        // verify the required parameter 'tag_type' is set
        if ($tag_type === null || (is_array($tag_type) && count($tag_type) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $tag_type when calling restTagsRelationshipsRelationshipValueTagTypeIdDelete'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling restTagsRelationshipsRelationshipValueTagTypeIdDelete'
            );
        }


        $resourcePath = '/rest/tags/relationships/{relationshipValue}/{tagType}/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $relationship_type,
            'relationshipType', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($relationship_value !== null) {
            $resourcePath = str_replace(
                '{' . 'relationshipValue' . '}',
                ObjectSerializer::toPathValue($relationship_value),
                $resourcePath
            );
        }
        // path params
        if ($tag_type !== null) {
            $resourcePath = str_replace(
                '{' . 'tagType' . '}',
                ObjectSerializer::toPathValue($tag_type),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restTagsRelationshipsRelationshipValueTagTypeIdPut
     *
     * Update tag relationship
     *
     * @param  int $relationship_value relationship_value (required)
     * @param  int $tag_type tag_type (required)
     * @param  int $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsRelationshipsRelationshipValueTagTypeIdPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck/plenty-client\Model\TagRelationship
     */
    public function restTagsRelationshipsRelationshipValueTagTypeIdPut(
        int $relationship_value,
        int $tag_type,
        int $id,
        string $contentType = self::contentTypes['restTagsRelationshipsRelationshipValueTagTypeIdPut'][0]
    ): \ck/plenty-client\Model\TagRelationship
    {
        list($response) = $this->restTagsRelationshipsRelationshipValueTagTypeIdPutWithHttpInfo($relationship_value, $tag_type, $id, $contentType);
        return $response;
    }

    /**
     * Operation restTagsRelationshipsRelationshipValueTagTypeIdPutWithHttpInfo
     *
     * Update tag relationship
     *
     * @param  int $relationship_value (required)
     * @param  int $tag_type (required)
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsRelationshipsRelationshipValueTagTypeIdPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck/plenty-client\Model\TagRelationship, HTTP status code, HTTP response headers (array of strings)
     */
    public function restTagsRelationshipsRelationshipValueTagTypeIdPutWithHttpInfo(
        int $relationship_value,
        int $tag_type,
        int $id,
        string $contentType = self::contentTypes['restTagsRelationshipsRelationshipValueTagTypeIdPut'][0]
    ): array
    {
        $request = $this->restTagsRelationshipsRelationshipValueTagTypeIdPutRequest($relationship_value, $tag_type, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck/plenty-client\Model\TagRelationship' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck/plenty-client\Model\TagRelationship' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck/plenty-client\Model\TagRelationship', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck/plenty-client\Model\TagRelationship';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck/plenty-client\Model\TagRelationship',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restTagsRelationshipsRelationshipValueTagTypeIdPutAsync
     *
     * Update tag relationship
     *
     * @param  int $relationship_value (required)
     * @param  int $tag_type (required)
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsRelationshipsRelationshipValueTagTypeIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restTagsRelationshipsRelationshipValueTagTypeIdPutAsync(
        int $relationship_value,
        int $tag_type,
        int $id,
        string $contentType = self::contentTypes['restTagsRelationshipsRelationshipValueTagTypeIdPut'][0]
    ): PromiseInterface
    {
        return $this->restTagsRelationshipsRelationshipValueTagTypeIdPutAsyncWithHttpInfo($relationship_value, $tag_type, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restTagsRelationshipsRelationshipValueTagTypeIdPutAsyncWithHttpInfo
     *
     * Update tag relationship
     *
     * @param  int $relationship_value (required)
     * @param  int $tag_type (required)
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsRelationshipsRelationshipValueTagTypeIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restTagsRelationshipsRelationshipValueTagTypeIdPutAsyncWithHttpInfo(
        $relationship_value,
        $tag_type,
        $id,
        string $contentType = self::contentTypes['restTagsRelationshipsRelationshipValueTagTypeIdPut'][0]
    ): PromiseInterface
    {
        $returnType = '\ck/plenty-client\Model\TagRelationship';
        $request = $this->restTagsRelationshipsRelationshipValueTagTypeIdPutRequest($relationship_value, $tag_type, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restTagsRelationshipsRelationshipValueTagTypeIdPut'
     *
     * @param  int $relationship_value (required)
     * @param  int $tag_type (required)
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restTagsRelationshipsRelationshipValueTagTypeIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restTagsRelationshipsRelationshipValueTagTypeIdPutRequest(
        $relationship_value,
        $tag_type,
        $id,
        string $contentType = self::contentTypes['restTagsRelationshipsRelationshipValueTagTypeIdPut'][0]
    ): Request
    {

        // verify the required parameter 'relationship_value' is set
        if ($relationship_value === null || (is_array($relationship_value) && count($relationship_value) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $relationship_value when calling restTagsRelationshipsRelationshipValueTagTypeIdPut'
            );
        }

        // verify the required parameter 'tag_type' is set
        if ($tag_type === null || (is_array($tag_type) && count($tag_type) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $tag_type when calling restTagsRelationshipsRelationshipValueTagTypeIdPut'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling restTagsRelationshipsRelationshipValueTagTypeIdPut'
            );
        }


        $resourcePath = '/rest/tags/relationships/{relationshipValue}/{tagType}/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($relationship_value !== null) {
            $resourcePath = str_replace(
                '{' . 'relationshipValue' . '}',
                ObjectSerializer::toPathValue($relationship_value),
                $resourcePath
            );
        }
        // path params
        if ($tag_type !== null) {
            $resourcePath = str_replace(
                '{' . 'tagType' . '}',
                ObjectSerializer::toPathValue($tag_type),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
