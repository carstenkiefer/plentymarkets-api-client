<?php
/**
 * PaymentApi
 * PHP version 8.1
 *
 * @package  ck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ck\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use ck\ApiException;
use ck\Configuration;
use ck\HeaderSelector;
use ck\ObjectSerializer;

/**
 * PaymentApi Class Doc Comment
 *
 * @package  ck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PaymentApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'restPaymentPaymentIdContactContactIdPost' => [
            'application/json',
        ],
        'restPaymentPaymentIdContactDelete' => [
            'application/json',
        ],
        'restPaymentPaymentIdOrderDelete' => [
            'application/json',
        ],
        'restPaymentPaymentIdOrderOrderIdPost' => [
            'application/json',
        ],
        'restPaymentPropertiesTypesNamesNameIdGet' => [
            'application/json',
        ],
        'restPaymentPropertiesTypesNamesPost' => [
            'application/json',
        ],
        'restPaymentPropertiesTypesNamesPut' => [
            'application/json',
        ],
        'restPaymentsEntrydateGet' => [
            'application/json',
        ],
        'restPaymentsGet' => [
            'application/json',
        ],
        'restPaymentsImportdateGet' => [
            'application/json',
        ],
        'restPaymentsMethodNamesGet' => [
            'application/json',
        ],
        'restPaymentsMethodNamesPaymentMethodIdGet' => [
            'application/json',
        ],
        'restPaymentsMethodNamesPaymentMethodIdLangGet' => [
            'application/json',
        ],
        'restPaymentsMethodsEbicsGet' => [
            'application/json',
        ],
        'restPaymentsMethodsEbicsPost' => [
            'application/json',
        ],
        'restPaymentsMethodsGet' => [
            'application/json',
        ],
        'restPaymentsMethodsHbciGet' => [
            'application/json',
        ],
        'restPaymentsMethodsListBackendActiveLanguageGet' => [
            'application/json',
        ],
        'restPaymentsMethodsListBackendIconGet' => [
            'application/json',
        ],
        'restPaymentsMethodsListBackendSearchableLanguageGet' => [
            'application/json',
        ],
        'restPaymentsMethodsListGet' => [
            'application/json',
        ],
        'restPaymentsMethodsListHandleSubscriptionLanguageGet' => [
            'application/json',
        ],
        'restPaymentsMethodsMethodIdGet' => [
            'application/json',
        ],
        'restPaymentsMethodsPluginsPluginKeyGet' => [
            'application/json',
        ],
        'restPaymentsMethodsPost' => [
            'application/json',
        ],
        'restPaymentsMethodsPut' => [
            'application/json',
        ],
        'restPaymentsOrdersOrderIdGet' => [
            'application/json',
        ],
        'restPaymentsPaymentIdGet' => [
            'application/json',
        ],
        'restPaymentsPaymentIdPropertiesGet' => [
            'application/json',
        ],
        'restPaymentsPost' => [
            'application/json',
        ],
        'restPaymentsPropertiesDateGet' => [
            'application/json',
        ],
        'restPaymentsPropertiesGet' => [
            'application/json',
        ],
        'restPaymentsPropertiesPost' => [
            'application/json',
        ],
        'restPaymentsPropertiesPropertyIdGet' => [
            'application/json',
        ],
        'restPaymentsPropertiesPut' => [
            'application/json',
        ],
        'restPaymentsPropertiesTypesGet' => [
            'application/json',
        ],
        'restPaymentsPropertiesTypesPost' => [
            'application/json',
        ],
        'restPaymentsPropertiesTypesPut' => [
            'application/json',
        ],
        'restPaymentsPropertiesTypesTypeIdGet' => [
            'application/json',
        ],
        'restPaymentsPropertyPropertyTypeIdPropertyValueGet' => [
            'application/json',
        ],
        'restPaymentsPut' => [
            'application/json',
        ],
        'restPaymentsStatusStatusIdGet' => [
            'application/json',
        ],
        'restPaymentsTransactionsTransactionTypeIdGet' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation restPaymentPaymentIdContactContactIdPost
     *
     * Create Payment-Contact-Relation
     *
     * @param  int $payment_id payment_id (required)
     * @param  int $contact_id contact_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentPaymentIdContactContactIdPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\PaymentContactRelation
     */
    public function restPaymentPaymentIdContactContactIdPost(
        int $payment_id,
        int $contact_id,
        string $contentType = self::contentTypes['restPaymentPaymentIdContactContactIdPost'][0]
    ): \ck\Model\PaymentContactRelation
    {
        list($response) = $this->restPaymentPaymentIdContactContactIdPostWithHttpInfo($payment_id, $contact_id, $contentType);
        return $response;
    }

    /**
     * Operation restPaymentPaymentIdContactContactIdPostWithHttpInfo
     *
     * Create Payment-Contact-Relation
     *
     * @param  int $payment_id (required)
     * @param  int $contact_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentPaymentIdContactContactIdPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\PaymentContactRelation, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPaymentPaymentIdContactContactIdPostWithHttpInfo(
        int $payment_id,
        int $contact_id,
        string $contentType = self::contentTypes['restPaymentPaymentIdContactContactIdPost'][0]
    ): array
    {
        $request = $this->restPaymentPaymentIdContactContactIdPostRequest($payment_id, $contact_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\PaymentContactRelation' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\PaymentContactRelation' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\PaymentContactRelation', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\PaymentContactRelation';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\PaymentContactRelation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPaymentPaymentIdContactContactIdPostAsync
     *
     * Create Payment-Contact-Relation
     *
     * @param  int $payment_id (required)
     * @param  int $contact_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentPaymentIdContactContactIdPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentPaymentIdContactContactIdPostAsync(
        int $payment_id,
        int $contact_id,
        string $contentType = self::contentTypes['restPaymentPaymentIdContactContactIdPost'][0]
    ): PromiseInterface
    {
        return $this->restPaymentPaymentIdContactContactIdPostAsyncWithHttpInfo($payment_id, $contact_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPaymentPaymentIdContactContactIdPostAsyncWithHttpInfo
     *
     * Create Payment-Contact-Relation
     *
     * @param  int $payment_id (required)
     * @param  int $contact_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentPaymentIdContactContactIdPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentPaymentIdContactContactIdPostAsyncWithHttpInfo(
        $payment_id,
        $contact_id,
        string $contentType = self::contentTypes['restPaymentPaymentIdContactContactIdPost'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\PaymentContactRelation';
        $request = $this->restPaymentPaymentIdContactContactIdPostRequest($payment_id, $contact_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPaymentPaymentIdContactContactIdPost'
     *
     * @param  int $payment_id (required)
     * @param  int $contact_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentPaymentIdContactContactIdPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPaymentPaymentIdContactContactIdPostRequest(
        $payment_id,
        $contact_id,
        string $contentType = self::contentTypes['restPaymentPaymentIdContactContactIdPost'][0]
    ): Request
    {

        // verify the required parameter 'payment_id' is set
        if ($payment_id === null || (is_array($payment_id) && count($payment_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payment_id when calling restPaymentPaymentIdContactContactIdPost'
            );
        }

        // verify the required parameter 'contact_id' is set
        if ($contact_id === null || (is_array($contact_id) && count($contact_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $contact_id when calling restPaymentPaymentIdContactContactIdPost'
            );
        }


        $resourcePath = '/rest/payment/{paymentId}/contact/{contactId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentId' . '}',
                ObjectSerializer::toPathValue($payment_id),
                $resourcePath
            );
        }
        // path params
        if ($contact_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contactId' . '}',
                ObjectSerializer::toPathValue($contact_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPaymentPaymentIdContactDelete
     *
     * Delete Payment-Contact-Relation
     *
     * @param  int $payment_id payment_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentPaymentIdContactDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return void
     */
    public function restPaymentPaymentIdContactDelete(
        int $payment_id,
        string $contentType = self::contentTypes['restPaymentPaymentIdContactDelete'][0]
    ): void
    {
        $this->restPaymentPaymentIdContactDeleteWithHttpInfo($payment_id, $contentType);
    }

    /**
     * Operation restPaymentPaymentIdContactDeleteWithHttpInfo
     *
     * Delete Payment-Contact-Relation
     *
     * @param  int $payment_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentPaymentIdContactDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPaymentPaymentIdContactDeleteWithHttpInfo(
        int $payment_id,
        string $contentType = self::contentTypes['restPaymentPaymentIdContactDelete'][0]
    ): array
    {
        $request = $this->restPaymentPaymentIdContactDeleteRequest($payment_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restPaymentPaymentIdContactDeleteAsync
     *
     * Delete Payment-Contact-Relation
     *
     * @param  int $payment_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentPaymentIdContactDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentPaymentIdContactDeleteAsync(
        int $payment_id,
        string $contentType = self::contentTypes['restPaymentPaymentIdContactDelete'][0]
    ): PromiseInterface
    {
        return $this->restPaymentPaymentIdContactDeleteAsyncWithHttpInfo($payment_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPaymentPaymentIdContactDeleteAsyncWithHttpInfo
     *
     * Delete Payment-Contact-Relation
     *
     * @param  int $payment_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentPaymentIdContactDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentPaymentIdContactDeleteAsyncWithHttpInfo(
        $payment_id,
        string $contentType = self::contentTypes['restPaymentPaymentIdContactDelete'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->restPaymentPaymentIdContactDeleteRequest($payment_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPaymentPaymentIdContactDelete'
     *
     * @param  int $payment_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentPaymentIdContactDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPaymentPaymentIdContactDeleteRequest(
        $payment_id,
        string $contentType = self::contentTypes['restPaymentPaymentIdContactDelete'][0]
    ): Request
    {

        // verify the required parameter 'payment_id' is set
        if ($payment_id === null || (is_array($payment_id) && count($payment_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payment_id when calling restPaymentPaymentIdContactDelete'
            );
        }


        $resourcePath = '/rest/payment/{paymentId}/contact';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentId' . '}',
                ObjectSerializer::toPathValue($payment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPaymentPaymentIdOrderDelete
     *
     * Delete Payment-Order-Relation
     *
     * @param  int $payment_id payment_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentPaymentIdOrderDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return void
     */
    public function restPaymentPaymentIdOrderDelete(
        int $payment_id,
        string $contentType = self::contentTypes['restPaymentPaymentIdOrderDelete'][0]
    ): void
    {
        $this->restPaymentPaymentIdOrderDeleteWithHttpInfo($payment_id, $contentType);
    }

    /**
     * Operation restPaymentPaymentIdOrderDeleteWithHttpInfo
     *
     * Delete Payment-Order-Relation
     *
     * @param  int $payment_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentPaymentIdOrderDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPaymentPaymentIdOrderDeleteWithHttpInfo(
        int $payment_id,
        string $contentType = self::contentTypes['restPaymentPaymentIdOrderDelete'][0]
    ): array
    {
        $request = $this->restPaymentPaymentIdOrderDeleteRequest($payment_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restPaymentPaymentIdOrderDeleteAsync
     *
     * Delete Payment-Order-Relation
     *
     * @param  int $payment_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentPaymentIdOrderDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentPaymentIdOrderDeleteAsync(
        int $payment_id,
        string $contentType = self::contentTypes['restPaymentPaymentIdOrderDelete'][0]
    ): PromiseInterface
    {
        return $this->restPaymentPaymentIdOrderDeleteAsyncWithHttpInfo($payment_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPaymentPaymentIdOrderDeleteAsyncWithHttpInfo
     *
     * Delete Payment-Order-Relation
     *
     * @param  int $payment_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentPaymentIdOrderDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentPaymentIdOrderDeleteAsyncWithHttpInfo(
        $payment_id,
        string $contentType = self::contentTypes['restPaymentPaymentIdOrderDelete'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->restPaymentPaymentIdOrderDeleteRequest($payment_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPaymentPaymentIdOrderDelete'
     *
     * @param  int $payment_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentPaymentIdOrderDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPaymentPaymentIdOrderDeleteRequest(
        $payment_id,
        string $contentType = self::contentTypes['restPaymentPaymentIdOrderDelete'][0]
    ): Request
    {

        // verify the required parameter 'payment_id' is set
        if ($payment_id === null || (is_array($payment_id) && count($payment_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payment_id when calling restPaymentPaymentIdOrderDelete'
            );
        }


        $resourcePath = '/rest/payment/{paymentId}/order';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentId' . '}',
                ObjectSerializer::toPathValue($payment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPaymentPaymentIdOrderOrderIdPost
     *
     * Create Payment-Order-Relation
     *
     * @param  int $payment_id payment_id (required)
     * @param  int $order_id order_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentPaymentIdOrderOrderIdPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\PaymentOrderRelation
     */
    public function restPaymentPaymentIdOrderOrderIdPost(
        int $payment_id,
        int $order_id,
        string $contentType = self::contentTypes['restPaymentPaymentIdOrderOrderIdPost'][0]
    ): \ck\Model\PaymentOrderRelation
    {
        list($response) = $this->restPaymentPaymentIdOrderOrderIdPostWithHttpInfo($payment_id, $order_id, $contentType);
        return $response;
    }

    /**
     * Operation restPaymentPaymentIdOrderOrderIdPostWithHttpInfo
     *
     * Create Payment-Order-Relation
     *
     * @param  int $payment_id (required)
     * @param  int $order_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentPaymentIdOrderOrderIdPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\PaymentOrderRelation, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPaymentPaymentIdOrderOrderIdPostWithHttpInfo(
        int $payment_id,
        int $order_id,
        string $contentType = self::contentTypes['restPaymentPaymentIdOrderOrderIdPost'][0]
    ): array
    {
        $request = $this->restPaymentPaymentIdOrderOrderIdPostRequest($payment_id, $order_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\PaymentOrderRelation' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\PaymentOrderRelation' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\PaymentOrderRelation', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\PaymentOrderRelation';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\PaymentOrderRelation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPaymentPaymentIdOrderOrderIdPostAsync
     *
     * Create Payment-Order-Relation
     *
     * @param  int $payment_id (required)
     * @param  int $order_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentPaymentIdOrderOrderIdPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentPaymentIdOrderOrderIdPostAsync(
        int $payment_id,
        int $order_id,
        string $contentType = self::contentTypes['restPaymentPaymentIdOrderOrderIdPost'][0]
    ): PromiseInterface
    {
        return $this->restPaymentPaymentIdOrderOrderIdPostAsyncWithHttpInfo($payment_id, $order_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPaymentPaymentIdOrderOrderIdPostAsyncWithHttpInfo
     *
     * Create Payment-Order-Relation
     *
     * @param  int $payment_id (required)
     * @param  int $order_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentPaymentIdOrderOrderIdPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentPaymentIdOrderOrderIdPostAsyncWithHttpInfo(
        $payment_id,
        $order_id,
        string $contentType = self::contentTypes['restPaymentPaymentIdOrderOrderIdPost'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\PaymentOrderRelation';
        $request = $this->restPaymentPaymentIdOrderOrderIdPostRequest($payment_id, $order_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPaymentPaymentIdOrderOrderIdPost'
     *
     * @param  int $payment_id (required)
     * @param  int $order_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentPaymentIdOrderOrderIdPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPaymentPaymentIdOrderOrderIdPostRequest(
        $payment_id,
        $order_id,
        string $contentType = self::contentTypes['restPaymentPaymentIdOrderOrderIdPost'][0]
    ): Request
    {

        // verify the required parameter 'payment_id' is set
        if ($payment_id === null || (is_array($payment_id) && count($payment_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payment_id when calling restPaymentPaymentIdOrderOrderIdPost'
            );
        }

        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_id when calling restPaymentPaymentIdOrderOrderIdPost'
            );
        }


        $resourcePath = '/rest/payment/{paymentId}/order/{orderId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentId' . '}',
                ObjectSerializer::toPathValue($payment_id),
                $resourcePath
            );
        }
        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPaymentPropertiesTypesNamesNameIdGet
     *
     * Get a name of a property type
     *
     * @param  int $name_id name_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentPropertiesTypesNamesNameIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\PaymentPropertyTypeName[]
     */
    public function restPaymentPropertiesTypesNamesNameIdGet(
        int $name_id,
        string $contentType = self::contentTypes['restPaymentPropertiesTypesNamesNameIdGet'][0]
    ): array
    {
        list($response) = $this->restPaymentPropertiesTypesNamesNameIdGetWithHttpInfo($name_id, $contentType);
        return $response;
    }

    /**
     * Operation restPaymentPropertiesTypesNamesNameIdGetWithHttpInfo
     *
     * Get a name of a property type
     *
     * @param  int $name_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentPropertiesTypesNamesNameIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\PaymentPropertyTypeName[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restPaymentPropertiesTypesNamesNameIdGetWithHttpInfo(
        int $name_id,
        string $contentType = self::contentTypes['restPaymentPropertiesTypesNamesNameIdGet'][0]
    ): array
    {
        $request = $this->restPaymentPropertiesTypesNamesNameIdGetRequest($name_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\PaymentPropertyTypeName[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\PaymentPropertyTypeName[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\PaymentPropertyTypeName[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\PaymentPropertyTypeName[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\PaymentPropertyTypeName[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPaymentPropertiesTypesNamesNameIdGetAsync
     *
     * Get a name of a property type
     *
     * @param  int $name_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentPropertiesTypesNamesNameIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentPropertiesTypesNamesNameIdGetAsync(
        int $name_id,
        string $contentType = self::contentTypes['restPaymentPropertiesTypesNamesNameIdGet'][0]
    ): PromiseInterface
    {
        return $this->restPaymentPropertiesTypesNamesNameIdGetAsyncWithHttpInfo($name_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPaymentPropertiesTypesNamesNameIdGetAsyncWithHttpInfo
     *
     * Get a name of a property type
     *
     * @param  int $name_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentPropertiesTypesNamesNameIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentPropertiesTypesNamesNameIdGetAsyncWithHttpInfo(
        $name_id,
        string $contentType = self::contentTypes['restPaymentPropertiesTypesNamesNameIdGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\PaymentPropertyTypeName[]';
        $request = $this->restPaymentPropertiesTypesNamesNameIdGetRequest($name_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPaymentPropertiesTypesNamesNameIdGet'
     *
     * @param  int $name_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentPropertiesTypesNamesNameIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPaymentPropertiesTypesNamesNameIdGetRequest(
        $name_id,
        string $contentType = self::contentTypes['restPaymentPropertiesTypesNamesNameIdGet'][0]
    ): Request
    {

        // verify the required parameter 'name_id' is set
        if ($name_id === null || (is_array($name_id) && count($name_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $name_id when calling restPaymentPropertiesTypesNamesNameIdGet'
            );
        }


        $resourcePath = '/rest/payment/properties/types/names/{nameId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($name_id !== null) {
            $resourcePath = str_replace(
                '{' . 'nameId' . '}',
                ObjectSerializer::toPathValue($name_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPaymentPropertiesTypesNamesPost
     *
     * Create a name of a property type
     *
     * @param  \ck\Model\RestPaymentPropertiesTypesNamesPutRequest|null $_rest_payment_properties_types_names _rest_payment_properties_types_names (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentPropertiesTypesNamesPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\PaymentPropertyTypeName
     */
    public function restPaymentPropertiesTypesNamesPost(
        ?\ck\Model\RestPaymentPropertiesTypesNamesPutRequest $_rest_payment_properties_types_names = null,
        string $contentType = self::contentTypes['restPaymentPropertiesTypesNamesPost'][0]
    ): \ck\Model\PaymentPropertyTypeName
    {
        list($response) = $this->restPaymentPropertiesTypesNamesPostWithHttpInfo($_rest_payment_properties_types_names, $contentType);
        return $response;
    }

    /**
     * Operation restPaymentPropertiesTypesNamesPostWithHttpInfo
     *
     * Create a name of a property type
     *
     * @param  \ck\Model\RestPaymentPropertiesTypesNamesPutRequest|null $_rest_payment_properties_types_names (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentPropertiesTypesNamesPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\PaymentPropertyTypeName, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPaymentPropertiesTypesNamesPostWithHttpInfo(
        ?\ck\Model\RestPaymentPropertiesTypesNamesPutRequest $_rest_payment_properties_types_names = null,
        string $contentType = self::contentTypes['restPaymentPropertiesTypesNamesPost'][0]
    ): array
    {
        $request = $this->restPaymentPropertiesTypesNamesPostRequest($_rest_payment_properties_types_names, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\PaymentPropertyTypeName' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\PaymentPropertyTypeName' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\PaymentPropertyTypeName', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\PaymentPropertyTypeName';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\PaymentPropertyTypeName',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPaymentPropertiesTypesNamesPostAsync
     *
     * Create a name of a property type
     *
     * @param  \ck\Model\RestPaymentPropertiesTypesNamesPutRequest|null $_rest_payment_properties_types_names (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentPropertiesTypesNamesPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentPropertiesTypesNamesPostAsync(
        ?\ck\Model\RestPaymentPropertiesTypesNamesPutRequest $_rest_payment_properties_types_names = null,
        string $contentType = self::contentTypes['restPaymentPropertiesTypesNamesPost'][0]
    ): PromiseInterface
    {
        return $this->restPaymentPropertiesTypesNamesPostAsyncWithHttpInfo($_rest_payment_properties_types_names, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPaymentPropertiesTypesNamesPostAsyncWithHttpInfo
     *
     * Create a name of a property type
     *
     * @param  \ck\Model\RestPaymentPropertiesTypesNamesPutRequest|null $_rest_payment_properties_types_names (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentPropertiesTypesNamesPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentPropertiesTypesNamesPostAsyncWithHttpInfo(
        $_rest_payment_properties_types_names = null,
        string $contentType = self::contentTypes['restPaymentPropertiesTypesNamesPost'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\PaymentPropertyTypeName';
        $request = $this->restPaymentPropertiesTypesNamesPostRequest($_rest_payment_properties_types_names, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPaymentPropertiesTypesNamesPost'
     *
     * @param  \ck\Model\RestPaymentPropertiesTypesNamesPutRequest|null $_rest_payment_properties_types_names (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentPropertiesTypesNamesPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPaymentPropertiesTypesNamesPostRequest(
        $_rest_payment_properties_types_names = null,
        string $contentType = self::contentTypes['restPaymentPropertiesTypesNamesPost'][0]
    ): Request
    {



        $resourcePath = '/rest/payment/properties/types/names';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($_rest_payment_properties_types_names)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_rest_payment_properties_types_names));
            } else {
                $httpBody = $_rest_payment_properties_types_names;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPaymentPropertiesTypesNamesPut
     *
     * Update a name of a property type
     *
     * @param  \ck\Model\RestPaymentPropertiesTypesNamesPutRequest|null $_rest_payment_properties_types_names _rest_payment_properties_types_names (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentPropertiesTypesNamesPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\PaymentPropertyTypeName
     */
    public function restPaymentPropertiesTypesNamesPut(
        ?\ck\Model\RestPaymentPropertiesTypesNamesPutRequest $_rest_payment_properties_types_names = null,
        string $contentType = self::contentTypes['restPaymentPropertiesTypesNamesPut'][0]
    ): \ck\Model\PaymentPropertyTypeName
    {
        list($response) = $this->restPaymentPropertiesTypesNamesPutWithHttpInfo($_rest_payment_properties_types_names, $contentType);
        return $response;
    }

    /**
     * Operation restPaymentPropertiesTypesNamesPutWithHttpInfo
     *
     * Update a name of a property type
     *
     * @param  \ck\Model\RestPaymentPropertiesTypesNamesPutRequest|null $_rest_payment_properties_types_names (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentPropertiesTypesNamesPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\PaymentPropertyTypeName, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPaymentPropertiesTypesNamesPutWithHttpInfo(
        ?\ck\Model\RestPaymentPropertiesTypesNamesPutRequest $_rest_payment_properties_types_names = null,
        string $contentType = self::contentTypes['restPaymentPropertiesTypesNamesPut'][0]
    ): array
    {
        $request = $this->restPaymentPropertiesTypesNamesPutRequest($_rest_payment_properties_types_names, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\PaymentPropertyTypeName' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\PaymentPropertyTypeName' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\PaymentPropertyTypeName', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\PaymentPropertyTypeName';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\PaymentPropertyTypeName',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPaymentPropertiesTypesNamesPutAsync
     *
     * Update a name of a property type
     *
     * @param  \ck\Model\RestPaymentPropertiesTypesNamesPutRequest|null $_rest_payment_properties_types_names (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentPropertiesTypesNamesPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentPropertiesTypesNamesPutAsync(
        ?\ck\Model\RestPaymentPropertiesTypesNamesPutRequest $_rest_payment_properties_types_names = null,
        string $contentType = self::contentTypes['restPaymentPropertiesTypesNamesPut'][0]
    ): PromiseInterface
    {
        return $this->restPaymentPropertiesTypesNamesPutAsyncWithHttpInfo($_rest_payment_properties_types_names, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPaymentPropertiesTypesNamesPutAsyncWithHttpInfo
     *
     * Update a name of a property type
     *
     * @param  \ck\Model\RestPaymentPropertiesTypesNamesPutRequest|null $_rest_payment_properties_types_names (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentPropertiesTypesNamesPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentPropertiesTypesNamesPutAsyncWithHttpInfo(
        $_rest_payment_properties_types_names = null,
        string $contentType = self::contentTypes['restPaymentPropertiesTypesNamesPut'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\PaymentPropertyTypeName';
        $request = $this->restPaymentPropertiesTypesNamesPutRequest($_rest_payment_properties_types_names, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPaymentPropertiesTypesNamesPut'
     *
     * @param  \ck\Model\RestPaymentPropertiesTypesNamesPutRequest|null $_rest_payment_properties_types_names (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentPropertiesTypesNamesPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPaymentPropertiesTypesNamesPutRequest(
        $_rest_payment_properties_types_names = null,
        string $contentType = self::contentTypes['restPaymentPropertiesTypesNamesPut'][0]
    ): Request
    {



        $resourcePath = '/rest/payment/properties/types/names';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($_rest_payment_properties_types_names)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_rest_payment_properties_types_names));
            } else {
                $httpBody = $_rest_payment_properties_types_names;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPaymentsEntrydateGet
     *
     * List payments by entry date
     *
     * @param  string|null $start_date The start date of the date range for the entry date of the payment (optional)
     * @param  string|null $end_date The end date of the date range for the entry date of the payment (optional)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsEntrydateGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\Payment[]
     */
    public function restPaymentsEntrydateGet(
        ?string $start_date = null,
        ?string $end_date = null,
        ?int $items_per_page = null,
        ?int $page = null,
        string $contentType = self::contentTypes['restPaymentsEntrydateGet'][0]
    ): array
    {
        list($response) = $this->restPaymentsEntrydateGetWithHttpInfo($start_date, $end_date, $items_per_page, $page, $contentType);
        return $response;
    }

    /**
     * Operation restPaymentsEntrydateGetWithHttpInfo
     *
     * List payments by entry date
     *
     * @param  string|null $start_date The start date of the date range for the entry date of the payment (optional)
     * @param  string|null $end_date The end date of the date range for the entry date of the payment (optional)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsEntrydateGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\Payment[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restPaymentsEntrydateGetWithHttpInfo(
        ?string $start_date = null,
        ?string $end_date = null,
        ?int $items_per_page = null,
        ?int $page = null,
        string $contentType = self::contentTypes['restPaymentsEntrydateGet'][0]
    ): array
    {
        $request = $this->restPaymentsEntrydateGetRequest($start_date, $end_date, $items_per_page, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\Payment[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\Payment[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\Payment[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\Payment[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\Payment[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPaymentsEntrydateGetAsync
     *
     * List payments by entry date
     *
     * @param  string|null $start_date The start date of the date range for the entry date of the payment (optional)
     * @param  string|null $end_date The end date of the date range for the entry date of the payment (optional)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsEntrydateGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsEntrydateGetAsync(
        ?string $start_date = null,
        ?string $end_date = null,
        ?int $items_per_page = null,
        ?int $page = null,
        string $contentType = self::contentTypes['restPaymentsEntrydateGet'][0]
    ): PromiseInterface
    {
        return $this->restPaymentsEntrydateGetAsyncWithHttpInfo($start_date, $end_date, $items_per_page, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPaymentsEntrydateGetAsyncWithHttpInfo
     *
     * List payments by entry date
     *
     * @param  string|null $start_date The start date of the date range for the entry date of the payment (optional)
     * @param  string|null $end_date The end date of the date range for the entry date of the payment (optional)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsEntrydateGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsEntrydateGetAsyncWithHttpInfo(
        $start_date = null,
        $end_date = null,
        $items_per_page = null,
        $page = null,
        string $contentType = self::contentTypes['restPaymentsEntrydateGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\Payment[]';
        $request = $this->restPaymentsEntrydateGetRequest($start_date, $end_date, $items_per_page, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPaymentsEntrydateGet'
     *
     * @param  string|null $start_date The start date of the date range for the entry date of the payment (optional)
     * @param  string|null $end_date The end date of the date range for the entry date of the payment (optional)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsEntrydateGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPaymentsEntrydateGetRequest(
        $start_date = null,
        $end_date = null,
        $items_per_page = null,
        $page = null,
        string $contentType = self::contentTypes['restPaymentsEntrydateGet'][0]
    ): Request
    {






        $resourcePath = '/rest/payments/entrydate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_date,
            'startDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_date,
            'endDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $items_per_page,
            'itemsPerPage', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPaymentsGet
     *
     * List payments
     *
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\Payment[]
     */
    public function restPaymentsGet(
        ?int $items_per_page = null,
        ?int $page = null,
        string $contentType = self::contentTypes['restPaymentsGet'][0]
    ): array
    {
        list($response) = $this->restPaymentsGetWithHttpInfo($items_per_page, $page, $contentType);
        return $response;
    }

    /**
     * Operation restPaymentsGetWithHttpInfo
     *
     * List payments
     *
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\Payment[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restPaymentsGetWithHttpInfo(
        ?int $items_per_page = null,
        ?int $page = null,
        string $contentType = self::contentTypes['restPaymentsGet'][0]
    ): array
    {
        $request = $this->restPaymentsGetRequest($items_per_page, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\Payment[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\Payment[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\Payment[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\Payment[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\Payment[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPaymentsGetAsync
     *
     * List payments
     *
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsGetAsync(
        ?int $items_per_page = null,
        ?int $page = null,
        string $contentType = self::contentTypes['restPaymentsGet'][0]
    ): PromiseInterface
    {
        return $this->restPaymentsGetAsyncWithHttpInfo($items_per_page, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPaymentsGetAsyncWithHttpInfo
     *
     * List payments
     *
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsGetAsyncWithHttpInfo(
        $items_per_page = null,
        $page = null,
        string $contentType = self::contentTypes['restPaymentsGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\Payment[]';
        $request = $this->restPaymentsGetRequest($items_per_page, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPaymentsGet'
     *
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPaymentsGetRequest(
        $items_per_page = null,
        $page = null,
        string $contentType = self::contentTypes['restPaymentsGet'][0]
    ): Request
    {




        $resourcePath = '/rest/payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $items_per_page,
            'itemsPerPage', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPaymentsImportdateGet
     *
     * List payments by import date
     *
     * @param  string|null $start_date The start date of the date range for the import date of the payment (optional)
     * @param  string|null $end_date The end date of the date range for the import date of the payment (optional)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsImportdateGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\Payment[]
     */
    public function restPaymentsImportdateGet(
        ?string $start_date = null,
        ?string $end_date = null,
        ?int $items_per_page = null,
        ?int $page = null,
        string $contentType = self::contentTypes['restPaymentsImportdateGet'][0]
    ): array
    {
        list($response) = $this->restPaymentsImportdateGetWithHttpInfo($start_date, $end_date, $items_per_page, $page, $contentType);
        return $response;
    }

    /**
     * Operation restPaymentsImportdateGetWithHttpInfo
     *
     * List payments by import date
     *
     * @param  string|null $start_date The start date of the date range for the import date of the payment (optional)
     * @param  string|null $end_date The end date of the date range for the import date of the payment (optional)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsImportdateGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\Payment[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restPaymentsImportdateGetWithHttpInfo(
        ?string $start_date = null,
        ?string $end_date = null,
        ?int $items_per_page = null,
        ?int $page = null,
        string $contentType = self::contentTypes['restPaymentsImportdateGet'][0]
    ): array
    {
        $request = $this->restPaymentsImportdateGetRequest($start_date, $end_date, $items_per_page, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\Payment[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\Payment[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\Payment[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\Payment[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\Payment[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPaymentsImportdateGetAsync
     *
     * List payments by import date
     *
     * @param  string|null $start_date The start date of the date range for the import date of the payment (optional)
     * @param  string|null $end_date The end date of the date range for the import date of the payment (optional)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsImportdateGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsImportdateGetAsync(
        ?string $start_date = null,
        ?string $end_date = null,
        ?int $items_per_page = null,
        ?int $page = null,
        string $contentType = self::contentTypes['restPaymentsImportdateGet'][0]
    ): PromiseInterface
    {
        return $this->restPaymentsImportdateGetAsyncWithHttpInfo($start_date, $end_date, $items_per_page, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPaymentsImportdateGetAsyncWithHttpInfo
     *
     * List payments by import date
     *
     * @param  string|null $start_date The start date of the date range for the import date of the payment (optional)
     * @param  string|null $end_date The end date of the date range for the import date of the payment (optional)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsImportdateGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsImportdateGetAsyncWithHttpInfo(
        $start_date = null,
        $end_date = null,
        $items_per_page = null,
        $page = null,
        string $contentType = self::contentTypes['restPaymentsImportdateGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\Payment[]';
        $request = $this->restPaymentsImportdateGetRequest($start_date, $end_date, $items_per_page, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPaymentsImportdateGet'
     *
     * @param  string|null $start_date The start date of the date range for the import date of the payment (optional)
     * @param  string|null $end_date The end date of the date range for the import date of the payment (optional)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsImportdateGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPaymentsImportdateGetRequest(
        $start_date = null,
        $end_date = null,
        $items_per_page = null,
        $page = null,
        string $contentType = self::contentTypes['restPaymentsImportdateGet'][0]
    ): Request
    {






        $resourcePath = '/rest/payments/importdate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_date,
            'startDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_date,
            'endDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $items_per_page,
            'itemsPerPage', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPaymentsMethodNamesGet
     *
     * List payment methods names
     *
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodNamesGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\PaymentMethodName[]
     */
    public function restPaymentsMethodNamesGet(
        ?int $items_per_page = null,
        ?int $page = null,
        string $contentType = self::contentTypes['restPaymentsMethodNamesGet'][0]
    ): array
    {
        list($response) = $this->restPaymentsMethodNamesGetWithHttpInfo($items_per_page, $page, $contentType);
        return $response;
    }

    /**
     * Operation restPaymentsMethodNamesGetWithHttpInfo
     *
     * List payment methods names
     *
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodNamesGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\PaymentMethodName[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restPaymentsMethodNamesGetWithHttpInfo(
        ?int $items_per_page = null,
        ?int $page = null,
        string $contentType = self::contentTypes['restPaymentsMethodNamesGet'][0]
    ): array
    {
        $request = $this->restPaymentsMethodNamesGetRequest($items_per_page, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\PaymentMethodName[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\PaymentMethodName[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\PaymentMethodName[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\PaymentMethodName[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\PaymentMethodName[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPaymentsMethodNamesGetAsync
     *
     * List payment methods names
     *
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodNamesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsMethodNamesGetAsync(
        ?int $items_per_page = null,
        ?int $page = null,
        string $contentType = self::contentTypes['restPaymentsMethodNamesGet'][0]
    ): PromiseInterface
    {
        return $this->restPaymentsMethodNamesGetAsyncWithHttpInfo($items_per_page, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPaymentsMethodNamesGetAsyncWithHttpInfo
     *
     * List payment methods names
     *
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodNamesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsMethodNamesGetAsyncWithHttpInfo(
        $items_per_page = null,
        $page = null,
        string $contentType = self::contentTypes['restPaymentsMethodNamesGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\PaymentMethodName[]';
        $request = $this->restPaymentsMethodNamesGetRequest($items_per_page, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPaymentsMethodNamesGet'
     *
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodNamesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPaymentsMethodNamesGetRequest(
        $items_per_page = null,
        $page = null,
        string $contentType = self::contentTypes['restPaymentsMethodNamesGet'][0]
    ): Request
    {




        $resourcePath = '/rest/payments/methodNames';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $items_per_page,
            'itemsPerPage', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPaymentsMethodNamesPaymentMethodIdGet
     *
     * List all payment method names for a payment method id
     *
     * @param  int $payment_method_id payment_method_id (required)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodNamesPaymentMethodIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\PaymentMethodName[]
     */
    public function restPaymentsMethodNamesPaymentMethodIdGet(
        int $payment_method_id,
        ?int $items_per_page = null,
        ?int $page = null,
        string $contentType = self::contentTypes['restPaymentsMethodNamesPaymentMethodIdGet'][0]
    ): array
    {
        list($response) = $this->restPaymentsMethodNamesPaymentMethodIdGetWithHttpInfo($payment_method_id, $items_per_page, $page, $contentType);
        return $response;
    }

    /**
     * Operation restPaymentsMethodNamesPaymentMethodIdGetWithHttpInfo
     *
     * List all payment method names for a payment method id
     *
     * @param  int $payment_method_id (required)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodNamesPaymentMethodIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\PaymentMethodName[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restPaymentsMethodNamesPaymentMethodIdGetWithHttpInfo(
        int $payment_method_id,
        ?int $items_per_page = null,
        ?int $page = null,
        string $contentType = self::contentTypes['restPaymentsMethodNamesPaymentMethodIdGet'][0]
    ): array
    {
        $request = $this->restPaymentsMethodNamesPaymentMethodIdGetRequest($payment_method_id, $items_per_page, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\PaymentMethodName[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\PaymentMethodName[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\PaymentMethodName[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\PaymentMethodName[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\PaymentMethodName[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPaymentsMethodNamesPaymentMethodIdGetAsync
     *
     * List all payment method names for a payment method id
     *
     * @param  int $payment_method_id (required)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodNamesPaymentMethodIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsMethodNamesPaymentMethodIdGetAsync(
        int $payment_method_id,
        ?int $items_per_page = null,
        ?int $page = null,
        string $contentType = self::contentTypes['restPaymentsMethodNamesPaymentMethodIdGet'][0]
    ): PromiseInterface
    {
        return $this->restPaymentsMethodNamesPaymentMethodIdGetAsyncWithHttpInfo($payment_method_id, $items_per_page, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPaymentsMethodNamesPaymentMethodIdGetAsyncWithHttpInfo
     *
     * List all payment method names for a payment method id
     *
     * @param  int $payment_method_id (required)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodNamesPaymentMethodIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsMethodNamesPaymentMethodIdGetAsyncWithHttpInfo(
        $payment_method_id,
        $items_per_page = null,
        $page = null,
        string $contentType = self::contentTypes['restPaymentsMethodNamesPaymentMethodIdGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\PaymentMethodName[]';
        $request = $this->restPaymentsMethodNamesPaymentMethodIdGetRequest($payment_method_id, $items_per_page, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPaymentsMethodNamesPaymentMethodIdGet'
     *
     * @param  int $payment_method_id (required)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodNamesPaymentMethodIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPaymentsMethodNamesPaymentMethodIdGetRequest(
        $payment_method_id,
        $items_per_page = null,
        $page = null,
        string $contentType = self::contentTypes['restPaymentsMethodNamesPaymentMethodIdGet'][0]
    ): Request
    {

        // verify the required parameter 'payment_method_id' is set
        if ($payment_method_id === null || (is_array($payment_method_id) && count($payment_method_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payment_method_id when calling restPaymentsMethodNamesPaymentMethodIdGet'
            );
        }




        $resourcePath = '/rest/payments/methodNames/{paymentMethodId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $items_per_page,
            'itemsPerPage', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($payment_method_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentMethodId' . '}',
                ObjectSerializer::toPathValue($payment_method_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPaymentsMethodNamesPaymentMethodIdLangGet
     *
     * Gets a payment method name by id and lang
     *
     * @param  int $payment_method_id payment_method_id (required)
     * @param  int $lang lang (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodNamesPaymentMethodIdLangGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\PaymentMethodName
     */
    public function restPaymentsMethodNamesPaymentMethodIdLangGet(
        int $payment_method_id,
        int $lang,
        string $contentType = self::contentTypes['restPaymentsMethodNamesPaymentMethodIdLangGet'][0]
    ): \ck\Model\PaymentMethodName
    {
        list($response) = $this->restPaymentsMethodNamesPaymentMethodIdLangGetWithHttpInfo($payment_method_id, $lang, $contentType);
        return $response;
    }

    /**
     * Operation restPaymentsMethodNamesPaymentMethodIdLangGetWithHttpInfo
     *
     * Gets a payment method name by id and lang
     *
     * @param  int $payment_method_id (required)
     * @param  int $lang (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodNamesPaymentMethodIdLangGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\PaymentMethodName, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPaymentsMethodNamesPaymentMethodIdLangGetWithHttpInfo(
        int $payment_method_id,
        int $lang,
        string $contentType = self::contentTypes['restPaymentsMethodNamesPaymentMethodIdLangGet'][0]
    ): array
    {
        $request = $this->restPaymentsMethodNamesPaymentMethodIdLangGetRequest($payment_method_id, $lang, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\PaymentMethodName' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\PaymentMethodName' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\PaymentMethodName', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\PaymentMethodName';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\PaymentMethodName',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPaymentsMethodNamesPaymentMethodIdLangGetAsync
     *
     * Gets a payment method name by id and lang
     *
     * @param  int $payment_method_id (required)
     * @param  int $lang (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodNamesPaymentMethodIdLangGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsMethodNamesPaymentMethodIdLangGetAsync(
        int $payment_method_id,
        int $lang,
        string $contentType = self::contentTypes['restPaymentsMethodNamesPaymentMethodIdLangGet'][0]
    ): PromiseInterface
    {
        return $this->restPaymentsMethodNamesPaymentMethodIdLangGetAsyncWithHttpInfo($payment_method_id, $lang, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPaymentsMethodNamesPaymentMethodIdLangGetAsyncWithHttpInfo
     *
     * Gets a payment method name by id and lang
     *
     * @param  int $payment_method_id (required)
     * @param  int $lang (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodNamesPaymentMethodIdLangGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsMethodNamesPaymentMethodIdLangGetAsyncWithHttpInfo(
        $payment_method_id,
        $lang,
        string $contentType = self::contentTypes['restPaymentsMethodNamesPaymentMethodIdLangGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\PaymentMethodName';
        $request = $this->restPaymentsMethodNamesPaymentMethodIdLangGetRequest($payment_method_id, $lang, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPaymentsMethodNamesPaymentMethodIdLangGet'
     *
     * @param  int $payment_method_id (required)
     * @param  int $lang (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodNamesPaymentMethodIdLangGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPaymentsMethodNamesPaymentMethodIdLangGetRequest(
        $payment_method_id,
        $lang,
        string $contentType = self::contentTypes['restPaymentsMethodNamesPaymentMethodIdLangGet'][0]
    ): Request
    {

        // verify the required parameter 'payment_method_id' is set
        if ($payment_method_id === null || (is_array($payment_method_id) && count($payment_method_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payment_method_id when calling restPaymentsMethodNamesPaymentMethodIdLangGet'
            );
        }

        // verify the required parameter 'lang' is set
        if ($lang === null || (is_array($lang) && count($lang) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $lang when calling restPaymentsMethodNamesPaymentMethodIdLangGet'
            );
        }


        $resourcePath = '/rest/payments/methodNames/{paymentMethodId}/{lang}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($payment_method_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentMethodId' . '}',
                ObjectSerializer::toPathValue($payment_method_id),
                $resourcePath
            );
        }
        // path params
        if ($lang !== null) {
            $resourcePath = str_replace(
                '{' . 'lang' . '}',
                ObjectSerializer::toPathValue($lang),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPaymentsMethodsEbicsGet
     *
     * Get EBICS Accounts
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsEbicsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object[]
     */
    public function restPaymentsMethodsEbicsGet(
        string $contentType = self::contentTypes['restPaymentsMethodsEbicsGet'][0]
    ): array
    {
        list($response) = $this->restPaymentsMethodsEbicsGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation restPaymentsMethodsEbicsGetWithHttpInfo
     *
     * Get EBICS Accounts
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsEbicsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restPaymentsMethodsEbicsGetWithHttpInfo(
        string $contentType = self::contentTypes['restPaymentsMethodsEbicsGet'][0]
    ): array
    {
        $request = $this->restPaymentsMethodsEbicsGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPaymentsMethodsEbicsGetAsync
     *
     * Get EBICS Accounts
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsEbicsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsMethodsEbicsGetAsync(
        string $contentType = self::contentTypes['restPaymentsMethodsEbicsGet'][0]
    ): PromiseInterface
    {
        return $this->restPaymentsMethodsEbicsGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPaymentsMethodsEbicsGetAsyncWithHttpInfo
     *
     * Get EBICS Accounts
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsEbicsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsMethodsEbicsGetAsyncWithHttpInfo(
        string $contentType = self::contentTypes['restPaymentsMethodsEbicsGet'][0]
    ): PromiseInterface
    {
        $returnType = 'object[]';
        $request = $this->restPaymentsMethodsEbicsGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPaymentsMethodsEbicsGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsEbicsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPaymentsMethodsEbicsGetRequest(
        string $contentType = self::contentTypes['restPaymentsMethodsEbicsGet'][0]
    ): Request
    {


        $resourcePath = '/rest/payments/methods/ebics';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPaymentsMethodsEbicsPost
     *
     * Create an EBICS Account
     *
     * @param  string|null $name The name of the EBICS Account (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsEbicsPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object[]
     */
    public function restPaymentsMethodsEbicsPost(
        ?string $name = null,
        string $contentType = self::contentTypes['restPaymentsMethodsEbicsPost'][0]
    ): array
    {
        list($response) = $this->restPaymentsMethodsEbicsPostWithHttpInfo($name, $contentType);
        return $response;
    }

    /**
     * Operation restPaymentsMethodsEbicsPostWithHttpInfo
     *
     * Create an EBICS Account
     *
     * @param  string|null $name The name of the EBICS Account (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsEbicsPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restPaymentsMethodsEbicsPostWithHttpInfo(
        ?string $name = null,
        string $contentType = self::contentTypes['restPaymentsMethodsEbicsPost'][0]
    ): array
    {
        $request = $this->restPaymentsMethodsEbicsPostRequest($name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPaymentsMethodsEbicsPostAsync
     *
     * Create an EBICS Account
     *
     * @param  string|null $name The name of the EBICS Account (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsEbicsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsMethodsEbicsPostAsync(
        ?string $name = null,
        string $contentType = self::contentTypes['restPaymentsMethodsEbicsPost'][0]
    ): PromiseInterface
    {
        return $this->restPaymentsMethodsEbicsPostAsyncWithHttpInfo($name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPaymentsMethodsEbicsPostAsyncWithHttpInfo
     *
     * Create an EBICS Account
     *
     * @param  string|null $name The name of the EBICS Account (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsEbicsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsMethodsEbicsPostAsyncWithHttpInfo(
        $name = null,
        string $contentType = self::contentTypes['restPaymentsMethodsEbicsPost'][0]
    ): PromiseInterface
    {
        $returnType = 'object[]';
        $request = $this->restPaymentsMethodsEbicsPostRequest($name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPaymentsMethodsEbicsPost'
     *
     * @param  string|null $name The name of the EBICS Account (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsEbicsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPaymentsMethodsEbicsPostRequest(
        $name = null,
        string $contentType = self::contentTypes['restPaymentsMethodsEbicsPost'][0]
    ): Request
    {



        $resourcePath = '/rest/payments/methods/ebics';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPaymentsMethodsGet
     *
     * List payment methods
     *
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\PaymentMethod[]
     */
    public function restPaymentsMethodsGet(
        ?int $items_per_page = null,
        ?int $page = null,
        string $contentType = self::contentTypes['restPaymentsMethodsGet'][0]
    ): array
    {
        list($response) = $this->restPaymentsMethodsGetWithHttpInfo($items_per_page, $page, $contentType);
        return $response;
    }

    /**
     * Operation restPaymentsMethodsGetWithHttpInfo
     *
     * List payment methods
     *
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\PaymentMethod[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restPaymentsMethodsGetWithHttpInfo(
        ?int $items_per_page = null,
        ?int $page = null,
        string $contentType = self::contentTypes['restPaymentsMethodsGet'][0]
    ): array
    {
        $request = $this->restPaymentsMethodsGetRequest($items_per_page, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\PaymentMethod[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\PaymentMethod[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\PaymentMethod[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\PaymentMethod[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\PaymentMethod[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPaymentsMethodsGetAsync
     *
     * List payment methods
     *
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsMethodsGetAsync(
        ?int $items_per_page = null,
        ?int $page = null,
        string $contentType = self::contentTypes['restPaymentsMethodsGet'][0]
    ): PromiseInterface
    {
        return $this->restPaymentsMethodsGetAsyncWithHttpInfo($items_per_page, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPaymentsMethodsGetAsyncWithHttpInfo
     *
     * List payment methods
     *
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsMethodsGetAsyncWithHttpInfo(
        $items_per_page = null,
        $page = null,
        string $contentType = self::contentTypes['restPaymentsMethodsGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\PaymentMethod[]';
        $request = $this->restPaymentsMethodsGetRequest($items_per_page, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPaymentsMethodsGet'
     *
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPaymentsMethodsGetRequest(
        $items_per_page = null,
        $page = null,
        string $contentType = self::contentTypes['restPaymentsMethodsGet'][0]
    ): Request
    {




        $resourcePath = '/rest/payments/methods';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $items_per_page,
            'itemsPerPage', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPaymentsMethodsHbciGet
     *
     * Returns the HBCI-Account count
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsHbciGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return void
     */
    public function restPaymentsMethodsHbciGet(
        string $contentType = self::contentTypes['restPaymentsMethodsHbciGet'][0]
    ): void
    {
        $this->restPaymentsMethodsHbciGetWithHttpInfo($contentType);
    }

    /**
     * Operation restPaymentsMethodsHbciGetWithHttpInfo
     *
     * Returns the HBCI-Account count
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsHbciGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPaymentsMethodsHbciGetWithHttpInfo(
        string $contentType = self::contentTypes['restPaymentsMethodsHbciGet'][0]
    ): array
    {
        $request = $this->restPaymentsMethodsHbciGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restPaymentsMethodsHbciGetAsync
     *
     * Returns the HBCI-Account count
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsHbciGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsMethodsHbciGetAsync(
        string $contentType = self::contentTypes['restPaymentsMethodsHbciGet'][0]
    ): PromiseInterface
    {
        return $this->restPaymentsMethodsHbciGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPaymentsMethodsHbciGetAsyncWithHttpInfo
     *
     * Returns the HBCI-Account count
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsHbciGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsMethodsHbciGetAsyncWithHttpInfo(
        string $contentType = self::contentTypes['restPaymentsMethodsHbciGet'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->restPaymentsMethodsHbciGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPaymentsMethodsHbciGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsHbciGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPaymentsMethodsHbciGetRequest(
        string $contentType = self::contentTypes['restPaymentsMethodsHbciGet'][0]
    ): Request
    {


        $resourcePath = '/rest/payments/methods/hbci';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPaymentsMethodsListBackendActiveLanguageGet
     *
     * Returns all payment methods with id and name which are active for the backend
     *
     * @param  string $language language (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsListBackendActiveLanguageGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object[]
     */
    public function restPaymentsMethodsListBackendActiveLanguageGet(
        string $language,
        string $contentType = self::contentTypes['restPaymentsMethodsListBackendActiveLanguageGet'][0]
    ): array
    {
        list($response) = $this->restPaymentsMethodsListBackendActiveLanguageGetWithHttpInfo($language, $contentType);
        return $response;
    }

    /**
     * Operation restPaymentsMethodsListBackendActiveLanguageGetWithHttpInfo
     *
     * Returns all payment methods with id and name which are active for the backend
     *
     * @param  string $language (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsListBackendActiveLanguageGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restPaymentsMethodsListBackendActiveLanguageGetWithHttpInfo(
        string $language,
        string $contentType = self::contentTypes['restPaymentsMethodsListBackendActiveLanguageGet'][0]
    ): array
    {
        $request = $this->restPaymentsMethodsListBackendActiveLanguageGetRequest($language, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPaymentsMethodsListBackendActiveLanguageGetAsync
     *
     * Returns all payment methods with id and name which are active for the backend
     *
     * @param  string $language (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsListBackendActiveLanguageGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsMethodsListBackendActiveLanguageGetAsync(
        string $language,
        string $contentType = self::contentTypes['restPaymentsMethodsListBackendActiveLanguageGet'][0]
    ): PromiseInterface
    {
        return $this->restPaymentsMethodsListBackendActiveLanguageGetAsyncWithHttpInfo($language, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPaymentsMethodsListBackendActiveLanguageGetAsyncWithHttpInfo
     *
     * Returns all payment methods with id and name which are active for the backend
     *
     * @param  string $language (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsListBackendActiveLanguageGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsMethodsListBackendActiveLanguageGetAsyncWithHttpInfo(
        $language,
        string $contentType = self::contentTypes['restPaymentsMethodsListBackendActiveLanguageGet'][0]
    ): PromiseInterface
    {
        $returnType = 'object[]';
        $request = $this->restPaymentsMethodsListBackendActiveLanguageGetRequest($language, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPaymentsMethodsListBackendActiveLanguageGet'
     *
     * @param  string $language (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsListBackendActiveLanguageGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPaymentsMethodsListBackendActiveLanguageGetRequest(
        $language,
        string $contentType = self::contentTypes['restPaymentsMethodsListBackendActiveLanguageGet'][0]
    ): Request
    {

        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $language when calling restPaymentsMethodsListBackendActiveLanguageGet'
            );
        }


        $resourcePath = '/rest/payments/methods/list/backend_active/{language}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($language !== null) {
            $resourcePath = str_replace(
                '{' . 'language' . '}',
                ObjectSerializer::toPathValue($language),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPaymentsMethodsListBackendIconGet
     *
     * Returns all payment methods with id and backend icon url
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsListBackendIconGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object[]
     */
    public function restPaymentsMethodsListBackendIconGet(
        string $contentType = self::contentTypes['restPaymentsMethodsListBackendIconGet'][0]
    ): array
    {
        list($response) = $this->restPaymentsMethodsListBackendIconGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation restPaymentsMethodsListBackendIconGetWithHttpInfo
     *
     * Returns all payment methods with id and backend icon url
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsListBackendIconGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restPaymentsMethodsListBackendIconGetWithHttpInfo(
        string $contentType = self::contentTypes['restPaymentsMethodsListBackendIconGet'][0]
    ): array
    {
        $request = $this->restPaymentsMethodsListBackendIconGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPaymentsMethodsListBackendIconGetAsync
     *
     * Returns all payment methods with id and backend icon url
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsListBackendIconGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsMethodsListBackendIconGetAsync(
        string $contentType = self::contentTypes['restPaymentsMethodsListBackendIconGet'][0]
    ): PromiseInterface
    {
        return $this->restPaymentsMethodsListBackendIconGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPaymentsMethodsListBackendIconGetAsyncWithHttpInfo
     *
     * Returns all payment methods with id and backend icon url
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsListBackendIconGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsMethodsListBackendIconGetAsyncWithHttpInfo(
        string $contentType = self::contentTypes['restPaymentsMethodsListBackendIconGet'][0]
    ): PromiseInterface
    {
        $returnType = 'object[]';
        $request = $this->restPaymentsMethodsListBackendIconGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPaymentsMethodsListBackendIconGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsListBackendIconGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPaymentsMethodsListBackendIconGetRequest(
        string $contentType = self::contentTypes['restPaymentsMethodsListBackendIconGet'][0]
    ): Request
    {


        $resourcePath = '/rest/payments/methods/list/backend_icon';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPaymentsMethodsListBackendSearchableLanguageGet
     *
     * Returns all payment methods with id and name which are searchable for the backend
     *
     * @param  string $language language (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsListBackendSearchableLanguageGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object[]
     */
    public function restPaymentsMethodsListBackendSearchableLanguageGet(
        string $language,
        string $contentType = self::contentTypes['restPaymentsMethodsListBackendSearchableLanguageGet'][0]
    ): array
    {
        list($response) = $this->restPaymentsMethodsListBackendSearchableLanguageGetWithHttpInfo($language, $contentType);
        return $response;
    }

    /**
     * Operation restPaymentsMethodsListBackendSearchableLanguageGetWithHttpInfo
     *
     * Returns all payment methods with id and name which are searchable for the backend
     *
     * @param  string $language (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsListBackendSearchableLanguageGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restPaymentsMethodsListBackendSearchableLanguageGetWithHttpInfo(
        string $language,
        string $contentType = self::contentTypes['restPaymentsMethodsListBackendSearchableLanguageGet'][0]
    ): array
    {
        $request = $this->restPaymentsMethodsListBackendSearchableLanguageGetRequest($language, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPaymentsMethodsListBackendSearchableLanguageGetAsync
     *
     * Returns all payment methods with id and name which are searchable for the backend
     *
     * @param  string $language (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsListBackendSearchableLanguageGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsMethodsListBackendSearchableLanguageGetAsync(
        string $language,
        string $contentType = self::contentTypes['restPaymentsMethodsListBackendSearchableLanguageGet'][0]
    ): PromiseInterface
    {
        return $this->restPaymentsMethodsListBackendSearchableLanguageGetAsyncWithHttpInfo($language, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPaymentsMethodsListBackendSearchableLanguageGetAsyncWithHttpInfo
     *
     * Returns all payment methods with id and name which are searchable for the backend
     *
     * @param  string $language (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsListBackendSearchableLanguageGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsMethodsListBackendSearchableLanguageGetAsyncWithHttpInfo(
        $language,
        string $contentType = self::contentTypes['restPaymentsMethodsListBackendSearchableLanguageGet'][0]
    ): PromiseInterface
    {
        $returnType = 'object[]';
        $request = $this->restPaymentsMethodsListBackendSearchableLanguageGetRequest($language, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPaymentsMethodsListBackendSearchableLanguageGet'
     *
     * @param  string $language (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsListBackendSearchableLanguageGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPaymentsMethodsListBackendSearchableLanguageGetRequest(
        $language,
        string $contentType = self::contentTypes['restPaymentsMethodsListBackendSearchableLanguageGet'][0]
    ): Request
    {

        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $language when calling restPaymentsMethodsListBackendSearchableLanguageGet'
            );
        }


        $resourcePath = '/rest/payments/methods/list/backend_searchable/{language}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($language !== null) {
            $resourcePath = str_replace(
                '{' . 'language' . '}',
                ObjectSerializer::toPathValue($language),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPaymentsMethodsListGet
     *
     * Returns all payment methods with id and name
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsListGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object[]
     */
    public function restPaymentsMethodsListGet(
        string $contentType = self::contentTypes['restPaymentsMethodsListGet'][0]
    ): array
    {
        list($response) = $this->restPaymentsMethodsListGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation restPaymentsMethodsListGetWithHttpInfo
     *
     * Returns all payment methods with id and name
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsListGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restPaymentsMethodsListGetWithHttpInfo(
        string $contentType = self::contentTypes['restPaymentsMethodsListGet'][0]
    ): array
    {
        $request = $this->restPaymentsMethodsListGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPaymentsMethodsListGetAsync
     *
     * Returns all payment methods with id and name
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsListGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsMethodsListGetAsync(
        string $contentType = self::contentTypes['restPaymentsMethodsListGet'][0]
    ): PromiseInterface
    {
        return $this->restPaymentsMethodsListGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPaymentsMethodsListGetAsyncWithHttpInfo
     *
     * Returns all payment methods with id and name
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsListGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsMethodsListGetAsyncWithHttpInfo(
        string $contentType = self::contentTypes['restPaymentsMethodsListGet'][0]
    ): PromiseInterface
    {
        $returnType = 'object[]';
        $request = $this->restPaymentsMethodsListGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPaymentsMethodsListGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsListGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPaymentsMethodsListGetRequest(
        string $contentType = self::contentTypes['restPaymentsMethodsListGet'][0]
    ): Request
    {


        $resourcePath = '/rest/payments/methods/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPaymentsMethodsListHandleSubscriptionLanguageGet
     *
     * @param  string $language language (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsListHandleSubscriptionLanguageGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object[]
     */
    public function restPaymentsMethodsListHandleSubscriptionLanguageGet(
        string $language,
        string $contentType = self::contentTypes['restPaymentsMethodsListHandleSubscriptionLanguageGet'][0]
    ): array
    {
        list($response) = $this->restPaymentsMethodsListHandleSubscriptionLanguageGetWithHttpInfo($language, $contentType);
        return $response;
    }

    /**
     * Operation restPaymentsMethodsListHandleSubscriptionLanguageGetWithHttpInfo
     *
     * @param  string $language (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsListHandleSubscriptionLanguageGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restPaymentsMethodsListHandleSubscriptionLanguageGetWithHttpInfo(
        string $language,
        string $contentType = self::contentTypes['restPaymentsMethodsListHandleSubscriptionLanguageGet'][0]
    ): array
    {
        $request = $this->restPaymentsMethodsListHandleSubscriptionLanguageGetRequest($language, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPaymentsMethodsListHandleSubscriptionLanguageGetAsync
     *
     * @param  string $language (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsListHandleSubscriptionLanguageGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsMethodsListHandleSubscriptionLanguageGetAsync(
        string $language,
        string $contentType = self::contentTypes['restPaymentsMethodsListHandleSubscriptionLanguageGet'][0]
    ): PromiseInterface
    {
        return $this->restPaymentsMethodsListHandleSubscriptionLanguageGetAsyncWithHttpInfo($language, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPaymentsMethodsListHandleSubscriptionLanguageGetAsyncWithHttpInfo
     *
     * @param  string $language (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsListHandleSubscriptionLanguageGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsMethodsListHandleSubscriptionLanguageGetAsyncWithHttpInfo(
        $language,
        string $contentType = self::contentTypes['restPaymentsMethodsListHandleSubscriptionLanguageGet'][0]
    ): PromiseInterface
    {
        $returnType = 'object[]';
        $request = $this->restPaymentsMethodsListHandleSubscriptionLanguageGetRequest($language, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPaymentsMethodsListHandleSubscriptionLanguageGet'
     *
     * @param  string $language (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsListHandleSubscriptionLanguageGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPaymentsMethodsListHandleSubscriptionLanguageGetRequest(
        $language,
        string $contentType = self::contentTypes['restPaymentsMethodsListHandleSubscriptionLanguageGet'][0]
    ): Request
    {

        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $language when calling restPaymentsMethodsListHandleSubscriptionLanguageGet'
            );
        }


        $resourcePath = '/rest/payments/methods/list/handle_subscription/{language}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($language !== null) {
            $resourcePath = str_replace(
                '{' . 'language' . '}',
                ObjectSerializer::toPathValue($language),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPaymentsMethodsMethodIdGet
     *
     * List payments of a payment method
     *
     * @param  int $method_id method_id (required)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsMethodIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\Payment[]
     */
    public function restPaymentsMethodsMethodIdGet(
        int $method_id,
        ?int $items_per_page = null,
        ?int $page = null,
        string $contentType = self::contentTypes['restPaymentsMethodsMethodIdGet'][0]
    ): array
    {
        list($response) = $this->restPaymentsMethodsMethodIdGetWithHttpInfo($method_id, $items_per_page, $page, $contentType);
        return $response;
    }

    /**
     * Operation restPaymentsMethodsMethodIdGetWithHttpInfo
     *
     * List payments of a payment method
     *
     * @param  int $method_id (required)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsMethodIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\Payment[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restPaymentsMethodsMethodIdGetWithHttpInfo(
        int $method_id,
        ?int $items_per_page = null,
        ?int $page = null,
        string $contentType = self::contentTypes['restPaymentsMethodsMethodIdGet'][0]
    ): array
    {
        $request = $this->restPaymentsMethodsMethodIdGetRequest($method_id, $items_per_page, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\Payment[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\Payment[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\Payment[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\Payment[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\Payment[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPaymentsMethodsMethodIdGetAsync
     *
     * List payments of a payment method
     *
     * @param  int $method_id (required)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsMethodIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsMethodsMethodIdGetAsync(
        int $method_id,
        ?int $items_per_page = null,
        ?int $page = null,
        string $contentType = self::contentTypes['restPaymentsMethodsMethodIdGet'][0]
    ): PromiseInterface
    {
        return $this->restPaymentsMethodsMethodIdGetAsyncWithHttpInfo($method_id, $items_per_page, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPaymentsMethodsMethodIdGetAsyncWithHttpInfo
     *
     * List payments of a payment method
     *
     * @param  int $method_id (required)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsMethodIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsMethodsMethodIdGetAsyncWithHttpInfo(
        $method_id,
        $items_per_page = null,
        $page = null,
        string $contentType = self::contentTypes['restPaymentsMethodsMethodIdGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\Payment[]';
        $request = $this->restPaymentsMethodsMethodIdGetRequest($method_id, $items_per_page, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPaymentsMethodsMethodIdGet'
     *
     * @param  int $method_id (required)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsMethodIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPaymentsMethodsMethodIdGetRequest(
        $method_id,
        $items_per_page = null,
        $page = null,
        string $contentType = self::contentTypes['restPaymentsMethodsMethodIdGet'][0]
    ): Request
    {

        // verify the required parameter 'method_id' is set
        if ($method_id === null || (is_array($method_id) && count($method_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $method_id when calling restPaymentsMethodsMethodIdGet'
            );
        }




        $resourcePath = '/rest/payments/methods/{methodId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $items_per_page,
            'itemsPerPage', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($method_id !== null) {
            $resourcePath = str_replace(
                '{' . 'methodId' . '}',
                ObjectSerializer::toPathValue($method_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPaymentsMethodsPluginsPluginKeyGet
     *
     * Get a payment method
     *
     * @param  int $plugin_key plugin_key (required)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsPluginsPluginKeyGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\PaymentMethod[]
     */
    public function restPaymentsMethodsPluginsPluginKeyGet(
        int $plugin_key,
        ?int $items_per_page = null,
        ?int $page = null,
        string $contentType = self::contentTypes['restPaymentsMethodsPluginsPluginKeyGet'][0]
    ): array
    {
        list($response) = $this->restPaymentsMethodsPluginsPluginKeyGetWithHttpInfo($plugin_key, $items_per_page, $page, $contentType);
        return $response;
    }

    /**
     * Operation restPaymentsMethodsPluginsPluginKeyGetWithHttpInfo
     *
     * Get a payment method
     *
     * @param  int $plugin_key (required)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsPluginsPluginKeyGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\PaymentMethod[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restPaymentsMethodsPluginsPluginKeyGetWithHttpInfo(
        int $plugin_key,
        ?int $items_per_page = null,
        ?int $page = null,
        string $contentType = self::contentTypes['restPaymentsMethodsPluginsPluginKeyGet'][0]
    ): array
    {
        $request = $this->restPaymentsMethodsPluginsPluginKeyGetRequest($plugin_key, $items_per_page, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\PaymentMethod[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\PaymentMethod[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\PaymentMethod[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\PaymentMethod[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\PaymentMethod[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPaymentsMethodsPluginsPluginKeyGetAsync
     *
     * Get a payment method
     *
     * @param  int $plugin_key (required)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsPluginsPluginKeyGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsMethodsPluginsPluginKeyGetAsync(
        int $plugin_key,
        ?int $items_per_page = null,
        ?int $page = null,
        string $contentType = self::contentTypes['restPaymentsMethodsPluginsPluginKeyGet'][0]
    ): PromiseInterface
    {
        return $this->restPaymentsMethodsPluginsPluginKeyGetAsyncWithHttpInfo($plugin_key, $items_per_page, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPaymentsMethodsPluginsPluginKeyGetAsyncWithHttpInfo
     *
     * Get a payment method
     *
     * @param  int $plugin_key (required)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsPluginsPluginKeyGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsMethodsPluginsPluginKeyGetAsyncWithHttpInfo(
        $plugin_key,
        $items_per_page = null,
        $page = null,
        string $contentType = self::contentTypes['restPaymentsMethodsPluginsPluginKeyGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\PaymentMethod[]';
        $request = $this->restPaymentsMethodsPluginsPluginKeyGetRequest($plugin_key, $items_per_page, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPaymentsMethodsPluginsPluginKeyGet'
     *
     * @param  int $plugin_key (required)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsPluginsPluginKeyGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPaymentsMethodsPluginsPluginKeyGetRequest(
        $plugin_key,
        $items_per_page = null,
        $page = null,
        string $contentType = self::contentTypes['restPaymentsMethodsPluginsPluginKeyGet'][0]
    ): Request
    {

        // verify the required parameter 'plugin_key' is set
        if ($plugin_key === null || (is_array($plugin_key) && count($plugin_key) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $plugin_key when calling restPaymentsMethodsPluginsPluginKeyGet'
            );
        }




        $resourcePath = '/rest/payments/methods/plugins/{pluginKey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $items_per_page,
            'itemsPerPage', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($plugin_key !== null) {
            $resourcePath = str_replace(
                '{' . 'pluginKey' . '}',
                ObjectSerializer::toPathValue($plugin_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPaymentsMethodsPost
     *
     * Create a payment method
     *
     * @param  \ck\Model\RestPaymentsMethodsPostRequest|null $_rest_payments_methods _rest_payments_methods (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\PaymentMethod
     */
    public function restPaymentsMethodsPost(
        ?\ck\Model\RestPaymentsMethodsPostRequest $_rest_payments_methods = null,
        string $contentType = self::contentTypes['restPaymentsMethodsPost'][0]
    ): \ck\Model\PaymentMethod
    {
        list($response) = $this->restPaymentsMethodsPostWithHttpInfo($_rest_payments_methods, $contentType);
        return $response;
    }

    /**
     * Operation restPaymentsMethodsPostWithHttpInfo
     *
     * Create a payment method
     *
     * @param  \ck\Model\RestPaymentsMethodsPostRequest|null $_rest_payments_methods (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\PaymentMethod, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPaymentsMethodsPostWithHttpInfo(
        ?\ck\Model\RestPaymentsMethodsPostRequest $_rest_payments_methods = null,
        string $contentType = self::contentTypes['restPaymentsMethodsPost'][0]
    ): array
    {
        $request = $this->restPaymentsMethodsPostRequest($_rest_payments_methods, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\PaymentMethod' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\PaymentMethod' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\PaymentMethod', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\PaymentMethod';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\PaymentMethod',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPaymentsMethodsPostAsync
     *
     * Create a payment method
     *
     * @param  \ck\Model\RestPaymentsMethodsPostRequest|null $_rest_payments_methods (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsMethodsPostAsync(
        ?\ck\Model\RestPaymentsMethodsPostRequest $_rest_payments_methods = null,
        string $contentType = self::contentTypes['restPaymentsMethodsPost'][0]
    ): PromiseInterface
    {
        return $this->restPaymentsMethodsPostAsyncWithHttpInfo($_rest_payments_methods, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPaymentsMethodsPostAsyncWithHttpInfo
     *
     * Create a payment method
     *
     * @param  \ck\Model\RestPaymentsMethodsPostRequest|null $_rest_payments_methods (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsMethodsPostAsyncWithHttpInfo(
        $_rest_payments_methods = null,
        string $contentType = self::contentTypes['restPaymentsMethodsPost'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\PaymentMethod';
        $request = $this->restPaymentsMethodsPostRequest($_rest_payments_methods, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPaymentsMethodsPost'
     *
     * @param  \ck\Model\RestPaymentsMethodsPostRequest|null $_rest_payments_methods (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPaymentsMethodsPostRequest(
        $_rest_payments_methods = null,
        string $contentType = self::contentTypes['restPaymentsMethodsPost'][0]
    ): Request
    {



        $resourcePath = '/rest/payments/methods';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($_rest_payments_methods)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_rest_payments_methods));
            } else {
                $httpBody = $_rest_payments_methods;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPaymentsMethodsPut
     *
     * Update a payment method
     *
     * @param  \ck\Model\RestPaymentsMethodsPutRequest|null $_rest_payments_methods _rest_payments_methods (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\PaymentMethod
     */
    public function restPaymentsMethodsPut(
        ?\ck\Model\RestPaymentsMethodsPutRequest $_rest_payments_methods = null,
        string $contentType = self::contentTypes['restPaymentsMethodsPut'][0]
    ): \ck\Model\PaymentMethod
    {
        list($response) = $this->restPaymentsMethodsPutWithHttpInfo($_rest_payments_methods, $contentType);
        return $response;
    }

    /**
     * Operation restPaymentsMethodsPutWithHttpInfo
     *
     * Update a payment method
     *
     * @param  \ck\Model\RestPaymentsMethodsPutRequest|null $_rest_payments_methods (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\PaymentMethod, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPaymentsMethodsPutWithHttpInfo(
        ?\ck\Model\RestPaymentsMethodsPutRequest $_rest_payments_methods = null,
        string $contentType = self::contentTypes['restPaymentsMethodsPut'][0]
    ): array
    {
        $request = $this->restPaymentsMethodsPutRequest($_rest_payments_methods, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\PaymentMethod' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\PaymentMethod' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\PaymentMethod', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\PaymentMethod';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\PaymentMethod',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPaymentsMethodsPutAsync
     *
     * Update a payment method
     *
     * @param  \ck\Model\RestPaymentsMethodsPutRequest|null $_rest_payments_methods (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsMethodsPutAsync(
        ?\ck\Model\RestPaymentsMethodsPutRequest $_rest_payments_methods = null,
        string $contentType = self::contentTypes['restPaymentsMethodsPut'][0]
    ): PromiseInterface
    {
        return $this->restPaymentsMethodsPutAsyncWithHttpInfo($_rest_payments_methods, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPaymentsMethodsPutAsyncWithHttpInfo
     *
     * Update a payment method
     *
     * @param  \ck\Model\RestPaymentsMethodsPutRequest|null $_rest_payments_methods (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsMethodsPutAsyncWithHttpInfo(
        $_rest_payments_methods = null,
        string $contentType = self::contentTypes['restPaymentsMethodsPut'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\PaymentMethod';
        $request = $this->restPaymentsMethodsPutRequest($_rest_payments_methods, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPaymentsMethodsPut'
     *
     * @param  \ck\Model\RestPaymentsMethodsPutRequest|null $_rest_payments_methods (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsMethodsPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPaymentsMethodsPutRequest(
        $_rest_payments_methods = null,
        string $contentType = self::contentTypes['restPaymentsMethodsPut'][0]
    ): Request
    {



        $resourcePath = '/rest/payments/methods';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($_rest_payments_methods)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_rest_payments_methods));
            } else {
                $httpBody = $_rest_payments_methods;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPaymentsOrdersOrderIdGet
     *
     * List payments of an order
     *
     * @param  int $order_id order_id (required)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsOrdersOrderIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\Payment[]
     */
    public function restPaymentsOrdersOrderIdGet(
        int $order_id,
        ?int $items_per_page = null,
        ?int $page = null,
        string $contentType = self::contentTypes['restPaymentsOrdersOrderIdGet'][0]
    ): array
    {
        list($response) = $this->restPaymentsOrdersOrderIdGetWithHttpInfo($order_id, $items_per_page, $page, $contentType);
        return $response;
    }

    /**
     * Operation restPaymentsOrdersOrderIdGetWithHttpInfo
     *
     * List payments of an order
     *
     * @param  int $order_id (required)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsOrdersOrderIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\Payment[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restPaymentsOrdersOrderIdGetWithHttpInfo(
        int $order_id,
        ?int $items_per_page = null,
        ?int $page = null,
        string $contentType = self::contentTypes['restPaymentsOrdersOrderIdGet'][0]
    ): array
    {
        $request = $this->restPaymentsOrdersOrderIdGetRequest($order_id, $items_per_page, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\Payment[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\Payment[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\Payment[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\Payment[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\Payment[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPaymentsOrdersOrderIdGetAsync
     *
     * List payments of an order
     *
     * @param  int $order_id (required)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsOrdersOrderIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsOrdersOrderIdGetAsync(
        int $order_id,
        ?int $items_per_page = null,
        ?int $page = null,
        string $contentType = self::contentTypes['restPaymentsOrdersOrderIdGet'][0]
    ): PromiseInterface
    {
        return $this->restPaymentsOrdersOrderIdGetAsyncWithHttpInfo($order_id, $items_per_page, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPaymentsOrdersOrderIdGetAsyncWithHttpInfo
     *
     * List payments of an order
     *
     * @param  int $order_id (required)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsOrdersOrderIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsOrdersOrderIdGetAsyncWithHttpInfo(
        $order_id,
        $items_per_page = null,
        $page = null,
        string $contentType = self::contentTypes['restPaymentsOrdersOrderIdGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\Payment[]';
        $request = $this->restPaymentsOrdersOrderIdGetRequest($order_id, $items_per_page, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPaymentsOrdersOrderIdGet'
     *
     * @param  int $order_id (required)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsOrdersOrderIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPaymentsOrdersOrderIdGetRequest(
        $order_id,
        $items_per_page = null,
        $page = null,
        string $contentType = self::contentTypes['restPaymentsOrdersOrderIdGet'][0]
    ): Request
    {

        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_id when calling restPaymentsOrdersOrderIdGet'
            );
        }




        $resourcePath = '/rest/payments/orders/{orderId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $items_per_page,
            'itemsPerPage', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPaymentsPaymentIdGet
     *
     * Get a payment
     *
     * @param  int $payment_id payment_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPaymentIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\Payment
     */
    public function restPaymentsPaymentIdGet(
        int $payment_id,
        string $contentType = self::contentTypes['restPaymentsPaymentIdGet'][0]
    ): \ck\Model\Payment
    {
        list($response) = $this->restPaymentsPaymentIdGetWithHttpInfo($payment_id, $contentType);
        return $response;
    }

    /**
     * Operation restPaymentsPaymentIdGetWithHttpInfo
     *
     * Get a payment
     *
     * @param  int $payment_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPaymentIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\Payment, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPaymentsPaymentIdGetWithHttpInfo(
        int $payment_id,
        string $contentType = self::contentTypes['restPaymentsPaymentIdGet'][0]
    ): array
    {
        $request = $this->restPaymentsPaymentIdGetRequest($payment_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\Payment' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\Payment' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\Payment', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\Payment';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\Payment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPaymentsPaymentIdGetAsync
     *
     * Get a payment
     *
     * @param  int $payment_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPaymentIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsPaymentIdGetAsync(
        int $payment_id,
        string $contentType = self::contentTypes['restPaymentsPaymentIdGet'][0]
    ): PromiseInterface
    {
        return $this->restPaymentsPaymentIdGetAsyncWithHttpInfo($payment_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPaymentsPaymentIdGetAsyncWithHttpInfo
     *
     * Get a payment
     *
     * @param  int $payment_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPaymentIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsPaymentIdGetAsyncWithHttpInfo(
        $payment_id,
        string $contentType = self::contentTypes['restPaymentsPaymentIdGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\Payment';
        $request = $this->restPaymentsPaymentIdGetRequest($payment_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPaymentsPaymentIdGet'
     *
     * @param  int $payment_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPaymentIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPaymentsPaymentIdGetRequest(
        $payment_id,
        string $contentType = self::contentTypes['restPaymentsPaymentIdGet'][0]
    ): Request
    {

        // verify the required parameter 'payment_id' is set
        if ($payment_id === null || (is_array($payment_id) && count($payment_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payment_id when calling restPaymentsPaymentIdGet'
            );
        }


        $resourcePath = '/rest/payments/{paymentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentId' . '}',
                ObjectSerializer::toPathValue($payment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPaymentsPaymentIdPropertiesGet
     *
     * List properties for a payment
     *
     * @param  int $payment_id payment_id (required)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPaymentIdPropertiesGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\PaymentProperty[]
     */
    public function restPaymentsPaymentIdPropertiesGet(
        int $payment_id,
        ?int $items_per_page = null,
        ?int $page = null,
        string $contentType = self::contentTypes['restPaymentsPaymentIdPropertiesGet'][0]
    ): array
    {
        list($response) = $this->restPaymentsPaymentIdPropertiesGetWithHttpInfo($payment_id, $items_per_page, $page, $contentType);
        return $response;
    }

    /**
     * Operation restPaymentsPaymentIdPropertiesGetWithHttpInfo
     *
     * List properties for a payment
     *
     * @param  int $payment_id (required)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPaymentIdPropertiesGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\PaymentProperty[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restPaymentsPaymentIdPropertiesGetWithHttpInfo(
        int $payment_id,
        ?int $items_per_page = null,
        ?int $page = null,
        string $contentType = self::contentTypes['restPaymentsPaymentIdPropertiesGet'][0]
    ): array
    {
        $request = $this->restPaymentsPaymentIdPropertiesGetRequest($payment_id, $items_per_page, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\PaymentProperty[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\PaymentProperty[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\PaymentProperty[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\PaymentProperty[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\PaymentProperty[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPaymentsPaymentIdPropertiesGetAsync
     *
     * List properties for a payment
     *
     * @param  int $payment_id (required)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPaymentIdPropertiesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsPaymentIdPropertiesGetAsync(
        int $payment_id,
        ?int $items_per_page = null,
        ?int $page = null,
        string $contentType = self::contentTypes['restPaymentsPaymentIdPropertiesGet'][0]
    ): PromiseInterface
    {
        return $this->restPaymentsPaymentIdPropertiesGetAsyncWithHttpInfo($payment_id, $items_per_page, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPaymentsPaymentIdPropertiesGetAsyncWithHttpInfo
     *
     * List properties for a payment
     *
     * @param  int $payment_id (required)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPaymentIdPropertiesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsPaymentIdPropertiesGetAsyncWithHttpInfo(
        $payment_id,
        $items_per_page = null,
        $page = null,
        string $contentType = self::contentTypes['restPaymentsPaymentIdPropertiesGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\PaymentProperty[]';
        $request = $this->restPaymentsPaymentIdPropertiesGetRequest($payment_id, $items_per_page, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPaymentsPaymentIdPropertiesGet'
     *
     * @param  int $payment_id (required)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPaymentIdPropertiesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPaymentsPaymentIdPropertiesGetRequest(
        $payment_id,
        $items_per_page = null,
        $page = null,
        string $contentType = self::contentTypes['restPaymentsPaymentIdPropertiesGet'][0]
    ): Request
    {

        // verify the required parameter 'payment_id' is set
        if ($payment_id === null || (is_array($payment_id) && count($payment_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $payment_id when calling restPaymentsPaymentIdPropertiesGet'
            );
        }




        $resourcePath = '/rest/payments/{paymentId}/properties';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $items_per_page,
            'itemsPerPage', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentId' . '}',
                ObjectSerializer::toPathValue($payment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPaymentsPost
     *
     * Create a payment
     *
     * @param  \ck\Model\RestPaymentsPostRequest|null $_rest_payments _rest_payments (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\Payment
     */
    public function restPaymentsPost(
        ?\ck\Model\RestPaymentsPostRequest $_rest_payments = null,
        string $contentType = self::contentTypes['restPaymentsPost'][0]
    ): \ck\Model\Payment
    {
        list($response) = $this->restPaymentsPostWithHttpInfo($_rest_payments, $contentType);
        return $response;
    }

    /**
     * Operation restPaymentsPostWithHttpInfo
     *
     * Create a payment
     *
     * @param  \ck\Model\RestPaymentsPostRequest|null $_rest_payments (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\Payment, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPaymentsPostWithHttpInfo(
        ?\ck\Model\RestPaymentsPostRequest $_rest_payments = null,
        string $contentType = self::contentTypes['restPaymentsPost'][0]
    ): array
    {
        $request = $this->restPaymentsPostRequest($_rest_payments, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\Payment' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\Payment' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\Payment', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\Payment';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\Payment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPaymentsPostAsync
     *
     * Create a payment
     *
     * @param  \ck\Model\RestPaymentsPostRequest|null $_rest_payments (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsPostAsync(
        ?\ck\Model\RestPaymentsPostRequest $_rest_payments = null,
        string $contentType = self::contentTypes['restPaymentsPost'][0]
    ): PromiseInterface
    {
        return $this->restPaymentsPostAsyncWithHttpInfo($_rest_payments, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPaymentsPostAsyncWithHttpInfo
     *
     * Create a payment
     *
     * @param  \ck\Model\RestPaymentsPostRequest|null $_rest_payments (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsPostAsyncWithHttpInfo(
        $_rest_payments = null,
        string $contentType = self::contentTypes['restPaymentsPost'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\Payment';
        $request = $this->restPaymentsPostRequest($_rest_payments, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPaymentsPost'
     *
     * @param  \ck\Model\RestPaymentsPostRequest|null $_rest_payments (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPaymentsPostRequest(
        $_rest_payments = null,
        string $contentType = self::contentTypes['restPaymentsPost'][0]
    ): Request
    {



        $resourcePath = '/rest/payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($_rest_payments)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_rest_payments));
            } else {
                $httpBody = $_rest_payments;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPaymentsPropertiesDateGet
     *
     * List properties by creation date
     *
     * @param  string|null $start_date The start date of the date range for the date of creation of the property (optional)
     * @param  string|null $end_date The end date of the date range for the date of creation of the property (optional)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPropertiesDateGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\PaymentProperty[]
     */
    public function restPaymentsPropertiesDateGet(
        ?string $start_date = null,
        ?string $end_date = null,
        ?int $items_per_page = null,
        ?int $page = null,
        string $contentType = self::contentTypes['restPaymentsPropertiesDateGet'][0]
    ): array
    {
        list($response) = $this->restPaymentsPropertiesDateGetWithHttpInfo($start_date, $end_date, $items_per_page, $page, $contentType);
        return $response;
    }

    /**
     * Operation restPaymentsPropertiesDateGetWithHttpInfo
     *
     * List properties by creation date
     *
     * @param  string|null $start_date The start date of the date range for the date of creation of the property (optional)
     * @param  string|null $end_date The end date of the date range for the date of creation of the property (optional)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPropertiesDateGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\PaymentProperty[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restPaymentsPropertiesDateGetWithHttpInfo(
        ?string $start_date = null,
        ?string $end_date = null,
        ?int $items_per_page = null,
        ?int $page = null,
        string $contentType = self::contentTypes['restPaymentsPropertiesDateGet'][0]
    ): array
    {
        $request = $this->restPaymentsPropertiesDateGetRequest($start_date, $end_date, $items_per_page, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\PaymentProperty[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\PaymentProperty[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\PaymentProperty[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\PaymentProperty[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\PaymentProperty[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPaymentsPropertiesDateGetAsync
     *
     * List properties by creation date
     *
     * @param  string|null $start_date The start date of the date range for the date of creation of the property (optional)
     * @param  string|null $end_date The end date of the date range for the date of creation of the property (optional)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPropertiesDateGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsPropertiesDateGetAsync(
        ?string $start_date = null,
        ?string $end_date = null,
        ?int $items_per_page = null,
        ?int $page = null,
        string $contentType = self::contentTypes['restPaymentsPropertiesDateGet'][0]
    ): PromiseInterface
    {
        return $this->restPaymentsPropertiesDateGetAsyncWithHttpInfo($start_date, $end_date, $items_per_page, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPaymentsPropertiesDateGetAsyncWithHttpInfo
     *
     * List properties by creation date
     *
     * @param  string|null $start_date The start date of the date range for the date of creation of the property (optional)
     * @param  string|null $end_date The end date of the date range for the date of creation of the property (optional)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPropertiesDateGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsPropertiesDateGetAsyncWithHttpInfo(
        $start_date = null,
        $end_date = null,
        $items_per_page = null,
        $page = null,
        string $contentType = self::contentTypes['restPaymentsPropertiesDateGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\PaymentProperty[]';
        $request = $this->restPaymentsPropertiesDateGetRequest($start_date, $end_date, $items_per_page, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPaymentsPropertiesDateGet'
     *
     * @param  string|null $start_date The start date of the date range for the date of creation of the property (optional)
     * @param  string|null $end_date The end date of the date range for the date of creation of the property (optional)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPropertiesDateGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPaymentsPropertiesDateGetRequest(
        $start_date = null,
        $end_date = null,
        $items_per_page = null,
        $page = null,
        string $contentType = self::contentTypes['restPaymentsPropertiesDateGet'][0]
    ): Request
    {






        $resourcePath = '/rest/payments/properties/date';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_date,
            'startDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_date,
            'endDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $items_per_page,
            'itemsPerPage', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPaymentsPropertiesGet
     *
     * List properties
     *
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPropertiesGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\PaymentProperty[]
     */
    public function restPaymentsPropertiesGet(
        ?int $items_per_page = null,
        ?int $page = null,
        string $contentType = self::contentTypes['restPaymentsPropertiesGet'][0]
    ): array
    {
        list($response) = $this->restPaymentsPropertiesGetWithHttpInfo($items_per_page, $page, $contentType);
        return $response;
    }

    /**
     * Operation restPaymentsPropertiesGetWithHttpInfo
     *
     * List properties
     *
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPropertiesGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\PaymentProperty[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restPaymentsPropertiesGetWithHttpInfo(
        ?int $items_per_page = null,
        ?int $page = null,
        string $contentType = self::contentTypes['restPaymentsPropertiesGet'][0]
    ): array
    {
        $request = $this->restPaymentsPropertiesGetRequest($items_per_page, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\PaymentProperty[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\PaymentProperty[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\PaymentProperty[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\PaymentProperty[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\PaymentProperty[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPaymentsPropertiesGetAsync
     *
     * List properties
     *
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPropertiesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsPropertiesGetAsync(
        ?int $items_per_page = null,
        ?int $page = null,
        string $contentType = self::contentTypes['restPaymentsPropertiesGet'][0]
    ): PromiseInterface
    {
        return $this->restPaymentsPropertiesGetAsyncWithHttpInfo($items_per_page, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPaymentsPropertiesGetAsyncWithHttpInfo
     *
     * List properties
     *
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPropertiesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsPropertiesGetAsyncWithHttpInfo(
        $items_per_page = null,
        $page = null,
        string $contentType = self::contentTypes['restPaymentsPropertiesGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\PaymentProperty[]';
        $request = $this->restPaymentsPropertiesGetRequest($items_per_page, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPaymentsPropertiesGet'
     *
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPropertiesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPaymentsPropertiesGetRequest(
        $items_per_page = null,
        $page = null,
        string $contentType = self::contentTypes['restPaymentsPropertiesGet'][0]
    ): Request
    {




        $resourcePath = '/rest/payments/properties';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $items_per_page,
            'itemsPerPage', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPaymentsPropertiesPost
     *
     * Create a payment property
     *
     * @param  \ck\Model\RestPaymentsPropertiesPutRequest|null $_rest_payments_properties _rest_payments_properties (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPropertiesPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\PaymentProperty
     */
    public function restPaymentsPropertiesPost(
        ?\ck\Model\RestPaymentsPropertiesPutRequest $_rest_payments_properties = null,
        string $contentType = self::contentTypes['restPaymentsPropertiesPost'][0]
    ): \ck\Model\PaymentProperty
    {
        list($response) = $this->restPaymentsPropertiesPostWithHttpInfo($_rest_payments_properties, $contentType);
        return $response;
    }

    /**
     * Operation restPaymentsPropertiesPostWithHttpInfo
     *
     * Create a payment property
     *
     * @param  \ck\Model\RestPaymentsPropertiesPutRequest|null $_rest_payments_properties (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPropertiesPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\PaymentProperty, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPaymentsPropertiesPostWithHttpInfo(
        ?\ck\Model\RestPaymentsPropertiesPutRequest $_rest_payments_properties = null,
        string $contentType = self::contentTypes['restPaymentsPropertiesPost'][0]
    ): array
    {
        $request = $this->restPaymentsPropertiesPostRequest($_rest_payments_properties, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\PaymentProperty' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\PaymentProperty' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\PaymentProperty', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\PaymentProperty';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\PaymentProperty',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPaymentsPropertiesPostAsync
     *
     * Create a payment property
     *
     * @param  \ck\Model\RestPaymentsPropertiesPutRequest|null $_rest_payments_properties (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPropertiesPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsPropertiesPostAsync(
        ?\ck\Model\RestPaymentsPropertiesPutRequest $_rest_payments_properties = null,
        string $contentType = self::contentTypes['restPaymentsPropertiesPost'][0]
    ): PromiseInterface
    {
        return $this->restPaymentsPropertiesPostAsyncWithHttpInfo($_rest_payments_properties, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPaymentsPropertiesPostAsyncWithHttpInfo
     *
     * Create a payment property
     *
     * @param  \ck\Model\RestPaymentsPropertiesPutRequest|null $_rest_payments_properties (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPropertiesPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsPropertiesPostAsyncWithHttpInfo(
        $_rest_payments_properties = null,
        string $contentType = self::contentTypes['restPaymentsPropertiesPost'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\PaymentProperty';
        $request = $this->restPaymentsPropertiesPostRequest($_rest_payments_properties, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPaymentsPropertiesPost'
     *
     * @param  \ck\Model\RestPaymentsPropertiesPutRequest|null $_rest_payments_properties (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPropertiesPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPaymentsPropertiesPostRequest(
        $_rest_payments_properties = null,
        string $contentType = self::contentTypes['restPaymentsPropertiesPost'][0]
    ): Request
    {



        $resourcePath = '/rest/payments/properties';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($_rest_payments_properties)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_rest_payments_properties));
            } else {
                $httpBody = $_rest_payments_properties;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPaymentsPropertiesPropertyIdGet
     *
     * Get a property
     *
     * @param  int $property_id property_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPropertiesPropertyIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\PaymentProperty
     */
    public function restPaymentsPropertiesPropertyIdGet(
        int $property_id,
        string $contentType = self::contentTypes['restPaymentsPropertiesPropertyIdGet'][0]
    ): \ck\Model\PaymentProperty
    {
        list($response) = $this->restPaymentsPropertiesPropertyIdGetWithHttpInfo($property_id, $contentType);
        return $response;
    }

    /**
     * Operation restPaymentsPropertiesPropertyIdGetWithHttpInfo
     *
     * Get a property
     *
     * @param  int $property_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPropertiesPropertyIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\PaymentProperty, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPaymentsPropertiesPropertyIdGetWithHttpInfo(
        int $property_id,
        string $contentType = self::contentTypes['restPaymentsPropertiesPropertyIdGet'][0]
    ): array
    {
        $request = $this->restPaymentsPropertiesPropertyIdGetRequest($property_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\PaymentProperty' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\PaymentProperty' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\PaymentProperty', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\PaymentProperty';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\PaymentProperty',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPaymentsPropertiesPropertyIdGetAsync
     *
     * Get a property
     *
     * @param  int $property_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPropertiesPropertyIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsPropertiesPropertyIdGetAsync(
        int $property_id,
        string $contentType = self::contentTypes['restPaymentsPropertiesPropertyIdGet'][0]
    ): PromiseInterface
    {
        return $this->restPaymentsPropertiesPropertyIdGetAsyncWithHttpInfo($property_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPaymentsPropertiesPropertyIdGetAsyncWithHttpInfo
     *
     * Get a property
     *
     * @param  int $property_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPropertiesPropertyIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsPropertiesPropertyIdGetAsyncWithHttpInfo(
        $property_id,
        string $contentType = self::contentTypes['restPaymentsPropertiesPropertyIdGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\PaymentProperty';
        $request = $this->restPaymentsPropertiesPropertyIdGetRequest($property_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPaymentsPropertiesPropertyIdGet'
     *
     * @param  int $property_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPropertiesPropertyIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPaymentsPropertiesPropertyIdGetRequest(
        $property_id,
        string $contentType = self::contentTypes['restPaymentsPropertiesPropertyIdGet'][0]
    ): Request
    {

        // verify the required parameter 'property_id' is set
        if ($property_id === null || (is_array($property_id) && count($property_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $property_id when calling restPaymentsPropertiesPropertyIdGet'
            );
        }


        $resourcePath = '/rest/payments/properties/{propertyId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($property_id !== null) {
            $resourcePath = str_replace(
                '{' . 'propertyId' . '}',
                ObjectSerializer::toPathValue($property_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPaymentsPropertiesPut
     *
     * Update a payment property
     *
     * @param  \ck\Model\RestPaymentsPropertiesPutRequest|null $_rest_payments_properties _rest_payments_properties (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPropertiesPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\PaymentProperty
     */
    public function restPaymentsPropertiesPut(
        ?\ck\Model\RestPaymentsPropertiesPutRequest $_rest_payments_properties = null,
        string $contentType = self::contentTypes['restPaymentsPropertiesPut'][0]
    ): \ck\Model\PaymentProperty
    {
        list($response) = $this->restPaymentsPropertiesPutWithHttpInfo($_rest_payments_properties, $contentType);
        return $response;
    }

    /**
     * Operation restPaymentsPropertiesPutWithHttpInfo
     *
     * Update a payment property
     *
     * @param  \ck\Model\RestPaymentsPropertiesPutRequest|null $_rest_payments_properties (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPropertiesPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\PaymentProperty, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPaymentsPropertiesPutWithHttpInfo(
        ?\ck\Model\RestPaymentsPropertiesPutRequest $_rest_payments_properties = null,
        string $contentType = self::contentTypes['restPaymentsPropertiesPut'][0]
    ): array
    {
        $request = $this->restPaymentsPropertiesPutRequest($_rest_payments_properties, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\PaymentProperty' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\PaymentProperty' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\PaymentProperty', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\PaymentProperty';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\PaymentProperty',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPaymentsPropertiesPutAsync
     *
     * Update a payment property
     *
     * @param  \ck\Model\RestPaymentsPropertiesPutRequest|null $_rest_payments_properties (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPropertiesPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsPropertiesPutAsync(
        ?\ck\Model\RestPaymentsPropertiesPutRequest $_rest_payments_properties = null,
        string $contentType = self::contentTypes['restPaymentsPropertiesPut'][0]
    ): PromiseInterface
    {
        return $this->restPaymentsPropertiesPutAsyncWithHttpInfo($_rest_payments_properties, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPaymentsPropertiesPutAsyncWithHttpInfo
     *
     * Update a payment property
     *
     * @param  \ck\Model\RestPaymentsPropertiesPutRequest|null $_rest_payments_properties (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPropertiesPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsPropertiesPutAsyncWithHttpInfo(
        $_rest_payments_properties = null,
        string $contentType = self::contentTypes['restPaymentsPropertiesPut'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\PaymentProperty';
        $request = $this->restPaymentsPropertiesPutRequest($_rest_payments_properties, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPaymentsPropertiesPut'
     *
     * @param  \ck\Model\RestPaymentsPropertiesPutRequest|null $_rest_payments_properties (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPropertiesPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPaymentsPropertiesPutRequest(
        $_rest_payments_properties = null,
        string $contentType = self::contentTypes['restPaymentsPropertiesPut'][0]
    ): Request
    {



        $resourcePath = '/rest/payments/properties';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($_rest_payments_properties)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_rest_payments_properties));
            } else {
                $httpBody = $_rest_payments_properties;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPaymentsPropertiesTypesGet
     *
     * List property types
     *
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPropertiesTypesGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\PaymentPropertyType[]
     */
    public function restPaymentsPropertiesTypesGet(
        ?int $items_per_page = null,
        ?int $page = null,
        string $contentType = self::contentTypes['restPaymentsPropertiesTypesGet'][0]
    ): array
    {
        list($response) = $this->restPaymentsPropertiesTypesGetWithHttpInfo($items_per_page, $page, $contentType);
        return $response;
    }

    /**
     * Operation restPaymentsPropertiesTypesGetWithHttpInfo
     *
     * List property types
     *
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPropertiesTypesGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\PaymentPropertyType[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restPaymentsPropertiesTypesGetWithHttpInfo(
        ?int $items_per_page = null,
        ?int $page = null,
        string $contentType = self::contentTypes['restPaymentsPropertiesTypesGet'][0]
    ): array
    {
        $request = $this->restPaymentsPropertiesTypesGetRequest($items_per_page, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\PaymentPropertyType[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\PaymentPropertyType[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\PaymentPropertyType[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\PaymentPropertyType[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\PaymentPropertyType[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPaymentsPropertiesTypesGetAsync
     *
     * List property types
     *
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPropertiesTypesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsPropertiesTypesGetAsync(
        ?int $items_per_page = null,
        ?int $page = null,
        string $contentType = self::contentTypes['restPaymentsPropertiesTypesGet'][0]
    ): PromiseInterface
    {
        return $this->restPaymentsPropertiesTypesGetAsyncWithHttpInfo($items_per_page, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPaymentsPropertiesTypesGetAsyncWithHttpInfo
     *
     * List property types
     *
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPropertiesTypesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsPropertiesTypesGetAsyncWithHttpInfo(
        $items_per_page = null,
        $page = null,
        string $contentType = self::contentTypes['restPaymentsPropertiesTypesGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\PaymentPropertyType[]';
        $request = $this->restPaymentsPropertiesTypesGetRequest($items_per_page, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPaymentsPropertiesTypesGet'
     *
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPropertiesTypesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPaymentsPropertiesTypesGetRequest(
        $items_per_page = null,
        $page = null,
        string $contentType = self::contentTypes['restPaymentsPropertiesTypesGet'][0]
    ): Request
    {




        $resourcePath = '/rest/payments/properties/types';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $items_per_page,
            'itemsPerPage', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPaymentsPropertiesTypesPost
     *
     * Create a property type
     *
     * @param  \ck\Model\RestPaymentsPropertiesTypesPutRequest|null $_rest_payments_properties_types _rest_payments_properties_types (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPropertiesTypesPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\PaymentPropertyType
     */
    public function restPaymentsPropertiesTypesPost(
        ?\ck\Model\RestPaymentsPropertiesTypesPutRequest $_rest_payments_properties_types = null,
        string $contentType = self::contentTypes['restPaymentsPropertiesTypesPost'][0]
    ): \ck\Model\PaymentPropertyType
    {
        list($response) = $this->restPaymentsPropertiesTypesPostWithHttpInfo($_rest_payments_properties_types, $contentType);
        return $response;
    }

    /**
     * Operation restPaymentsPropertiesTypesPostWithHttpInfo
     *
     * Create a property type
     *
     * @param  \ck\Model\RestPaymentsPropertiesTypesPutRequest|null $_rest_payments_properties_types (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPropertiesTypesPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\PaymentPropertyType, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPaymentsPropertiesTypesPostWithHttpInfo(
        ?\ck\Model\RestPaymentsPropertiesTypesPutRequest $_rest_payments_properties_types = null,
        string $contentType = self::contentTypes['restPaymentsPropertiesTypesPost'][0]
    ): array
    {
        $request = $this->restPaymentsPropertiesTypesPostRequest($_rest_payments_properties_types, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\PaymentPropertyType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\PaymentPropertyType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\PaymentPropertyType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\PaymentPropertyType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\PaymentPropertyType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPaymentsPropertiesTypesPostAsync
     *
     * Create a property type
     *
     * @param  \ck\Model\RestPaymentsPropertiesTypesPutRequest|null $_rest_payments_properties_types (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPropertiesTypesPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsPropertiesTypesPostAsync(
        ?\ck\Model\RestPaymentsPropertiesTypesPutRequest $_rest_payments_properties_types = null,
        string $contentType = self::contentTypes['restPaymentsPropertiesTypesPost'][0]
    ): PromiseInterface
    {
        return $this->restPaymentsPropertiesTypesPostAsyncWithHttpInfo($_rest_payments_properties_types, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPaymentsPropertiesTypesPostAsyncWithHttpInfo
     *
     * Create a property type
     *
     * @param  \ck\Model\RestPaymentsPropertiesTypesPutRequest|null $_rest_payments_properties_types (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPropertiesTypesPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsPropertiesTypesPostAsyncWithHttpInfo(
        $_rest_payments_properties_types = null,
        string $contentType = self::contentTypes['restPaymentsPropertiesTypesPost'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\PaymentPropertyType';
        $request = $this->restPaymentsPropertiesTypesPostRequest($_rest_payments_properties_types, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPaymentsPropertiesTypesPost'
     *
     * @param  \ck\Model\RestPaymentsPropertiesTypesPutRequest|null $_rest_payments_properties_types (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPropertiesTypesPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPaymentsPropertiesTypesPostRequest(
        $_rest_payments_properties_types = null,
        string $contentType = self::contentTypes['restPaymentsPropertiesTypesPost'][0]
    ): Request
    {



        $resourcePath = '/rest/payments/properties/types';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($_rest_payments_properties_types)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_rest_payments_properties_types));
            } else {
                $httpBody = $_rest_payments_properties_types;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPaymentsPropertiesTypesPut
     *
     * Update a property type
     *
     * @param  \ck\Model\RestPaymentsPropertiesTypesPutRequest|null $_rest_payments_properties_types _rest_payments_properties_types (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPropertiesTypesPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\PaymentPropertyType
     */
    public function restPaymentsPropertiesTypesPut(
        ?\ck\Model\RestPaymentsPropertiesTypesPutRequest $_rest_payments_properties_types = null,
        string $contentType = self::contentTypes['restPaymentsPropertiesTypesPut'][0]
    ): \ck\Model\PaymentPropertyType
    {
        list($response) = $this->restPaymentsPropertiesTypesPutWithHttpInfo($_rest_payments_properties_types, $contentType);
        return $response;
    }

    /**
     * Operation restPaymentsPropertiesTypesPutWithHttpInfo
     *
     * Update a property type
     *
     * @param  \ck\Model\RestPaymentsPropertiesTypesPutRequest|null $_rest_payments_properties_types (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPropertiesTypesPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\PaymentPropertyType, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPaymentsPropertiesTypesPutWithHttpInfo(
        ?\ck\Model\RestPaymentsPropertiesTypesPutRequest $_rest_payments_properties_types = null,
        string $contentType = self::contentTypes['restPaymentsPropertiesTypesPut'][0]
    ): array
    {
        $request = $this->restPaymentsPropertiesTypesPutRequest($_rest_payments_properties_types, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\PaymentPropertyType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\PaymentPropertyType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\PaymentPropertyType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\PaymentPropertyType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\PaymentPropertyType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPaymentsPropertiesTypesPutAsync
     *
     * Update a property type
     *
     * @param  \ck\Model\RestPaymentsPropertiesTypesPutRequest|null $_rest_payments_properties_types (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPropertiesTypesPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsPropertiesTypesPutAsync(
        ?\ck\Model\RestPaymentsPropertiesTypesPutRequest $_rest_payments_properties_types = null,
        string $contentType = self::contentTypes['restPaymentsPropertiesTypesPut'][0]
    ): PromiseInterface
    {
        return $this->restPaymentsPropertiesTypesPutAsyncWithHttpInfo($_rest_payments_properties_types, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPaymentsPropertiesTypesPutAsyncWithHttpInfo
     *
     * Update a property type
     *
     * @param  \ck\Model\RestPaymentsPropertiesTypesPutRequest|null $_rest_payments_properties_types (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPropertiesTypesPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsPropertiesTypesPutAsyncWithHttpInfo(
        $_rest_payments_properties_types = null,
        string $contentType = self::contentTypes['restPaymentsPropertiesTypesPut'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\PaymentPropertyType';
        $request = $this->restPaymentsPropertiesTypesPutRequest($_rest_payments_properties_types, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPaymentsPropertiesTypesPut'
     *
     * @param  \ck\Model\RestPaymentsPropertiesTypesPutRequest|null $_rest_payments_properties_types (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPropertiesTypesPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPaymentsPropertiesTypesPutRequest(
        $_rest_payments_properties_types = null,
        string $contentType = self::contentTypes['restPaymentsPropertiesTypesPut'][0]
    ): Request
    {



        $resourcePath = '/rest/payments/properties/types';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($_rest_payments_properties_types)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_rest_payments_properties_types));
            } else {
                $httpBody = $_rest_payments_properties_types;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPaymentsPropertiesTypesTypeIdGet
     *
     * Get a property type
     *
     * @param  int $type_id type_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPropertiesTypesTypeIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\PaymentPropertyType[]
     */
    public function restPaymentsPropertiesTypesTypeIdGet(
        int $type_id,
        string $contentType = self::contentTypes['restPaymentsPropertiesTypesTypeIdGet'][0]
    ): array
    {
        list($response) = $this->restPaymentsPropertiesTypesTypeIdGetWithHttpInfo($type_id, $contentType);
        return $response;
    }

    /**
     * Operation restPaymentsPropertiesTypesTypeIdGetWithHttpInfo
     *
     * Get a property type
     *
     * @param  int $type_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPropertiesTypesTypeIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\PaymentPropertyType[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restPaymentsPropertiesTypesTypeIdGetWithHttpInfo(
        int $type_id,
        string $contentType = self::contentTypes['restPaymentsPropertiesTypesTypeIdGet'][0]
    ): array
    {
        $request = $this->restPaymentsPropertiesTypesTypeIdGetRequest($type_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\PaymentPropertyType[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\PaymentPropertyType[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\PaymentPropertyType[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\PaymentPropertyType[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\PaymentPropertyType[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPaymentsPropertiesTypesTypeIdGetAsync
     *
     * Get a property type
     *
     * @param  int $type_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPropertiesTypesTypeIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsPropertiesTypesTypeIdGetAsync(
        int $type_id,
        string $contentType = self::contentTypes['restPaymentsPropertiesTypesTypeIdGet'][0]
    ): PromiseInterface
    {
        return $this->restPaymentsPropertiesTypesTypeIdGetAsyncWithHttpInfo($type_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPaymentsPropertiesTypesTypeIdGetAsyncWithHttpInfo
     *
     * Get a property type
     *
     * @param  int $type_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPropertiesTypesTypeIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsPropertiesTypesTypeIdGetAsyncWithHttpInfo(
        $type_id,
        string $contentType = self::contentTypes['restPaymentsPropertiesTypesTypeIdGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\PaymentPropertyType[]';
        $request = $this->restPaymentsPropertiesTypesTypeIdGetRequest($type_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPaymentsPropertiesTypesTypeIdGet'
     *
     * @param  int $type_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPropertiesTypesTypeIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPaymentsPropertiesTypesTypeIdGetRequest(
        $type_id,
        string $contentType = self::contentTypes['restPaymentsPropertiesTypesTypeIdGet'][0]
    ): Request
    {

        // verify the required parameter 'type_id' is set
        if ($type_id === null || (is_array($type_id) && count($type_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $type_id when calling restPaymentsPropertiesTypesTypeIdGet'
            );
        }


        $resourcePath = '/rest/payments/properties/types/{typeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($type_id !== null) {
            $resourcePath = str_replace(
                '{' . 'typeId' . '}',
                ObjectSerializer::toPathValue($type_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPaymentsPropertyPropertyTypeIdPropertyValueGet
     *
     * List payments by property type ID and value
     *
     * @param  int $property_type_id property_type_id (required)
     * @param  int $property_value property_value (required)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPropertyPropertyTypeIdPropertyValueGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\Payment[]
     */
    public function restPaymentsPropertyPropertyTypeIdPropertyValueGet(
        int $property_type_id,
        int $property_value,
        ?int $items_per_page = null,
        ?int $page = null,
        string $contentType = self::contentTypes['restPaymentsPropertyPropertyTypeIdPropertyValueGet'][0]
    ): array
    {
        list($response) = $this->restPaymentsPropertyPropertyTypeIdPropertyValueGetWithHttpInfo($property_type_id, $property_value, $items_per_page, $page, $contentType);
        return $response;
    }

    /**
     * Operation restPaymentsPropertyPropertyTypeIdPropertyValueGetWithHttpInfo
     *
     * List payments by property type ID and value
     *
     * @param  int $property_type_id (required)
     * @param  int $property_value (required)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPropertyPropertyTypeIdPropertyValueGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\Payment[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restPaymentsPropertyPropertyTypeIdPropertyValueGetWithHttpInfo(
        int $property_type_id,
        int $property_value,
        ?int $items_per_page = null,
        ?int $page = null,
        string $contentType = self::contentTypes['restPaymentsPropertyPropertyTypeIdPropertyValueGet'][0]
    ): array
    {
        $request = $this->restPaymentsPropertyPropertyTypeIdPropertyValueGetRequest($property_type_id, $property_value, $items_per_page, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\Payment[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\Payment[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\Payment[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\Payment[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\Payment[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPaymentsPropertyPropertyTypeIdPropertyValueGetAsync
     *
     * List payments by property type ID and value
     *
     * @param  int $property_type_id (required)
     * @param  int $property_value (required)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPropertyPropertyTypeIdPropertyValueGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsPropertyPropertyTypeIdPropertyValueGetAsync(
        int $property_type_id,
        int $property_value,
        ?int $items_per_page = null,
        ?int $page = null,
        string $contentType = self::contentTypes['restPaymentsPropertyPropertyTypeIdPropertyValueGet'][0]
    ): PromiseInterface
    {
        return $this->restPaymentsPropertyPropertyTypeIdPropertyValueGetAsyncWithHttpInfo($property_type_id, $property_value, $items_per_page, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPaymentsPropertyPropertyTypeIdPropertyValueGetAsyncWithHttpInfo
     *
     * List payments by property type ID and value
     *
     * @param  int $property_type_id (required)
     * @param  int $property_value (required)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPropertyPropertyTypeIdPropertyValueGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsPropertyPropertyTypeIdPropertyValueGetAsyncWithHttpInfo(
        $property_type_id,
        $property_value,
        $items_per_page = null,
        $page = null,
        string $contentType = self::contentTypes['restPaymentsPropertyPropertyTypeIdPropertyValueGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\Payment[]';
        $request = $this->restPaymentsPropertyPropertyTypeIdPropertyValueGetRequest($property_type_id, $property_value, $items_per_page, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPaymentsPropertyPropertyTypeIdPropertyValueGet'
     *
     * @param  int $property_type_id (required)
     * @param  int $property_value (required)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPropertyPropertyTypeIdPropertyValueGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPaymentsPropertyPropertyTypeIdPropertyValueGetRequest(
        $property_type_id,
        $property_value,
        $items_per_page = null,
        $page = null,
        string $contentType = self::contentTypes['restPaymentsPropertyPropertyTypeIdPropertyValueGet'][0]
    ): Request
    {

        // verify the required parameter 'property_type_id' is set
        if ($property_type_id === null || (is_array($property_type_id) && count($property_type_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $property_type_id when calling restPaymentsPropertyPropertyTypeIdPropertyValueGet'
            );
        }

        // verify the required parameter 'property_value' is set
        if ($property_value === null || (is_array($property_value) && count($property_value) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $property_value when calling restPaymentsPropertyPropertyTypeIdPropertyValueGet'
            );
        }




        $resourcePath = '/rest/payments/property/{propertyTypeId}/{propertyValue}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $items_per_page,
            'itemsPerPage', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($property_type_id !== null) {
            $resourcePath = str_replace(
                '{' . 'propertyTypeId' . '}',
                ObjectSerializer::toPathValue($property_type_id),
                $resourcePath
            );
        }
        // path params
        if ($property_value !== null) {
            $resourcePath = str_replace(
                '{' . 'propertyValue' . '}',
                ObjectSerializer::toPathValue($property_value),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPaymentsPut
     *
     * Update a payment
     *
     * @param  \ck\Model\RestPaymentsPutRequest|null $_rest_payments _rest_payments (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\Payment
     */
    public function restPaymentsPut(
        ?\ck\Model\RestPaymentsPutRequest $_rest_payments = null,
        string $contentType = self::contentTypes['restPaymentsPut'][0]
    ): \ck\Model\Payment
    {
        list($response) = $this->restPaymentsPutWithHttpInfo($_rest_payments, $contentType);
        return $response;
    }

    /**
     * Operation restPaymentsPutWithHttpInfo
     *
     * Update a payment
     *
     * @param  \ck\Model\RestPaymentsPutRequest|null $_rest_payments (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\Payment, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPaymentsPutWithHttpInfo(
        ?\ck\Model\RestPaymentsPutRequest $_rest_payments = null,
        string $contentType = self::contentTypes['restPaymentsPut'][0]
    ): array
    {
        $request = $this->restPaymentsPutRequest($_rest_payments, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\Payment' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\Payment' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\Payment', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\Payment';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\Payment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPaymentsPutAsync
     *
     * Update a payment
     *
     * @param  \ck\Model\RestPaymentsPutRequest|null $_rest_payments (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsPutAsync(
        ?\ck\Model\RestPaymentsPutRequest $_rest_payments = null,
        string $contentType = self::contentTypes['restPaymentsPut'][0]
    ): PromiseInterface
    {
        return $this->restPaymentsPutAsyncWithHttpInfo($_rest_payments, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPaymentsPutAsyncWithHttpInfo
     *
     * Update a payment
     *
     * @param  \ck\Model\RestPaymentsPutRequest|null $_rest_payments (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsPutAsyncWithHttpInfo(
        $_rest_payments = null,
        string $contentType = self::contentTypes['restPaymentsPut'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\Payment';
        $request = $this->restPaymentsPutRequest($_rest_payments, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPaymentsPut'
     *
     * @param  \ck\Model\RestPaymentsPutRequest|null $_rest_payments (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPaymentsPutRequest(
        $_rest_payments = null,
        string $contentType = self::contentTypes['restPaymentsPut'][0]
    ): Request
    {



        $resourcePath = '/rest/payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($_rest_payments)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_rest_payments));
            } else {
                $httpBody = $_rest_payments;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPaymentsStatusStatusIdGet
     *
     * List payments of a payment status
     *
     * @param  int $status_id status_id (required)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsStatusStatusIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\Payment[]
     */
    public function restPaymentsStatusStatusIdGet(
        int $status_id,
        ?int $items_per_page = null,
        ?int $page = null,
        string $contentType = self::contentTypes['restPaymentsStatusStatusIdGet'][0]
    ): array
    {
        list($response) = $this->restPaymentsStatusStatusIdGetWithHttpInfo($status_id, $items_per_page, $page, $contentType);
        return $response;
    }

    /**
     * Operation restPaymentsStatusStatusIdGetWithHttpInfo
     *
     * List payments of a payment status
     *
     * @param  int $status_id (required)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsStatusStatusIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\Payment[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restPaymentsStatusStatusIdGetWithHttpInfo(
        int $status_id,
        ?int $items_per_page = null,
        ?int $page = null,
        string $contentType = self::contentTypes['restPaymentsStatusStatusIdGet'][0]
    ): array
    {
        $request = $this->restPaymentsStatusStatusIdGetRequest($status_id, $items_per_page, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\Payment[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\Payment[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\Payment[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\Payment[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\Payment[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPaymentsStatusStatusIdGetAsync
     *
     * List payments of a payment status
     *
     * @param  int $status_id (required)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsStatusStatusIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsStatusStatusIdGetAsync(
        int $status_id,
        ?int $items_per_page = null,
        ?int $page = null,
        string $contentType = self::contentTypes['restPaymentsStatusStatusIdGet'][0]
    ): PromiseInterface
    {
        return $this->restPaymentsStatusStatusIdGetAsyncWithHttpInfo($status_id, $items_per_page, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPaymentsStatusStatusIdGetAsyncWithHttpInfo
     *
     * List payments of a payment status
     *
     * @param  int $status_id (required)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsStatusStatusIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsStatusStatusIdGetAsyncWithHttpInfo(
        $status_id,
        $items_per_page = null,
        $page = null,
        string $contentType = self::contentTypes['restPaymentsStatusStatusIdGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\Payment[]';
        $request = $this->restPaymentsStatusStatusIdGetRequest($status_id, $items_per_page, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPaymentsStatusStatusIdGet'
     *
     * @param  int $status_id (required)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsStatusStatusIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPaymentsStatusStatusIdGetRequest(
        $status_id,
        $items_per_page = null,
        $page = null,
        string $contentType = self::contentTypes['restPaymentsStatusStatusIdGet'][0]
    ): Request
    {

        // verify the required parameter 'status_id' is set
        if ($status_id === null || (is_array($status_id) && count($status_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $status_id when calling restPaymentsStatusStatusIdGet'
            );
        }




        $resourcePath = '/rest/payments/status/{statusId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $items_per_page,
            'itemsPerPage', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($status_id !== null) {
            $resourcePath = str_replace(
                '{' . 'statusId' . '}',
                ObjectSerializer::toPathValue($status_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPaymentsTransactionsTransactionTypeIdGet
     *
     * List payments of a transaction type
     *
     * @param  int $transaction_type_id transaction_type_id (required)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsTransactionsTransactionTypeIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\Payment[]
     */
    public function restPaymentsTransactionsTransactionTypeIdGet(
        int $transaction_type_id,
        ?int $items_per_page = null,
        ?int $page = null,
        string $contentType = self::contentTypes['restPaymentsTransactionsTransactionTypeIdGet'][0]
    ): array
    {
        list($response) = $this->restPaymentsTransactionsTransactionTypeIdGetWithHttpInfo($transaction_type_id, $items_per_page, $page, $contentType);
        return $response;
    }

    /**
     * Operation restPaymentsTransactionsTransactionTypeIdGetWithHttpInfo
     *
     * List payments of a transaction type
     *
     * @param  int $transaction_type_id (required)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsTransactionsTransactionTypeIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\Payment[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restPaymentsTransactionsTransactionTypeIdGetWithHttpInfo(
        int $transaction_type_id,
        ?int $items_per_page = null,
        ?int $page = null,
        string $contentType = self::contentTypes['restPaymentsTransactionsTransactionTypeIdGet'][0]
    ): array
    {
        $request = $this->restPaymentsTransactionsTransactionTypeIdGetRequest($transaction_type_id, $items_per_page, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\Payment[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\Payment[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\Payment[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\Payment[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\Payment[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPaymentsTransactionsTransactionTypeIdGetAsync
     *
     * List payments of a transaction type
     *
     * @param  int $transaction_type_id (required)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsTransactionsTransactionTypeIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsTransactionsTransactionTypeIdGetAsync(
        int $transaction_type_id,
        ?int $items_per_page = null,
        ?int $page = null,
        string $contentType = self::contentTypes['restPaymentsTransactionsTransactionTypeIdGet'][0]
    ): PromiseInterface
    {
        return $this->restPaymentsTransactionsTransactionTypeIdGetAsyncWithHttpInfo($transaction_type_id, $items_per_page, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPaymentsTransactionsTransactionTypeIdGetAsyncWithHttpInfo
     *
     * List payments of a transaction type
     *
     * @param  int $transaction_type_id (required)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsTransactionsTransactionTypeIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPaymentsTransactionsTransactionTypeIdGetAsyncWithHttpInfo(
        $transaction_type_id,
        $items_per_page = null,
        $page = null,
        string $contentType = self::contentTypes['restPaymentsTransactionsTransactionTypeIdGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\Payment[]';
        $request = $this->restPaymentsTransactionsTransactionTypeIdGetRequest($transaction_type_id, $items_per_page, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPaymentsTransactionsTransactionTypeIdGet'
     *
     * @param  int $transaction_type_id (required)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPaymentsTransactionsTransactionTypeIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPaymentsTransactionsTransactionTypeIdGetRequest(
        $transaction_type_id,
        $items_per_page = null,
        $page = null,
        string $contentType = self::contentTypes['restPaymentsTransactionsTransactionTypeIdGet'][0]
    ): Request
    {

        // verify the required parameter 'transaction_type_id' is set
        if ($transaction_type_id === null || (is_array($transaction_type_id) && count($transaction_type_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $transaction_type_id when calling restPaymentsTransactionsTransactionTypeIdGet'
            );
        }




        $resourcePath = '/rest/payments/transactions/{transactionTypeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $items_per_page,
            'itemsPerPage', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($transaction_type_id !== null) {
            $resourcePath = str_replace(
                '{' . 'transactionTypeId' . '}',
                ObjectSerializer::toPathValue($transaction_type_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
