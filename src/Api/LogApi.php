<?php
/**
 * LogApi
 * PHP version 8.1
 *
 * @package  ck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ck\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use ck\ApiException;
use ck\Configuration;
use ck\HeaderSelector;
use ck\ObjectSerializer;

/**
 * LogApi Class Doc Comment
 *
 * @package  ck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class LogApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'restDeleteLogGet' => [
            'application/json',
        ],
        'restLogsGet' => [
            'application/json',
        ],
        'restLogsIdGet' => [
            'application/json',
        ],
        'restLogsIntegrationKeysGet' => [
            'application/json',
        ],
        'restLogsPost' => [
            'application/json',
        ],
        'restLogsReferenceTypesGet' => [
            'application/json',
        ],
        'restLogsSettingsGet' => [
            'application/json',
        ],
        'restLogsSettingsPost' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation restDeleteLogGet
     *
     * Search the delete log
     *
     * @param  int|null $reference_type The type of deleted record (optional)
     * @param  int|null $user_id The ID of the user who deleted the record (optional)
     * @param  string|null $updated_between Filter restricts the list of results to deleteLogs updated during the specified period. The end date (to) is optional. If no end date is specified, items updated between the start date (from) and the present will be listed. The dates can be specified as unix timestamps or in the ISO 8601 date format. Start date and optional end date are separated by a comma. For example, .../delete_log?updatedBetween&#x3D;1451606400,1456790400 will list deleteLogs updated between 2016-01-01 and 2016-03-01. .../delete_log?updatedBetween&#x3D;1451606400 will list deleteLogs updated since 2016-01-01. The PHP function strtotime is also supported. (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restDeleteLogGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\RestDeleteLogGet200Response
     */
    public function restDeleteLogGet(
        ?int $reference_type = null,
        ?int $user_id = null,
        ?string $updated_between = null,
        ?int $page = null,
        ?int $items_per_page = null,
        string $contentType = self::contentTypes['restDeleteLogGet'][0]
    ): \ck\Model\RestDeleteLogGet200Response
    {
        list($response) = $this->restDeleteLogGetWithHttpInfo($reference_type, $user_id, $updated_between, $page, $items_per_page, $contentType);
        return $response;
    }

    /**
     * Operation restDeleteLogGetWithHttpInfo
     *
     * Search the delete log
     *
     * @param  int|null $reference_type The type of deleted record (optional)
     * @param  int|null $user_id The ID of the user who deleted the record (optional)
     * @param  string|null $updated_between Filter restricts the list of results to deleteLogs updated during the specified period. The end date (to) is optional. If no end date is specified, items updated between the start date (from) and the present will be listed. The dates can be specified as unix timestamps or in the ISO 8601 date format. Start date and optional end date are separated by a comma. For example, .../delete_log?updatedBetween&#x3D;1451606400,1456790400 will list deleteLogs updated between 2016-01-01 and 2016-03-01. .../delete_log?updatedBetween&#x3D;1451606400 will list deleteLogs updated since 2016-01-01. The PHP function strtotime is also supported. (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restDeleteLogGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\RestDeleteLogGet200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function restDeleteLogGetWithHttpInfo(
        ?int $reference_type = null,
        ?int $user_id = null,
        ?string $updated_between = null,
        ?int $page = null,
        ?int $items_per_page = null,
        string $contentType = self::contentTypes['restDeleteLogGet'][0]
    ): array
    {
        $request = $this->restDeleteLogGetRequest($reference_type, $user_id, $updated_between, $page, $items_per_page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\RestDeleteLogGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\RestDeleteLogGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\RestDeleteLogGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\RestDeleteLogGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\RestDeleteLogGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restDeleteLogGetAsync
     *
     * Search the delete log
     *
     * @param  int|null $reference_type The type of deleted record (optional)
     * @param  int|null $user_id The ID of the user who deleted the record (optional)
     * @param  string|null $updated_between Filter restricts the list of results to deleteLogs updated during the specified period. The end date (to) is optional. If no end date is specified, items updated between the start date (from) and the present will be listed. The dates can be specified as unix timestamps or in the ISO 8601 date format. Start date and optional end date are separated by a comma. For example, .../delete_log?updatedBetween&#x3D;1451606400,1456790400 will list deleteLogs updated between 2016-01-01 and 2016-03-01. .../delete_log?updatedBetween&#x3D;1451606400 will list deleteLogs updated since 2016-01-01. The PHP function strtotime is also supported. (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restDeleteLogGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restDeleteLogGetAsync(
        ?int $reference_type = null,
        ?int $user_id = null,
        ?string $updated_between = null,
        ?int $page = null,
        ?int $items_per_page = null,
        string $contentType = self::contentTypes['restDeleteLogGet'][0]
    ): PromiseInterface
    {
        return $this->restDeleteLogGetAsyncWithHttpInfo($reference_type, $user_id, $updated_between, $page, $items_per_page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restDeleteLogGetAsyncWithHttpInfo
     *
     * Search the delete log
     *
     * @param  int|null $reference_type The type of deleted record (optional)
     * @param  int|null $user_id The ID of the user who deleted the record (optional)
     * @param  string|null $updated_between Filter restricts the list of results to deleteLogs updated during the specified period. The end date (to) is optional. If no end date is specified, items updated between the start date (from) and the present will be listed. The dates can be specified as unix timestamps or in the ISO 8601 date format. Start date and optional end date are separated by a comma. For example, .../delete_log?updatedBetween&#x3D;1451606400,1456790400 will list deleteLogs updated between 2016-01-01 and 2016-03-01. .../delete_log?updatedBetween&#x3D;1451606400 will list deleteLogs updated since 2016-01-01. The PHP function strtotime is also supported. (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restDeleteLogGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restDeleteLogGetAsyncWithHttpInfo(
        $reference_type = null,
        $user_id = null,
        $updated_between = null,
        $page = null,
        $items_per_page = null,
        string $contentType = self::contentTypes['restDeleteLogGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\RestDeleteLogGet200Response';
        $request = $this->restDeleteLogGetRequest($reference_type, $user_id, $updated_between, $page, $items_per_page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restDeleteLogGet'
     *
     * @param  int|null $reference_type The type of deleted record (optional)
     * @param  int|null $user_id The ID of the user who deleted the record (optional)
     * @param  string|null $updated_between Filter restricts the list of results to deleteLogs updated during the specified period. The end date (to) is optional. If no end date is specified, items updated between the start date (from) and the present will be listed. The dates can be specified as unix timestamps or in the ISO 8601 date format. Start date and optional end date are separated by a comma. For example, .../delete_log?updatedBetween&#x3D;1451606400,1456790400 will list deleteLogs updated between 2016-01-01 and 2016-03-01. .../delete_log?updatedBetween&#x3D;1451606400 will list deleteLogs updated since 2016-01-01. The PHP function strtotime is also supported. (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restDeleteLogGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restDeleteLogGetRequest(
        $reference_type = null,
        $user_id = null,
        $updated_between = null,
        $page = null,
        $items_per_page = null,
        string $contentType = self::contentTypes['restDeleteLogGet'][0]
    ): Request
    {







        $resourcePath = '/rest/delete_log';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $reference_type,
            'referenceType', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_id,
            'userId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $updated_between,
            'updatedBetween', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $items_per_page,
            'itemsPerPage', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restLogsGet
     *
     * Perform a search operation.
     *
     * @param  int|null $page The page of results to search for. (optional)
     * @param  int|null $items_per_page The number of items to list per page. (optional)
     * @param  int|null $integration Filter that restricts the search result to log entries with custom integration key(s). (optional)
     * @param  int|null $identifier Filter that restricts the search result to log entries with custom identifier(s). (optional)
     * @param  string|null $reference_type Filter that restricts the search result to log entries with custom reference types. (optional)
     * @param  string|null $reference_value Filter that restricts the search result to log entries with custom reference values. (optional)
     * @param  string|null $additional_info Filter that restricts the search result to log entries that match an additional info. (optional)
     * @param  int|null $code Filter that restricts the search result to log entries with a custom code. (optional)
     * @param  int|null $level Filter that restricts the search result to log entries of a custom level. Available values are: &#39;debug&#39;, &#39;info&#39;, &#39;notice&#39;, &#39;warning&#39;, &#39;error&#39;, &#39;critical&#39;, &#39;alert&#39;, &#39;emergency&#39;. (optional)
     * @param  string|null $from_date Filter that restricts the search result to log entries created after this date. The date has to be in the W3C format, e.g. &#39;2016-10-24T13:33:23+02:00&#39;. (optional)
     * @param  string|null $to_date Filter that restricts the search result to log entries created before this date. The date has to be in the W3C format, e.g. &#39;2016-10-24T13:33:23+02:00&#39;. (optional)
     * @param  int|null $with An array with child instances to be loaded. Valid instances are &#39;additionalInfo&#39;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restLogsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\RestLogsGet200Response
     */
    public function restLogsGet(
        ?int $page = null,
        ?int $items_per_page = null,
        ?int $integration = null,
        ?int $identifier = null,
        ?string $reference_type = null,
        ?string $reference_value = null,
        ?string $additional_info = null,
        ?int $code = null,
        ?int $level = null,
        ?string $from_date = null,
        ?string $to_date = null,
        ?int $with = null,
        string $contentType = self::contentTypes['restLogsGet'][0]
    ): \ck\Model\RestLogsGet200Response
    {
        list($response) = $this->restLogsGetWithHttpInfo($page, $items_per_page, $integration, $identifier, $reference_type, $reference_value, $additional_info, $code, $level, $from_date, $to_date, $with, $contentType);
        return $response;
    }

    /**
     * Operation restLogsGetWithHttpInfo
     *
     * Perform a search operation.
     *
     * @param  int|null $page The page of results to search for. (optional)
     * @param  int|null $items_per_page The number of items to list per page. (optional)
     * @param  int|null $integration Filter that restricts the search result to log entries with custom integration key(s). (optional)
     * @param  int|null $identifier Filter that restricts the search result to log entries with custom identifier(s). (optional)
     * @param  string|null $reference_type Filter that restricts the search result to log entries with custom reference types. (optional)
     * @param  string|null $reference_value Filter that restricts the search result to log entries with custom reference values. (optional)
     * @param  string|null $additional_info Filter that restricts the search result to log entries that match an additional info. (optional)
     * @param  int|null $code Filter that restricts the search result to log entries with a custom code. (optional)
     * @param  int|null $level Filter that restricts the search result to log entries of a custom level. Available values are: &#39;debug&#39;, &#39;info&#39;, &#39;notice&#39;, &#39;warning&#39;, &#39;error&#39;, &#39;critical&#39;, &#39;alert&#39;, &#39;emergency&#39;. (optional)
     * @param  string|null $from_date Filter that restricts the search result to log entries created after this date. The date has to be in the W3C format, e.g. &#39;2016-10-24T13:33:23+02:00&#39;. (optional)
     * @param  string|null $to_date Filter that restricts the search result to log entries created before this date. The date has to be in the W3C format, e.g. &#39;2016-10-24T13:33:23+02:00&#39;. (optional)
     * @param  int|null $with An array with child instances to be loaded. Valid instances are &#39;additionalInfo&#39;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restLogsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\RestLogsGet200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function restLogsGetWithHttpInfo(
        ?int $page = null,
        ?int $items_per_page = null,
        ?int $integration = null,
        ?int $identifier = null,
        ?string $reference_type = null,
        ?string $reference_value = null,
        ?string $additional_info = null,
        ?int $code = null,
        ?int $level = null,
        ?string $from_date = null,
        ?string $to_date = null,
        ?int $with = null,
        string $contentType = self::contentTypes['restLogsGet'][0]
    ): array
    {
        $request = $this->restLogsGetRequest($page, $items_per_page, $integration, $identifier, $reference_type, $reference_value, $additional_info, $code, $level, $from_date, $to_date, $with, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\RestLogsGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\RestLogsGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\RestLogsGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\RestLogsGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\RestLogsGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restLogsGetAsync
     *
     * Perform a search operation.
     *
     * @param  int|null $page The page of results to search for. (optional)
     * @param  int|null $items_per_page The number of items to list per page. (optional)
     * @param  int|null $integration Filter that restricts the search result to log entries with custom integration key(s). (optional)
     * @param  int|null $identifier Filter that restricts the search result to log entries with custom identifier(s). (optional)
     * @param  string|null $reference_type Filter that restricts the search result to log entries with custom reference types. (optional)
     * @param  string|null $reference_value Filter that restricts the search result to log entries with custom reference values. (optional)
     * @param  string|null $additional_info Filter that restricts the search result to log entries that match an additional info. (optional)
     * @param  int|null $code Filter that restricts the search result to log entries with a custom code. (optional)
     * @param  int|null $level Filter that restricts the search result to log entries of a custom level. Available values are: &#39;debug&#39;, &#39;info&#39;, &#39;notice&#39;, &#39;warning&#39;, &#39;error&#39;, &#39;critical&#39;, &#39;alert&#39;, &#39;emergency&#39;. (optional)
     * @param  string|null $from_date Filter that restricts the search result to log entries created after this date. The date has to be in the W3C format, e.g. &#39;2016-10-24T13:33:23+02:00&#39;. (optional)
     * @param  string|null $to_date Filter that restricts the search result to log entries created before this date. The date has to be in the W3C format, e.g. &#39;2016-10-24T13:33:23+02:00&#39;. (optional)
     * @param  int|null $with An array with child instances to be loaded. Valid instances are &#39;additionalInfo&#39;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restLogsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restLogsGetAsync(
        ?int $page = null,
        ?int $items_per_page = null,
        ?int $integration = null,
        ?int $identifier = null,
        ?string $reference_type = null,
        ?string $reference_value = null,
        ?string $additional_info = null,
        ?int $code = null,
        ?int $level = null,
        ?string $from_date = null,
        ?string $to_date = null,
        ?int $with = null,
        string $contentType = self::contentTypes['restLogsGet'][0]
    ): PromiseInterface
    {
        return $this->restLogsGetAsyncWithHttpInfo($page, $items_per_page, $integration, $identifier, $reference_type, $reference_value, $additional_info, $code, $level, $from_date, $to_date, $with, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restLogsGetAsyncWithHttpInfo
     *
     * Perform a search operation.
     *
     * @param  int|null $page The page of results to search for. (optional)
     * @param  int|null $items_per_page The number of items to list per page. (optional)
     * @param  int|null $integration Filter that restricts the search result to log entries with custom integration key(s). (optional)
     * @param  int|null $identifier Filter that restricts the search result to log entries with custom identifier(s). (optional)
     * @param  string|null $reference_type Filter that restricts the search result to log entries with custom reference types. (optional)
     * @param  string|null $reference_value Filter that restricts the search result to log entries with custom reference values. (optional)
     * @param  string|null $additional_info Filter that restricts the search result to log entries that match an additional info. (optional)
     * @param  int|null $code Filter that restricts the search result to log entries with a custom code. (optional)
     * @param  int|null $level Filter that restricts the search result to log entries of a custom level. Available values are: &#39;debug&#39;, &#39;info&#39;, &#39;notice&#39;, &#39;warning&#39;, &#39;error&#39;, &#39;critical&#39;, &#39;alert&#39;, &#39;emergency&#39;. (optional)
     * @param  string|null $from_date Filter that restricts the search result to log entries created after this date. The date has to be in the W3C format, e.g. &#39;2016-10-24T13:33:23+02:00&#39;. (optional)
     * @param  string|null $to_date Filter that restricts the search result to log entries created before this date. The date has to be in the W3C format, e.g. &#39;2016-10-24T13:33:23+02:00&#39;. (optional)
     * @param  int|null $with An array with child instances to be loaded. Valid instances are &#39;additionalInfo&#39;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restLogsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restLogsGetAsyncWithHttpInfo(
        $page = null,
        $items_per_page = null,
        $integration = null,
        $identifier = null,
        $reference_type = null,
        $reference_value = null,
        $additional_info = null,
        $code = null,
        $level = null,
        $from_date = null,
        $to_date = null,
        $with = null,
        string $contentType = self::contentTypes['restLogsGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\RestLogsGet200Response';
        $request = $this->restLogsGetRequest($page, $items_per_page, $integration, $identifier, $reference_type, $reference_value, $additional_info, $code, $level, $from_date, $to_date, $with, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restLogsGet'
     *
     * @param  int|null $page The page of results to search for. (optional)
     * @param  int|null $items_per_page The number of items to list per page. (optional)
     * @param  int|null $integration Filter that restricts the search result to log entries with custom integration key(s). (optional)
     * @param  int|null $identifier Filter that restricts the search result to log entries with custom identifier(s). (optional)
     * @param  string|null $reference_type Filter that restricts the search result to log entries with custom reference types. (optional)
     * @param  string|null $reference_value Filter that restricts the search result to log entries with custom reference values. (optional)
     * @param  string|null $additional_info Filter that restricts the search result to log entries that match an additional info. (optional)
     * @param  int|null $code Filter that restricts the search result to log entries with a custom code. (optional)
     * @param  int|null $level Filter that restricts the search result to log entries of a custom level. Available values are: &#39;debug&#39;, &#39;info&#39;, &#39;notice&#39;, &#39;warning&#39;, &#39;error&#39;, &#39;critical&#39;, &#39;alert&#39;, &#39;emergency&#39;. (optional)
     * @param  string|null $from_date Filter that restricts the search result to log entries created after this date. The date has to be in the W3C format, e.g. &#39;2016-10-24T13:33:23+02:00&#39;. (optional)
     * @param  string|null $to_date Filter that restricts the search result to log entries created before this date. The date has to be in the W3C format, e.g. &#39;2016-10-24T13:33:23+02:00&#39;. (optional)
     * @param  int|null $with An array with child instances to be loaded. Valid instances are &#39;additionalInfo&#39;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restLogsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restLogsGetRequest(
        $page = null,
        $items_per_page = null,
        $integration = null,
        $identifier = null,
        $reference_type = null,
        $reference_value = null,
        $additional_info = null,
        $code = null,
        $level = null,
        $from_date = null,
        $to_date = null,
        $with = null,
        string $contentType = self::contentTypes['restLogsGet'][0]
    ): Request
    {














        $resourcePath = '/rest/logs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $items_per_page,
            'itemsPerPage', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $integration,
            'integration', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $identifier,
            'identifier', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $reference_type,
            'referenceType', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $reference_value,
            'referenceValue', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $additional_info,
            'additionalInfo', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $code,
            'code', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $level,
            'level', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'fromDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to_date,
            'toDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with,
            'with', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restLogsIdGet
     *
     * Get Log entry by ID.
     *
     * @param  int $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restLogsIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\Log
     */
    public function restLogsIdGet(
        int $id,
        string $contentType = self::contentTypes['restLogsIdGet'][0]
    ): \ck\Model\Log
    {
        list($response) = $this->restLogsIdGetWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation restLogsIdGetWithHttpInfo
     *
     * Get Log entry by ID.
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restLogsIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\Log, HTTP status code, HTTP response headers (array of strings)
     */
    public function restLogsIdGetWithHttpInfo(
        int $id,
        string $contentType = self::contentTypes['restLogsIdGet'][0]
    ): array
    {
        $request = $this->restLogsIdGetRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\Log' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\Log' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\Log', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\Log';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\Log',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restLogsIdGetAsync
     *
     * Get Log entry by ID.
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restLogsIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restLogsIdGetAsync(
        int $id,
        string $contentType = self::contentTypes['restLogsIdGet'][0]
    ): PromiseInterface
    {
        return $this->restLogsIdGetAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restLogsIdGetAsyncWithHttpInfo
     *
     * Get Log entry by ID.
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restLogsIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restLogsIdGetAsyncWithHttpInfo(
        $id,
        string $contentType = self::contentTypes['restLogsIdGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\Log';
        $request = $this->restLogsIdGetRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restLogsIdGet'
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restLogsIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restLogsIdGetRequest(
        $id,
        string $contentType = self::contentTypes['restLogsIdGet'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling restLogsIdGet'
            );
        }


        $resourcePath = '/rest/logs/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restLogsIntegrationKeysGet
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restLogsIntegrationKeysGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object
     */
    public function restLogsIntegrationKeysGet(
        string $contentType = self::contentTypes['restLogsIntegrationKeysGet'][0]
    ): object
    {
        list($response) = $this->restLogsIntegrationKeysGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation restLogsIntegrationKeysGetWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restLogsIntegrationKeysGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restLogsIntegrationKeysGetWithHttpInfo(
        string $contentType = self::contentTypes['restLogsIntegrationKeysGet'][0]
    ): array
    {
        $request = $this->restLogsIntegrationKeysGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restLogsIntegrationKeysGetAsync
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restLogsIntegrationKeysGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restLogsIntegrationKeysGetAsync(
        string $contentType = self::contentTypes['restLogsIntegrationKeysGet'][0]
    ): PromiseInterface
    {
        return $this->restLogsIntegrationKeysGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restLogsIntegrationKeysGetAsyncWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restLogsIntegrationKeysGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restLogsIntegrationKeysGetAsyncWithHttpInfo(
        string $contentType = self::contentTypes['restLogsIntegrationKeysGet'][0]
    ): PromiseInterface
    {
        $returnType = 'object';
        $request = $this->restLogsIntegrationKeysGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restLogsIntegrationKeysGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restLogsIntegrationKeysGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restLogsIntegrationKeysGetRequest(
        string $contentType = self::contentTypes['restLogsIntegrationKeysGet'][0]
    ): Request
    {


        $resourcePath = '/rest/logs/integration_keys';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restLogsPost
     *
     * Create a log entry.
     *
     * @param  \ck\Model\RestLogsPostRequest|null $_rest_logs _rest_logs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restLogsPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object
     */
    public function restLogsPost(
        ?\ck\Model\RestLogsPostRequest $_rest_logs = null,
        string $contentType = self::contentTypes['restLogsPost'][0]
    ): object
    {
        list($response) = $this->restLogsPostWithHttpInfo($_rest_logs, $contentType);
        return $response;
    }

    /**
     * Operation restLogsPostWithHttpInfo
     *
     * Create a log entry.
     *
     * @param  \ck\Model\RestLogsPostRequest|null $_rest_logs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restLogsPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restLogsPostWithHttpInfo(
        ?\ck\Model\RestLogsPostRequest $_rest_logs = null,
        string $contentType = self::contentTypes['restLogsPost'][0]
    ): array
    {
        $request = $this->restLogsPostRequest($_rest_logs, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restLogsPostAsync
     *
     * Create a log entry.
     *
     * @param  \ck\Model\RestLogsPostRequest|null $_rest_logs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restLogsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restLogsPostAsync(
        ?\ck\Model\RestLogsPostRequest $_rest_logs = null,
        string $contentType = self::contentTypes['restLogsPost'][0]
    ): PromiseInterface
    {
        return $this->restLogsPostAsyncWithHttpInfo($_rest_logs, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restLogsPostAsyncWithHttpInfo
     *
     * Create a log entry.
     *
     * @param  \ck\Model\RestLogsPostRequest|null $_rest_logs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restLogsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restLogsPostAsyncWithHttpInfo(
        $_rest_logs = null,
        string $contentType = self::contentTypes['restLogsPost'][0]
    ): PromiseInterface
    {
        $returnType = 'object';
        $request = $this->restLogsPostRequest($_rest_logs, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restLogsPost'
     *
     * @param  \ck\Model\RestLogsPostRequest|null $_rest_logs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restLogsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restLogsPostRequest(
        $_rest_logs = null,
        string $contentType = self::contentTypes['restLogsPost'][0]
    ): Request
    {



        $resourcePath = '/rest/logs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($_rest_logs)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_rest_logs));
            } else {
                $httpBody = $_rest_logs;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restLogsReferenceTypesGet
     *
     * Get all registered reference types.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restLogsReferenceTypesGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object
     */
    public function restLogsReferenceTypesGet(
        string $contentType = self::contentTypes['restLogsReferenceTypesGet'][0]
    ): object
    {
        list($response) = $this->restLogsReferenceTypesGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation restLogsReferenceTypesGetWithHttpInfo
     *
     * Get all registered reference types.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restLogsReferenceTypesGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restLogsReferenceTypesGetWithHttpInfo(
        string $contentType = self::contentTypes['restLogsReferenceTypesGet'][0]
    ): array
    {
        $request = $this->restLogsReferenceTypesGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restLogsReferenceTypesGetAsync
     *
     * Get all registered reference types.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restLogsReferenceTypesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restLogsReferenceTypesGetAsync(
        string $contentType = self::contentTypes['restLogsReferenceTypesGet'][0]
    ): PromiseInterface
    {
        return $this->restLogsReferenceTypesGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restLogsReferenceTypesGetAsyncWithHttpInfo
     *
     * Get all registered reference types.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restLogsReferenceTypesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restLogsReferenceTypesGetAsyncWithHttpInfo(
        string $contentType = self::contentTypes['restLogsReferenceTypesGet'][0]
    ): PromiseInterface
    {
        $returnType = 'object';
        $request = $this->restLogsReferenceTypesGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restLogsReferenceTypesGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restLogsReferenceTypesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restLogsReferenceTypesGetRequest(
        string $contentType = self::contentTypes['restLogsReferenceTypesGet'][0]
    ): Request
    {


        $resourcePath = '/rest/logs/reference_types';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restLogsSettingsGet
     *
     * Show config.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restLogsSettingsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object
     */
    public function restLogsSettingsGet(
        string $contentType = self::contentTypes['restLogsSettingsGet'][0]
    ): object
    {
        list($response) = $this->restLogsSettingsGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation restLogsSettingsGetWithHttpInfo
     *
     * Show config.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restLogsSettingsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restLogsSettingsGetWithHttpInfo(
        string $contentType = self::contentTypes['restLogsSettingsGet'][0]
    ): array
    {
        $request = $this->restLogsSettingsGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restLogsSettingsGetAsync
     *
     * Show config.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restLogsSettingsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restLogsSettingsGetAsync(
        string $contentType = self::contentTypes['restLogsSettingsGet'][0]
    ): PromiseInterface
    {
        return $this->restLogsSettingsGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restLogsSettingsGetAsyncWithHttpInfo
     *
     * Show config.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restLogsSettingsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restLogsSettingsGetAsyncWithHttpInfo(
        string $contentType = self::contentTypes['restLogsSettingsGet'][0]
    ): PromiseInterface
    {
        $returnType = 'object';
        $request = $this->restLogsSettingsGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restLogsSettingsGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restLogsSettingsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restLogsSettingsGetRequest(
        string $contentType = self::contentTypes['restLogsSettingsGet'][0]
    ): Request
    {


        $resourcePath = '/rest/logs/settings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restLogsSettingsPost
     *
     * Save config.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restLogsSettingsPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object
     */
    public function restLogsSettingsPost(
        string $contentType = self::contentTypes['restLogsSettingsPost'][0]
    ): object
    {
        list($response) = $this->restLogsSettingsPostWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation restLogsSettingsPostWithHttpInfo
     *
     * Save config.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restLogsSettingsPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restLogsSettingsPostWithHttpInfo(
        string $contentType = self::contentTypes['restLogsSettingsPost'][0]
    ): array
    {
        $request = $this->restLogsSettingsPostRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restLogsSettingsPostAsync
     *
     * Save config.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restLogsSettingsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restLogsSettingsPostAsync(
        string $contentType = self::contentTypes['restLogsSettingsPost'][0]
    ): PromiseInterface
    {
        return $this->restLogsSettingsPostAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restLogsSettingsPostAsyncWithHttpInfo
     *
     * Save config.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restLogsSettingsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restLogsSettingsPostAsyncWithHttpInfo(
        string $contentType = self::contentTypes['restLogsSettingsPost'][0]
    ): PromiseInterface
    {
        $returnType = 'object';
        $request = $this->restLogsSettingsPostRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restLogsSettingsPost'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restLogsSettingsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restLogsSettingsPostRequest(
        string $contentType = self::contentTypes['restLogsSettingsPost'][0]
    ): Request
    {


        $resourcePath = '/rest/logs/settings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
