<?php
/**
 * OrderSummaryApi
 * PHP version 8.1
 *
 * @package  ck/plenty-client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ck/plenty-client\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use ck/plenty-client\ApiException;
use ck/plenty-client\Configuration;
use ck/plenty-client\HeaderSelector;
use ck/plenty-client\ObjectSerializer;

/**
 * OrderSummaryApi Class Doc Comment
 *
 * @package  ck/plenty-client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrderSummaryApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'restAccountsOrderSummariesContactsContactIdGet' => [
            'application/json',
        ],
        'restAccountsOrderSummariesGet' => [
            'application/json',
        ],
        'restAccountsOrderSummariesOrderSummaryIdDelete' => [
            'application/json',
        ],
        'restAccountsOrderSummariesOrderSummaryIdGet' => [
            'application/json',
        ],
        'restAccountsOrderSummariesOrderSummaryIdPut' => [
            'application/json',
        ],
        'restAccountsOrderSummariesOrdersAddressIdGet' => [
            'application/json',
        ],
        'restAccountsOrderSummariesPost' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation restAccountsOrderSummariesContactsContactIdGet
     *
     * Get order summary by contact ID
     *
     * @param  int $contact_id contact_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsOrderSummariesContactsContactIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck/plenty-client\Model\OrderSummary
     */
    public function restAccountsOrderSummariesContactsContactIdGet(
        int $contact_id,
        string $contentType = self::contentTypes['restAccountsOrderSummariesContactsContactIdGet'][0]
    ): \ck/plenty-client\Model\OrderSummary
    {
        list($response) = $this->restAccountsOrderSummariesContactsContactIdGetWithHttpInfo($contact_id, $contentType);
        return $response;
    }

    /**
     * Operation restAccountsOrderSummariesContactsContactIdGetWithHttpInfo
     *
     * Get order summary by contact ID
     *
     * @param  int $contact_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsOrderSummariesContactsContactIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck/plenty-client\Model\OrderSummary, HTTP status code, HTTP response headers (array of strings)
     */
    public function restAccountsOrderSummariesContactsContactIdGetWithHttpInfo(
        int $contact_id,
        string $contentType = self::contentTypes['restAccountsOrderSummariesContactsContactIdGet'][0]
    ): array
    {
        $request = $this->restAccountsOrderSummariesContactsContactIdGetRequest($contact_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck/plenty-client\Model\OrderSummary' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck/plenty-client\Model\OrderSummary' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck/plenty-client\Model\OrderSummary', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck/plenty-client\Model\OrderSummary';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck/plenty-client\Model\OrderSummary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restAccountsOrderSummariesContactsContactIdGetAsync
     *
     * Get order summary by contact ID
     *
     * @param  int $contact_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsOrderSummariesContactsContactIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restAccountsOrderSummariesContactsContactIdGetAsync(
        int $contact_id,
        string $contentType = self::contentTypes['restAccountsOrderSummariesContactsContactIdGet'][0]
    ): PromiseInterface
    {
        return $this->restAccountsOrderSummariesContactsContactIdGetAsyncWithHttpInfo($contact_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restAccountsOrderSummariesContactsContactIdGetAsyncWithHttpInfo
     *
     * Get order summary by contact ID
     *
     * @param  int $contact_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsOrderSummariesContactsContactIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restAccountsOrderSummariesContactsContactIdGetAsyncWithHttpInfo(
        $contact_id,
        string $contentType = self::contentTypes['restAccountsOrderSummariesContactsContactIdGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck/plenty-client\Model\OrderSummary';
        $request = $this->restAccountsOrderSummariesContactsContactIdGetRequest($contact_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restAccountsOrderSummariesContactsContactIdGet'
     *
     * @param  int $contact_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsOrderSummariesContactsContactIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restAccountsOrderSummariesContactsContactIdGetRequest(
        $contact_id,
        string $contentType = self::contentTypes['restAccountsOrderSummariesContactsContactIdGet'][0]
    ): Request
    {

        // verify the required parameter 'contact_id' is set
        if ($contact_id === null || (is_array($contact_id) && count($contact_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $contact_id when calling restAccountsOrderSummariesContactsContactIdGet'
            );
        }


        $resourcePath = '/rest/accounts/order_summaries/contacts/{contactId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($contact_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contactId' . '}',
                ObjectSerializer::toPathValue($contact_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restAccountsOrderSummariesGet
     *
     * List order summaries
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsOrderSummariesGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck/plenty-client\Model\OrderSummary[]
     */
    public function restAccountsOrderSummariesGet(
        string $contentType = self::contentTypes['restAccountsOrderSummariesGet'][0]
    ): array
    {
        list($response) = $this->restAccountsOrderSummariesGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation restAccountsOrderSummariesGetWithHttpInfo
     *
     * List order summaries
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsOrderSummariesGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck/plenty-client\Model\OrderSummary[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restAccountsOrderSummariesGetWithHttpInfo(
        string $contentType = self::contentTypes['restAccountsOrderSummariesGet'][0]
    ): array
    {
        $request = $this->restAccountsOrderSummariesGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck/plenty-client\Model\OrderSummary[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck/plenty-client\Model\OrderSummary[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck/plenty-client\Model\OrderSummary[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck/plenty-client\Model\OrderSummary[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck/plenty-client\Model\OrderSummary[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restAccountsOrderSummariesGetAsync
     *
     * List order summaries
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsOrderSummariesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restAccountsOrderSummariesGetAsync(
        string $contentType = self::contentTypes['restAccountsOrderSummariesGet'][0]
    ): PromiseInterface
    {
        return $this->restAccountsOrderSummariesGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restAccountsOrderSummariesGetAsyncWithHttpInfo
     *
     * List order summaries
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsOrderSummariesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restAccountsOrderSummariesGetAsyncWithHttpInfo(
        string $contentType = self::contentTypes['restAccountsOrderSummariesGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck/plenty-client\Model\OrderSummary[]';
        $request = $this->restAccountsOrderSummariesGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restAccountsOrderSummariesGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsOrderSummariesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restAccountsOrderSummariesGetRequest(
        string $contentType = self::contentTypes['restAccountsOrderSummariesGet'][0]
    ): Request
    {


        $resourcePath = '/rest/accounts/order_summaries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restAccountsOrderSummariesOrderSummaryIdDelete
     *
     * Delete order summary
     *
     * @param  int $order_summary_id order_summary_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsOrderSummariesOrderSummaryIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return void
     */
    public function restAccountsOrderSummariesOrderSummaryIdDelete(
        int $order_summary_id,
        string $contentType = self::contentTypes['restAccountsOrderSummariesOrderSummaryIdDelete'][0]
    ): void
    {
        $this->restAccountsOrderSummariesOrderSummaryIdDeleteWithHttpInfo($order_summary_id, $contentType);
    }

    /**
     * Operation restAccountsOrderSummariesOrderSummaryIdDeleteWithHttpInfo
     *
     * Delete order summary
     *
     * @param  int $order_summary_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsOrderSummariesOrderSummaryIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restAccountsOrderSummariesOrderSummaryIdDeleteWithHttpInfo(
        int $order_summary_id,
        string $contentType = self::contentTypes['restAccountsOrderSummariesOrderSummaryIdDelete'][0]
    ): array
    {
        $request = $this->restAccountsOrderSummariesOrderSummaryIdDeleteRequest($order_summary_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restAccountsOrderSummariesOrderSummaryIdDeleteAsync
     *
     * Delete order summary
     *
     * @param  int $order_summary_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsOrderSummariesOrderSummaryIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restAccountsOrderSummariesOrderSummaryIdDeleteAsync(
        int $order_summary_id,
        string $contentType = self::contentTypes['restAccountsOrderSummariesOrderSummaryIdDelete'][0]
    ): PromiseInterface
    {
        return $this->restAccountsOrderSummariesOrderSummaryIdDeleteAsyncWithHttpInfo($order_summary_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restAccountsOrderSummariesOrderSummaryIdDeleteAsyncWithHttpInfo
     *
     * Delete order summary
     *
     * @param  int $order_summary_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsOrderSummariesOrderSummaryIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restAccountsOrderSummariesOrderSummaryIdDeleteAsyncWithHttpInfo(
        $order_summary_id,
        string $contentType = self::contentTypes['restAccountsOrderSummariesOrderSummaryIdDelete'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->restAccountsOrderSummariesOrderSummaryIdDeleteRequest($order_summary_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restAccountsOrderSummariesOrderSummaryIdDelete'
     *
     * @param  int $order_summary_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsOrderSummariesOrderSummaryIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restAccountsOrderSummariesOrderSummaryIdDeleteRequest(
        $order_summary_id,
        string $contentType = self::contentTypes['restAccountsOrderSummariesOrderSummaryIdDelete'][0]
    ): Request
    {

        // verify the required parameter 'order_summary_id' is set
        if ($order_summary_id === null || (is_array($order_summary_id) && count($order_summary_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_summary_id when calling restAccountsOrderSummariesOrderSummaryIdDelete'
            );
        }


        $resourcePath = '/rest/accounts/order_summaries/{orderSummaryId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($order_summary_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderSummaryId' . '}',
                ObjectSerializer::toPathValue($order_summary_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restAccountsOrderSummariesOrderSummaryIdGet
     *
     * Get order summary by order summary ID
     *
     * @param  int $order_summary_id order_summary_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsOrderSummariesOrderSummaryIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck/plenty-client\Model\OrderSummary
     */
    public function restAccountsOrderSummariesOrderSummaryIdGet(
        int $order_summary_id,
        string $contentType = self::contentTypes['restAccountsOrderSummariesOrderSummaryIdGet'][0]
    ): \ck/plenty-client\Model\OrderSummary
    {
        list($response) = $this->restAccountsOrderSummariesOrderSummaryIdGetWithHttpInfo($order_summary_id, $contentType);
        return $response;
    }

    /**
     * Operation restAccountsOrderSummariesOrderSummaryIdGetWithHttpInfo
     *
     * Get order summary by order summary ID
     *
     * @param  int $order_summary_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsOrderSummariesOrderSummaryIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck/plenty-client\Model\OrderSummary, HTTP status code, HTTP response headers (array of strings)
     */
    public function restAccountsOrderSummariesOrderSummaryIdGetWithHttpInfo(
        int $order_summary_id,
        string $contentType = self::contentTypes['restAccountsOrderSummariesOrderSummaryIdGet'][0]
    ): array
    {
        $request = $this->restAccountsOrderSummariesOrderSummaryIdGetRequest($order_summary_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck/plenty-client\Model\OrderSummary' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck/plenty-client\Model\OrderSummary' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck/plenty-client\Model\OrderSummary', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck/plenty-client\Model\OrderSummary';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck/plenty-client\Model\OrderSummary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restAccountsOrderSummariesOrderSummaryIdGetAsync
     *
     * Get order summary by order summary ID
     *
     * @param  int $order_summary_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsOrderSummariesOrderSummaryIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restAccountsOrderSummariesOrderSummaryIdGetAsync(
        int $order_summary_id,
        string $contentType = self::contentTypes['restAccountsOrderSummariesOrderSummaryIdGet'][0]
    ): PromiseInterface
    {
        return $this->restAccountsOrderSummariesOrderSummaryIdGetAsyncWithHttpInfo($order_summary_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restAccountsOrderSummariesOrderSummaryIdGetAsyncWithHttpInfo
     *
     * Get order summary by order summary ID
     *
     * @param  int $order_summary_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsOrderSummariesOrderSummaryIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restAccountsOrderSummariesOrderSummaryIdGetAsyncWithHttpInfo(
        $order_summary_id,
        string $contentType = self::contentTypes['restAccountsOrderSummariesOrderSummaryIdGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck/plenty-client\Model\OrderSummary';
        $request = $this->restAccountsOrderSummariesOrderSummaryIdGetRequest($order_summary_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restAccountsOrderSummariesOrderSummaryIdGet'
     *
     * @param  int $order_summary_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsOrderSummariesOrderSummaryIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restAccountsOrderSummariesOrderSummaryIdGetRequest(
        $order_summary_id,
        string $contentType = self::contentTypes['restAccountsOrderSummariesOrderSummaryIdGet'][0]
    ): Request
    {

        // verify the required parameter 'order_summary_id' is set
        if ($order_summary_id === null || (is_array($order_summary_id) && count($order_summary_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_summary_id when calling restAccountsOrderSummariesOrderSummaryIdGet'
            );
        }


        $resourcePath = '/rest/accounts/order_summaries/{orderSummaryId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($order_summary_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderSummaryId' . '}',
                ObjectSerializer::toPathValue($order_summary_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restAccountsOrderSummariesOrderSummaryIdPut
     *
     * Update order summary
     *
     * @param  int $order_summary_id order_summary_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsOrderSummariesOrderSummaryIdPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck/plenty-client\Model\OrderSummary
     */
    public function restAccountsOrderSummariesOrderSummaryIdPut(
        int $order_summary_id,
        string $contentType = self::contentTypes['restAccountsOrderSummariesOrderSummaryIdPut'][0]
    ): \ck/plenty-client\Model\OrderSummary
    {
        list($response) = $this->restAccountsOrderSummariesOrderSummaryIdPutWithHttpInfo($order_summary_id, $contentType);
        return $response;
    }

    /**
     * Operation restAccountsOrderSummariesOrderSummaryIdPutWithHttpInfo
     *
     * Update order summary
     *
     * @param  int $order_summary_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsOrderSummariesOrderSummaryIdPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck/plenty-client\Model\OrderSummary, HTTP status code, HTTP response headers (array of strings)
     */
    public function restAccountsOrderSummariesOrderSummaryIdPutWithHttpInfo(
        int $order_summary_id,
        string $contentType = self::contentTypes['restAccountsOrderSummariesOrderSummaryIdPut'][0]
    ): array
    {
        $request = $this->restAccountsOrderSummariesOrderSummaryIdPutRequest($order_summary_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck/plenty-client\Model\OrderSummary' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck/plenty-client\Model\OrderSummary' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck/plenty-client\Model\OrderSummary', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck/plenty-client\Model\OrderSummary';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck/plenty-client\Model\OrderSummary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restAccountsOrderSummariesOrderSummaryIdPutAsync
     *
     * Update order summary
     *
     * @param  int $order_summary_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsOrderSummariesOrderSummaryIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restAccountsOrderSummariesOrderSummaryIdPutAsync(
        int $order_summary_id,
        string $contentType = self::contentTypes['restAccountsOrderSummariesOrderSummaryIdPut'][0]
    ): PromiseInterface
    {
        return $this->restAccountsOrderSummariesOrderSummaryIdPutAsyncWithHttpInfo($order_summary_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restAccountsOrderSummariesOrderSummaryIdPutAsyncWithHttpInfo
     *
     * Update order summary
     *
     * @param  int $order_summary_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsOrderSummariesOrderSummaryIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restAccountsOrderSummariesOrderSummaryIdPutAsyncWithHttpInfo(
        $order_summary_id,
        string $contentType = self::contentTypes['restAccountsOrderSummariesOrderSummaryIdPut'][0]
    ): PromiseInterface
    {
        $returnType = '\ck/plenty-client\Model\OrderSummary';
        $request = $this->restAccountsOrderSummariesOrderSummaryIdPutRequest($order_summary_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restAccountsOrderSummariesOrderSummaryIdPut'
     *
     * @param  int $order_summary_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsOrderSummariesOrderSummaryIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restAccountsOrderSummariesOrderSummaryIdPutRequest(
        $order_summary_id,
        string $contentType = self::contentTypes['restAccountsOrderSummariesOrderSummaryIdPut'][0]
    ): Request
    {

        // verify the required parameter 'order_summary_id' is set
        if ($order_summary_id === null || (is_array($order_summary_id) && count($order_summary_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_summary_id when calling restAccountsOrderSummariesOrderSummaryIdPut'
            );
        }


        $resourcePath = '/rest/accounts/order_summaries/{orderSummaryId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($order_summary_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderSummaryId' . '}',
                ObjectSerializer::toPathValue($order_summary_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restAccountsOrderSummariesOrdersAddressIdGet
     *
     * Get order summary by address ID
     *
     * @param  int $address_id address_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsOrderSummariesOrdersAddressIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck/plenty-client\Model\OrderSummary
     */
    public function restAccountsOrderSummariesOrdersAddressIdGet(
        int $address_id,
        string $contentType = self::contentTypes['restAccountsOrderSummariesOrdersAddressIdGet'][0]
    ): \ck/plenty-client\Model\OrderSummary
    {
        list($response) = $this->restAccountsOrderSummariesOrdersAddressIdGetWithHttpInfo($address_id, $contentType);
        return $response;
    }

    /**
     * Operation restAccountsOrderSummariesOrdersAddressIdGetWithHttpInfo
     *
     * Get order summary by address ID
     *
     * @param  int $address_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsOrderSummariesOrdersAddressIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck/plenty-client\Model\OrderSummary, HTTP status code, HTTP response headers (array of strings)
     */
    public function restAccountsOrderSummariesOrdersAddressIdGetWithHttpInfo(
        int $address_id,
        string $contentType = self::contentTypes['restAccountsOrderSummariesOrdersAddressIdGet'][0]
    ): array
    {
        $request = $this->restAccountsOrderSummariesOrdersAddressIdGetRequest($address_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck/plenty-client\Model\OrderSummary' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck/plenty-client\Model\OrderSummary' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck/plenty-client\Model\OrderSummary', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck/plenty-client\Model\OrderSummary';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck/plenty-client\Model\OrderSummary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restAccountsOrderSummariesOrdersAddressIdGetAsync
     *
     * Get order summary by address ID
     *
     * @param  int $address_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsOrderSummariesOrdersAddressIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restAccountsOrderSummariesOrdersAddressIdGetAsync(
        int $address_id,
        string $contentType = self::contentTypes['restAccountsOrderSummariesOrdersAddressIdGet'][0]
    ): PromiseInterface
    {
        return $this->restAccountsOrderSummariesOrdersAddressIdGetAsyncWithHttpInfo($address_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restAccountsOrderSummariesOrdersAddressIdGetAsyncWithHttpInfo
     *
     * Get order summary by address ID
     *
     * @param  int $address_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsOrderSummariesOrdersAddressIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restAccountsOrderSummariesOrdersAddressIdGetAsyncWithHttpInfo(
        $address_id,
        string $contentType = self::contentTypes['restAccountsOrderSummariesOrdersAddressIdGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck/plenty-client\Model\OrderSummary';
        $request = $this->restAccountsOrderSummariesOrdersAddressIdGetRequest($address_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restAccountsOrderSummariesOrdersAddressIdGet'
     *
     * @param  int $address_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsOrderSummariesOrdersAddressIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restAccountsOrderSummariesOrdersAddressIdGetRequest(
        $address_id,
        string $contentType = self::contentTypes['restAccountsOrderSummariesOrdersAddressIdGet'][0]
    ): Request
    {

        // verify the required parameter 'address_id' is set
        if ($address_id === null || (is_array($address_id) && count($address_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $address_id when calling restAccountsOrderSummariesOrdersAddressIdGet'
            );
        }


        $resourcePath = '/rest/accounts/order_summaries/orders/{addressId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($address_id !== null) {
            $resourcePath = str_replace(
                '{' . 'addressId' . '}',
                ObjectSerializer::toPathValue($address_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restAccountsOrderSummariesPost
     *
     * Create order summary
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsOrderSummariesPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck/plenty-client\Model\OrderSummary
     */
    public function restAccountsOrderSummariesPost(
        string $contentType = self::contentTypes['restAccountsOrderSummariesPost'][0]
    ): \ck/plenty-client\Model\OrderSummary
    {
        list($response) = $this->restAccountsOrderSummariesPostWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation restAccountsOrderSummariesPostWithHttpInfo
     *
     * Create order summary
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsOrderSummariesPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck/plenty-client\Model\OrderSummary, HTTP status code, HTTP response headers (array of strings)
     */
    public function restAccountsOrderSummariesPostWithHttpInfo(
        string $contentType = self::contentTypes['restAccountsOrderSummariesPost'][0]
    ): array
    {
        $request = $this->restAccountsOrderSummariesPostRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck/plenty-client\Model\OrderSummary' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck/plenty-client\Model\OrderSummary' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck/plenty-client\Model\OrderSummary', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck/plenty-client\Model\OrderSummary';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck/plenty-client\Model\OrderSummary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restAccountsOrderSummariesPostAsync
     *
     * Create order summary
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsOrderSummariesPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restAccountsOrderSummariesPostAsync(
        string $contentType = self::contentTypes['restAccountsOrderSummariesPost'][0]
    ): PromiseInterface
    {
        return $this->restAccountsOrderSummariesPostAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restAccountsOrderSummariesPostAsyncWithHttpInfo
     *
     * Create order summary
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsOrderSummariesPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restAccountsOrderSummariesPostAsyncWithHttpInfo(
        string $contentType = self::contentTypes['restAccountsOrderSummariesPost'][0]
    ): PromiseInterface
    {
        $returnType = '\ck/plenty-client\Model\OrderSummary';
        $request = $this->restAccountsOrderSummariesPostRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restAccountsOrderSummariesPost'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restAccountsOrderSummariesPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restAccountsOrderSummariesPostRequest(
        string $contentType = self::contentTypes['restAccountsOrderSummariesPost'][0]
    ): Request
    {


        $resourcePath = '/rest/accounts/order_summaries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
