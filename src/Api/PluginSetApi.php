<?php
/**
 * PluginSetApi
 * PHP version 8.1
 *
 * @package  ck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ck\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use ck\ApiException;
use ck\Configuration;
use ck\HeaderSelector;
use ck\ObjectSerializer;

/**
 * PluginSetApi Class Doc Comment
 *
 * @package  ck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PluginSetApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'restPluginSetsGet' => [
            'application/json',
        ],
        'restPluginSetsNewGitPluginDetailsPluginNameGet' => [
            'application/json',
        ],
        'restPluginSetsNewPluginDetailsPluginNameVariationIdGet' => [
            'application/json',
        ],
        'restPluginSetsPluginSetIdLanguagesCsvLanguageCodeGet' => [
            'application/json',
        ],
        'restPluginSetsPluginSetIdLanguagesGet' => [
            'application/json',
        ],
        'restPluginSetsPluginSetIdLanguagesTargetLanguageGet' => [
            'application/json',
        ],
        'restPluginSetsPluginSetIdLanguagesTargetLanguagePost' => [
            'application/json',
        ],
        'restPluginSetsPost' => [
            'application/json',
        ],
        'restPluginSetsPreviewHashGet' => [
            'application/json',
        ],
        'restPluginSetsS3InboxOpensourcePluginsGet' => [
            'application/json',
        ],
        'restPluginSetsSetIdDelete' => [
            'application/json',
        ],
        'restPluginSetsSetIdGet' => [
            'application/json',
        ],
        'restPluginSetsSetIdPluginsGet' => [
            'application/json',
        ],
        'restPluginSetsSetIdPluginsGetCompatibilityPluginNameVariationIdGet' => [
            'application/json',
        ],
        'restPluginSetsSetIdPluginsPluginIdDelete' => [
            'application/json',
        ],
        'restPluginSetsSetIdPluginsPluginIdInstallGitPluginPost' => [
            'application/json',
        ],
        'restPluginSetsSetIdPluginsPluginIdPost' => [
            'application/json',
        ],
        'restPluginSetsSetIdPluginsPluginIdPut' => [
            'application/json',
        ],
        'restPluginSetsSetIdPluginsPluginIdSetPositionPost' => [
            'application/json',
        ],
        'restPluginSetsSetIdPluginsSearchGet' => [
            'application/json',
        ],
        'restPluginSetsSetIdPut' => [
            'application/json',
        ],
        'restPluginSetsSetIdSetEntriesGet' => [
            'application/json',
        ],
        'restPluginsPluginSetsPluginSetIdPluginsGet' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation restPluginSetsGet
     *
     * List all Sets
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\PluginSet[]
     */
    public function restPluginSetsGet(
        string $contentType = self::contentTypes['restPluginSetsGet'][0]
    ): array
    {
        list($response) = $this->restPluginSetsGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation restPluginSetsGetWithHttpInfo
     *
     * List all Sets
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\PluginSet[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginSetsGetWithHttpInfo(
        string $contentType = self::contentTypes['restPluginSetsGet'][0]
    ): array
    {
        $request = $this->restPluginSetsGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\PluginSet[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\PluginSet[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\PluginSet[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\PluginSet[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\PluginSet[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginSetsGetAsync
     *
     * List all Sets
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginSetsGetAsync(
        string $contentType = self::contentTypes['restPluginSetsGet'][0]
    ): PromiseInterface
    {
        return $this->restPluginSetsGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginSetsGetAsyncWithHttpInfo
     *
     * List all Sets
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginSetsGetAsyncWithHttpInfo(
        string $contentType = self::contentTypes['restPluginSetsGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\PluginSet[]';
        $request = $this->restPluginSetsGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginSetsGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPluginSetsGetRequest(
        string $contentType = self::contentTypes['restPluginSetsGet'][0]
    ): Request
    {


        $resourcePath = '/rest/plugin_sets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPluginSetsNewGitPluginDetailsPluginNameGet
     *
     * get git plugin description data
     *
     * @param  int $plugin_name plugin_name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsNewGitPluginDetailsPluginNameGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object[]
     */
    public function restPluginSetsNewGitPluginDetailsPluginNameGet(
        int $plugin_name,
        string $contentType = self::contentTypes['restPluginSetsNewGitPluginDetailsPluginNameGet'][0]
    ): array
    {
        list($response) = $this->restPluginSetsNewGitPluginDetailsPluginNameGetWithHttpInfo($plugin_name, $contentType);
        return $response;
    }

    /**
     * Operation restPluginSetsNewGitPluginDetailsPluginNameGetWithHttpInfo
     *
     * get git plugin description data
     *
     * @param  int $plugin_name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsNewGitPluginDetailsPluginNameGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginSetsNewGitPluginDetailsPluginNameGetWithHttpInfo(
        int $plugin_name,
        string $contentType = self::contentTypes['restPluginSetsNewGitPluginDetailsPluginNameGet'][0]
    ): array
    {
        $request = $this->restPluginSetsNewGitPluginDetailsPluginNameGetRequest($plugin_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginSetsNewGitPluginDetailsPluginNameGetAsync
     *
     * get git plugin description data
     *
     * @param  int $plugin_name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsNewGitPluginDetailsPluginNameGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginSetsNewGitPluginDetailsPluginNameGetAsync(
        int $plugin_name,
        string $contentType = self::contentTypes['restPluginSetsNewGitPluginDetailsPluginNameGet'][0]
    ): PromiseInterface
    {
        return $this->restPluginSetsNewGitPluginDetailsPluginNameGetAsyncWithHttpInfo($plugin_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginSetsNewGitPluginDetailsPluginNameGetAsyncWithHttpInfo
     *
     * get git plugin description data
     *
     * @param  int $plugin_name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsNewGitPluginDetailsPluginNameGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginSetsNewGitPluginDetailsPluginNameGetAsyncWithHttpInfo(
        $plugin_name,
        string $contentType = self::contentTypes['restPluginSetsNewGitPluginDetailsPluginNameGet'][0]
    ): PromiseInterface
    {
        $returnType = 'object[]';
        $request = $this->restPluginSetsNewGitPluginDetailsPluginNameGetRequest($plugin_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginSetsNewGitPluginDetailsPluginNameGet'
     *
     * @param  int $plugin_name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsNewGitPluginDetailsPluginNameGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPluginSetsNewGitPluginDetailsPluginNameGetRequest(
        $plugin_name,
        string $contentType = self::contentTypes['restPluginSetsNewGitPluginDetailsPluginNameGet'][0]
    ): Request
    {

        // verify the required parameter 'plugin_name' is set
        if ($plugin_name === null || (is_array($plugin_name) && count($plugin_name) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $plugin_name when calling restPluginSetsNewGitPluginDetailsPluginNameGet'
            );
        }


        $resourcePath = '/rest/plugin_sets_new/git_plugin_details/{pluginName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($plugin_name !== null) {
            $resourcePath = str_replace(
                '{' . 'pluginName' . '}',
                ObjectSerializer::toPathValue($plugin_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPluginSetsNewPluginDetailsPluginNameVariationIdGet
     *
     * get plugin description data
     *
     * @param  int $plugin_name plugin_name (required)
     * @param  int $variation_id variation_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsNewPluginDetailsPluginNameVariationIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object[]
     */
    public function restPluginSetsNewPluginDetailsPluginNameVariationIdGet(
        int $plugin_name,
        int $variation_id,
        string $contentType = self::contentTypes['restPluginSetsNewPluginDetailsPluginNameVariationIdGet'][0]
    ): array
    {
        list($response) = $this->restPluginSetsNewPluginDetailsPluginNameVariationIdGetWithHttpInfo($plugin_name, $variation_id, $contentType);
        return $response;
    }

    /**
     * Operation restPluginSetsNewPluginDetailsPluginNameVariationIdGetWithHttpInfo
     *
     * get plugin description data
     *
     * @param  int $plugin_name (required)
     * @param  int $variation_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsNewPluginDetailsPluginNameVariationIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginSetsNewPluginDetailsPluginNameVariationIdGetWithHttpInfo(
        int $plugin_name,
        int $variation_id,
        string $contentType = self::contentTypes['restPluginSetsNewPluginDetailsPluginNameVariationIdGet'][0]
    ): array
    {
        $request = $this->restPluginSetsNewPluginDetailsPluginNameVariationIdGetRequest($plugin_name, $variation_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginSetsNewPluginDetailsPluginNameVariationIdGetAsync
     *
     * get plugin description data
     *
     * @param  int $plugin_name (required)
     * @param  int $variation_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsNewPluginDetailsPluginNameVariationIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginSetsNewPluginDetailsPluginNameVariationIdGetAsync(
        int $plugin_name,
        int $variation_id,
        string $contentType = self::contentTypes['restPluginSetsNewPluginDetailsPluginNameVariationIdGet'][0]
    ): PromiseInterface
    {
        return $this->restPluginSetsNewPluginDetailsPluginNameVariationIdGetAsyncWithHttpInfo($plugin_name, $variation_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginSetsNewPluginDetailsPluginNameVariationIdGetAsyncWithHttpInfo
     *
     * get plugin description data
     *
     * @param  int $plugin_name (required)
     * @param  int $variation_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsNewPluginDetailsPluginNameVariationIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginSetsNewPluginDetailsPluginNameVariationIdGetAsyncWithHttpInfo(
        $plugin_name,
        $variation_id,
        string $contentType = self::contentTypes['restPluginSetsNewPluginDetailsPluginNameVariationIdGet'][0]
    ): PromiseInterface
    {
        $returnType = 'object[]';
        $request = $this->restPluginSetsNewPluginDetailsPluginNameVariationIdGetRequest($plugin_name, $variation_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginSetsNewPluginDetailsPluginNameVariationIdGet'
     *
     * @param  int $plugin_name (required)
     * @param  int $variation_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsNewPluginDetailsPluginNameVariationIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPluginSetsNewPluginDetailsPluginNameVariationIdGetRequest(
        $plugin_name,
        $variation_id,
        string $contentType = self::contentTypes['restPluginSetsNewPluginDetailsPluginNameVariationIdGet'][0]
    ): Request
    {

        // verify the required parameter 'plugin_name' is set
        if ($plugin_name === null || (is_array($plugin_name) && count($plugin_name) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $plugin_name when calling restPluginSetsNewPluginDetailsPluginNameVariationIdGet'
            );
        }

        // verify the required parameter 'variation_id' is set
        if ($variation_id === null || (is_array($variation_id) && count($variation_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $variation_id when calling restPluginSetsNewPluginDetailsPluginNameVariationIdGet'
            );
        }


        $resourcePath = '/rest/plugin_sets_new/plugin_details/{pluginName}/{variationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($plugin_name !== null) {
            $resourcePath = str_replace(
                '{' . 'pluginName' . '}',
                ObjectSerializer::toPathValue($plugin_name),
                $resourcePath
            );
        }
        // path params
        if ($variation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'variationId' . '}',
                ObjectSerializer::toPathValue($variation_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPluginSetsPluginSetIdLanguagesCsvLanguageCodeGet
     *
     * List all plugin translations csv.
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $language_code The code of the language (required)
     * @param  int $plugin_set_id2 plugin_set_id2 (required)
     * @param  int $language_code2 language_code2 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsPluginSetIdLanguagesCsvLanguageCodeGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return void
     */
    public function restPluginSetsPluginSetIdLanguagesCsvLanguageCodeGet(
        int $plugin_set_id,
        string $language_code,
        int $plugin_set_id2,
        int $language_code2,
        string $contentType = self::contentTypes['restPluginSetsPluginSetIdLanguagesCsvLanguageCodeGet'][0]
    ): void
    {
        $this->restPluginSetsPluginSetIdLanguagesCsvLanguageCodeGetWithHttpInfo($plugin_set_id, $language_code, $plugin_set_id2, $language_code2, $contentType);
    }

    /**
     * Operation restPluginSetsPluginSetIdLanguagesCsvLanguageCodeGetWithHttpInfo
     *
     * List all plugin translations csv.
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $language_code The code of the language (required)
     * @param  int $plugin_set_id2 (required)
     * @param  int $language_code2 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsPluginSetIdLanguagesCsvLanguageCodeGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginSetsPluginSetIdLanguagesCsvLanguageCodeGetWithHttpInfo(
        int $plugin_set_id,
        string $language_code,
        int $plugin_set_id2,
        int $language_code2,
        string $contentType = self::contentTypes['restPluginSetsPluginSetIdLanguagesCsvLanguageCodeGet'][0]
    ): array
    {
        $request = $this->restPluginSetsPluginSetIdLanguagesCsvLanguageCodeGetRequest($plugin_set_id, $language_code, $plugin_set_id2, $language_code2, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginSetsPluginSetIdLanguagesCsvLanguageCodeGetAsync
     *
     * List all plugin translations csv.
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $language_code The code of the language (required)
     * @param  int $plugin_set_id2 (required)
     * @param  int $language_code2 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsPluginSetIdLanguagesCsvLanguageCodeGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginSetsPluginSetIdLanguagesCsvLanguageCodeGetAsync(
        int $plugin_set_id,
        string $language_code,
        int $plugin_set_id2,
        int $language_code2,
        string $contentType = self::contentTypes['restPluginSetsPluginSetIdLanguagesCsvLanguageCodeGet'][0]
    ): PromiseInterface
    {
        return $this->restPluginSetsPluginSetIdLanguagesCsvLanguageCodeGetAsyncWithHttpInfo($plugin_set_id, $language_code, $plugin_set_id2, $language_code2, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginSetsPluginSetIdLanguagesCsvLanguageCodeGetAsyncWithHttpInfo
     *
     * List all plugin translations csv.
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $language_code The code of the language (required)
     * @param  int $plugin_set_id2 (required)
     * @param  int $language_code2 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsPluginSetIdLanguagesCsvLanguageCodeGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginSetsPluginSetIdLanguagesCsvLanguageCodeGetAsyncWithHttpInfo(
        $plugin_set_id,
        $language_code,
        $plugin_set_id2,
        $language_code2,
        string $contentType = self::contentTypes['restPluginSetsPluginSetIdLanguagesCsvLanguageCodeGet'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->restPluginSetsPluginSetIdLanguagesCsvLanguageCodeGetRequest($plugin_set_id, $language_code, $plugin_set_id2, $language_code2, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginSetsPluginSetIdLanguagesCsvLanguageCodeGet'
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $language_code The code of the language (required)
     * @param  int $plugin_set_id2 (required)
     * @param  int $language_code2 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsPluginSetIdLanguagesCsvLanguageCodeGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPluginSetsPluginSetIdLanguagesCsvLanguageCodeGetRequest(
        $plugin_set_id,
        $language_code,
        $plugin_set_id2,
        $language_code2,
        string $contentType = self::contentTypes['restPluginSetsPluginSetIdLanguagesCsvLanguageCodeGet'][0]
    ): Request
    {

        // verify the required parameter 'plugin_set_id' is set
        if ($plugin_set_id === null || (is_array($plugin_set_id) && count($plugin_set_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $plugin_set_id when calling restPluginSetsPluginSetIdLanguagesCsvLanguageCodeGet'
            );
        }

        // verify the required parameter 'language_code' is set
        if ($language_code === null || (is_array($language_code) && count($language_code) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $language_code when calling restPluginSetsPluginSetIdLanguagesCsvLanguageCodeGet'
            );
        }

        // verify the required parameter 'plugin_set_id2' is set
        if ($plugin_set_id2 === null || (is_array($plugin_set_id2) && count($plugin_set_id2) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $plugin_set_id2 when calling restPluginSetsPluginSetIdLanguagesCsvLanguageCodeGet'
            );
        }

        // verify the required parameter 'language_code2' is set
        if ($language_code2 === null || (is_array($language_code2) && count($language_code2) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $language_code2 when calling restPluginSetsPluginSetIdLanguagesCsvLanguageCodeGet'
            );
        }


        $resourcePath = '/rest/plugin_sets/{pluginSetId}/languages/csv/{languageCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $plugin_set_id,
            '$pluginSetId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $language_code,
            '$languageCode', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($plugin_set_id2 !== null) {
            $resourcePath = str_replace(
                '{' . 'pluginSetId' . '}',
                ObjectSerializer::toPathValue($plugin_set_id2),
                $resourcePath
            );
        }
        // path params
        if ($language_code2 !== null) {
            $resourcePath = str_replace(
                '{' . 'languageCode' . '}',
                ObjectSerializer::toPathValue($language_code2),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPluginSetsPluginSetIdLanguagesGet
     *
     * List all the plugins translations for a plugin set
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  int $plugin_set_id2 plugin_set_id2 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsPluginSetIdLanguagesGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\PluginTranslation[]
     */
    public function restPluginSetsPluginSetIdLanguagesGet(
        int $plugin_set_id,
        int $plugin_set_id2,
        string $contentType = self::contentTypes['restPluginSetsPluginSetIdLanguagesGet'][0]
    ): array
    {
        list($response) = $this->restPluginSetsPluginSetIdLanguagesGetWithHttpInfo($plugin_set_id, $plugin_set_id2, $contentType);
        return $response;
    }

    /**
     * Operation restPluginSetsPluginSetIdLanguagesGetWithHttpInfo
     *
     * List all the plugins translations for a plugin set
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  int $plugin_set_id2 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsPluginSetIdLanguagesGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\PluginTranslation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginSetsPluginSetIdLanguagesGetWithHttpInfo(
        int $plugin_set_id,
        int $plugin_set_id2,
        string $contentType = self::contentTypes['restPluginSetsPluginSetIdLanguagesGet'][0]
    ): array
    {
        $request = $this->restPluginSetsPluginSetIdLanguagesGetRequest($plugin_set_id, $plugin_set_id2, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\PluginTranslation[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\PluginTranslation[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\PluginTranslation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\PluginTranslation[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\PluginTranslation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginSetsPluginSetIdLanguagesGetAsync
     *
     * List all the plugins translations for a plugin set
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  int $plugin_set_id2 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsPluginSetIdLanguagesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginSetsPluginSetIdLanguagesGetAsync(
        int $plugin_set_id,
        int $plugin_set_id2,
        string $contentType = self::contentTypes['restPluginSetsPluginSetIdLanguagesGet'][0]
    ): PromiseInterface
    {
        return $this->restPluginSetsPluginSetIdLanguagesGetAsyncWithHttpInfo($plugin_set_id, $plugin_set_id2, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginSetsPluginSetIdLanguagesGetAsyncWithHttpInfo
     *
     * List all the plugins translations for a plugin set
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  int $plugin_set_id2 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsPluginSetIdLanguagesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginSetsPluginSetIdLanguagesGetAsyncWithHttpInfo(
        $plugin_set_id,
        $plugin_set_id2,
        string $contentType = self::contentTypes['restPluginSetsPluginSetIdLanguagesGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\PluginTranslation[]';
        $request = $this->restPluginSetsPluginSetIdLanguagesGetRequest($plugin_set_id, $plugin_set_id2, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginSetsPluginSetIdLanguagesGet'
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  int $plugin_set_id2 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsPluginSetIdLanguagesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPluginSetsPluginSetIdLanguagesGetRequest(
        $plugin_set_id,
        $plugin_set_id2,
        string $contentType = self::contentTypes['restPluginSetsPluginSetIdLanguagesGet'][0]
    ): Request
    {

        // verify the required parameter 'plugin_set_id' is set
        if ($plugin_set_id === null || (is_array($plugin_set_id) && count($plugin_set_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $plugin_set_id when calling restPluginSetsPluginSetIdLanguagesGet'
            );
        }

        // verify the required parameter 'plugin_set_id2' is set
        if ($plugin_set_id2 === null || (is_array($plugin_set_id2) && count($plugin_set_id2) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $plugin_set_id2 when calling restPluginSetsPluginSetIdLanguagesGet'
            );
        }


        $resourcePath = '/rest/plugin_sets/{pluginSetId}/languages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $plugin_set_id,
            '$pluginSetId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($plugin_set_id2 !== null) {
            $resourcePath = str_replace(
                '{' . 'pluginSetId' . '}',
                ObjectSerializer::toPathValue($plugin_set_id2),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPluginSetsPluginSetIdLanguagesTargetLanguageGet
     *
     * List all plugin translations merged.
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $target_language The code of the language we target (required)
     * @param  int $plugin_set_id2 plugin_set_id2 (required)
     * @param  int $target_language2 target_language2 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsPluginSetIdLanguagesTargetLanguageGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\PluginTranslation[]
     */
    public function restPluginSetsPluginSetIdLanguagesTargetLanguageGet(
        int $plugin_set_id,
        string $target_language,
        int $plugin_set_id2,
        int $target_language2,
        string $contentType = self::contentTypes['restPluginSetsPluginSetIdLanguagesTargetLanguageGet'][0]
    ): array
    {
        list($response) = $this->restPluginSetsPluginSetIdLanguagesTargetLanguageGetWithHttpInfo($plugin_set_id, $target_language, $plugin_set_id2, $target_language2, $contentType);
        return $response;
    }

    /**
     * Operation restPluginSetsPluginSetIdLanguagesTargetLanguageGetWithHttpInfo
     *
     * List all plugin translations merged.
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $target_language The code of the language we target (required)
     * @param  int $plugin_set_id2 (required)
     * @param  int $target_language2 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsPluginSetIdLanguagesTargetLanguageGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\PluginTranslation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginSetsPluginSetIdLanguagesTargetLanguageGetWithHttpInfo(
        int $plugin_set_id,
        string $target_language,
        int $plugin_set_id2,
        int $target_language2,
        string $contentType = self::contentTypes['restPluginSetsPluginSetIdLanguagesTargetLanguageGet'][0]
    ): array
    {
        $request = $this->restPluginSetsPluginSetIdLanguagesTargetLanguageGetRequest($plugin_set_id, $target_language, $plugin_set_id2, $target_language2, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\PluginTranslation[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\PluginTranslation[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\PluginTranslation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\PluginTranslation[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\PluginTranslation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginSetsPluginSetIdLanguagesTargetLanguageGetAsync
     *
     * List all plugin translations merged.
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $target_language The code of the language we target (required)
     * @param  int $plugin_set_id2 (required)
     * @param  int $target_language2 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsPluginSetIdLanguagesTargetLanguageGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginSetsPluginSetIdLanguagesTargetLanguageGetAsync(
        int $plugin_set_id,
        string $target_language,
        int $plugin_set_id2,
        int $target_language2,
        string $contentType = self::contentTypes['restPluginSetsPluginSetIdLanguagesTargetLanguageGet'][0]
    ): PromiseInterface
    {
        return $this->restPluginSetsPluginSetIdLanguagesTargetLanguageGetAsyncWithHttpInfo($plugin_set_id, $target_language, $plugin_set_id2, $target_language2, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginSetsPluginSetIdLanguagesTargetLanguageGetAsyncWithHttpInfo
     *
     * List all plugin translations merged.
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $target_language The code of the language we target (required)
     * @param  int $plugin_set_id2 (required)
     * @param  int $target_language2 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsPluginSetIdLanguagesTargetLanguageGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginSetsPluginSetIdLanguagesTargetLanguageGetAsyncWithHttpInfo(
        $plugin_set_id,
        $target_language,
        $plugin_set_id2,
        $target_language2,
        string $contentType = self::contentTypes['restPluginSetsPluginSetIdLanguagesTargetLanguageGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\PluginTranslation[]';
        $request = $this->restPluginSetsPluginSetIdLanguagesTargetLanguageGetRequest($plugin_set_id, $target_language, $plugin_set_id2, $target_language2, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginSetsPluginSetIdLanguagesTargetLanguageGet'
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $target_language The code of the language we target (required)
     * @param  int $plugin_set_id2 (required)
     * @param  int $target_language2 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsPluginSetIdLanguagesTargetLanguageGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPluginSetsPluginSetIdLanguagesTargetLanguageGetRequest(
        $plugin_set_id,
        $target_language,
        $plugin_set_id2,
        $target_language2,
        string $contentType = self::contentTypes['restPluginSetsPluginSetIdLanguagesTargetLanguageGet'][0]
    ): Request
    {

        // verify the required parameter 'plugin_set_id' is set
        if ($plugin_set_id === null || (is_array($plugin_set_id) && count($plugin_set_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $plugin_set_id when calling restPluginSetsPluginSetIdLanguagesTargetLanguageGet'
            );
        }

        // verify the required parameter 'target_language' is set
        if ($target_language === null || (is_array($target_language) && count($target_language) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $target_language when calling restPluginSetsPluginSetIdLanguagesTargetLanguageGet'
            );
        }

        // verify the required parameter 'plugin_set_id2' is set
        if ($plugin_set_id2 === null || (is_array($plugin_set_id2) && count($plugin_set_id2) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $plugin_set_id2 when calling restPluginSetsPluginSetIdLanguagesTargetLanguageGet'
            );
        }

        // verify the required parameter 'target_language2' is set
        if ($target_language2 === null || (is_array($target_language2) && count($target_language2) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $target_language2 when calling restPluginSetsPluginSetIdLanguagesTargetLanguageGet'
            );
        }


        $resourcePath = '/rest/plugin_sets/{pluginSetId}/languages/{targetLanguage}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $plugin_set_id,
            '$pluginSetId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $target_language,
            '$targetLanguage', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($plugin_set_id2 !== null) {
            $resourcePath = str_replace(
                '{' . 'pluginSetId' . '}',
                ObjectSerializer::toPathValue($plugin_set_id2),
                $resourcePath
            );
        }
        // path params
        if ($target_language2 !== null) {
            $resourcePath = str_replace(
                '{' . 'targetLanguage' . '}',
                ObjectSerializer::toPathValue($target_language2),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPluginSetsPluginSetIdLanguagesTargetLanguagePost
     *
     * Update all plugin translations
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $target_language The code of the language (required)
     * @param  int $plugin_set_id2 plugin_set_id2 (required)
     * @param  int $target_language2 target_language2 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsPluginSetIdLanguagesTargetLanguagePost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return void
     */
    public function restPluginSetsPluginSetIdLanguagesTargetLanguagePost(
        int $plugin_set_id,
        string $target_language,
        int $plugin_set_id2,
        int $target_language2,
        string $contentType = self::contentTypes['restPluginSetsPluginSetIdLanguagesTargetLanguagePost'][0]
    ): void
    {
        $this->restPluginSetsPluginSetIdLanguagesTargetLanguagePostWithHttpInfo($plugin_set_id, $target_language, $plugin_set_id2, $target_language2, $contentType);
    }

    /**
     * Operation restPluginSetsPluginSetIdLanguagesTargetLanguagePostWithHttpInfo
     *
     * Update all plugin translations
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $target_language The code of the language (required)
     * @param  int $plugin_set_id2 (required)
     * @param  int $target_language2 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsPluginSetIdLanguagesTargetLanguagePost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginSetsPluginSetIdLanguagesTargetLanguagePostWithHttpInfo(
        int $plugin_set_id,
        string $target_language,
        int $plugin_set_id2,
        int $target_language2,
        string $contentType = self::contentTypes['restPluginSetsPluginSetIdLanguagesTargetLanguagePost'][0]
    ): array
    {
        $request = $this->restPluginSetsPluginSetIdLanguagesTargetLanguagePostRequest($plugin_set_id, $target_language, $plugin_set_id2, $target_language2, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginSetsPluginSetIdLanguagesTargetLanguagePostAsync
     *
     * Update all plugin translations
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $target_language The code of the language (required)
     * @param  int $plugin_set_id2 (required)
     * @param  int $target_language2 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsPluginSetIdLanguagesTargetLanguagePost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginSetsPluginSetIdLanguagesTargetLanguagePostAsync(
        int $plugin_set_id,
        string $target_language,
        int $plugin_set_id2,
        int $target_language2,
        string $contentType = self::contentTypes['restPluginSetsPluginSetIdLanguagesTargetLanguagePost'][0]
    ): PromiseInterface
    {
        return $this->restPluginSetsPluginSetIdLanguagesTargetLanguagePostAsyncWithHttpInfo($plugin_set_id, $target_language, $plugin_set_id2, $target_language2, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginSetsPluginSetIdLanguagesTargetLanguagePostAsyncWithHttpInfo
     *
     * Update all plugin translations
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $target_language The code of the language (required)
     * @param  int $plugin_set_id2 (required)
     * @param  int $target_language2 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsPluginSetIdLanguagesTargetLanguagePost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginSetsPluginSetIdLanguagesTargetLanguagePostAsyncWithHttpInfo(
        $plugin_set_id,
        $target_language,
        $plugin_set_id2,
        $target_language2,
        string $contentType = self::contentTypes['restPluginSetsPluginSetIdLanguagesTargetLanguagePost'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->restPluginSetsPluginSetIdLanguagesTargetLanguagePostRequest($plugin_set_id, $target_language, $plugin_set_id2, $target_language2, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginSetsPluginSetIdLanguagesTargetLanguagePost'
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $target_language The code of the language (required)
     * @param  int $plugin_set_id2 (required)
     * @param  int $target_language2 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsPluginSetIdLanguagesTargetLanguagePost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPluginSetsPluginSetIdLanguagesTargetLanguagePostRequest(
        $plugin_set_id,
        $target_language,
        $plugin_set_id2,
        $target_language2,
        string $contentType = self::contentTypes['restPluginSetsPluginSetIdLanguagesTargetLanguagePost'][0]
    ): Request
    {

        // verify the required parameter 'plugin_set_id' is set
        if ($plugin_set_id === null || (is_array($plugin_set_id) && count($plugin_set_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $plugin_set_id when calling restPluginSetsPluginSetIdLanguagesTargetLanguagePost'
            );
        }

        // verify the required parameter 'target_language' is set
        if ($target_language === null || (is_array($target_language) && count($target_language) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $target_language when calling restPluginSetsPluginSetIdLanguagesTargetLanguagePost'
            );
        }

        // verify the required parameter 'plugin_set_id2' is set
        if ($plugin_set_id2 === null || (is_array($plugin_set_id2) && count($plugin_set_id2) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $plugin_set_id2 when calling restPluginSetsPluginSetIdLanguagesTargetLanguagePost'
            );
        }

        // verify the required parameter 'target_language2' is set
        if ($target_language2 === null || (is_array($target_language2) && count($target_language2) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $target_language2 when calling restPluginSetsPluginSetIdLanguagesTargetLanguagePost'
            );
        }


        $resourcePath = '/rest/plugin_sets/{pluginSetId}/languages/{targetLanguage}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $plugin_set_id,
            '$pluginSetId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $target_language,
            '$targetLanguage', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($plugin_set_id2 !== null) {
            $resourcePath = str_replace(
                '{' . 'pluginSetId' . '}',
                ObjectSerializer::toPathValue($plugin_set_id2),
                $resourcePath
            );
        }
        // path params
        if ($target_language2 !== null) {
            $resourcePath = str_replace(
                '{' . 'targetLanguage' . '}',
                ObjectSerializer::toPathValue($target_language2),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPluginSetsPost
     *
     * Create a Set
     *
     * @param  int|null $copy_plugin_set_id The ID of the plugin set of which to copy the set entries from into the      * new set (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\PluginSet
     */
    public function restPluginSetsPost(
        ?int $copy_plugin_set_id = null,
        string $contentType = self::contentTypes['restPluginSetsPost'][0]
    ): \ck\Model\PluginSet
    {
        list($response) = $this->restPluginSetsPostWithHttpInfo($copy_plugin_set_id, $contentType);
        return $response;
    }

    /**
     * Operation restPluginSetsPostWithHttpInfo
     *
     * Create a Set
     *
     * @param  int|null $copy_plugin_set_id The ID of the plugin set of which to copy the set entries from into the      * new set (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\PluginSet, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginSetsPostWithHttpInfo(
        ?int $copy_plugin_set_id = null,
        string $contentType = self::contentTypes['restPluginSetsPost'][0]
    ): array
    {
        $request = $this->restPluginSetsPostRequest($copy_plugin_set_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\PluginSet' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\PluginSet' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\PluginSet', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\PluginSet';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\PluginSet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginSetsPostAsync
     *
     * Create a Set
     *
     * @param  int|null $copy_plugin_set_id The ID of the plugin set of which to copy the set entries from into the      * new set (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginSetsPostAsync(
        ?int $copy_plugin_set_id = null,
        string $contentType = self::contentTypes['restPluginSetsPost'][0]
    ): PromiseInterface
    {
        return $this->restPluginSetsPostAsyncWithHttpInfo($copy_plugin_set_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginSetsPostAsyncWithHttpInfo
     *
     * Create a Set
     *
     * @param  int|null $copy_plugin_set_id The ID of the plugin set of which to copy the set entries from into the      * new set (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginSetsPostAsyncWithHttpInfo(
        $copy_plugin_set_id = null,
        string $contentType = self::contentTypes['restPluginSetsPost'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\PluginSet';
        $request = $this->restPluginSetsPostRequest($copy_plugin_set_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginSetsPost'
     *
     * @param  int|null $copy_plugin_set_id The ID of the plugin set of which to copy the set entries from into the      * new set (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPluginSetsPostRequest(
        $copy_plugin_set_id = null,
        string $contentType = self::contentTypes['restPluginSetsPost'][0]
    ): Request
    {



        $resourcePath = '/rest/plugin_sets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $copy_plugin_set_id,
            'copyPluginSetId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPluginSetsPreviewHashGet
     *
     * Get the preview hash for a set
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsPreviewHashGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object
     */
    public function restPluginSetsPreviewHashGet(
        string $contentType = self::contentTypes['restPluginSetsPreviewHashGet'][0]
    ): object
    {
        list($response) = $this->restPluginSetsPreviewHashGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation restPluginSetsPreviewHashGetWithHttpInfo
     *
     * Get the preview hash for a set
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsPreviewHashGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginSetsPreviewHashGetWithHttpInfo(
        string $contentType = self::contentTypes['restPluginSetsPreviewHashGet'][0]
    ): array
    {
        $request = $this->restPluginSetsPreviewHashGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginSetsPreviewHashGetAsync
     *
     * Get the preview hash for a set
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsPreviewHashGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginSetsPreviewHashGetAsync(
        string $contentType = self::contentTypes['restPluginSetsPreviewHashGet'][0]
    ): PromiseInterface
    {
        return $this->restPluginSetsPreviewHashGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginSetsPreviewHashGetAsyncWithHttpInfo
     *
     * Get the preview hash for a set
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsPreviewHashGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginSetsPreviewHashGetAsyncWithHttpInfo(
        string $contentType = self::contentTypes['restPluginSetsPreviewHashGet'][0]
    ): PromiseInterface
    {
        $returnType = 'object';
        $request = $this->restPluginSetsPreviewHashGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginSetsPreviewHashGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsPreviewHashGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPluginSetsPreviewHashGetRequest(
        string $contentType = self::contentTypes['restPluginSetsPreviewHashGet'][0]
    ): Request
    {


        $resourcePath = '/rest/plugin_sets/preview_hash';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPluginSetsS3InboxOpensourcePluginsGet
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsS3InboxOpensourcePluginsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\PluginSet[]
     */
    public function restPluginSetsS3InboxOpensourcePluginsGet(
        string $contentType = self::contentTypes['restPluginSetsS3InboxOpensourcePluginsGet'][0]
    ): array
    {
        list($response) = $this->restPluginSetsS3InboxOpensourcePluginsGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation restPluginSetsS3InboxOpensourcePluginsGetWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsS3InboxOpensourcePluginsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\PluginSet[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginSetsS3InboxOpensourcePluginsGetWithHttpInfo(
        string $contentType = self::contentTypes['restPluginSetsS3InboxOpensourcePluginsGet'][0]
    ): array
    {
        $request = $this->restPluginSetsS3InboxOpensourcePluginsGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\PluginSet[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\PluginSet[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\PluginSet[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\PluginSet[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\PluginSet[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginSetsS3InboxOpensourcePluginsGetAsync
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsS3InboxOpensourcePluginsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginSetsS3InboxOpensourcePluginsGetAsync(
        string $contentType = self::contentTypes['restPluginSetsS3InboxOpensourcePluginsGet'][0]
    ): PromiseInterface
    {
        return $this->restPluginSetsS3InboxOpensourcePluginsGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginSetsS3InboxOpensourcePluginsGetAsyncWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsS3InboxOpensourcePluginsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginSetsS3InboxOpensourcePluginsGetAsyncWithHttpInfo(
        string $contentType = self::contentTypes['restPluginSetsS3InboxOpensourcePluginsGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\PluginSet[]';
        $request = $this->restPluginSetsS3InboxOpensourcePluginsGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginSetsS3InboxOpensourcePluginsGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsS3InboxOpensourcePluginsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPluginSetsS3InboxOpensourcePluginsGetRequest(
        string $contentType = self::contentTypes['restPluginSetsS3InboxOpensourcePluginsGet'][0]
    ): Request
    {


        $resourcePath = '/rest/plugin_sets/s3-inbox-opensource-plugins';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPluginSetsSetIdDelete
     *
     * Delete a set
     *
     * @param  int $set_id set_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object
     */
    public function restPluginSetsSetIdDelete(
        int $set_id,
        string $contentType = self::contentTypes['restPluginSetsSetIdDelete'][0]
    ): object
    {
        list($response) = $this->restPluginSetsSetIdDeleteWithHttpInfo($set_id, $contentType);
        return $response;
    }

    /**
     * Operation restPluginSetsSetIdDeleteWithHttpInfo
     *
     * Delete a set
     *
     * @param  int $set_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginSetsSetIdDeleteWithHttpInfo(
        int $set_id,
        string $contentType = self::contentTypes['restPluginSetsSetIdDelete'][0]
    ): array
    {
        $request = $this->restPluginSetsSetIdDeleteRequest($set_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginSetsSetIdDeleteAsync
     *
     * Delete a set
     *
     * @param  int $set_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginSetsSetIdDeleteAsync(
        int $set_id,
        string $contentType = self::contentTypes['restPluginSetsSetIdDelete'][0]
    ): PromiseInterface
    {
        return $this->restPluginSetsSetIdDeleteAsyncWithHttpInfo($set_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginSetsSetIdDeleteAsyncWithHttpInfo
     *
     * Delete a set
     *
     * @param  int $set_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginSetsSetIdDeleteAsyncWithHttpInfo(
        $set_id,
        string $contentType = self::contentTypes['restPluginSetsSetIdDelete'][0]
    ): PromiseInterface
    {
        $returnType = 'object';
        $request = $this->restPluginSetsSetIdDeleteRequest($set_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginSetsSetIdDelete'
     *
     * @param  int $set_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPluginSetsSetIdDeleteRequest(
        $set_id,
        string $contentType = self::contentTypes['restPluginSetsSetIdDelete'][0]
    ): Request
    {

        // verify the required parameter 'set_id' is set
        if ($set_id === null || (is_array($set_id) && count($set_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $set_id when calling restPluginSetsSetIdDelete'
            );
        }


        $resourcePath = '/rest/plugin_sets/{setId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'setId' . '}',
                ObjectSerializer::toPathValue($set_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPluginSetsSetIdGet
     *
     * Get a set
     *
     * @param  int $set_id set_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\PluginSet
     */
    public function restPluginSetsSetIdGet(
        int $set_id,
        string $contentType = self::contentTypes['restPluginSetsSetIdGet'][0]
    ): \ck\Model\PluginSet
    {
        list($response) = $this->restPluginSetsSetIdGetWithHttpInfo($set_id, $contentType);
        return $response;
    }

    /**
     * Operation restPluginSetsSetIdGetWithHttpInfo
     *
     * Get a set
     *
     * @param  int $set_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\PluginSet, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginSetsSetIdGetWithHttpInfo(
        int $set_id,
        string $contentType = self::contentTypes['restPluginSetsSetIdGet'][0]
    ): array
    {
        $request = $this->restPluginSetsSetIdGetRequest($set_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\PluginSet' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\PluginSet' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\PluginSet', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\PluginSet';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\PluginSet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginSetsSetIdGetAsync
     *
     * Get a set
     *
     * @param  int $set_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginSetsSetIdGetAsync(
        int $set_id,
        string $contentType = self::contentTypes['restPluginSetsSetIdGet'][0]
    ): PromiseInterface
    {
        return $this->restPluginSetsSetIdGetAsyncWithHttpInfo($set_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginSetsSetIdGetAsyncWithHttpInfo
     *
     * Get a set
     *
     * @param  int $set_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginSetsSetIdGetAsyncWithHttpInfo(
        $set_id,
        string $contentType = self::contentTypes['restPluginSetsSetIdGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\PluginSet';
        $request = $this->restPluginSetsSetIdGetRequest($set_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginSetsSetIdGet'
     *
     * @param  int $set_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPluginSetsSetIdGetRequest(
        $set_id,
        string $contentType = self::contentTypes['restPluginSetsSetIdGet'][0]
    ): Request
    {

        // verify the required parameter 'set_id' is set
        if ($set_id === null || (is_array($set_id) && count($set_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $set_id when calling restPluginSetsSetIdGet'
            );
        }


        $resourcePath = '/rest/plugin_sets/{setId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'setId' . '}',
                ObjectSerializer::toPathValue($set_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPluginSetsSetIdPluginsGet
     *
     * List all Plugins of Set
     *
     * @param  int $set_id set_id (required)
     * @param  bool|null $include_stage Include staged plugins in the result. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdPluginsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object
     */
    public function restPluginSetsSetIdPluginsGet(
        int $set_id,
        ?bool $include_stage = null,
        string $contentType = self::contentTypes['restPluginSetsSetIdPluginsGet'][0]
    ): object
    {
        list($response) = $this->restPluginSetsSetIdPluginsGetWithHttpInfo($set_id, $include_stage, $contentType);
        return $response;
    }

    /**
     * Operation restPluginSetsSetIdPluginsGetWithHttpInfo
     *
     * List all Plugins of Set
     *
     * @param  int $set_id (required)
     * @param  bool|null $include_stage Include staged plugins in the result. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdPluginsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginSetsSetIdPluginsGetWithHttpInfo(
        int $set_id,
        ?bool $include_stage = null,
        string $contentType = self::contentTypes['restPluginSetsSetIdPluginsGet'][0]
    ): array
    {
        $request = $this->restPluginSetsSetIdPluginsGetRequest($set_id, $include_stage, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginSetsSetIdPluginsGetAsync
     *
     * List all Plugins of Set
     *
     * @param  int $set_id (required)
     * @param  bool|null $include_stage Include staged plugins in the result. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdPluginsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginSetsSetIdPluginsGetAsync(
        int $set_id,
        ?bool $include_stage = null,
        string $contentType = self::contentTypes['restPluginSetsSetIdPluginsGet'][0]
    ): PromiseInterface
    {
        return $this->restPluginSetsSetIdPluginsGetAsyncWithHttpInfo($set_id, $include_stage, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginSetsSetIdPluginsGetAsyncWithHttpInfo
     *
     * List all Plugins of Set
     *
     * @param  int $set_id (required)
     * @param  bool|null $include_stage Include staged plugins in the result. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdPluginsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginSetsSetIdPluginsGetAsyncWithHttpInfo(
        $set_id,
        $include_stage = null,
        string $contentType = self::contentTypes['restPluginSetsSetIdPluginsGet'][0]
    ): PromiseInterface
    {
        $returnType = 'object';
        $request = $this->restPluginSetsSetIdPluginsGetRequest($set_id, $include_stage, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginSetsSetIdPluginsGet'
     *
     * @param  int $set_id (required)
     * @param  bool|null $include_stage Include staged plugins in the result. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdPluginsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPluginSetsSetIdPluginsGetRequest(
        $set_id,
        $include_stage = null,
        string $contentType = self::contentTypes['restPluginSetsSetIdPluginsGet'][0]
    ): Request
    {

        // verify the required parameter 'set_id' is set
        if ($set_id === null || (is_array($set_id) && count($set_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $set_id when calling restPluginSetsSetIdPluginsGet'
            );
        }



        $resourcePath = '/rest/plugin_sets/{setId}/plugins';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_stage,
            '&#39;includeStage', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'setId' . '}',
                ObjectSerializer::toPathValue($set_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPluginSetsSetIdPluginsGetCompatibilityPluginNameVariationIdGet
     *
     * @param  int $set_id set_id (required)
     * @param  int $plugin_name plugin_name (required)
     * @param  int $variation_id variation_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdPluginsGetCompatibilityPluginNameVariationIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return void
     */
    public function restPluginSetsSetIdPluginsGetCompatibilityPluginNameVariationIdGet(
        int $set_id,
        int $plugin_name,
        int $variation_id,
        string $contentType = self::contentTypes['restPluginSetsSetIdPluginsGetCompatibilityPluginNameVariationIdGet'][0]
    ): void
    {
        $this->restPluginSetsSetIdPluginsGetCompatibilityPluginNameVariationIdGetWithHttpInfo($set_id, $plugin_name, $variation_id, $contentType);
    }

    /**
     * Operation restPluginSetsSetIdPluginsGetCompatibilityPluginNameVariationIdGetWithHttpInfo
     *
     * @param  int $set_id (required)
     * @param  int $plugin_name (required)
     * @param  int $variation_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdPluginsGetCompatibilityPluginNameVariationIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginSetsSetIdPluginsGetCompatibilityPluginNameVariationIdGetWithHttpInfo(
        int $set_id,
        int $plugin_name,
        int $variation_id,
        string $contentType = self::contentTypes['restPluginSetsSetIdPluginsGetCompatibilityPluginNameVariationIdGet'][0]
    ): array
    {
        $request = $this->restPluginSetsSetIdPluginsGetCompatibilityPluginNameVariationIdGetRequest($set_id, $plugin_name, $variation_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginSetsSetIdPluginsGetCompatibilityPluginNameVariationIdGetAsync
     *
     * @param  int $set_id (required)
     * @param  int $plugin_name (required)
     * @param  int $variation_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdPluginsGetCompatibilityPluginNameVariationIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginSetsSetIdPluginsGetCompatibilityPluginNameVariationIdGetAsync(
        int $set_id,
        int $plugin_name,
        int $variation_id,
        string $contentType = self::contentTypes['restPluginSetsSetIdPluginsGetCompatibilityPluginNameVariationIdGet'][0]
    ): PromiseInterface
    {
        return $this->restPluginSetsSetIdPluginsGetCompatibilityPluginNameVariationIdGetAsyncWithHttpInfo($set_id, $plugin_name, $variation_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginSetsSetIdPluginsGetCompatibilityPluginNameVariationIdGetAsyncWithHttpInfo
     *
     * @param  int $set_id (required)
     * @param  int $plugin_name (required)
     * @param  int $variation_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdPluginsGetCompatibilityPluginNameVariationIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginSetsSetIdPluginsGetCompatibilityPluginNameVariationIdGetAsyncWithHttpInfo(
        $set_id,
        $plugin_name,
        $variation_id,
        string $contentType = self::contentTypes['restPluginSetsSetIdPluginsGetCompatibilityPluginNameVariationIdGet'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->restPluginSetsSetIdPluginsGetCompatibilityPluginNameVariationIdGetRequest($set_id, $plugin_name, $variation_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginSetsSetIdPluginsGetCompatibilityPluginNameVariationIdGet'
     *
     * @param  int $set_id (required)
     * @param  int $plugin_name (required)
     * @param  int $variation_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdPluginsGetCompatibilityPluginNameVariationIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPluginSetsSetIdPluginsGetCompatibilityPluginNameVariationIdGetRequest(
        $set_id,
        $plugin_name,
        $variation_id,
        string $contentType = self::contentTypes['restPluginSetsSetIdPluginsGetCompatibilityPluginNameVariationIdGet'][0]
    ): Request
    {

        // verify the required parameter 'set_id' is set
        if ($set_id === null || (is_array($set_id) && count($set_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $set_id when calling restPluginSetsSetIdPluginsGetCompatibilityPluginNameVariationIdGet'
            );
        }

        // verify the required parameter 'plugin_name' is set
        if ($plugin_name === null || (is_array($plugin_name) && count($plugin_name) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $plugin_name when calling restPluginSetsSetIdPluginsGetCompatibilityPluginNameVariationIdGet'
            );
        }

        // verify the required parameter 'variation_id' is set
        if ($variation_id === null || (is_array($variation_id) && count($variation_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $variation_id when calling restPluginSetsSetIdPluginsGetCompatibilityPluginNameVariationIdGet'
            );
        }


        $resourcePath = '/rest/plugin_sets/{setId}/plugins/get_compatibility/{pluginName}/{variationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'setId' . '}',
                ObjectSerializer::toPathValue($set_id),
                $resourcePath
            );
        }
        // path params
        if ($plugin_name !== null) {
            $resourcePath = str_replace(
                '{' . 'pluginName' . '}',
                ObjectSerializer::toPathValue($plugin_name),
                $resourcePath
            );
        }
        // path params
        if ($variation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'variationId' . '}',
                ObjectSerializer::toPathValue($variation_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPluginSetsSetIdPluginsPluginIdDelete
     *
     * Remove a plugin from a set
     *
     * @param  int $set_id set_id (required)
     * @param  int $plugin_id plugin_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdPluginsPluginIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object
     */
    public function restPluginSetsSetIdPluginsPluginIdDelete(
        int $set_id,
        int $plugin_id,
        string $contentType = self::contentTypes['restPluginSetsSetIdPluginsPluginIdDelete'][0]
    ): object
    {
        list($response) = $this->restPluginSetsSetIdPluginsPluginIdDeleteWithHttpInfo($set_id, $plugin_id, $contentType);
        return $response;
    }

    /**
     * Operation restPluginSetsSetIdPluginsPluginIdDeleteWithHttpInfo
     *
     * Remove a plugin from a set
     *
     * @param  int $set_id (required)
     * @param  int $plugin_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdPluginsPluginIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginSetsSetIdPluginsPluginIdDeleteWithHttpInfo(
        int $set_id,
        int $plugin_id,
        string $contentType = self::contentTypes['restPluginSetsSetIdPluginsPluginIdDelete'][0]
    ): array
    {
        $request = $this->restPluginSetsSetIdPluginsPluginIdDeleteRequest($set_id, $plugin_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginSetsSetIdPluginsPluginIdDeleteAsync
     *
     * Remove a plugin from a set
     *
     * @param  int $set_id (required)
     * @param  int $plugin_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdPluginsPluginIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginSetsSetIdPluginsPluginIdDeleteAsync(
        int $set_id,
        int $plugin_id,
        string $contentType = self::contentTypes['restPluginSetsSetIdPluginsPluginIdDelete'][0]
    ): PromiseInterface
    {
        return $this->restPluginSetsSetIdPluginsPluginIdDeleteAsyncWithHttpInfo($set_id, $plugin_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginSetsSetIdPluginsPluginIdDeleteAsyncWithHttpInfo
     *
     * Remove a plugin from a set
     *
     * @param  int $set_id (required)
     * @param  int $plugin_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdPluginsPluginIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginSetsSetIdPluginsPluginIdDeleteAsyncWithHttpInfo(
        $set_id,
        $plugin_id,
        string $contentType = self::contentTypes['restPluginSetsSetIdPluginsPluginIdDelete'][0]
    ): PromiseInterface
    {
        $returnType = 'object';
        $request = $this->restPluginSetsSetIdPluginsPluginIdDeleteRequest($set_id, $plugin_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginSetsSetIdPluginsPluginIdDelete'
     *
     * @param  int $set_id (required)
     * @param  int $plugin_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdPluginsPluginIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPluginSetsSetIdPluginsPluginIdDeleteRequest(
        $set_id,
        $plugin_id,
        string $contentType = self::contentTypes['restPluginSetsSetIdPluginsPluginIdDelete'][0]
    ): Request
    {

        // verify the required parameter 'set_id' is set
        if ($set_id === null || (is_array($set_id) && count($set_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $set_id when calling restPluginSetsSetIdPluginsPluginIdDelete'
            );
        }

        // verify the required parameter 'plugin_id' is set
        if ($plugin_id === null || (is_array($plugin_id) && count($plugin_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $plugin_id when calling restPluginSetsSetIdPluginsPluginIdDelete'
            );
        }


        $resourcePath = '/rest/plugin_sets/{setId}/plugins/{pluginId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'setId' . '}',
                ObjectSerializer::toPathValue($set_id),
                $resourcePath
            );
        }
        // path params
        if ($plugin_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pluginId' . '}',
                ObjectSerializer::toPathValue($plugin_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPluginSetsSetIdPluginsPluginIdInstallGitPluginPost
     *
     * Install a git plugin into a set
     *
     * @param  int $set_id set_id (required)
     * @param  int $plugin_id plugin_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdPluginsPluginIdInstallGitPluginPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object
     */
    public function restPluginSetsSetIdPluginsPluginIdInstallGitPluginPost(
        int $set_id,
        int $plugin_id,
        string $contentType = self::contentTypes['restPluginSetsSetIdPluginsPluginIdInstallGitPluginPost'][0]
    ): object
    {
        list($response) = $this->restPluginSetsSetIdPluginsPluginIdInstallGitPluginPostWithHttpInfo($set_id, $plugin_id, $contentType);
        return $response;
    }

    /**
     * Operation restPluginSetsSetIdPluginsPluginIdInstallGitPluginPostWithHttpInfo
     *
     * Install a git plugin into a set
     *
     * @param  int $set_id (required)
     * @param  int $plugin_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdPluginsPluginIdInstallGitPluginPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginSetsSetIdPluginsPluginIdInstallGitPluginPostWithHttpInfo(
        int $set_id,
        int $plugin_id,
        string $contentType = self::contentTypes['restPluginSetsSetIdPluginsPluginIdInstallGitPluginPost'][0]
    ): array
    {
        $request = $this->restPluginSetsSetIdPluginsPluginIdInstallGitPluginPostRequest($set_id, $plugin_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginSetsSetIdPluginsPluginIdInstallGitPluginPostAsync
     *
     * Install a git plugin into a set
     *
     * @param  int $set_id (required)
     * @param  int $plugin_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdPluginsPluginIdInstallGitPluginPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginSetsSetIdPluginsPluginIdInstallGitPluginPostAsync(
        int $set_id,
        int $plugin_id,
        string $contentType = self::contentTypes['restPluginSetsSetIdPluginsPluginIdInstallGitPluginPost'][0]
    ): PromiseInterface
    {
        return $this->restPluginSetsSetIdPluginsPluginIdInstallGitPluginPostAsyncWithHttpInfo($set_id, $plugin_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginSetsSetIdPluginsPluginIdInstallGitPluginPostAsyncWithHttpInfo
     *
     * Install a git plugin into a set
     *
     * @param  int $set_id (required)
     * @param  int $plugin_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdPluginsPluginIdInstallGitPluginPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginSetsSetIdPluginsPluginIdInstallGitPluginPostAsyncWithHttpInfo(
        $set_id,
        $plugin_id,
        string $contentType = self::contentTypes['restPluginSetsSetIdPluginsPluginIdInstallGitPluginPost'][0]
    ): PromiseInterface
    {
        $returnType = 'object';
        $request = $this->restPluginSetsSetIdPluginsPluginIdInstallGitPluginPostRequest($set_id, $plugin_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginSetsSetIdPluginsPluginIdInstallGitPluginPost'
     *
     * @param  int $set_id (required)
     * @param  int $plugin_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdPluginsPluginIdInstallGitPluginPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPluginSetsSetIdPluginsPluginIdInstallGitPluginPostRequest(
        $set_id,
        $plugin_id,
        string $contentType = self::contentTypes['restPluginSetsSetIdPluginsPluginIdInstallGitPluginPost'][0]
    ): Request
    {

        // verify the required parameter 'set_id' is set
        if ($set_id === null || (is_array($set_id) && count($set_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $set_id when calling restPluginSetsSetIdPluginsPluginIdInstallGitPluginPost'
            );
        }

        // verify the required parameter 'plugin_id' is set
        if ($plugin_id === null || (is_array($plugin_id) && count($plugin_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $plugin_id when calling restPluginSetsSetIdPluginsPluginIdInstallGitPluginPost'
            );
        }


        $resourcePath = '/rest/plugin_sets/{setId}/plugins/{pluginId}/install_git_plugin';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'setId' . '}',
                ObjectSerializer::toPathValue($set_id),
                $resourcePath
            );
        }
        // path params
        if ($plugin_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pluginId' . '}',
                ObjectSerializer::toPathValue($plugin_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPluginSetsSetIdPluginsPluginIdPost
     *
     * Add a plugin to a set
     *
     * @param  int $set_id set_id (required)
     * @param  int $plugin_id plugin_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdPluginsPluginIdPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object
     */
    public function restPluginSetsSetIdPluginsPluginIdPost(
        int $set_id,
        int $plugin_id,
        string $contentType = self::contentTypes['restPluginSetsSetIdPluginsPluginIdPost'][0]
    ): object
    {
        list($response) = $this->restPluginSetsSetIdPluginsPluginIdPostWithHttpInfo($set_id, $plugin_id, $contentType);
        return $response;
    }

    /**
     * Operation restPluginSetsSetIdPluginsPluginIdPostWithHttpInfo
     *
     * Add a plugin to a set
     *
     * @param  int $set_id (required)
     * @param  int $plugin_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdPluginsPluginIdPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginSetsSetIdPluginsPluginIdPostWithHttpInfo(
        int $set_id,
        int $plugin_id,
        string $contentType = self::contentTypes['restPluginSetsSetIdPluginsPluginIdPost'][0]
    ): array
    {
        $request = $this->restPluginSetsSetIdPluginsPluginIdPostRequest($set_id, $plugin_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginSetsSetIdPluginsPluginIdPostAsync
     *
     * Add a plugin to a set
     *
     * @param  int $set_id (required)
     * @param  int $plugin_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdPluginsPluginIdPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginSetsSetIdPluginsPluginIdPostAsync(
        int $set_id,
        int $plugin_id,
        string $contentType = self::contentTypes['restPluginSetsSetIdPluginsPluginIdPost'][0]
    ): PromiseInterface
    {
        return $this->restPluginSetsSetIdPluginsPluginIdPostAsyncWithHttpInfo($set_id, $plugin_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginSetsSetIdPluginsPluginIdPostAsyncWithHttpInfo
     *
     * Add a plugin to a set
     *
     * @param  int $set_id (required)
     * @param  int $plugin_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdPluginsPluginIdPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginSetsSetIdPluginsPluginIdPostAsyncWithHttpInfo(
        $set_id,
        $plugin_id,
        string $contentType = self::contentTypes['restPluginSetsSetIdPluginsPluginIdPost'][0]
    ): PromiseInterface
    {
        $returnType = 'object';
        $request = $this->restPluginSetsSetIdPluginsPluginIdPostRequest($set_id, $plugin_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginSetsSetIdPluginsPluginIdPost'
     *
     * @param  int $set_id (required)
     * @param  int $plugin_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdPluginsPluginIdPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPluginSetsSetIdPluginsPluginIdPostRequest(
        $set_id,
        $plugin_id,
        string $contentType = self::contentTypes['restPluginSetsSetIdPluginsPluginIdPost'][0]
    ): Request
    {

        // verify the required parameter 'set_id' is set
        if ($set_id === null || (is_array($set_id) && count($set_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $set_id when calling restPluginSetsSetIdPluginsPluginIdPost'
            );
        }

        // verify the required parameter 'plugin_id' is set
        if ($plugin_id === null || (is_array($plugin_id) && count($plugin_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $plugin_id when calling restPluginSetsSetIdPluginsPluginIdPost'
            );
        }


        $resourcePath = '/rest/plugin_sets/{setId}/plugins/{pluginId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'setId' . '}',
                ObjectSerializer::toPathValue($set_id),
                $resourcePath
            );
        }
        // path params
        if ($plugin_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pluginId' . '}',
                ObjectSerializer::toPathValue($plugin_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPluginSetsSetIdPluginsPluginIdPut
     *
     * Change a plugin&#39;s &#39;active&#39; status for a set.
     *
     * @param  int $set_id set_id (required)
     * @param  int $plugin_id plugin_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdPluginsPluginIdPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object
     */
    public function restPluginSetsSetIdPluginsPluginIdPut(
        int $set_id,
        int $plugin_id,
        string $contentType = self::contentTypes['restPluginSetsSetIdPluginsPluginIdPut'][0]
    ): object
    {
        list($response) = $this->restPluginSetsSetIdPluginsPluginIdPutWithHttpInfo($set_id, $plugin_id, $contentType);
        return $response;
    }

    /**
     * Operation restPluginSetsSetIdPluginsPluginIdPutWithHttpInfo
     *
     * Change a plugin&#39;s &#39;active&#39; status for a set.
     *
     * @param  int $set_id (required)
     * @param  int $plugin_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdPluginsPluginIdPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginSetsSetIdPluginsPluginIdPutWithHttpInfo(
        int $set_id,
        int $plugin_id,
        string $contentType = self::contentTypes['restPluginSetsSetIdPluginsPluginIdPut'][0]
    ): array
    {
        $request = $this->restPluginSetsSetIdPluginsPluginIdPutRequest($set_id, $plugin_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginSetsSetIdPluginsPluginIdPutAsync
     *
     * Change a plugin&#39;s &#39;active&#39; status for a set.
     *
     * @param  int $set_id (required)
     * @param  int $plugin_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdPluginsPluginIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginSetsSetIdPluginsPluginIdPutAsync(
        int $set_id,
        int $plugin_id,
        string $contentType = self::contentTypes['restPluginSetsSetIdPluginsPluginIdPut'][0]
    ): PromiseInterface
    {
        return $this->restPluginSetsSetIdPluginsPluginIdPutAsyncWithHttpInfo($set_id, $plugin_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginSetsSetIdPluginsPluginIdPutAsyncWithHttpInfo
     *
     * Change a plugin&#39;s &#39;active&#39; status for a set.
     *
     * @param  int $set_id (required)
     * @param  int $plugin_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdPluginsPluginIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginSetsSetIdPluginsPluginIdPutAsyncWithHttpInfo(
        $set_id,
        $plugin_id,
        string $contentType = self::contentTypes['restPluginSetsSetIdPluginsPluginIdPut'][0]
    ): PromiseInterface
    {
        $returnType = 'object';
        $request = $this->restPluginSetsSetIdPluginsPluginIdPutRequest($set_id, $plugin_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginSetsSetIdPluginsPluginIdPut'
     *
     * @param  int $set_id (required)
     * @param  int $plugin_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdPluginsPluginIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPluginSetsSetIdPluginsPluginIdPutRequest(
        $set_id,
        $plugin_id,
        string $contentType = self::contentTypes['restPluginSetsSetIdPluginsPluginIdPut'][0]
    ): Request
    {

        // verify the required parameter 'set_id' is set
        if ($set_id === null || (is_array($set_id) && count($set_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $set_id when calling restPluginSetsSetIdPluginsPluginIdPut'
            );
        }

        // verify the required parameter 'plugin_id' is set
        if ($plugin_id === null || (is_array($plugin_id) && count($plugin_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $plugin_id when calling restPluginSetsSetIdPluginsPluginIdPut'
            );
        }


        $resourcePath = '/rest/plugin_sets/{setId}/plugins/{pluginId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'setId' . '}',
                ObjectSerializer::toPathValue($set_id),
                $resourcePath
            );
        }
        // path params
        if ($plugin_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pluginId' . '}',
                ObjectSerializer::toPathValue($plugin_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPluginSetsSetIdPluginsPluginIdSetPositionPost
     *
     * Set a plugin&#39;s position in a set
     *
     * @param  int $set_id set_id (required)
     * @param  int $plugin_id plugin_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdPluginsPluginIdSetPositionPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\PluginSetEntry
     */
    public function restPluginSetsSetIdPluginsPluginIdSetPositionPost(
        int $set_id,
        int $plugin_id,
        string $contentType = self::contentTypes['restPluginSetsSetIdPluginsPluginIdSetPositionPost'][0]
    ): \ck\Model\PluginSetEntry
    {
        list($response) = $this->restPluginSetsSetIdPluginsPluginIdSetPositionPostWithHttpInfo($set_id, $plugin_id, $contentType);
        return $response;
    }

    /**
     * Operation restPluginSetsSetIdPluginsPluginIdSetPositionPostWithHttpInfo
     *
     * Set a plugin&#39;s position in a set
     *
     * @param  int $set_id (required)
     * @param  int $plugin_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdPluginsPluginIdSetPositionPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\PluginSetEntry, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginSetsSetIdPluginsPluginIdSetPositionPostWithHttpInfo(
        int $set_id,
        int $plugin_id,
        string $contentType = self::contentTypes['restPluginSetsSetIdPluginsPluginIdSetPositionPost'][0]
    ): array
    {
        $request = $this->restPluginSetsSetIdPluginsPluginIdSetPositionPostRequest($set_id, $plugin_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\PluginSetEntry' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\PluginSetEntry' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\PluginSetEntry', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\PluginSetEntry';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\PluginSetEntry',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginSetsSetIdPluginsPluginIdSetPositionPostAsync
     *
     * Set a plugin&#39;s position in a set
     *
     * @param  int $set_id (required)
     * @param  int $plugin_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdPluginsPluginIdSetPositionPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginSetsSetIdPluginsPluginIdSetPositionPostAsync(
        int $set_id,
        int $plugin_id,
        string $contentType = self::contentTypes['restPluginSetsSetIdPluginsPluginIdSetPositionPost'][0]
    ): PromiseInterface
    {
        return $this->restPluginSetsSetIdPluginsPluginIdSetPositionPostAsyncWithHttpInfo($set_id, $plugin_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginSetsSetIdPluginsPluginIdSetPositionPostAsyncWithHttpInfo
     *
     * Set a plugin&#39;s position in a set
     *
     * @param  int $set_id (required)
     * @param  int $plugin_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdPluginsPluginIdSetPositionPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginSetsSetIdPluginsPluginIdSetPositionPostAsyncWithHttpInfo(
        $set_id,
        $plugin_id,
        string $contentType = self::contentTypes['restPluginSetsSetIdPluginsPluginIdSetPositionPost'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\PluginSetEntry';
        $request = $this->restPluginSetsSetIdPluginsPluginIdSetPositionPostRequest($set_id, $plugin_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginSetsSetIdPluginsPluginIdSetPositionPost'
     *
     * @param  int $set_id (required)
     * @param  int $plugin_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdPluginsPluginIdSetPositionPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPluginSetsSetIdPluginsPluginIdSetPositionPostRequest(
        $set_id,
        $plugin_id,
        string $contentType = self::contentTypes['restPluginSetsSetIdPluginsPluginIdSetPositionPost'][0]
    ): Request
    {

        // verify the required parameter 'set_id' is set
        if ($set_id === null || (is_array($set_id) && count($set_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $set_id when calling restPluginSetsSetIdPluginsPluginIdSetPositionPost'
            );
        }

        // verify the required parameter 'plugin_id' is set
        if ($plugin_id === null || (is_array($plugin_id) && count($plugin_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $plugin_id when calling restPluginSetsSetIdPluginsPluginIdSetPositionPost'
            );
        }


        $resourcePath = '/rest/plugin_sets/{setId}/plugins/{pluginId}/setPosition';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'setId' . '}',
                ObjectSerializer::toPathValue($set_id),
                $resourcePath
            );
        }
        // path params
        if ($plugin_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pluginId' . '}',
                ObjectSerializer::toPathValue($plugin_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPluginSetsSetIdPluginsSearchGet
     *
     * Search plugins
     *
     * @param  int $set_id set_id (required)
     * @param  int|null $plugin_set_id Search for plugins from a specific plugin set. (optional)
     * @param  string|null $name Search for plugins with a specific name. (optional)
     * @param  bool|null $in_stage Search for plugins that are in stage. (optional)
     * @param  bool|null $in_productive Search for plugins that are in productive. (optional)
     * @param  string|null $type Search for plugins of a given type. Available types are &#39;Template&#39; and &#39;Export&#39;. (optional)
     * @param  bool|null $check_requirements Add the requirements to the response. This will add the &#39;notInstalledRequirements&#39;,      * &#39;notActiveStageRequirements&#39; and &#39;notActiveProductiveRequirements&#39; fields to the returned plugin model(s). (optional)
     * @param  bool|null $check_update Check for updates. If an update for a plugin is available, this will add the      * &#39;updateInformation&#39; field to the returned plugin model(s). (optional)
     * @param  string|null $source Search for plugins from a specific source. Available sources are &#39;marketplace&#39;, &#39;git&#39;, and      * &#39;local&#39;. (optional)
     * @param  bool|null $installed Only search for installed / not installed plugins. (optional)
     * @param  bool|null $active Only search for plugins that are active / inactive. (optional)
     * @param  int|null $items_per_page How many plugins to include per page of the search result. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdPluginsSearchGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\RestPluginSetsSetIdPluginsSearchGet200Response
     */
    public function restPluginSetsSetIdPluginsSearchGet(
        int $set_id,
        ?int $plugin_set_id = null,
        ?string $name = null,
        ?bool $in_stage = null,
        ?bool $in_productive = null,
        ?string $type = null,
        ?bool $check_requirements = null,
        ?bool $check_update = null,
        ?string $source = null,
        ?bool $installed = null,
        ?bool $active = null,
        ?int $items_per_page = null,
        string $contentType = self::contentTypes['restPluginSetsSetIdPluginsSearchGet'][0]
    ): \ck\Model\RestPluginSetsSetIdPluginsSearchGet200Response
    {
        list($response) = $this->restPluginSetsSetIdPluginsSearchGetWithHttpInfo($set_id, $plugin_set_id, $name, $in_stage, $in_productive, $type, $check_requirements, $check_update, $source, $installed, $active, $items_per_page, $contentType);
        return $response;
    }

    /**
     * Operation restPluginSetsSetIdPluginsSearchGetWithHttpInfo
     *
     * Search plugins
     *
     * @param  int $set_id (required)
     * @param  int|null $plugin_set_id Search for plugins from a specific plugin set. (optional)
     * @param  string|null $name Search for plugins with a specific name. (optional)
     * @param  bool|null $in_stage Search for plugins that are in stage. (optional)
     * @param  bool|null $in_productive Search for plugins that are in productive. (optional)
     * @param  string|null $type Search for plugins of a given type. Available types are &#39;Template&#39; and &#39;Export&#39;. (optional)
     * @param  bool|null $check_requirements Add the requirements to the response. This will add the &#39;notInstalledRequirements&#39;,      * &#39;notActiveStageRequirements&#39; and &#39;notActiveProductiveRequirements&#39; fields to the returned plugin model(s). (optional)
     * @param  bool|null $check_update Check for updates. If an update for a plugin is available, this will add the      * &#39;updateInformation&#39; field to the returned plugin model(s). (optional)
     * @param  string|null $source Search for plugins from a specific source. Available sources are &#39;marketplace&#39;, &#39;git&#39;, and      * &#39;local&#39;. (optional)
     * @param  bool|null $installed Only search for installed / not installed plugins. (optional)
     * @param  bool|null $active Only search for plugins that are active / inactive. (optional)
     * @param  int|null $items_per_page How many plugins to include per page of the search result. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdPluginsSearchGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\RestPluginSetsSetIdPluginsSearchGet200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginSetsSetIdPluginsSearchGetWithHttpInfo(
        int $set_id,
        ?int $plugin_set_id = null,
        ?string $name = null,
        ?bool $in_stage = null,
        ?bool $in_productive = null,
        ?string $type = null,
        ?bool $check_requirements = null,
        ?bool $check_update = null,
        ?string $source = null,
        ?bool $installed = null,
        ?bool $active = null,
        ?int $items_per_page = null,
        string $contentType = self::contentTypes['restPluginSetsSetIdPluginsSearchGet'][0]
    ): array
    {
        $request = $this->restPluginSetsSetIdPluginsSearchGetRequest($set_id, $plugin_set_id, $name, $in_stage, $in_productive, $type, $check_requirements, $check_update, $source, $installed, $active, $items_per_page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\RestPluginSetsSetIdPluginsSearchGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\RestPluginSetsSetIdPluginsSearchGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\RestPluginSetsSetIdPluginsSearchGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\RestPluginSetsSetIdPluginsSearchGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\RestPluginSetsSetIdPluginsSearchGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginSetsSetIdPluginsSearchGetAsync
     *
     * Search plugins
     *
     * @param  int $set_id (required)
     * @param  int|null $plugin_set_id Search for plugins from a specific plugin set. (optional)
     * @param  string|null $name Search for plugins with a specific name. (optional)
     * @param  bool|null $in_stage Search for plugins that are in stage. (optional)
     * @param  bool|null $in_productive Search for plugins that are in productive. (optional)
     * @param  string|null $type Search for plugins of a given type. Available types are &#39;Template&#39; and &#39;Export&#39;. (optional)
     * @param  bool|null $check_requirements Add the requirements to the response. This will add the &#39;notInstalledRequirements&#39;,      * &#39;notActiveStageRequirements&#39; and &#39;notActiveProductiveRequirements&#39; fields to the returned plugin model(s). (optional)
     * @param  bool|null $check_update Check for updates. If an update for a plugin is available, this will add the      * &#39;updateInformation&#39; field to the returned plugin model(s). (optional)
     * @param  string|null $source Search for plugins from a specific source. Available sources are &#39;marketplace&#39;, &#39;git&#39;, and      * &#39;local&#39;. (optional)
     * @param  bool|null $installed Only search for installed / not installed plugins. (optional)
     * @param  bool|null $active Only search for plugins that are active / inactive. (optional)
     * @param  int|null $items_per_page How many plugins to include per page of the search result. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdPluginsSearchGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginSetsSetIdPluginsSearchGetAsync(
        int $set_id,
        ?int $plugin_set_id = null,
        ?string $name = null,
        ?bool $in_stage = null,
        ?bool $in_productive = null,
        ?string $type = null,
        ?bool $check_requirements = null,
        ?bool $check_update = null,
        ?string $source = null,
        ?bool $installed = null,
        ?bool $active = null,
        ?int $items_per_page = null,
        string $contentType = self::contentTypes['restPluginSetsSetIdPluginsSearchGet'][0]
    ): PromiseInterface
    {
        return $this->restPluginSetsSetIdPluginsSearchGetAsyncWithHttpInfo($set_id, $plugin_set_id, $name, $in_stage, $in_productive, $type, $check_requirements, $check_update, $source, $installed, $active, $items_per_page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginSetsSetIdPluginsSearchGetAsyncWithHttpInfo
     *
     * Search plugins
     *
     * @param  int $set_id (required)
     * @param  int|null $plugin_set_id Search for plugins from a specific plugin set. (optional)
     * @param  string|null $name Search for plugins with a specific name. (optional)
     * @param  bool|null $in_stage Search for plugins that are in stage. (optional)
     * @param  bool|null $in_productive Search for plugins that are in productive. (optional)
     * @param  string|null $type Search for plugins of a given type. Available types are &#39;Template&#39; and &#39;Export&#39;. (optional)
     * @param  bool|null $check_requirements Add the requirements to the response. This will add the &#39;notInstalledRequirements&#39;,      * &#39;notActiveStageRequirements&#39; and &#39;notActiveProductiveRequirements&#39; fields to the returned plugin model(s). (optional)
     * @param  bool|null $check_update Check for updates. If an update for a plugin is available, this will add the      * &#39;updateInformation&#39; field to the returned plugin model(s). (optional)
     * @param  string|null $source Search for plugins from a specific source. Available sources are &#39;marketplace&#39;, &#39;git&#39;, and      * &#39;local&#39;. (optional)
     * @param  bool|null $installed Only search for installed / not installed plugins. (optional)
     * @param  bool|null $active Only search for plugins that are active / inactive. (optional)
     * @param  int|null $items_per_page How many plugins to include per page of the search result. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdPluginsSearchGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginSetsSetIdPluginsSearchGetAsyncWithHttpInfo(
        $set_id,
        $plugin_set_id = null,
        $name = null,
        $in_stage = null,
        $in_productive = null,
        $type = null,
        $check_requirements = null,
        $check_update = null,
        $source = null,
        $installed = null,
        $active = null,
        $items_per_page = null,
        string $contentType = self::contentTypes['restPluginSetsSetIdPluginsSearchGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\RestPluginSetsSetIdPluginsSearchGet200Response';
        $request = $this->restPluginSetsSetIdPluginsSearchGetRequest($set_id, $plugin_set_id, $name, $in_stage, $in_productive, $type, $check_requirements, $check_update, $source, $installed, $active, $items_per_page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginSetsSetIdPluginsSearchGet'
     *
     * @param  int $set_id (required)
     * @param  int|null $plugin_set_id Search for plugins from a specific plugin set. (optional)
     * @param  string|null $name Search for plugins with a specific name. (optional)
     * @param  bool|null $in_stage Search for plugins that are in stage. (optional)
     * @param  bool|null $in_productive Search for plugins that are in productive. (optional)
     * @param  string|null $type Search for plugins of a given type. Available types are &#39;Template&#39; and &#39;Export&#39;. (optional)
     * @param  bool|null $check_requirements Add the requirements to the response. This will add the &#39;notInstalledRequirements&#39;,      * &#39;notActiveStageRequirements&#39; and &#39;notActiveProductiveRequirements&#39; fields to the returned plugin model(s). (optional)
     * @param  bool|null $check_update Check for updates. If an update for a plugin is available, this will add the      * &#39;updateInformation&#39; field to the returned plugin model(s). (optional)
     * @param  string|null $source Search for plugins from a specific source. Available sources are &#39;marketplace&#39;, &#39;git&#39;, and      * &#39;local&#39;. (optional)
     * @param  bool|null $installed Only search for installed / not installed plugins. (optional)
     * @param  bool|null $active Only search for plugins that are active / inactive. (optional)
     * @param  int|null $items_per_page How many plugins to include per page of the search result. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdPluginsSearchGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPluginSetsSetIdPluginsSearchGetRequest(
        $set_id,
        $plugin_set_id = null,
        $name = null,
        $in_stage = null,
        $in_productive = null,
        $type = null,
        $check_requirements = null,
        $check_update = null,
        $source = null,
        $installed = null,
        $active = null,
        $items_per_page = null,
        string $contentType = self::contentTypes['restPluginSetsSetIdPluginsSearchGet'][0]
    ): Request
    {

        // verify the required parameter 'set_id' is set
        if ($set_id === null || (is_array($set_id) && count($set_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $set_id when calling restPluginSetsSetIdPluginsSearchGet'
            );
        }













        $resourcePath = '/rest/plugin_sets/{setId}/plugins/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $plugin_set_id,
            'pluginSetId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $in_stage,
            'in-stage', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $in_productive,
            'in-productive', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'type', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $check_requirements,
            'checkRequirements', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $check_update,
            'checkUpdate', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $source,
            'source', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $installed,
            'installed', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $active,
            'active', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $items_per_page,
            'itemsPerPage', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'setId' . '}',
                ObjectSerializer::toPathValue($set_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPluginSetsSetIdPut
     *
     * Update a set
     *
     * @param  int $set_id set_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object
     */
    public function restPluginSetsSetIdPut(
        int $set_id,
        string $contentType = self::contentTypes['restPluginSetsSetIdPut'][0]
    ): object
    {
        list($response) = $this->restPluginSetsSetIdPutWithHttpInfo($set_id, $contentType);
        return $response;
    }

    /**
     * Operation restPluginSetsSetIdPutWithHttpInfo
     *
     * Update a set
     *
     * @param  int $set_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginSetsSetIdPutWithHttpInfo(
        int $set_id,
        string $contentType = self::contentTypes['restPluginSetsSetIdPut'][0]
    ): array
    {
        $request = $this->restPluginSetsSetIdPutRequest($set_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginSetsSetIdPutAsync
     *
     * Update a set
     *
     * @param  int $set_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginSetsSetIdPutAsync(
        int $set_id,
        string $contentType = self::contentTypes['restPluginSetsSetIdPut'][0]
    ): PromiseInterface
    {
        return $this->restPluginSetsSetIdPutAsyncWithHttpInfo($set_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginSetsSetIdPutAsyncWithHttpInfo
     *
     * Update a set
     *
     * @param  int $set_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginSetsSetIdPutAsyncWithHttpInfo(
        $set_id,
        string $contentType = self::contentTypes['restPluginSetsSetIdPut'][0]
    ): PromiseInterface
    {
        $returnType = 'object';
        $request = $this->restPluginSetsSetIdPutRequest($set_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginSetsSetIdPut'
     *
     * @param  int $set_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPluginSetsSetIdPutRequest(
        $set_id,
        string $contentType = self::contentTypes['restPluginSetsSetIdPut'][0]
    ): Request
    {

        // verify the required parameter 'set_id' is set
        if ($set_id === null || (is_array($set_id) && count($set_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $set_id when calling restPluginSetsSetIdPut'
            );
        }


        $resourcePath = '/rest/plugin_sets/{setId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'setId' . '}',
                ObjectSerializer::toPathValue($set_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPluginSetsSetIdSetEntriesGet
     *
     * List all SetEntries of Set
     *
     * @param  int $set_id set_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdSetEntriesGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\PluginSetEntry[]
     */
    public function restPluginSetsSetIdSetEntriesGet(
        int $set_id,
        string $contentType = self::contentTypes['restPluginSetsSetIdSetEntriesGet'][0]
    ): array
    {
        list($response) = $this->restPluginSetsSetIdSetEntriesGetWithHttpInfo($set_id, $contentType);
        return $response;
    }

    /**
     * Operation restPluginSetsSetIdSetEntriesGetWithHttpInfo
     *
     * List all SetEntries of Set
     *
     * @param  int $set_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdSetEntriesGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\PluginSetEntry[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginSetsSetIdSetEntriesGetWithHttpInfo(
        int $set_id,
        string $contentType = self::contentTypes['restPluginSetsSetIdSetEntriesGet'][0]
    ): array
    {
        $request = $this->restPluginSetsSetIdSetEntriesGetRequest($set_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\PluginSetEntry[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\PluginSetEntry[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\PluginSetEntry[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\PluginSetEntry[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\PluginSetEntry[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginSetsSetIdSetEntriesGetAsync
     *
     * List all SetEntries of Set
     *
     * @param  int $set_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdSetEntriesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginSetsSetIdSetEntriesGetAsync(
        int $set_id,
        string $contentType = self::contentTypes['restPluginSetsSetIdSetEntriesGet'][0]
    ): PromiseInterface
    {
        return $this->restPluginSetsSetIdSetEntriesGetAsyncWithHttpInfo($set_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginSetsSetIdSetEntriesGetAsyncWithHttpInfo
     *
     * List all SetEntries of Set
     *
     * @param  int $set_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdSetEntriesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginSetsSetIdSetEntriesGetAsyncWithHttpInfo(
        $set_id,
        string $contentType = self::contentTypes['restPluginSetsSetIdSetEntriesGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\PluginSetEntry[]';
        $request = $this->restPluginSetsSetIdSetEntriesGetRequest($set_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginSetsSetIdSetEntriesGet'
     *
     * @param  int $set_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginSetsSetIdSetEntriesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPluginSetsSetIdSetEntriesGetRequest(
        $set_id,
        string $contentType = self::contentTypes['restPluginSetsSetIdSetEntriesGet'][0]
    ): Request
    {

        // verify the required parameter 'set_id' is set
        if ($set_id === null || (is_array($set_id) && count($set_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $set_id when calling restPluginSetsSetIdSetEntriesGet'
            );
        }


        $resourcePath = '/rest/plugin_sets/{setId}/set_entries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'setId' . '}',
                ObjectSerializer::toPathValue($set_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPluginsPluginSetsPluginSetIdPluginsGet
     *
     * List all Plugins of Set
     *
     * @param  int $plugin_set_id plugin_set_id (required)
     * @param  bool|null $include_stage Include staged plugins in the result. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginsPluginSetsPluginSetIdPluginsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object
     */
    public function restPluginsPluginSetsPluginSetIdPluginsGet(
        int $plugin_set_id,
        ?bool $include_stage = null,
        string $contentType = self::contentTypes['restPluginsPluginSetsPluginSetIdPluginsGet'][0]
    ): object
    {
        list($response) = $this->restPluginsPluginSetsPluginSetIdPluginsGetWithHttpInfo($plugin_set_id, $include_stage, $contentType);
        return $response;
    }

    /**
     * Operation restPluginsPluginSetsPluginSetIdPluginsGetWithHttpInfo
     *
     * List all Plugins of Set
     *
     * @param  int $plugin_set_id (required)
     * @param  bool|null $include_stage Include staged plugins in the result. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginsPluginSetsPluginSetIdPluginsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginsPluginSetsPluginSetIdPluginsGetWithHttpInfo(
        int $plugin_set_id,
        ?bool $include_stage = null,
        string $contentType = self::contentTypes['restPluginsPluginSetsPluginSetIdPluginsGet'][0]
    ): array
    {
        $request = $this->restPluginsPluginSetsPluginSetIdPluginsGetRequest($plugin_set_id, $include_stage, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginsPluginSetsPluginSetIdPluginsGetAsync
     *
     * List all Plugins of Set
     *
     * @param  int $plugin_set_id (required)
     * @param  bool|null $include_stage Include staged plugins in the result. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginsPluginSetsPluginSetIdPluginsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginsPluginSetsPluginSetIdPluginsGetAsync(
        int $plugin_set_id,
        ?bool $include_stage = null,
        string $contentType = self::contentTypes['restPluginsPluginSetsPluginSetIdPluginsGet'][0]
    ): PromiseInterface
    {
        return $this->restPluginsPluginSetsPluginSetIdPluginsGetAsyncWithHttpInfo($plugin_set_id, $include_stage, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginsPluginSetsPluginSetIdPluginsGetAsyncWithHttpInfo
     *
     * List all Plugins of Set
     *
     * @param  int $plugin_set_id (required)
     * @param  bool|null $include_stage Include staged plugins in the result. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginsPluginSetsPluginSetIdPluginsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginsPluginSetsPluginSetIdPluginsGetAsyncWithHttpInfo(
        $plugin_set_id,
        $include_stage = null,
        string $contentType = self::contentTypes['restPluginsPluginSetsPluginSetIdPluginsGet'][0]
    ): PromiseInterface
    {
        $returnType = 'object';
        $request = $this->restPluginsPluginSetsPluginSetIdPluginsGetRequest($plugin_set_id, $include_stage, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginsPluginSetsPluginSetIdPluginsGet'
     *
     * @param  int $plugin_set_id (required)
     * @param  bool|null $include_stage Include staged plugins in the result. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginsPluginSetsPluginSetIdPluginsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPluginsPluginSetsPluginSetIdPluginsGetRequest(
        $plugin_set_id,
        $include_stage = null,
        string $contentType = self::contentTypes['restPluginsPluginSetsPluginSetIdPluginsGet'][0]
    ): Request
    {

        // verify the required parameter 'plugin_set_id' is set
        if ($plugin_set_id === null || (is_array($plugin_set_id) && count($plugin_set_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $plugin_set_id when calling restPluginsPluginSetsPluginSetIdPluginsGet'
            );
        }



        $resourcePath = '/rest/plugins/plugin_sets/{pluginSetId}/plugins';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_stage,
            '&#39;includeStage', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($plugin_set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pluginSetId' . '}',
                ObjectSerializer::toPathValue($plugin_set_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
