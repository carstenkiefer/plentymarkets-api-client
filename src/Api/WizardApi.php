<?php
/**
 * WizardApi
 * PHP version 8.1
 *
 * @package  ck/plenty-client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ck/plenty-client\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use ck/plenty-client\ApiException;
use ck/plenty-client\Configuration;
use ck/plenty-client\HeaderSelector;
use ck/plenty-client\ObjectSerializer;

/**
 * WizardApi Class Doc Comment
 *
 * @package  ck/plenty-client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class WizardApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'restWizardsFoldersGet' => [
            'application/json',
        ],
        'restWizardsGet' => [
            'application/json',
        ],
        'restWizardsWizardKeyActionsActionKeyPost' => [
            'application/json',
        ],
        'restWizardsWizardKeyDataDelete' => [
            'application/json',
        ],
        'restWizardsWizardKeyDataGet' => [
            'application/json',
        ],
        'restWizardsWizardKeyDataOptionIdDelete' => [
            'application/json',
        ],
        'restWizardsWizardKeyDataOptionIdGet' => [
            'application/json',
        ],
        'restWizardsWizardKeyDataOptionIdPost' => [
            'application/json',
        ],
        'restWizardsWizardKeyDataOptionIdPut' => [
            'application/json',
        ],
        'restWizardsWizardKeyDataPost' => [
            'application/json',
        ],
        'restWizardsWizardKeyDataPut' => [
            'application/json',
        ],
        'restWizardsWizardKeyFormfieldsFormfieldKeyPost' => [
            'application/json',
        ],
        'restWizardsWizardKeyGet' => [
            'application/json',
        ],
        'restWizardsWizardKeySettingsOptionIdPost' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation restWizardsFoldersGet
     *
     * List wizard folders
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsFoldersGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object[]
     */
    public function restWizardsFoldersGet(
        string $contentType = self::contentTypes['restWizardsFoldersGet'][0]
    ): array
    {
        list($response) = $this->restWizardsFoldersGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation restWizardsFoldersGetWithHttpInfo
     *
     * List wizard folders
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsFoldersGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restWizardsFoldersGetWithHttpInfo(
        string $contentType = self::contentTypes['restWizardsFoldersGet'][0]
    ): array
    {
        $request = $this->restWizardsFoldersGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restWizardsFoldersGetAsync
     *
     * List wizard folders
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsFoldersGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restWizardsFoldersGetAsync(
        string $contentType = self::contentTypes['restWizardsFoldersGet'][0]
    ): PromiseInterface
    {
        return $this->restWizardsFoldersGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restWizardsFoldersGetAsyncWithHttpInfo
     *
     * List wizard folders
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsFoldersGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restWizardsFoldersGetAsyncWithHttpInfo(
        string $contentType = self::contentTypes['restWizardsFoldersGet'][0]
    ): PromiseInterface
    {
        $returnType = 'object[]';
        $request = $this->restWizardsFoldersGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restWizardsFoldersGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsFoldersGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restWizardsFoldersGetRequest(
        string $contentType = self::contentTypes['restWizardsFoldersGet'][0]
    ): Request
    {


        $resourcePath = '/rest/wizards/folders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restWizardsGet
     *
     * List wizards
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object[]
     */
    public function restWizardsGet(
        string $contentType = self::contentTypes['restWizardsGet'][0]
    ): array
    {
        list($response) = $this->restWizardsGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation restWizardsGetWithHttpInfo
     *
     * List wizards
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restWizardsGetWithHttpInfo(
        string $contentType = self::contentTypes['restWizardsGet'][0]
    ): array
    {
        $request = $this->restWizardsGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restWizardsGetAsync
     *
     * List wizards
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restWizardsGetAsync(
        string $contentType = self::contentTypes['restWizardsGet'][0]
    ): PromiseInterface
    {
        return $this->restWizardsGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restWizardsGetAsyncWithHttpInfo
     *
     * List wizards
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restWizardsGetAsyncWithHttpInfo(
        string $contentType = self::contentTypes['restWizardsGet'][0]
    ): PromiseInterface
    {
        $returnType = 'object[]';
        $request = $this->restWizardsGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restWizardsGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restWizardsGetRequest(
        string $contentType = self::contentTypes['restWizardsGet'][0]
    ): Request
    {


        $resourcePath = '/rest/wizards';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restWizardsWizardKeyActionsActionKeyPost
     *
     * Perform an action of a registered actionHandlerClass of a given wizard
     *
     * @param  int $wizard_key wizard_key (required)
     * @param  int $action_key action_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeyActionsActionKeyPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object
     */
    public function restWizardsWizardKeyActionsActionKeyPost(
        int $wizard_key,
        int $action_key,
        string $contentType = self::contentTypes['restWizardsWizardKeyActionsActionKeyPost'][0]
    ): object
    {
        list($response) = $this->restWizardsWizardKeyActionsActionKeyPostWithHttpInfo($wizard_key, $action_key, $contentType);
        return $response;
    }

    /**
     * Operation restWizardsWizardKeyActionsActionKeyPostWithHttpInfo
     *
     * Perform an action of a registered actionHandlerClass of a given wizard
     *
     * @param  int $wizard_key (required)
     * @param  int $action_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeyActionsActionKeyPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restWizardsWizardKeyActionsActionKeyPostWithHttpInfo(
        int $wizard_key,
        int $action_key,
        string $contentType = self::contentTypes['restWizardsWizardKeyActionsActionKeyPost'][0]
    ): array
    {
        $request = $this->restWizardsWizardKeyActionsActionKeyPostRequest($wizard_key, $action_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restWizardsWizardKeyActionsActionKeyPostAsync
     *
     * Perform an action of a registered actionHandlerClass of a given wizard
     *
     * @param  int $wizard_key (required)
     * @param  int $action_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeyActionsActionKeyPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restWizardsWizardKeyActionsActionKeyPostAsync(
        int $wizard_key,
        int $action_key,
        string $contentType = self::contentTypes['restWizardsWizardKeyActionsActionKeyPost'][0]
    ): PromiseInterface
    {
        return $this->restWizardsWizardKeyActionsActionKeyPostAsyncWithHttpInfo($wizard_key, $action_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restWizardsWizardKeyActionsActionKeyPostAsyncWithHttpInfo
     *
     * Perform an action of a registered actionHandlerClass of a given wizard
     *
     * @param  int $wizard_key (required)
     * @param  int $action_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeyActionsActionKeyPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restWizardsWizardKeyActionsActionKeyPostAsyncWithHttpInfo(
        $wizard_key,
        $action_key,
        string $contentType = self::contentTypes['restWizardsWizardKeyActionsActionKeyPost'][0]
    ): PromiseInterface
    {
        $returnType = 'object';
        $request = $this->restWizardsWizardKeyActionsActionKeyPostRequest($wizard_key, $action_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restWizardsWizardKeyActionsActionKeyPost'
     *
     * @param  int $wizard_key (required)
     * @param  int $action_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeyActionsActionKeyPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restWizardsWizardKeyActionsActionKeyPostRequest(
        $wizard_key,
        $action_key,
        string $contentType = self::contentTypes['restWizardsWizardKeyActionsActionKeyPost'][0]
    ): Request
    {

        // verify the required parameter 'wizard_key' is set
        if ($wizard_key === null || (is_array($wizard_key) && count($wizard_key) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $wizard_key when calling restWizardsWizardKeyActionsActionKeyPost'
            );
        }

        // verify the required parameter 'action_key' is set
        if ($action_key === null || (is_array($action_key) && count($action_key) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $action_key when calling restWizardsWizardKeyActionsActionKeyPost'
            );
        }


        $resourcePath = '/rest/wizards/{wizardKey}/actions/{actionKey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($wizard_key !== null) {
            $resourcePath = str_replace(
                '{' . 'wizardKey' . '}',
                ObjectSerializer::toPathValue($wizard_key),
                $resourcePath
            );
        }
        // path params
        if ($action_key !== null) {
            $resourcePath = str_replace(
                '{' . 'actionKey' . '}',
                ObjectSerializer::toPathValue($action_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restWizardsWizardKeyDataDelete
     *
     * Delete a wizard data
     *
     * @param  int $wizard_key wizard_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeyDataDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return void
     */
    public function restWizardsWizardKeyDataDelete(
        int $wizard_key,
        string $contentType = self::contentTypes['restWizardsWizardKeyDataDelete'][0]
    ): void
    {
        $this->restWizardsWizardKeyDataDeleteWithHttpInfo($wizard_key, $contentType);
    }

    /**
     * Operation restWizardsWizardKeyDataDeleteWithHttpInfo
     *
     * Delete a wizard data
     *
     * @param  int $wizard_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeyDataDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restWizardsWizardKeyDataDeleteWithHttpInfo(
        int $wizard_key,
        string $contentType = self::contentTypes['restWizardsWizardKeyDataDelete'][0]
    ): array
    {
        $request = $this->restWizardsWizardKeyDataDeleteRequest($wizard_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restWizardsWizardKeyDataDeleteAsync
     *
     * Delete a wizard data
     *
     * @param  int $wizard_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeyDataDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restWizardsWizardKeyDataDeleteAsync(
        int $wizard_key,
        string $contentType = self::contentTypes['restWizardsWizardKeyDataDelete'][0]
    ): PromiseInterface
    {
        return $this->restWizardsWizardKeyDataDeleteAsyncWithHttpInfo($wizard_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restWizardsWizardKeyDataDeleteAsyncWithHttpInfo
     *
     * Delete a wizard data
     *
     * @param  int $wizard_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeyDataDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restWizardsWizardKeyDataDeleteAsyncWithHttpInfo(
        $wizard_key,
        string $contentType = self::contentTypes['restWizardsWizardKeyDataDelete'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->restWizardsWizardKeyDataDeleteRequest($wizard_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restWizardsWizardKeyDataDelete'
     *
     * @param  int $wizard_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeyDataDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restWizardsWizardKeyDataDeleteRequest(
        $wizard_key,
        string $contentType = self::contentTypes['restWizardsWizardKeyDataDelete'][0]
    ): Request
    {

        // verify the required parameter 'wizard_key' is set
        if ($wizard_key === null || (is_array($wizard_key) && count($wizard_key) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $wizard_key when calling restWizardsWizardKeyDataDelete'
            );
        }


        $resourcePath = '/rest/wizards/{wizardKey}/data';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($wizard_key !== null) {
            $resourcePath = str_replace(
                '{' . 'wizardKey' . '}',
                ObjectSerializer::toPathValue($wizard_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restWizardsWizardKeyDataGet
     *
     * Get a wizard data
     *
     * @param  int $wizard_key wizard_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeyDataGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object
     */
    public function restWizardsWizardKeyDataGet(
        int $wizard_key,
        string $contentType = self::contentTypes['restWizardsWizardKeyDataGet'][0]
    ): object
    {
        list($response) = $this->restWizardsWizardKeyDataGetWithHttpInfo($wizard_key, $contentType);
        return $response;
    }

    /**
     * Operation restWizardsWizardKeyDataGetWithHttpInfo
     *
     * Get a wizard data
     *
     * @param  int $wizard_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeyDataGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restWizardsWizardKeyDataGetWithHttpInfo(
        int $wizard_key,
        string $contentType = self::contentTypes['restWizardsWizardKeyDataGet'][0]
    ): array
    {
        $request = $this->restWizardsWizardKeyDataGetRequest($wizard_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restWizardsWizardKeyDataGetAsync
     *
     * Get a wizard data
     *
     * @param  int $wizard_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeyDataGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restWizardsWizardKeyDataGetAsync(
        int $wizard_key,
        string $contentType = self::contentTypes['restWizardsWizardKeyDataGet'][0]
    ): PromiseInterface
    {
        return $this->restWizardsWizardKeyDataGetAsyncWithHttpInfo($wizard_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restWizardsWizardKeyDataGetAsyncWithHttpInfo
     *
     * Get a wizard data
     *
     * @param  int $wizard_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeyDataGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restWizardsWizardKeyDataGetAsyncWithHttpInfo(
        $wizard_key,
        string $contentType = self::contentTypes['restWizardsWizardKeyDataGet'][0]
    ): PromiseInterface
    {
        $returnType = 'object';
        $request = $this->restWizardsWizardKeyDataGetRequest($wizard_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restWizardsWizardKeyDataGet'
     *
     * @param  int $wizard_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeyDataGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restWizardsWizardKeyDataGetRequest(
        $wizard_key,
        string $contentType = self::contentTypes['restWizardsWizardKeyDataGet'][0]
    ): Request
    {

        // verify the required parameter 'wizard_key' is set
        if ($wizard_key === null || (is_array($wizard_key) && count($wizard_key) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $wizard_key when calling restWizardsWizardKeyDataGet'
            );
        }


        $resourcePath = '/rest/wizards/{wizardKey}/data';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($wizard_key !== null) {
            $resourcePath = str_replace(
                '{' . 'wizardKey' . '}',
                ObjectSerializer::toPathValue($wizard_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restWizardsWizardKeyDataOptionIdDelete
     *
     * Delete a wizard data&#39;s option
     *
     * @param  int $wizard_key wizard_key (required)
     * @param  int $option_id option_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeyDataOptionIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return void
     */
    public function restWizardsWizardKeyDataOptionIdDelete(
        int $wizard_key,
        int $option_id,
        string $contentType = self::contentTypes['restWizardsWizardKeyDataOptionIdDelete'][0]
    ): void
    {
        $this->restWizardsWizardKeyDataOptionIdDeleteWithHttpInfo($wizard_key, $option_id, $contentType);
    }

    /**
     * Operation restWizardsWizardKeyDataOptionIdDeleteWithHttpInfo
     *
     * Delete a wizard data&#39;s option
     *
     * @param  int $wizard_key (required)
     * @param  int $option_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeyDataOptionIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restWizardsWizardKeyDataOptionIdDeleteWithHttpInfo(
        int $wizard_key,
        int $option_id,
        string $contentType = self::contentTypes['restWizardsWizardKeyDataOptionIdDelete'][0]
    ): array
    {
        $request = $this->restWizardsWizardKeyDataOptionIdDeleteRequest($wizard_key, $option_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restWizardsWizardKeyDataOptionIdDeleteAsync
     *
     * Delete a wizard data&#39;s option
     *
     * @param  int $wizard_key (required)
     * @param  int $option_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeyDataOptionIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restWizardsWizardKeyDataOptionIdDeleteAsync(
        int $wizard_key,
        int $option_id,
        string $contentType = self::contentTypes['restWizardsWizardKeyDataOptionIdDelete'][0]
    ): PromiseInterface
    {
        return $this->restWizardsWizardKeyDataOptionIdDeleteAsyncWithHttpInfo($wizard_key, $option_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restWizardsWizardKeyDataOptionIdDeleteAsyncWithHttpInfo
     *
     * Delete a wizard data&#39;s option
     *
     * @param  int $wizard_key (required)
     * @param  int $option_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeyDataOptionIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restWizardsWizardKeyDataOptionIdDeleteAsyncWithHttpInfo(
        $wizard_key,
        $option_id,
        string $contentType = self::contentTypes['restWizardsWizardKeyDataOptionIdDelete'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->restWizardsWizardKeyDataOptionIdDeleteRequest($wizard_key, $option_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restWizardsWizardKeyDataOptionIdDelete'
     *
     * @param  int $wizard_key (required)
     * @param  int $option_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeyDataOptionIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restWizardsWizardKeyDataOptionIdDeleteRequest(
        $wizard_key,
        $option_id,
        string $contentType = self::contentTypes['restWizardsWizardKeyDataOptionIdDelete'][0]
    ): Request
    {

        // verify the required parameter 'wizard_key' is set
        if ($wizard_key === null || (is_array($wizard_key) && count($wizard_key) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $wizard_key when calling restWizardsWizardKeyDataOptionIdDelete'
            );
        }

        // verify the required parameter 'option_id' is set
        if ($option_id === null || (is_array($option_id) && count($option_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $option_id when calling restWizardsWizardKeyDataOptionIdDelete'
            );
        }


        $resourcePath = '/rest/wizards/{wizardKey}/data/{optionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($wizard_key !== null) {
            $resourcePath = str_replace(
                '{' . 'wizardKey' . '}',
                ObjectSerializer::toPathValue($wizard_key),
                $resourcePath
            );
        }
        // path params
        if ($option_id !== null) {
            $resourcePath = str_replace(
                '{' . 'optionId' . '}',
                ObjectSerializer::toPathValue($option_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restWizardsWizardKeyDataOptionIdGet
     *
     * Get a wizard data by optionId
     *
     * @param  int $wizard_key wizard_key (required)
     * @param  int $option_id option_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeyDataOptionIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object
     */
    public function restWizardsWizardKeyDataOptionIdGet(
        int $wizard_key,
        int $option_id,
        string $contentType = self::contentTypes['restWizardsWizardKeyDataOptionIdGet'][0]
    ): object
    {
        list($response) = $this->restWizardsWizardKeyDataOptionIdGetWithHttpInfo($wizard_key, $option_id, $contentType);
        return $response;
    }

    /**
     * Operation restWizardsWizardKeyDataOptionIdGetWithHttpInfo
     *
     * Get a wizard data by optionId
     *
     * @param  int $wizard_key (required)
     * @param  int $option_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeyDataOptionIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restWizardsWizardKeyDataOptionIdGetWithHttpInfo(
        int $wizard_key,
        int $option_id,
        string $contentType = self::contentTypes['restWizardsWizardKeyDataOptionIdGet'][0]
    ): array
    {
        $request = $this->restWizardsWizardKeyDataOptionIdGetRequest($wizard_key, $option_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restWizardsWizardKeyDataOptionIdGetAsync
     *
     * Get a wizard data by optionId
     *
     * @param  int $wizard_key (required)
     * @param  int $option_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeyDataOptionIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restWizardsWizardKeyDataOptionIdGetAsync(
        int $wizard_key,
        int $option_id,
        string $contentType = self::contentTypes['restWizardsWizardKeyDataOptionIdGet'][0]
    ): PromiseInterface
    {
        return $this->restWizardsWizardKeyDataOptionIdGetAsyncWithHttpInfo($wizard_key, $option_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restWizardsWizardKeyDataOptionIdGetAsyncWithHttpInfo
     *
     * Get a wizard data by optionId
     *
     * @param  int $wizard_key (required)
     * @param  int $option_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeyDataOptionIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restWizardsWizardKeyDataOptionIdGetAsyncWithHttpInfo(
        $wizard_key,
        $option_id,
        string $contentType = self::contentTypes['restWizardsWizardKeyDataOptionIdGet'][0]
    ): PromiseInterface
    {
        $returnType = 'object';
        $request = $this->restWizardsWizardKeyDataOptionIdGetRequest($wizard_key, $option_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restWizardsWizardKeyDataOptionIdGet'
     *
     * @param  int $wizard_key (required)
     * @param  int $option_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeyDataOptionIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restWizardsWizardKeyDataOptionIdGetRequest(
        $wizard_key,
        $option_id,
        string $contentType = self::contentTypes['restWizardsWizardKeyDataOptionIdGet'][0]
    ): Request
    {

        // verify the required parameter 'wizard_key' is set
        if ($wizard_key === null || (is_array($wizard_key) && count($wizard_key) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $wizard_key when calling restWizardsWizardKeyDataOptionIdGet'
            );
        }

        // verify the required parameter 'option_id' is set
        if ($option_id === null || (is_array($option_id) && count($option_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $option_id when calling restWizardsWizardKeyDataOptionIdGet'
            );
        }


        $resourcePath = '/rest/wizards/{wizardKey}/data/{optionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($wizard_key !== null) {
            $resourcePath = str_replace(
                '{' . 'wizardKey' . '}',
                ObjectSerializer::toPathValue($wizard_key),
                $resourcePath
            );
        }
        // path params
        if ($option_id !== null) {
            $resourcePath = str_replace(
                '{' . 'optionId' . '}',
                ObjectSerializer::toPathValue($option_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restWizardsWizardKeyDataOptionIdPost
     *
     * Create a wizard data option
     *
     * @param  int $wizard_key wizard_key (required)
     * @param  int $option_id option_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeyDataOptionIdPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object
     */
    public function restWizardsWizardKeyDataOptionIdPost(
        int $wizard_key,
        int $option_id,
        string $contentType = self::contentTypes['restWizardsWizardKeyDataOptionIdPost'][0]
    ): object
    {
        list($response) = $this->restWizardsWizardKeyDataOptionIdPostWithHttpInfo($wizard_key, $option_id, $contentType);
        return $response;
    }

    /**
     * Operation restWizardsWizardKeyDataOptionIdPostWithHttpInfo
     *
     * Create a wizard data option
     *
     * @param  int $wizard_key (required)
     * @param  int $option_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeyDataOptionIdPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restWizardsWizardKeyDataOptionIdPostWithHttpInfo(
        int $wizard_key,
        int $option_id,
        string $contentType = self::contentTypes['restWizardsWizardKeyDataOptionIdPost'][0]
    ): array
    {
        $request = $this->restWizardsWizardKeyDataOptionIdPostRequest($wizard_key, $option_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restWizardsWizardKeyDataOptionIdPostAsync
     *
     * Create a wizard data option
     *
     * @param  int $wizard_key (required)
     * @param  int $option_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeyDataOptionIdPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restWizardsWizardKeyDataOptionIdPostAsync(
        int $wizard_key,
        int $option_id,
        string $contentType = self::contentTypes['restWizardsWizardKeyDataOptionIdPost'][0]
    ): PromiseInterface
    {
        return $this->restWizardsWizardKeyDataOptionIdPostAsyncWithHttpInfo($wizard_key, $option_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restWizardsWizardKeyDataOptionIdPostAsyncWithHttpInfo
     *
     * Create a wizard data option
     *
     * @param  int $wizard_key (required)
     * @param  int $option_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeyDataOptionIdPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restWizardsWizardKeyDataOptionIdPostAsyncWithHttpInfo(
        $wizard_key,
        $option_id,
        string $contentType = self::contentTypes['restWizardsWizardKeyDataOptionIdPost'][0]
    ): PromiseInterface
    {
        $returnType = 'object';
        $request = $this->restWizardsWizardKeyDataOptionIdPostRequest($wizard_key, $option_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restWizardsWizardKeyDataOptionIdPost'
     *
     * @param  int $wizard_key (required)
     * @param  int $option_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeyDataOptionIdPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restWizardsWizardKeyDataOptionIdPostRequest(
        $wizard_key,
        $option_id,
        string $contentType = self::contentTypes['restWizardsWizardKeyDataOptionIdPost'][0]
    ): Request
    {

        // verify the required parameter 'wizard_key' is set
        if ($wizard_key === null || (is_array($wizard_key) && count($wizard_key) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $wizard_key when calling restWizardsWizardKeyDataOptionIdPost'
            );
        }

        // verify the required parameter 'option_id' is set
        if ($option_id === null || (is_array($option_id) && count($option_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $option_id when calling restWizardsWizardKeyDataOptionIdPost'
            );
        }


        $resourcePath = '/rest/wizards/{wizardKey}/data/{optionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($wizard_key !== null) {
            $resourcePath = str_replace(
                '{' . 'wizardKey' . '}',
                ObjectSerializer::toPathValue($wizard_key),
                $resourcePath
            );
        }
        // path params
        if ($option_id !== null) {
            $resourcePath = str_replace(
                '{' . 'optionId' . '}',
                ObjectSerializer::toPathValue($option_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restWizardsWizardKeyDataOptionIdPut
     *
     * Update a wizard data option
     *
     * @param  int $wizard_key wizard_key (required)
     * @param  int $option_id option_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeyDataOptionIdPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object
     */
    public function restWizardsWizardKeyDataOptionIdPut(
        int $wizard_key,
        int $option_id,
        string $contentType = self::contentTypes['restWizardsWizardKeyDataOptionIdPut'][0]
    ): object
    {
        list($response) = $this->restWizardsWizardKeyDataOptionIdPutWithHttpInfo($wizard_key, $option_id, $contentType);
        return $response;
    }

    /**
     * Operation restWizardsWizardKeyDataOptionIdPutWithHttpInfo
     *
     * Update a wizard data option
     *
     * @param  int $wizard_key (required)
     * @param  int $option_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeyDataOptionIdPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restWizardsWizardKeyDataOptionIdPutWithHttpInfo(
        int $wizard_key,
        int $option_id,
        string $contentType = self::contentTypes['restWizardsWizardKeyDataOptionIdPut'][0]
    ): array
    {
        $request = $this->restWizardsWizardKeyDataOptionIdPutRequest($wizard_key, $option_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restWizardsWizardKeyDataOptionIdPutAsync
     *
     * Update a wizard data option
     *
     * @param  int $wizard_key (required)
     * @param  int $option_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeyDataOptionIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restWizardsWizardKeyDataOptionIdPutAsync(
        int $wizard_key,
        int $option_id,
        string $contentType = self::contentTypes['restWizardsWizardKeyDataOptionIdPut'][0]
    ): PromiseInterface
    {
        return $this->restWizardsWizardKeyDataOptionIdPutAsyncWithHttpInfo($wizard_key, $option_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restWizardsWizardKeyDataOptionIdPutAsyncWithHttpInfo
     *
     * Update a wizard data option
     *
     * @param  int $wizard_key (required)
     * @param  int $option_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeyDataOptionIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restWizardsWizardKeyDataOptionIdPutAsyncWithHttpInfo(
        $wizard_key,
        $option_id,
        string $contentType = self::contentTypes['restWizardsWizardKeyDataOptionIdPut'][0]
    ): PromiseInterface
    {
        $returnType = 'object';
        $request = $this->restWizardsWizardKeyDataOptionIdPutRequest($wizard_key, $option_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restWizardsWizardKeyDataOptionIdPut'
     *
     * @param  int $wizard_key (required)
     * @param  int $option_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeyDataOptionIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restWizardsWizardKeyDataOptionIdPutRequest(
        $wizard_key,
        $option_id,
        string $contentType = self::contentTypes['restWizardsWizardKeyDataOptionIdPut'][0]
    ): Request
    {

        // verify the required parameter 'wizard_key' is set
        if ($wizard_key === null || (is_array($wizard_key) && count($wizard_key) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $wizard_key when calling restWizardsWizardKeyDataOptionIdPut'
            );
        }

        // verify the required parameter 'option_id' is set
        if ($option_id === null || (is_array($option_id) && count($option_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $option_id when calling restWizardsWizardKeyDataOptionIdPut'
            );
        }


        $resourcePath = '/rest/wizards/{wizardKey}/data/{optionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($wizard_key !== null) {
            $resourcePath = str_replace(
                '{' . 'wizardKey' . '}',
                ObjectSerializer::toPathValue($wizard_key),
                $resourcePath
            );
        }
        // path params
        if ($option_id !== null) {
            $resourcePath = str_replace(
                '{' . 'optionId' . '}',
                ObjectSerializer::toPathValue($option_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restWizardsWizardKeyDataPost
     *
     * Create a wizard data
     *
     * @param  int $wizard_key wizard_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeyDataPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object
     */
    public function restWizardsWizardKeyDataPost(
        int $wizard_key,
        string $contentType = self::contentTypes['restWizardsWizardKeyDataPost'][0]
    ): object
    {
        list($response) = $this->restWizardsWizardKeyDataPostWithHttpInfo($wizard_key, $contentType);
        return $response;
    }

    /**
     * Operation restWizardsWizardKeyDataPostWithHttpInfo
     *
     * Create a wizard data
     *
     * @param  int $wizard_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeyDataPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restWizardsWizardKeyDataPostWithHttpInfo(
        int $wizard_key,
        string $contentType = self::contentTypes['restWizardsWizardKeyDataPost'][0]
    ): array
    {
        $request = $this->restWizardsWizardKeyDataPostRequest($wizard_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restWizardsWizardKeyDataPostAsync
     *
     * Create a wizard data
     *
     * @param  int $wizard_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeyDataPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restWizardsWizardKeyDataPostAsync(
        int $wizard_key,
        string $contentType = self::contentTypes['restWizardsWizardKeyDataPost'][0]
    ): PromiseInterface
    {
        return $this->restWizardsWizardKeyDataPostAsyncWithHttpInfo($wizard_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restWizardsWizardKeyDataPostAsyncWithHttpInfo
     *
     * Create a wizard data
     *
     * @param  int $wizard_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeyDataPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restWizardsWizardKeyDataPostAsyncWithHttpInfo(
        $wizard_key,
        string $contentType = self::contentTypes['restWizardsWizardKeyDataPost'][0]
    ): PromiseInterface
    {
        $returnType = 'object';
        $request = $this->restWizardsWizardKeyDataPostRequest($wizard_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restWizardsWizardKeyDataPost'
     *
     * @param  int $wizard_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeyDataPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restWizardsWizardKeyDataPostRequest(
        $wizard_key,
        string $contentType = self::contentTypes['restWizardsWizardKeyDataPost'][0]
    ): Request
    {

        // verify the required parameter 'wizard_key' is set
        if ($wizard_key === null || (is_array($wizard_key) && count($wizard_key) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $wizard_key when calling restWizardsWizardKeyDataPost'
            );
        }


        $resourcePath = '/rest/wizards/{wizardKey}/data';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($wizard_key !== null) {
            $resourcePath = str_replace(
                '{' . 'wizardKey' . '}',
                ObjectSerializer::toPathValue($wizard_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restWizardsWizardKeyDataPut
     *
     * Update a wizard data
     *
     * @param  int $wizard_key wizard_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeyDataPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object
     */
    public function restWizardsWizardKeyDataPut(
        int $wizard_key,
        string $contentType = self::contentTypes['restWizardsWizardKeyDataPut'][0]
    ): object
    {
        list($response) = $this->restWizardsWizardKeyDataPutWithHttpInfo($wizard_key, $contentType);
        return $response;
    }

    /**
     * Operation restWizardsWizardKeyDataPutWithHttpInfo
     *
     * Update a wizard data
     *
     * @param  int $wizard_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeyDataPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restWizardsWizardKeyDataPutWithHttpInfo(
        int $wizard_key,
        string $contentType = self::contentTypes['restWizardsWizardKeyDataPut'][0]
    ): array
    {
        $request = $this->restWizardsWizardKeyDataPutRequest($wizard_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restWizardsWizardKeyDataPutAsync
     *
     * Update a wizard data
     *
     * @param  int $wizard_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeyDataPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restWizardsWizardKeyDataPutAsync(
        int $wizard_key,
        string $contentType = self::contentTypes['restWizardsWizardKeyDataPut'][0]
    ): PromiseInterface
    {
        return $this->restWizardsWizardKeyDataPutAsyncWithHttpInfo($wizard_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restWizardsWizardKeyDataPutAsyncWithHttpInfo
     *
     * Update a wizard data
     *
     * @param  int $wizard_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeyDataPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restWizardsWizardKeyDataPutAsyncWithHttpInfo(
        $wizard_key,
        string $contentType = self::contentTypes['restWizardsWizardKeyDataPut'][0]
    ): PromiseInterface
    {
        $returnType = 'object';
        $request = $this->restWizardsWizardKeyDataPutRequest($wizard_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restWizardsWizardKeyDataPut'
     *
     * @param  int $wizard_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeyDataPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restWizardsWizardKeyDataPutRequest(
        $wizard_key,
        string $contentType = self::contentTypes['restWizardsWizardKeyDataPut'][0]
    ): Request
    {

        // verify the required parameter 'wizard_key' is set
        if ($wizard_key === null || (is_array($wizard_key) && count($wizard_key) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $wizard_key when calling restWizardsWizardKeyDataPut'
            );
        }


        $resourcePath = '/rest/wizards/{wizardKey}/data';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($wizard_key !== null) {
            $resourcePath = str_replace(
                '{' . 'wizardKey' . '}',
                ObjectSerializer::toPathValue($wizard_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restWizardsWizardKeyFormfieldsFormfieldKeyPost
     *
     * Load dynamic data
     *
     * @param  int $wizard_key wizard_key (required)
     * @param  int $formfield_key formfield_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeyFormfieldsFormfieldKeyPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object
     */
    public function restWizardsWizardKeyFormfieldsFormfieldKeyPost(
        int $wizard_key,
        int $formfield_key,
        string $contentType = self::contentTypes['restWizardsWizardKeyFormfieldsFormfieldKeyPost'][0]
    ): object
    {
        list($response) = $this->restWizardsWizardKeyFormfieldsFormfieldKeyPostWithHttpInfo($wizard_key, $formfield_key, $contentType);
        return $response;
    }

    /**
     * Operation restWizardsWizardKeyFormfieldsFormfieldKeyPostWithHttpInfo
     *
     * Load dynamic data
     *
     * @param  int $wizard_key (required)
     * @param  int $formfield_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeyFormfieldsFormfieldKeyPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restWizardsWizardKeyFormfieldsFormfieldKeyPostWithHttpInfo(
        int $wizard_key,
        int $formfield_key,
        string $contentType = self::contentTypes['restWizardsWizardKeyFormfieldsFormfieldKeyPost'][0]
    ): array
    {
        $request = $this->restWizardsWizardKeyFormfieldsFormfieldKeyPostRequest($wizard_key, $formfield_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restWizardsWizardKeyFormfieldsFormfieldKeyPostAsync
     *
     * Load dynamic data
     *
     * @param  int $wizard_key (required)
     * @param  int $formfield_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeyFormfieldsFormfieldKeyPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restWizardsWizardKeyFormfieldsFormfieldKeyPostAsync(
        int $wizard_key,
        int $formfield_key,
        string $contentType = self::contentTypes['restWizardsWizardKeyFormfieldsFormfieldKeyPost'][0]
    ): PromiseInterface
    {
        return $this->restWizardsWizardKeyFormfieldsFormfieldKeyPostAsyncWithHttpInfo($wizard_key, $formfield_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restWizardsWizardKeyFormfieldsFormfieldKeyPostAsyncWithHttpInfo
     *
     * Load dynamic data
     *
     * @param  int $wizard_key (required)
     * @param  int $formfield_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeyFormfieldsFormfieldKeyPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restWizardsWizardKeyFormfieldsFormfieldKeyPostAsyncWithHttpInfo(
        $wizard_key,
        $formfield_key,
        string $contentType = self::contentTypes['restWizardsWizardKeyFormfieldsFormfieldKeyPost'][0]
    ): PromiseInterface
    {
        $returnType = 'object';
        $request = $this->restWizardsWizardKeyFormfieldsFormfieldKeyPostRequest($wizard_key, $formfield_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restWizardsWizardKeyFormfieldsFormfieldKeyPost'
     *
     * @param  int $wizard_key (required)
     * @param  int $formfield_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeyFormfieldsFormfieldKeyPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restWizardsWizardKeyFormfieldsFormfieldKeyPostRequest(
        $wizard_key,
        $formfield_key,
        string $contentType = self::contentTypes['restWizardsWizardKeyFormfieldsFormfieldKeyPost'][0]
    ): Request
    {

        // verify the required parameter 'wizard_key' is set
        if ($wizard_key === null || (is_array($wizard_key) && count($wizard_key) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $wizard_key when calling restWizardsWizardKeyFormfieldsFormfieldKeyPost'
            );
        }

        // verify the required parameter 'formfield_key' is set
        if ($formfield_key === null || (is_array($formfield_key) && count($formfield_key) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $formfield_key when calling restWizardsWizardKeyFormfieldsFormfieldKeyPost'
            );
        }


        $resourcePath = '/rest/wizards/{wizardKey}/formfields/{formfieldKey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($wizard_key !== null) {
            $resourcePath = str_replace(
                '{' . 'wizardKey' . '}',
                ObjectSerializer::toPathValue($wizard_key),
                $resourcePath
            );
        }
        // path params
        if ($formfield_key !== null) {
            $resourcePath = str_replace(
                '{' . 'formfieldKey' . '}',
                ObjectSerializer::toPathValue($formfield_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restWizardsWizardKeyGet
     *
     * Get a wizard
     *
     * @param  int $wizard_key wizard_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeyGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck/plenty-client\Model\Wizard
     */
    public function restWizardsWizardKeyGet(
        int $wizard_key,
        string $contentType = self::contentTypes['restWizardsWizardKeyGet'][0]
    ): \ck/plenty-client\Model\Wizard
    {
        list($response) = $this->restWizardsWizardKeyGetWithHttpInfo($wizard_key, $contentType);
        return $response;
    }

    /**
     * Operation restWizardsWizardKeyGetWithHttpInfo
     *
     * Get a wizard
     *
     * @param  int $wizard_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeyGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck/plenty-client\Model\Wizard, HTTP status code, HTTP response headers (array of strings)
     */
    public function restWizardsWizardKeyGetWithHttpInfo(
        int $wizard_key,
        string $contentType = self::contentTypes['restWizardsWizardKeyGet'][0]
    ): array
    {
        $request = $this->restWizardsWizardKeyGetRequest($wizard_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck/plenty-client\Model\Wizard' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck/plenty-client\Model\Wizard' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck/plenty-client\Model\Wizard', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck/plenty-client\Model\Wizard';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck/plenty-client\Model\Wizard',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restWizardsWizardKeyGetAsync
     *
     * Get a wizard
     *
     * @param  int $wizard_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeyGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restWizardsWizardKeyGetAsync(
        int $wizard_key,
        string $contentType = self::contentTypes['restWizardsWizardKeyGet'][0]
    ): PromiseInterface
    {
        return $this->restWizardsWizardKeyGetAsyncWithHttpInfo($wizard_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restWizardsWizardKeyGetAsyncWithHttpInfo
     *
     * Get a wizard
     *
     * @param  int $wizard_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeyGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restWizardsWizardKeyGetAsyncWithHttpInfo(
        $wizard_key,
        string $contentType = self::contentTypes['restWizardsWizardKeyGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck/plenty-client\Model\Wizard';
        $request = $this->restWizardsWizardKeyGetRequest($wizard_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restWizardsWizardKeyGet'
     *
     * @param  int $wizard_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeyGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restWizardsWizardKeyGetRequest(
        $wizard_key,
        string $contentType = self::contentTypes['restWizardsWizardKeyGet'][0]
    ): Request
    {

        // verify the required parameter 'wizard_key' is set
        if ($wizard_key === null || (is_array($wizard_key) && count($wizard_key) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $wizard_key when calling restWizardsWizardKeyGet'
            );
        }


        $resourcePath = '/rest/wizards/{wizardKey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($wizard_key !== null) {
            $resourcePath = str_replace(
                '{' . 'wizardKey' . '}',
                ObjectSerializer::toPathValue($wizard_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restWizardsWizardKeySettingsOptionIdPost
     *
     * Finalize the wizard
     *
     * @param  int $wizard_key wizard_key (required)
     * @param  int $option_id option_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeySettingsOptionIdPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object
     */
    public function restWizardsWizardKeySettingsOptionIdPost(
        int $wizard_key,
        int $option_id,
        string $contentType = self::contentTypes['restWizardsWizardKeySettingsOptionIdPost'][0]
    ): object
    {
        list($response) = $this->restWizardsWizardKeySettingsOptionIdPostWithHttpInfo($wizard_key, $option_id, $contentType);
        return $response;
    }

    /**
     * Operation restWizardsWizardKeySettingsOptionIdPostWithHttpInfo
     *
     * Finalize the wizard
     *
     * @param  int $wizard_key (required)
     * @param  int $option_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeySettingsOptionIdPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restWizardsWizardKeySettingsOptionIdPostWithHttpInfo(
        int $wizard_key,
        int $option_id,
        string $contentType = self::contentTypes['restWizardsWizardKeySettingsOptionIdPost'][0]
    ): array
    {
        $request = $this->restWizardsWizardKeySettingsOptionIdPostRequest($wizard_key, $option_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restWizardsWizardKeySettingsOptionIdPostAsync
     *
     * Finalize the wizard
     *
     * @param  int $wizard_key (required)
     * @param  int $option_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeySettingsOptionIdPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restWizardsWizardKeySettingsOptionIdPostAsync(
        int $wizard_key,
        int $option_id,
        string $contentType = self::contentTypes['restWizardsWizardKeySettingsOptionIdPost'][0]
    ): PromiseInterface
    {
        return $this->restWizardsWizardKeySettingsOptionIdPostAsyncWithHttpInfo($wizard_key, $option_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restWizardsWizardKeySettingsOptionIdPostAsyncWithHttpInfo
     *
     * Finalize the wizard
     *
     * @param  int $wizard_key (required)
     * @param  int $option_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeySettingsOptionIdPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restWizardsWizardKeySettingsOptionIdPostAsyncWithHttpInfo(
        $wizard_key,
        $option_id,
        string $contentType = self::contentTypes['restWizardsWizardKeySettingsOptionIdPost'][0]
    ): PromiseInterface
    {
        $returnType = 'object';
        $request = $this->restWizardsWizardKeySettingsOptionIdPostRequest($wizard_key, $option_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restWizardsWizardKeySettingsOptionIdPost'
     *
     * @param  int $wizard_key (required)
     * @param  int $option_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restWizardsWizardKeySettingsOptionIdPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restWizardsWizardKeySettingsOptionIdPostRequest(
        $wizard_key,
        $option_id,
        string $contentType = self::contentTypes['restWizardsWizardKeySettingsOptionIdPost'][0]
    ): Request
    {

        // verify the required parameter 'wizard_key' is set
        if ($wizard_key === null || (is_array($wizard_key) && count($wizard_key) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $wizard_key when calling restWizardsWizardKeySettingsOptionIdPost'
            );
        }

        // verify the required parameter 'option_id' is set
        if ($option_id === null || (is_array($option_id) && count($option_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $option_id when calling restWizardsWizardKeySettingsOptionIdPost'
            );
        }


        $resourcePath = '/rest/wizards/{wizardKey}/settings/{optionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($wizard_key !== null) {
            $resourcePath = str_replace(
                '{' . 'wizardKey' . '}',
                ObjectSerializer::toPathValue($wizard_key),
                $resourcePath
            );
        }
        // path params
        if ($option_id !== null) {
            $resourcePath = str_replace(
                '{' . 'optionId' . '}',
                ObjectSerializer::toPathValue($option_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
