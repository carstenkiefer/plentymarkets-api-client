<?php
/**
 * PluginsApi
 * PHP version 8.1
 *
 * @package  ck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ck\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use ck\ApiException;
use ck\Configuration;
use ck\HeaderSelector;
use ck\ObjectSerializer;

/**
 * PluginsApi Class Doc Comment
 *
 * @package  ck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PluginsApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'restPluginsGet' => [
            'application/json',
        ],
        'restPluginsMailPost' => [
            'application/json',
        ],
        'restPluginsPluginIdDelete' => [
            'application/json',
        ],
        'restPluginsPluginIdGet' => [
            'application/json',
        ],
        'restPluginsPluginIdPluginSetsPluginSetIdDelete' => [
            'application/json',
        ],
        'restPluginsPluginIdPut' => [
            'application/json',
        ],
        'restPluginsPost' => [
            'application/json',
        ],
        'restPluginsSearchGet' => [
            'application/json',
        ],
        'restPluginsSeoSitemapGet' => [
            'application/json',
        ],
        'restPluginsUiGet' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation restPluginsGet
     *
     * List plugins
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\Plugin[]
     */
    public function restPluginsGet(
        string $contentType = self::contentTypes['restPluginsGet'][0]
    ): array
    {
        list($response) = $this->restPluginsGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation restPluginsGetWithHttpInfo
     *
     * List plugins
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\Plugin[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginsGetWithHttpInfo(
        string $contentType = self::contentTypes['restPluginsGet'][0]
    ): array
    {
        $request = $this->restPluginsGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\Plugin[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\Plugin[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\Plugin[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\Plugin[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\Plugin[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginsGetAsync
     *
     * List plugins
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginsGetAsync(
        string $contentType = self::contentTypes['restPluginsGet'][0]
    ): PromiseInterface
    {
        return $this->restPluginsGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginsGetAsyncWithHttpInfo
     *
     * List plugins
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginsGetAsyncWithHttpInfo(
        string $contentType = self::contentTypes['restPluginsGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\Plugin[]';
        $request = $this->restPluginsGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginsGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPluginsGetRequest(
        string $contentType = self::contentTypes['restPluginsGet'][0]
    ): Request
    {


        $resourcePath = '/rest/plugins';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPluginsMailPost
     *
     * Send mail
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginsMailPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object[]
     */
    public function restPluginsMailPost(
        string $contentType = self::contentTypes['restPluginsMailPost'][0]
    ): array
    {
        list($response) = $this->restPluginsMailPostWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation restPluginsMailPostWithHttpInfo
     *
     * Send mail
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginsMailPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginsMailPostWithHttpInfo(
        string $contentType = self::contentTypes['restPluginsMailPost'][0]
    ): array
    {
        $request = $this->restPluginsMailPostRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginsMailPostAsync
     *
     * Send mail
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginsMailPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginsMailPostAsync(
        string $contentType = self::contentTypes['restPluginsMailPost'][0]
    ): PromiseInterface
    {
        return $this->restPluginsMailPostAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginsMailPostAsyncWithHttpInfo
     *
     * Send mail
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginsMailPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginsMailPostAsyncWithHttpInfo(
        string $contentType = self::contentTypes['restPluginsMailPost'][0]
    ): PromiseInterface
    {
        $returnType = 'object[]';
        $request = $this->restPluginsMailPostRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginsMailPost'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginsMailPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPluginsMailPostRequest(
        string $contentType = self::contentTypes['restPluginsMailPost'][0]
    ): Request
    {


        $resourcePath = '/rest/plugins_mail';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPluginsPluginIdDelete
     *
     * Delete a plugin
     *
     * @param  int $plugin_id plugin_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginsPluginIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return void
     */
    public function restPluginsPluginIdDelete(
        int $plugin_id,
        string $contentType = self::contentTypes['restPluginsPluginIdDelete'][0]
    ): void
    {
        $this->restPluginsPluginIdDeleteWithHttpInfo($plugin_id, $contentType);
    }

    /**
     * Operation restPluginsPluginIdDeleteWithHttpInfo
     *
     * Delete a plugin
     *
     * @param  int $plugin_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginsPluginIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginsPluginIdDeleteWithHttpInfo(
        int $plugin_id,
        string $contentType = self::contentTypes['restPluginsPluginIdDelete'][0]
    ): array
    {
        $request = $this->restPluginsPluginIdDeleteRequest($plugin_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginsPluginIdDeleteAsync
     *
     * Delete a plugin
     *
     * @param  int $plugin_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginsPluginIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginsPluginIdDeleteAsync(
        int $plugin_id,
        string $contentType = self::contentTypes['restPluginsPluginIdDelete'][0]
    ): PromiseInterface
    {
        return $this->restPluginsPluginIdDeleteAsyncWithHttpInfo($plugin_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginsPluginIdDeleteAsyncWithHttpInfo
     *
     * Delete a plugin
     *
     * @param  int $plugin_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginsPluginIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginsPluginIdDeleteAsyncWithHttpInfo(
        $plugin_id,
        string $contentType = self::contentTypes['restPluginsPluginIdDelete'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->restPluginsPluginIdDeleteRequest($plugin_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginsPluginIdDelete'
     *
     * @param  int $plugin_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginsPluginIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPluginsPluginIdDeleteRequest(
        $plugin_id,
        string $contentType = self::contentTypes['restPluginsPluginIdDelete'][0]
    ): Request
    {

        // verify the required parameter 'plugin_id' is set
        if ($plugin_id === null || (is_array($plugin_id) && count($plugin_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $plugin_id when calling restPluginsPluginIdDelete'
            );
        }


        $resourcePath = '/rest/plugins/{pluginId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($plugin_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pluginId' . '}',
                ObjectSerializer::toPathValue($plugin_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPluginsPluginIdGet
     *
     * Get a plugin
     *
     * @param  int $plugin_id plugin_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginsPluginIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\Plugin
     */
    public function restPluginsPluginIdGet(
        int $plugin_id,
        string $contentType = self::contentTypes['restPluginsPluginIdGet'][0]
    ): \ck\Model\Plugin
    {
        list($response) = $this->restPluginsPluginIdGetWithHttpInfo($plugin_id, $contentType);
        return $response;
    }

    /**
     * Operation restPluginsPluginIdGetWithHttpInfo
     *
     * Get a plugin
     *
     * @param  int $plugin_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginsPluginIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\Plugin, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginsPluginIdGetWithHttpInfo(
        int $plugin_id,
        string $contentType = self::contentTypes['restPluginsPluginIdGet'][0]
    ): array
    {
        $request = $this->restPluginsPluginIdGetRequest($plugin_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\Plugin' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\Plugin' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\Plugin', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\Plugin';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\Plugin',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginsPluginIdGetAsync
     *
     * Get a plugin
     *
     * @param  int $plugin_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginsPluginIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginsPluginIdGetAsync(
        int $plugin_id,
        string $contentType = self::contentTypes['restPluginsPluginIdGet'][0]
    ): PromiseInterface
    {
        return $this->restPluginsPluginIdGetAsyncWithHttpInfo($plugin_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginsPluginIdGetAsyncWithHttpInfo
     *
     * Get a plugin
     *
     * @param  int $plugin_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginsPluginIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginsPluginIdGetAsyncWithHttpInfo(
        $plugin_id,
        string $contentType = self::contentTypes['restPluginsPluginIdGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\Plugin';
        $request = $this->restPluginsPluginIdGetRequest($plugin_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginsPluginIdGet'
     *
     * @param  int $plugin_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginsPluginIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPluginsPluginIdGetRequest(
        $plugin_id,
        string $contentType = self::contentTypes['restPluginsPluginIdGet'][0]
    ): Request
    {

        // verify the required parameter 'plugin_id' is set
        if ($plugin_id === null || (is_array($plugin_id) && count($plugin_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $plugin_id when calling restPluginsPluginIdGet'
            );
        }


        $resourcePath = '/rest/plugins/{pluginId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($plugin_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pluginId' . '}',
                ObjectSerializer::toPathValue($plugin_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPluginsPluginIdPluginSetsPluginSetIdDelete
     *
     * Delete a plugin
     *
     * @param  int $plugin_id plugin_id (required)
     * @param  int $plugin_set_id plugin_set_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginsPluginIdPluginSetsPluginSetIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return void
     */
    public function restPluginsPluginIdPluginSetsPluginSetIdDelete(
        int $plugin_id,
        int $plugin_set_id,
        string $contentType = self::contentTypes['restPluginsPluginIdPluginSetsPluginSetIdDelete'][0]
    ): void
    {
        $this->restPluginsPluginIdPluginSetsPluginSetIdDeleteWithHttpInfo($plugin_id, $plugin_set_id, $contentType);
    }

    /**
     * Operation restPluginsPluginIdPluginSetsPluginSetIdDeleteWithHttpInfo
     *
     * Delete a plugin
     *
     * @param  int $plugin_id (required)
     * @param  int $plugin_set_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginsPluginIdPluginSetsPluginSetIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginsPluginIdPluginSetsPluginSetIdDeleteWithHttpInfo(
        int $plugin_id,
        int $plugin_set_id,
        string $contentType = self::contentTypes['restPluginsPluginIdPluginSetsPluginSetIdDelete'][0]
    ): array
    {
        $request = $this->restPluginsPluginIdPluginSetsPluginSetIdDeleteRequest($plugin_id, $plugin_set_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginsPluginIdPluginSetsPluginSetIdDeleteAsync
     *
     * Delete a plugin
     *
     * @param  int $plugin_id (required)
     * @param  int $plugin_set_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginsPluginIdPluginSetsPluginSetIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginsPluginIdPluginSetsPluginSetIdDeleteAsync(
        int $plugin_id,
        int $plugin_set_id,
        string $contentType = self::contentTypes['restPluginsPluginIdPluginSetsPluginSetIdDelete'][0]
    ): PromiseInterface
    {
        return $this->restPluginsPluginIdPluginSetsPluginSetIdDeleteAsyncWithHttpInfo($plugin_id, $plugin_set_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginsPluginIdPluginSetsPluginSetIdDeleteAsyncWithHttpInfo
     *
     * Delete a plugin
     *
     * @param  int $plugin_id (required)
     * @param  int $plugin_set_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginsPluginIdPluginSetsPluginSetIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginsPluginIdPluginSetsPluginSetIdDeleteAsyncWithHttpInfo(
        $plugin_id,
        $plugin_set_id,
        string $contentType = self::contentTypes['restPluginsPluginIdPluginSetsPluginSetIdDelete'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->restPluginsPluginIdPluginSetsPluginSetIdDeleteRequest($plugin_id, $plugin_set_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginsPluginIdPluginSetsPluginSetIdDelete'
     *
     * @param  int $plugin_id (required)
     * @param  int $plugin_set_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginsPluginIdPluginSetsPluginSetIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPluginsPluginIdPluginSetsPluginSetIdDeleteRequest(
        $plugin_id,
        $plugin_set_id,
        string $contentType = self::contentTypes['restPluginsPluginIdPluginSetsPluginSetIdDelete'][0]
    ): Request
    {

        // verify the required parameter 'plugin_id' is set
        if ($plugin_id === null || (is_array($plugin_id) && count($plugin_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $plugin_id when calling restPluginsPluginIdPluginSetsPluginSetIdDelete'
            );
        }

        // verify the required parameter 'plugin_set_id' is set
        if ($plugin_set_id === null || (is_array($plugin_set_id) && count($plugin_set_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $plugin_set_id when calling restPluginsPluginIdPluginSetsPluginSetIdDelete'
            );
        }


        $resourcePath = '/rest/plugins/{pluginId}/plugin_sets/{pluginSetId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($plugin_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pluginId' . '}',
                ObjectSerializer::toPathValue($plugin_id),
                $resourcePath
            );
        }
        // path params
        if ($plugin_set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pluginSetId' . '}',
                ObjectSerializer::toPathValue($plugin_set_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPluginsPluginIdPut
     *
     * Update a plugin
     *
     * @param  int $plugin_id plugin_id (required)
     * @param  \ck\Model\RestPluginsPluginIdPutRequest|null $_rest_plugins_plugin_id _rest_plugins_plugin_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginsPluginIdPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\Plugin
     */
    public function restPluginsPluginIdPut(
        int $plugin_id,
        ?\ck\Model\RestPluginsPluginIdPutRequest $_rest_plugins_plugin_id = null,
        string $contentType = self::contentTypes['restPluginsPluginIdPut'][0]
    ): \ck\Model\Plugin
    {
        list($response) = $this->restPluginsPluginIdPutWithHttpInfo($plugin_id, $_rest_plugins_plugin_id, $contentType);
        return $response;
    }

    /**
     * Operation restPluginsPluginIdPutWithHttpInfo
     *
     * Update a plugin
     *
     * @param  int $plugin_id (required)
     * @param  \ck\Model\RestPluginsPluginIdPutRequest|null $_rest_plugins_plugin_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginsPluginIdPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\Plugin, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginsPluginIdPutWithHttpInfo(
        int $plugin_id,
        ?\ck\Model\RestPluginsPluginIdPutRequest $_rest_plugins_plugin_id = null,
        string $contentType = self::contentTypes['restPluginsPluginIdPut'][0]
    ): array
    {
        $request = $this->restPluginsPluginIdPutRequest($plugin_id, $_rest_plugins_plugin_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\Plugin' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\Plugin' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\Plugin', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\Plugin';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\Plugin',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginsPluginIdPutAsync
     *
     * Update a plugin
     *
     * @param  int $plugin_id (required)
     * @param  \ck\Model\RestPluginsPluginIdPutRequest|null $_rest_plugins_plugin_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginsPluginIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginsPluginIdPutAsync(
        int $plugin_id,
        ?\ck\Model\RestPluginsPluginIdPutRequest $_rest_plugins_plugin_id = null,
        string $contentType = self::contentTypes['restPluginsPluginIdPut'][0]
    ): PromiseInterface
    {
        return $this->restPluginsPluginIdPutAsyncWithHttpInfo($plugin_id, $_rest_plugins_plugin_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginsPluginIdPutAsyncWithHttpInfo
     *
     * Update a plugin
     *
     * @param  int $plugin_id (required)
     * @param  \ck\Model\RestPluginsPluginIdPutRequest|null $_rest_plugins_plugin_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginsPluginIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginsPluginIdPutAsyncWithHttpInfo(
        $plugin_id,
        $_rest_plugins_plugin_id = null,
        string $contentType = self::contentTypes['restPluginsPluginIdPut'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\Plugin';
        $request = $this->restPluginsPluginIdPutRequest($plugin_id, $_rest_plugins_plugin_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginsPluginIdPut'
     *
     * @param  int $plugin_id (required)
     * @param  \ck\Model\RestPluginsPluginIdPutRequest|null $_rest_plugins_plugin_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginsPluginIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPluginsPluginIdPutRequest(
        $plugin_id,
        $_rest_plugins_plugin_id = null,
        string $contentType = self::contentTypes['restPluginsPluginIdPut'][0]
    ): Request
    {

        // verify the required parameter 'plugin_id' is set
        if ($plugin_id === null || (is_array($plugin_id) && count($plugin_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $plugin_id when calling restPluginsPluginIdPut'
            );
        }



        $resourcePath = '/rest/plugins/{pluginId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($plugin_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pluginId' . '}',
                ObjectSerializer::toPathValue($plugin_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($_rest_plugins_plugin_id)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_rest_plugins_plugin_id));
            } else {
                $httpBody = $_rest_plugins_plugin_id;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPluginsPost
     *
     * Create a plugin
     *
     * @param  \ck\Model\RestPluginsPostRequest|null $_rest_plugins _rest_plugins (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginsPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\Plugin
     */
    public function restPluginsPost(
        ?\ck\Model\RestPluginsPostRequest $_rest_plugins = null,
        string $contentType = self::contentTypes['restPluginsPost'][0]
    ): \ck\Model\Plugin
    {
        list($response) = $this->restPluginsPostWithHttpInfo($_rest_plugins, $contentType);
        return $response;
    }

    /**
     * Operation restPluginsPostWithHttpInfo
     *
     * Create a plugin
     *
     * @param  \ck\Model\RestPluginsPostRequest|null $_rest_plugins (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginsPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\Plugin, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginsPostWithHttpInfo(
        ?\ck\Model\RestPluginsPostRequest $_rest_plugins = null,
        string $contentType = self::contentTypes['restPluginsPost'][0]
    ): array
    {
        $request = $this->restPluginsPostRequest($_rest_plugins, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\Plugin' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\Plugin' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\Plugin', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\Plugin';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\Plugin',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginsPostAsync
     *
     * Create a plugin
     *
     * @param  \ck\Model\RestPluginsPostRequest|null $_rest_plugins (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginsPostAsync(
        ?\ck\Model\RestPluginsPostRequest $_rest_plugins = null,
        string $contentType = self::contentTypes['restPluginsPost'][0]
    ): PromiseInterface
    {
        return $this->restPluginsPostAsyncWithHttpInfo($_rest_plugins, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginsPostAsyncWithHttpInfo
     *
     * Create a plugin
     *
     * @param  \ck\Model\RestPluginsPostRequest|null $_rest_plugins (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginsPostAsyncWithHttpInfo(
        $_rest_plugins = null,
        string $contentType = self::contentTypes['restPluginsPost'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\Plugin';
        $request = $this->restPluginsPostRequest($_rest_plugins, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginsPost'
     *
     * @param  \ck\Model\RestPluginsPostRequest|null $_rest_plugins (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPluginsPostRequest(
        $_rest_plugins = null,
        string $contentType = self::contentTypes['restPluginsPost'][0]
    ): Request
    {



        $resourcePath = '/rest/plugins';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($_rest_plugins)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_rest_plugins));
            } else {
                $httpBody = $_rest_plugins;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPluginsSearchGet
     *
     * List plugins
     *
     * @param  string|null $name The name of the plugin (optional)
     * @param  string|null $type The type of the plugin (template, theme, etc.) (optional)
     * @param  int|null $webstore_id The ID of the client (store) (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginsSearchGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\RestPluginSetsSetIdPluginsSearchGet200Response
     */
    public function restPluginsSearchGet(
        ?string $name = null,
        ?string $type = null,
        ?int $webstore_id = null,
        ?int $page = null,
        ?int $items_per_page = null,
        string $contentType = self::contentTypes['restPluginsSearchGet'][0]
    ): \ck\Model\RestPluginSetsSetIdPluginsSearchGet200Response
    {
        list($response) = $this->restPluginsSearchGetWithHttpInfo($name, $type, $webstore_id, $page, $items_per_page, $contentType);
        return $response;
    }

    /**
     * Operation restPluginsSearchGetWithHttpInfo
     *
     * List plugins
     *
     * @param  string|null $name The name of the plugin (optional)
     * @param  string|null $type The type of the plugin (template, theme, etc.) (optional)
     * @param  int|null $webstore_id The ID of the client (store) (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginsSearchGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\RestPluginSetsSetIdPluginsSearchGet200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginsSearchGetWithHttpInfo(
        ?string $name = null,
        ?string $type = null,
        ?int $webstore_id = null,
        ?int $page = null,
        ?int $items_per_page = null,
        string $contentType = self::contentTypes['restPluginsSearchGet'][0]
    ): array
    {
        $request = $this->restPluginsSearchGetRequest($name, $type, $webstore_id, $page, $items_per_page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\RestPluginSetsSetIdPluginsSearchGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\RestPluginSetsSetIdPluginsSearchGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\RestPluginSetsSetIdPluginsSearchGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\RestPluginSetsSetIdPluginsSearchGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\RestPluginSetsSetIdPluginsSearchGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginsSearchGetAsync
     *
     * List plugins
     *
     * @param  string|null $name The name of the plugin (optional)
     * @param  string|null $type The type of the plugin (template, theme, etc.) (optional)
     * @param  int|null $webstore_id The ID of the client (store) (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginsSearchGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginsSearchGetAsync(
        ?string $name = null,
        ?string $type = null,
        ?int $webstore_id = null,
        ?int $page = null,
        ?int $items_per_page = null,
        string $contentType = self::contentTypes['restPluginsSearchGet'][0]
    ): PromiseInterface
    {
        return $this->restPluginsSearchGetAsyncWithHttpInfo($name, $type, $webstore_id, $page, $items_per_page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginsSearchGetAsyncWithHttpInfo
     *
     * List plugins
     *
     * @param  string|null $name The name of the plugin (optional)
     * @param  string|null $type The type of the plugin (template, theme, etc.) (optional)
     * @param  int|null $webstore_id The ID of the client (store) (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginsSearchGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginsSearchGetAsyncWithHttpInfo(
        $name = null,
        $type = null,
        $webstore_id = null,
        $page = null,
        $items_per_page = null,
        string $contentType = self::contentTypes['restPluginsSearchGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\RestPluginSetsSetIdPluginsSearchGet200Response';
        $request = $this->restPluginsSearchGetRequest($name, $type, $webstore_id, $page, $items_per_page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginsSearchGet'
     *
     * @param  string|null $name The name of the plugin (optional)
     * @param  string|null $type The type of the plugin (template, theme, etc.) (optional)
     * @param  int|null $webstore_id The ID of the client (store) (optional)
     * @param  int|null $page The page of results to search for (optional)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginsSearchGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPluginsSearchGetRequest(
        $name = null,
        $type = null,
        $webstore_id = null,
        $page = null,
        $items_per_page = null,
        string $contentType = self::contentTypes['restPluginsSearchGet'][0]
    ): Request
    {







        $resourcePath = '/rest/plugins/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'type', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $webstore_id,
            'webstoreId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $items_per_page,
            'itemsPerPage', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPluginsSeoSitemapGet
     *
     * Load sitemap patterns
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginsSeoSitemapGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object[]
     */
    public function restPluginsSeoSitemapGet(
        string $contentType = self::contentTypes['restPluginsSeoSitemapGet'][0]
    ): array
    {
        list($response) = $this->restPluginsSeoSitemapGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation restPluginsSeoSitemapGetWithHttpInfo
     *
     * Load sitemap patterns
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginsSeoSitemapGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginsSeoSitemapGetWithHttpInfo(
        string $contentType = self::contentTypes['restPluginsSeoSitemapGet'][0]
    ): array
    {
        $request = $this->restPluginsSeoSitemapGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginsSeoSitemapGetAsync
     *
     * Load sitemap patterns
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginsSeoSitemapGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginsSeoSitemapGetAsync(
        string $contentType = self::contentTypes['restPluginsSeoSitemapGet'][0]
    ): PromiseInterface
    {
        return $this->restPluginsSeoSitemapGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginsSeoSitemapGetAsyncWithHttpInfo
     *
     * Load sitemap patterns
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginsSeoSitemapGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginsSeoSitemapGetAsyncWithHttpInfo(
        string $contentType = self::contentTypes['restPluginsSeoSitemapGet'][0]
    ): PromiseInterface
    {
        $returnType = 'object[]';
        $request = $this->restPluginsSeoSitemapGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginsSeoSitemapGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginsSeoSitemapGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPluginsSeoSitemapGetRequest(
        string $contentType = self::contentTypes['restPluginsSeoSitemapGet'][0]
    ): Request
    {


        $resourcePath = '/rest/plugins/seo/sitemap';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPluginsUiGet
     *
     * List plugins for backend UI
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginsUiGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck\Model\Plugin[]
     */
    public function restPluginsUiGet(
        string $contentType = self::contentTypes['restPluginsUiGet'][0]
    ): array
    {
        list($response) = $this->restPluginsUiGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation restPluginsUiGetWithHttpInfo
     *
     * List plugins for backend UI
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginsUiGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck\Model\Plugin[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginsUiGetWithHttpInfo(
        string $contentType = self::contentTypes['restPluginsUiGet'][0]
    ): array
    {
        $request = $this->restPluginsUiGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck\Model\Plugin[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck\Model\Plugin[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck\Model\Plugin[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck\Model\Plugin[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck\Model\Plugin[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginsUiGetAsync
     *
     * List plugins for backend UI
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginsUiGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginsUiGetAsync(
        string $contentType = self::contentTypes['restPluginsUiGet'][0]
    ): PromiseInterface
    {
        return $this->restPluginsUiGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginsUiGetAsyncWithHttpInfo
     *
     * List plugins for backend UI
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginsUiGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restPluginsUiGetAsyncWithHttpInfo(
        string $contentType = self::contentTypes['restPluginsUiGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck\Model\Plugin[]';
        $request = $this->restPluginsUiGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginsUiGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restPluginsUiGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restPluginsUiGetRequest(
        string $contentType = self::contentTypes['restPluginsUiGet'][0]
    ): Request
    {


        $resourcePath = '/rest/plugins/ui';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
