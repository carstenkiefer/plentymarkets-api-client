<?php
/**
 * ShopApi
 * PHP version 8.1
 *
 * @package  ck/plenty-client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ck/plenty-client\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use ck/plenty-client\ApiException;
use ck/plenty-client\Configuration;
use ck/plenty-client\HeaderSelector;
use ck/plenty-client\ObjectSerializer;

/**
 * ShopApi Class Doc Comment
 *
 * @package  ck/plenty-client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ShopApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'restShopBuilderContentLinksContentLinkIdDelete' => [
            'application/json',
        ],
        'restShopBuilderContentLinksContentLinkIdGet' => [
            'application/json',
        ],
        'restShopBuilderContentLinksContentLinkIdPreviewUrlGet' => [
            'application/json',
        ],
        'restShopBuilderContentLinksContentLinkIdPut' => [
            'application/json',
        ],
        'restShopBuilderContentLinksGet' => [
            'application/json',
        ],
        'restShopBuilderContentLinksPost' => [
            'application/json',
        ],
        'restShopBuilderContentsContentIdDelete' => [
            'application/json',
        ],
        'restShopBuilderContentsContentIdGet' => [
            'application/json',
        ],
        'restShopBuilderContentsContentIdOptions' => [
            'application/json',
        ],
        'restShopBuilderContentsContentIdPost' => [
            'application/json',
        ],
        'restShopBuilderContentsContentIdPut' => [
            'application/json',
        ],
        'restShopBuilderContentsGet' => [
            'application/json',
        ],
        'restShopBuilderContentsPost' => [
            'application/json',
        ],
        'restShopBuilderContentsPut' => [
            'application/json',
        ],
        'restShopBuilderContentsSearchGet' => [
            'application/json',
        ],
        'restShopBuilderPagesGet' => [
            'application/json',
        ],
        'restShopBuilderWidgetsGet' => [
            'application/json',
        ],
        'restShopBuilderWidgetsOptions' => [
            'application/json',
        ],
        'restShopBuilderWidgetsPost' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation restShopBuilderContentLinksContentLinkIdDelete
     *
     * Delete a content link.
     *
     * @param  int $content_link_id content_link_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentLinksContentLinkIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return void
     */
    public function restShopBuilderContentLinksContentLinkIdDelete(
        int $content_link_id,
        string $contentType = self::contentTypes['restShopBuilderContentLinksContentLinkIdDelete'][0]
    ): void
    {
        $this->restShopBuilderContentLinksContentLinkIdDeleteWithHttpInfo($content_link_id, $contentType);
    }

    /**
     * Operation restShopBuilderContentLinksContentLinkIdDeleteWithHttpInfo
     *
     * Delete a content link.
     *
     * @param  int $content_link_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentLinksContentLinkIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restShopBuilderContentLinksContentLinkIdDeleteWithHttpInfo(
        int $content_link_id,
        string $contentType = self::contentTypes['restShopBuilderContentLinksContentLinkIdDelete'][0]
    ): array
    {
        $request = $this->restShopBuilderContentLinksContentLinkIdDeleteRequest($content_link_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restShopBuilderContentLinksContentLinkIdDeleteAsync
     *
     * Delete a content link.
     *
     * @param  int $content_link_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentLinksContentLinkIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restShopBuilderContentLinksContentLinkIdDeleteAsync(
        int $content_link_id,
        string $contentType = self::contentTypes['restShopBuilderContentLinksContentLinkIdDelete'][0]
    ): PromiseInterface
    {
        return $this->restShopBuilderContentLinksContentLinkIdDeleteAsyncWithHttpInfo($content_link_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restShopBuilderContentLinksContentLinkIdDeleteAsyncWithHttpInfo
     *
     * Delete a content link.
     *
     * @param  int $content_link_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentLinksContentLinkIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restShopBuilderContentLinksContentLinkIdDeleteAsyncWithHttpInfo(
        $content_link_id,
        string $contentType = self::contentTypes['restShopBuilderContentLinksContentLinkIdDelete'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->restShopBuilderContentLinksContentLinkIdDeleteRequest($content_link_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restShopBuilderContentLinksContentLinkIdDelete'
     *
     * @param  int $content_link_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentLinksContentLinkIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restShopBuilderContentLinksContentLinkIdDeleteRequest(
        $content_link_id,
        string $contentType = self::contentTypes['restShopBuilderContentLinksContentLinkIdDelete'][0]
    ): Request
    {

        // verify the required parameter 'content_link_id' is set
        if ($content_link_id === null || (is_array($content_link_id) && count($content_link_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $content_link_id when calling restShopBuilderContentLinksContentLinkIdDelete'
            );
        }


        $resourcePath = '/rest/shop_builder/content_links/{contentLinkId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($content_link_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contentLinkId' . '}',
                ObjectSerializer::toPathValue($content_link_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restShopBuilderContentLinksContentLinkIdGet
     *
     * Find a content link by id.
     *
     * @param  int $content_link_id content_link_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentLinksContentLinkIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck/plenty-client\Model\ContentLink
     */
    public function restShopBuilderContentLinksContentLinkIdGet(
        int $content_link_id,
        string $contentType = self::contentTypes['restShopBuilderContentLinksContentLinkIdGet'][0]
    ): \ck/plenty-client\Model\ContentLink
    {
        list($response) = $this->restShopBuilderContentLinksContentLinkIdGetWithHttpInfo($content_link_id, $contentType);
        return $response;
    }

    /**
     * Operation restShopBuilderContentLinksContentLinkIdGetWithHttpInfo
     *
     * Find a content link by id.
     *
     * @param  int $content_link_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentLinksContentLinkIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck/plenty-client\Model\ContentLink, HTTP status code, HTTP response headers (array of strings)
     */
    public function restShopBuilderContentLinksContentLinkIdGetWithHttpInfo(
        int $content_link_id,
        string $contentType = self::contentTypes['restShopBuilderContentLinksContentLinkIdGet'][0]
    ): array
    {
        $request = $this->restShopBuilderContentLinksContentLinkIdGetRequest($content_link_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck/plenty-client\Model\ContentLink' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck/plenty-client\Model\ContentLink' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck/plenty-client\Model\ContentLink', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck/plenty-client\Model\ContentLink';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck/plenty-client\Model\ContentLink',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restShopBuilderContentLinksContentLinkIdGetAsync
     *
     * Find a content link by id.
     *
     * @param  int $content_link_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentLinksContentLinkIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restShopBuilderContentLinksContentLinkIdGetAsync(
        int $content_link_id,
        string $contentType = self::contentTypes['restShopBuilderContentLinksContentLinkIdGet'][0]
    ): PromiseInterface
    {
        return $this->restShopBuilderContentLinksContentLinkIdGetAsyncWithHttpInfo($content_link_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restShopBuilderContentLinksContentLinkIdGetAsyncWithHttpInfo
     *
     * Find a content link by id.
     *
     * @param  int $content_link_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentLinksContentLinkIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restShopBuilderContentLinksContentLinkIdGetAsyncWithHttpInfo(
        $content_link_id,
        string $contentType = self::contentTypes['restShopBuilderContentLinksContentLinkIdGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck/plenty-client\Model\ContentLink';
        $request = $this->restShopBuilderContentLinksContentLinkIdGetRequest($content_link_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restShopBuilderContentLinksContentLinkIdGet'
     *
     * @param  int $content_link_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentLinksContentLinkIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restShopBuilderContentLinksContentLinkIdGetRequest(
        $content_link_id,
        string $contentType = self::contentTypes['restShopBuilderContentLinksContentLinkIdGet'][0]
    ): Request
    {

        // verify the required parameter 'content_link_id' is set
        if ($content_link_id === null || (is_array($content_link_id) && count($content_link_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $content_link_id when calling restShopBuilderContentLinksContentLinkIdGet'
            );
        }


        $resourcePath = '/rest/shop_builder/content_links/{contentLinkId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($content_link_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contentLinkId' . '}',
                ObjectSerializer::toPathValue($content_link_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restShopBuilderContentLinksContentLinkIdPreviewUrlGet
     *
     * Generate a preview link for a contentLink.
     *
     * @param  int $content_link_id content_link_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentLinksContentLinkIdPreviewUrlGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object[]
     */
    public function restShopBuilderContentLinksContentLinkIdPreviewUrlGet(
        int $content_link_id,
        string $contentType = self::contentTypes['restShopBuilderContentLinksContentLinkIdPreviewUrlGet'][0]
    ): array
    {
        list($response) = $this->restShopBuilderContentLinksContentLinkIdPreviewUrlGetWithHttpInfo($content_link_id, $contentType);
        return $response;
    }

    /**
     * Operation restShopBuilderContentLinksContentLinkIdPreviewUrlGetWithHttpInfo
     *
     * Generate a preview link for a contentLink.
     *
     * @param  int $content_link_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentLinksContentLinkIdPreviewUrlGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restShopBuilderContentLinksContentLinkIdPreviewUrlGetWithHttpInfo(
        int $content_link_id,
        string $contentType = self::contentTypes['restShopBuilderContentLinksContentLinkIdPreviewUrlGet'][0]
    ): array
    {
        $request = $this->restShopBuilderContentLinksContentLinkIdPreviewUrlGetRequest($content_link_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restShopBuilderContentLinksContentLinkIdPreviewUrlGetAsync
     *
     * Generate a preview link for a contentLink.
     *
     * @param  int $content_link_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentLinksContentLinkIdPreviewUrlGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restShopBuilderContentLinksContentLinkIdPreviewUrlGetAsync(
        int $content_link_id,
        string $contentType = self::contentTypes['restShopBuilderContentLinksContentLinkIdPreviewUrlGet'][0]
    ): PromiseInterface
    {
        return $this->restShopBuilderContentLinksContentLinkIdPreviewUrlGetAsyncWithHttpInfo($content_link_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restShopBuilderContentLinksContentLinkIdPreviewUrlGetAsyncWithHttpInfo
     *
     * Generate a preview link for a contentLink.
     *
     * @param  int $content_link_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentLinksContentLinkIdPreviewUrlGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restShopBuilderContentLinksContentLinkIdPreviewUrlGetAsyncWithHttpInfo(
        $content_link_id,
        string $contentType = self::contentTypes['restShopBuilderContentLinksContentLinkIdPreviewUrlGet'][0]
    ): PromiseInterface
    {
        $returnType = 'object[]';
        $request = $this->restShopBuilderContentLinksContentLinkIdPreviewUrlGetRequest($content_link_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restShopBuilderContentLinksContentLinkIdPreviewUrlGet'
     *
     * @param  int $content_link_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentLinksContentLinkIdPreviewUrlGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restShopBuilderContentLinksContentLinkIdPreviewUrlGetRequest(
        $content_link_id,
        string $contentType = self::contentTypes['restShopBuilderContentLinksContentLinkIdPreviewUrlGet'][0]
    ): Request
    {

        // verify the required parameter 'content_link_id' is set
        if ($content_link_id === null || (is_array($content_link_id) && count($content_link_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $content_link_id when calling restShopBuilderContentLinksContentLinkIdPreviewUrlGet'
            );
        }


        $resourcePath = '/rest/shop_builder/content_links/{contentLinkId}/preview_url';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($content_link_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contentLinkId' . '}',
                ObjectSerializer::toPathValue($content_link_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restShopBuilderContentLinksContentLinkIdPut
     *
     * Update a content link.
     *
     * @param  int $content_link_id content_link_id (required)
     * @param  \ck/plenty-client\Model\RestShopBuilderContentLinksPostRequest|null $_rest_shop_builder_content_links_content_link_id _rest_shop_builder_content_links_content_link_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentLinksContentLinkIdPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck/plenty-client\Model\ContentLink
     */
    public function restShopBuilderContentLinksContentLinkIdPut(
        int $content_link_id,
        ?\ck/plenty-client\Model\RestShopBuilderContentLinksPostRequest $_rest_shop_builder_content_links_content_link_id = null,
        string $contentType = self::contentTypes['restShopBuilderContentLinksContentLinkIdPut'][0]
    ): \ck/plenty-client\Model\ContentLink
    {
        list($response) = $this->restShopBuilderContentLinksContentLinkIdPutWithHttpInfo($content_link_id, $_rest_shop_builder_content_links_content_link_id, $contentType);
        return $response;
    }

    /**
     * Operation restShopBuilderContentLinksContentLinkIdPutWithHttpInfo
     *
     * Update a content link.
     *
     * @param  int $content_link_id (required)
     * @param  \ck/plenty-client\Model\RestShopBuilderContentLinksPostRequest|null $_rest_shop_builder_content_links_content_link_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentLinksContentLinkIdPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck/plenty-client\Model\ContentLink, HTTP status code, HTTP response headers (array of strings)
     */
    public function restShopBuilderContentLinksContentLinkIdPutWithHttpInfo(
        int $content_link_id,
        ?\ck/plenty-client\Model\RestShopBuilderContentLinksPostRequest $_rest_shop_builder_content_links_content_link_id = null,
        string $contentType = self::contentTypes['restShopBuilderContentLinksContentLinkIdPut'][0]
    ): array
    {
        $request = $this->restShopBuilderContentLinksContentLinkIdPutRequest($content_link_id, $_rest_shop_builder_content_links_content_link_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck/plenty-client\Model\ContentLink' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck/plenty-client\Model\ContentLink' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck/plenty-client\Model\ContentLink', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck/plenty-client\Model\ContentLink';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck/plenty-client\Model\ContentLink',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restShopBuilderContentLinksContentLinkIdPutAsync
     *
     * Update a content link.
     *
     * @param  int $content_link_id (required)
     * @param  \ck/plenty-client\Model\RestShopBuilderContentLinksPostRequest|null $_rest_shop_builder_content_links_content_link_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentLinksContentLinkIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restShopBuilderContentLinksContentLinkIdPutAsync(
        int $content_link_id,
        ?\ck/plenty-client\Model\RestShopBuilderContentLinksPostRequest $_rest_shop_builder_content_links_content_link_id = null,
        string $contentType = self::contentTypes['restShopBuilderContentLinksContentLinkIdPut'][0]
    ): PromiseInterface
    {
        return $this->restShopBuilderContentLinksContentLinkIdPutAsyncWithHttpInfo($content_link_id, $_rest_shop_builder_content_links_content_link_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restShopBuilderContentLinksContentLinkIdPutAsyncWithHttpInfo
     *
     * Update a content link.
     *
     * @param  int $content_link_id (required)
     * @param  \ck/plenty-client\Model\RestShopBuilderContentLinksPostRequest|null $_rest_shop_builder_content_links_content_link_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentLinksContentLinkIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restShopBuilderContentLinksContentLinkIdPutAsyncWithHttpInfo(
        $content_link_id,
        $_rest_shop_builder_content_links_content_link_id = null,
        string $contentType = self::contentTypes['restShopBuilderContentLinksContentLinkIdPut'][0]
    ): PromiseInterface
    {
        $returnType = '\ck/plenty-client\Model\ContentLink';
        $request = $this->restShopBuilderContentLinksContentLinkIdPutRequest($content_link_id, $_rest_shop_builder_content_links_content_link_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restShopBuilderContentLinksContentLinkIdPut'
     *
     * @param  int $content_link_id (required)
     * @param  \ck/plenty-client\Model\RestShopBuilderContentLinksPostRequest|null $_rest_shop_builder_content_links_content_link_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentLinksContentLinkIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restShopBuilderContentLinksContentLinkIdPutRequest(
        $content_link_id,
        $_rest_shop_builder_content_links_content_link_id = null,
        string $contentType = self::contentTypes['restShopBuilderContentLinksContentLinkIdPut'][0]
    ): Request
    {

        // verify the required parameter 'content_link_id' is set
        if ($content_link_id === null || (is_array($content_link_id) && count($content_link_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $content_link_id when calling restShopBuilderContentLinksContentLinkIdPut'
            );
        }



        $resourcePath = '/rest/shop_builder/content_links/{contentLinkId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($content_link_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contentLinkId' . '}',
                ObjectSerializer::toPathValue($content_link_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($_rest_shop_builder_content_links_content_link_id)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_rest_shop_builder_content_links_content_link_id));
            } else {
                $httpBody = $_rest_shop_builder_content_links_content_link_id;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restShopBuilderContentLinksGet
     *
     * List all content links for a given plugin set
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentLinksGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck/plenty-client\Model\ContentLink[]
     */
    public function restShopBuilderContentLinksGet(
        string $contentType = self::contentTypes['restShopBuilderContentLinksGet'][0]
    ): array
    {
        list($response) = $this->restShopBuilderContentLinksGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation restShopBuilderContentLinksGetWithHttpInfo
     *
     * List all content links for a given plugin set
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentLinksGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck/plenty-client\Model\ContentLink[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restShopBuilderContentLinksGetWithHttpInfo(
        string $contentType = self::contentTypes['restShopBuilderContentLinksGet'][0]
    ): array
    {
        $request = $this->restShopBuilderContentLinksGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck/plenty-client\Model\ContentLink[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck/plenty-client\Model\ContentLink[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck/plenty-client\Model\ContentLink[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck/plenty-client\Model\ContentLink[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck/plenty-client\Model\ContentLink[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restShopBuilderContentLinksGetAsync
     *
     * List all content links for a given plugin set
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentLinksGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restShopBuilderContentLinksGetAsync(
        string $contentType = self::contentTypes['restShopBuilderContentLinksGet'][0]
    ): PromiseInterface
    {
        return $this->restShopBuilderContentLinksGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restShopBuilderContentLinksGetAsyncWithHttpInfo
     *
     * List all content links for a given plugin set
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentLinksGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restShopBuilderContentLinksGetAsyncWithHttpInfo(
        string $contentType = self::contentTypes['restShopBuilderContentLinksGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck/plenty-client\Model\ContentLink[]';
        $request = $this->restShopBuilderContentLinksGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restShopBuilderContentLinksGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentLinksGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restShopBuilderContentLinksGetRequest(
        string $contentType = self::contentTypes['restShopBuilderContentLinksGet'][0]
    ): Request
    {


        $resourcePath = '/rest/shop_builder/content_links';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restShopBuilderContentLinksPost
     *
     * Link a content to a layout container of a frontend plugin.
     *
     * @param  \ck/plenty-client\Model\RestShopBuilderContentLinksPostRequest|null $_rest_shop_builder_content_links _rest_shop_builder_content_links (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentLinksPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck/plenty-client\Model\ContentLink
     */
    public function restShopBuilderContentLinksPost(
        ?\ck/plenty-client\Model\RestShopBuilderContentLinksPostRequest $_rest_shop_builder_content_links = null,
        string $contentType = self::contentTypes['restShopBuilderContentLinksPost'][0]
    ): \ck/plenty-client\Model\ContentLink
    {
        list($response) = $this->restShopBuilderContentLinksPostWithHttpInfo($_rest_shop_builder_content_links, $contentType);
        return $response;
    }

    /**
     * Operation restShopBuilderContentLinksPostWithHttpInfo
     *
     * Link a content to a layout container of a frontend plugin.
     *
     * @param  \ck/plenty-client\Model\RestShopBuilderContentLinksPostRequest|null $_rest_shop_builder_content_links (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentLinksPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck/plenty-client\Model\ContentLink, HTTP status code, HTTP response headers (array of strings)
     */
    public function restShopBuilderContentLinksPostWithHttpInfo(
        ?\ck/plenty-client\Model\RestShopBuilderContentLinksPostRequest $_rest_shop_builder_content_links = null,
        string $contentType = self::contentTypes['restShopBuilderContentLinksPost'][0]
    ): array
    {
        $request = $this->restShopBuilderContentLinksPostRequest($_rest_shop_builder_content_links, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck/plenty-client\Model\ContentLink' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck/plenty-client\Model\ContentLink' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck/plenty-client\Model\ContentLink', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck/plenty-client\Model\ContentLink';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck/plenty-client\Model\ContentLink',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restShopBuilderContentLinksPostAsync
     *
     * Link a content to a layout container of a frontend plugin.
     *
     * @param  \ck/plenty-client\Model\RestShopBuilderContentLinksPostRequest|null $_rest_shop_builder_content_links (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentLinksPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restShopBuilderContentLinksPostAsync(
        ?\ck/plenty-client\Model\RestShopBuilderContentLinksPostRequest $_rest_shop_builder_content_links = null,
        string $contentType = self::contentTypes['restShopBuilderContentLinksPost'][0]
    ): PromiseInterface
    {
        return $this->restShopBuilderContentLinksPostAsyncWithHttpInfo($_rest_shop_builder_content_links, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restShopBuilderContentLinksPostAsyncWithHttpInfo
     *
     * Link a content to a layout container of a frontend plugin.
     *
     * @param  \ck/plenty-client\Model\RestShopBuilderContentLinksPostRequest|null $_rest_shop_builder_content_links (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentLinksPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restShopBuilderContentLinksPostAsyncWithHttpInfo(
        $_rest_shop_builder_content_links = null,
        string $contentType = self::contentTypes['restShopBuilderContentLinksPost'][0]
    ): PromiseInterface
    {
        $returnType = '\ck/plenty-client\Model\ContentLink';
        $request = $this->restShopBuilderContentLinksPostRequest($_rest_shop_builder_content_links, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restShopBuilderContentLinksPost'
     *
     * @param  \ck/plenty-client\Model\RestShopBuilderContentLinksPostRequest|null $_rest_shop_builder_content_links (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentLinksPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restShopBuilderContentLinksPostRequest(
        $_rest_shop_builder_content_links = null,
        string $contentType = self::contentTypes['restShopBuilderContentLinksPost'][0]
    ): Request
    {



        $resourcePath = '/rest/shop_builder/content_links';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($_rest_shop_builder_content_links)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_rest_shop_builder_content_links));
            } else {
                $httpBody = $_rest_shop_builder_content_links;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restShopBuilderContentsContentIdDelete
     *
     * Delete a content
     *
     * @param  int $content_id content_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentsContentIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return void
     */
    public function restShopBuilderContentsContentIdDelete(
        int $content_id,
        string $contentType = self::contentTypes['restShopBuilderContentsContentIdDelete'][0]
    ): void
    {
        $this->restShopBuilderContentsContentIdDeleteWithHttpInfo($content_id, $contentType);
    }

    /**
     * Operation restShopBuilderContentsContentIdDeleteWithHttpInfo
     *
     * Delete a content
     *
     * @param  int $content_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentsContentIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restShopBuilderContentsContentIdDeleteWithHttpInfo(
        int $content_id,
        string $contentType = self::contentTypes['restShopBuilderContentsContentIdDelete'][0]
    ): array
    {
        $request = $this->restShopBuilderContentsContentIdDeleteRequest($content_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restShopBuilderContentsContentIdDeleteAsync
     *
     * Delete a content
     *
     * @param  int $content_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentsContentIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restShopBuilderContentsContentIdDeleteAsync(
        int $content_id,
        string $contentType = self::contentTypes['restShopBuilderContentsContentIdDelete'][0]
    ): PromiseInterface
    {
        return $this->restShopBuilderContentsContentIdDeleteAsyncWithHttpInfo($content_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restShopBuilderContentsContentIdDeleteAsyncWithHttpInfo
     *
     * Delete a content
     *
     * @param  int $content_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentsContentIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restShopBuilderContentsContentIdDeleteAsyncWithHttpInfo(
        $content_id,
        string $contentType = self::contentTypes['restShopBuilderContentsContentIdDelete'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->restShopBuilderContentsContentIdDeleteRequest($content_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restShopBuilderContentsContentIdDelete'
     *
     * @param  int $content_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentsContentIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restShopBuilderContentsContentIdDeleteRequest(
        $content_id,
        string $contentType = self::contentTypes['restShopBuilderContentsContentIdDelete'][0]
    ): Request
    {

        // verify the required parameter 'content_id' is set
        if ($content_id === null || (is_array($content_id) && count($content_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $content_id when calling restShopBuilderContentsContentIdDelete'
            );
        }


        $resourcePath = '/rest/shop_builder/contents/{contentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($content_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contentId' . '}',
                ObjectSerializer::toPathValue($content_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restShopBuilderContentsContentIdGet
     *
     * Find a content by id.
     *
     * @param  int $content_id content_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentsContentIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck/plenty-client\Model\Content
     */
    public function restShopBuilderContentsContentIdGet(
        int $content_id,
        string $contentType = self::contentTypes['restShopBuilderContentsContentIdGet'][0]
    ): \ck/plenty-client\Model\Content
    {
        list($response) = $this->restShopBuilderContentsContentIdGetWithHttpInfo($content_id, $contentType);
        return $response;
    }

    /**
     * Operation restShopBuilderContentsContentIdGetWithHttpInfo
     *
     * Find a content by id.
     *
     * @param  int $content_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentsContentIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck/plenty-client\Model\Content, HTTP status code, HTTP response headers (array of strings)
     */
    public function restShopBuilderContentsContentIdGetWithHttpInfo(
        int $content_id,
        string $contentType = self::contentTypes['restShopBuilderContentsContentIdGet'][0]
    ): array
    {
        $request = $this->restShopBuilderContentsContentIdGetRequest($content_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck/plenty-client\Model\Content' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck/plenty-client\Model\Content' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck/plenty-client\Model\Content', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck/plenty-client\Model\Content';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck/plenty-client\Model\Content',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restShopBuilderContentsContentIdGetAsync
     *
     * Find a content by id.
     *
     * @param  int $content_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentsContentIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restShopBuilderContentsContentIdGetAsync(
        int $content_id,
        string $contentType = self::contentTypes['restShopBuilderContentsContentIdGet'][0]
    ): PromiseInterface
    {
        return $this->restShopBuilderContentsContentIdGetAsyncWithHttpInfo($content_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restShopBuilderContentsContentIdGetAsyncWithHttpInfo
     *
     * Find a content by id.
     *
     * @param  int $content_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentsContentIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restShopBuilderContentsContentIdGetAsyncWithHttpInfo(
        $content_id,
        string $contentType = self::contentTypes['restShopBuilderContentsContentIdGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck/plenty-client\Model\Content';
        $request = $this->restShopBuilderContentsContentIdGetRequest($content_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restShopBuilderContentsContentIdGet'
     *
     * @param  int $content_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentsContentIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restShopBuilderContentsContentIdGetRequest(
        $content_id,
        string $contentType = self::contentTypes['restShopBuilderContentsContentIdGet'][0]
    ): Request
    {

        // verify the required parameter 'content_id' is set
        if ($content_id === null || (is_array($content_id) && count($content_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $content_id when calling restShopBuilderContentsContentIdGet'
            );
        }


        $resourcePath = '/rest/shop_builder/contents/{contentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($content_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contentId' . '}',
                ObjectSerializer::toPathValue($content_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restShopBuilderContentsContentIdOptions
     *
     * Get cross origin headers.
     *
     * @param  int $content_id content_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentsContentIdOptions'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object
     */
    public function restShopBuilderContentsContentIdOptions(
        int $content_id,
        string $contentType = self::contentTypes['restShopBuilderContentsContentIdOptions'][0]
    ): object
    {
        list($response) = $this->restShopBuilderContentsContentIdOptionsWithHttpInfo($content_id, $contentType);
        return $response;
    }

    /**
     * Operation restShopBuilderContentsContentIdOptionsWithHttpInfo
     *
     * Get cross origin headers.
     *
     * @param  int $content_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentsContentIdOptions'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restShopBuilderContentsContentIdOptionsWithHttpInfo(
        int $content_id,
        string $contentType = self::contentTypes['restShopBuilderContentsContentIdOptions'][0]
    ): array
    {
        $request = $this->restShopBuilderContentsContentIdOptionsRequest($content_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restShopBuilderContentsContentIdOptionsAsync
     *
     * Get cross origin headers.
     *
     * @param  int $content_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentsContentIdOptions'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restShopBuilderContentsContentIdOptionsAsync(
        int $content_id,
        string $contentType = self::contentTypes['restShopBuilderContentsContentIdOptions'][0]
    ): PromiseInterface
    {
        return $this->restShopBuilderContentsContentIdOptionsAsyncWithHttpInfo($content_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restShopBuilderContentsContentIdOptionsAsyncWithHttpInfo
     *
     * Get cross origin headers.
     *
     * @param  int $content_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentsContentIdOptions'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restShopBuilderContentsContentIdOptionsAsyncWithHttpInfo(
        $content_id,
        string $contentType = self::contentTypes['restShopBuilderContentsContentIdOptions'][0]
    ): PromiseInterface
    {
        $returnType = 'object';
        $request = $this->restShopBuilderContentsContentIdOptionsRequest($content_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restShopBuilderContentsContentIdOptions'
     *
     * @param  int $content_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentsContentIdOptions'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restShopBuilderContentsContentIdOptionsRequest(
        $content_id,
        string $contentType = self::contentTypes['restShopBuilderContentsContentIdOptions'][0]
    ): Request
    {

        // verify the required parameter 'content_id' is set
        if ($content_id === null || (is_array($content_id) && count($content_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $content_id when calling restShopBuilderContentsContentIdOptions'
            );
        }


        $resourcePath = '/rest/shop_builder/contents/{contentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($content_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contentId' . '}',
                ObjectSerializer::toPathValue($content_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'OPTIONS',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restShopBuilderContentsContentIdPost
     *
     * Duplicate a content by id.
     *
     * @param  int $content_id content_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentsContentIdPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck/plenty-client\Model\Content
     */
    public function restShopBuilderContentsContentIdPost(
        int $content_id,
        string $contentType = self::contentTypes['restShopBuilderContentsContentIdPost'][0]
    ): \ck/plenty-client\Model\Content
    {
        list($response) = $this->restShopBuilderContentsContentIdPostWithHttpInfo($content_id, $contentType);
        return $response;
    }

    /**
     * Operation restShopBuilderContentsContentIdPostWithHttpInfo
     *
     * Duplicate a content by id.
     *
     * @param  int $content_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentsContentIdPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck/plenty-client\Model\Content, HTTP status code, HTTP response headers (array of strings)
     */
    public function restShopBuilderContentsContentIdPostWithHttpInfo(
        int $content_id,
        string $contentType = self::contentTypes['restShopBuilderContentsContentIdPost'][0]
    ): array
    {
        $request = $this->restShopBuilderContentsContentIdPostRequest($content_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck/plenty-client\Model\Content' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck/plenty-client\Model\Content' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck/plenty-client\Model\Content', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck/plenty-client\Model\Content';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck/plenty-client\Model\Content',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restShopBuilderContentsContentIdPostAsync
     *
     * Duplicate a content by id.
     *
     * @param  int $content_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentsContentIdPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restShopBuilderContentsContentIdPostAsync(
        int $content_id,
        string $contentType = self::contentTypes['restShopBuilderContentsContentIdPost'][0]
    ): PromiseInterface
    {
        return $this->restShopBuilderContentsContentIdPostAsyncWithHttpInfo($content_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restShopBuilderContentsContentIdPostAsyncWithHttpInfo
     *
     * Duplicate a content by id.
     *
     * @param  int $content_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentsContentIdPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restShopBuilderContentsContentIdPostAsyncWithHttpInfo(
        $content_id,
        string $contentType = self::contentTypes['restShopBuilderContentsContentIdPost'][0]
    ): PromiseInterface
    {
        $returnType = '\ck/plenty-client\Model\Content';
        $request = $this->restShopBuilderContentsContentIdPostRequest($content_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restShopBuilderContentsContentIdPost'
     *
     * @param  int $content_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentsContentIdPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restShopBuilderContentsContentIdPostRequest(
        $content_id,
        string $contentType = self::contentTypes['restShopBuilderContentsContentIdPost'][0]
    ): Request
    {

        // verify the required parameter 'content_id' is set
        if ($content_id === null || (is_array($content_id) && count($content_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $content_id when calling restShopBuilderContentsContentIdPost'
            );
        }


        $resourcePath = '/rest/shop_builder/contents/{contentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($content_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contentId' . '}',
                ObjectSerializer::toPathValue($content_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restShopBuilderContentsContentIdPut
     *
     * Update a content.
     *
     * @param  int $content_id content_id (required)
     * @param  string|null $frontend_lang Language to be used when rendering frontend widgets. (optional)
     * @param  \ck/plenty-client\Model\RestShopBuilderContentsPostRequest|null $_rest_shop_builder_contents_content_id _rest_shop_builder_contents_content_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentsContentIdPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck/plenty-client\Model\Content
     */
    public function restShopBuilderContentsContentIdPut(
        int $content_id,
        ?string $frontend_lang = null,
        ?\ck/plenty-client\Model\RestShopBuilderContentsPostRequest $_rest_shop_builder_contents_content_id = null,
        string $contentType = self::contentTypes['restShopBuilderContentsContentIdPut'][0]
    ): \ck/plenty-client\Model\Content
    {
        list($response) = $this->restShopBuilderContentsContentIdPutWithHttpInfo($content_id, $frontend_lang, $_rest_shop_builder_contents_content_id, $contentType);
        return $response;
    }

    /**
     * Operation restShopBuilderContentsContentIdPutWithHttpInfo
     *
     * Update a content.
     *
     * @param  int $content_id (required)
     * @param  string|null $frontend_lang Language to be used when rendering frontend widgets. (optional)
     * @param  \ck/plenty-client\Model\RestShopBuilderContentsPostRequest|null $_rest_shop_builder_contents_content_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentsContentIdPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck/plenty-client\Model\Content, HTTP status code, HTTP response headers (array of strings)
     */
    public function restShopBuilderContentsContentIdPutWithHttpInfo(
        int $content_id,
        ?string $frontend_lang = null,
        ?\ck/plenty-client\Model\RestShopBuilderContentsPostRequest $_rest_shop_builder_contents_content_id = null,
        string $contentType = self::contentTypes['restShopBuilderContentsContentIdPut'][0]
    ): array
    {
        $request = $this->restShopBuilderContentsContentIdPutRequest($content_id, $frontend_lang, $_rest_shop_builder_contents_content_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck/plenty-client\Model\Content' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck/plenty-client\Model\Content' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck/plenty-client\Model\Content', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck/plenty-client\Model\Content';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck/plenty-client\Model\Content',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restShopBuilderContentsContentIdPutAsync
     *
     * Update a content.
     *
     * @param  int $content_id (required)
     * @param  string|null $frontend_lang Language to be used when rendering frontend widgets. (optional)
     * @param  \ck/plenty-client\Model\RestShopBuilderContentsPostRequest|null $_rest_shop_builder_contents_content_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentsContentIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restShopBuilderContentsContentIdPutAsync(
        int $content_id,
        ?string $frontend_lang = null,
        ?\ck/plenty-client\Model\RestShopBuilderContentsPostRequest $_rest_shop_builder_contents_content_id = null,
        string $contentType = self::contentTypes['restShopBuilderContentsContentIdPut'][0]
    ): PromiseInterface
    {
        return $this->restShopBuilderContentsContentIdPutAsyncWithHttpInfo($content_id, $frontend_lang, $_rest_shop_builder_contents_content_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restShopBuilderContentsContentIdPutAsyncWithHttpInfo
     *
     * Update a content.
     *
     * @param  int $content_id (required)
     * @param  string|null $frontend_lang Language to be used when rendering frontend widgets. (optional)
     * @param  \ck/plenty-client\Model\RestShopBuilderContentsPostRequest|null $_rest_shop_builder_contents_content_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentsContentIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restShopBuilderContentsContentIdPutAsyncWithHttpInfo(
        $content_id,
        $frontend_lang = null,
        $_rest_shop_builder_contents_content_id = null,
        string $contentType = self::contentTypes['restShopBuilderContentsContentIdPut'][0]
    ): PromiseInterface
    {
        $returnType = '\ck/plenty-client\Model\Content';
        $request = $this->restShopBuilderContentsContentIdPutRequest($content_id, $frontend_lang, $_rest_shop_builder_contents_content_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restShopBuilderContentsContentIdPut'
     *
     * @param  int $content_id (required)
     * @param  string|null $frontend_lang Language to be used when rendering frontend widgets. (optional)
     * @param  \ck/plenty-client\Model\RestShopBuilderContentsPostRequest|null $_rest_shop_builder_contents_content_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentsContentIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restShopBuilderContentsContentIdPutRequest(
        $content_id,
        $frontend_lang = null,
        $_rest_shop_builder_contents_content_id = null,
        string $contentType = self::contentTypes['restShopBuilderContentsContentIdPut'][0]
    ): Request
    {

        // verify the required parameter 'content_id' is set
        if ($content_id === null || (is_array($content_id) && count($content_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $content_id when calling restShopBuilderContentsContentIdPut'
            );
        }




        $resourcePath = '/rest/shop_builder/contents/{contentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $frontend_lang,
            'frontendLang', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($content_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contentId' . '}',
                ObjectSerializer::toPathValue($content_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($_rest_shop_builder_contents_content_id)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_rest_shop_builder_contents_content_id));
            } else {
                $httpBody = $_rest_shop_builder_contents_content_id;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restShopBuilderContentsGet
     *
     * List all contents.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck/plenty-client\Model\Content[]
     */
    public function restShopBuilderContentsGet(
        string $contentType = self::contentTypes['restShopBuilderContentsGet'][0]
    ): array
    {
        list($response) = $this->restShopBuilderContentsGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation restShopBuilderContentsGetWithHttpInfo
     *
     * List all contents.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck/plenty-client\Model\Content[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restShopBuilderContentsGetWithHttpInfo(
        string $contentType = self::contentTypes['restShopBuilderContentsGet'][0]
    ): array
    {
        $request = $this->restShopBuilderContentsGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck/plenty-client\Model\Content[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck/plenty-client\Model\Content[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck/plenty-client\Model\Content[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck/plenty-client\Model\Content[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck/plenty-client\Model\Content[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restShopBuilderContentsGetAsync
     *
     * List all contents.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restShopBuilderContentsGetAsync(
        string $contentType = self::contentTypes['restShopBuilderContentsGet'][0]
    ): PromiseInterface
    {
        return $this->restShopBuilderContentsGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restShopBuilderContentsGetAsyncWithHttpInfo
     *
     * List all contents.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restShopBuilderContentsGetAsyncWithHttpInfo(
        string $contentType = self::contentTypes['restShopBuilderContentsGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck/plenty-client\Model\Content[]';
        $request = $this->restShopBuilderContentsGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restShopBuilderContentsGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restShopBuilderContentsGetRequest(
        string $contentType = self::contentTypes['restShopBuilderContentsGet'][0]
    ): Request
    {


        $resourcePath = '/rest/shop_builder/contents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restShopBuilderContentsPost
     *
     * Create new content.
     *
     * @param  string|null $frontend_lang Language to be used when rendering frontend widgets. (optional)
     * @param  \ck/plenty-client\Model\RestShopBuilderContentsPostRequest|null $_rest_shop_builder_contents _rest_shop_builder_contents (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentsPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck/plenty-client\Model\Content
     */
    public function restShopBuilderContentsPost(
        ?string $frontend_lang = null,
        ?\ck/plenty-client\Model\RestShopBuilderContentsPostRequest $_rest_shop_builder_contents = null,
        string $contentType = self::contentTypes['restShopBuilderContentsPost'][0]
    ): \ck/plenty-client\Model\Content
    {
        list($response) = $this->restShopBuilderContentsPostWithHttpInfo($frontend_lang, $_rest_shop_builder_contents, $contentType);
        return $response;
    }

    /**
     * Operation restShopBuilderContentsPostWithHttpInfo
     *
     * Create new content.
     *
     * @param  string|null $frontend_lang Language to be used when rendering frontend widgets. (optional)
     * @param  \ck/plenty-client\Model\RestShopBuilderContentsPostRequest|null $_rest_shop_builder_contents (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentsPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck/plenty-client\Model\Content, HTTP status code, HTTP response headers (array of strings)
     */
    public function restShopBuilderContentsPostWithHttpInfo(
        ?string $frontend_lang = null,
        ?\ck/plenty-client\Model\RestShopBuilderContentsPostRequest $_rest_shop_builder_contents = null,
        string $contentType = self::contentTypes['restShopBuilderContentsPost'][0]
    ): array
    {
        $request = $this->restShopBuilderContentsPostRequest($frontend_lang, $_rest_shop_builder_contents, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck/plenty-client\Model\Content' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck/plenty-client\Model\Content' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck/plenty-client\Model\Content', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck/plenty-client\Model\Content';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck/plenty-client\Model\Content',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restShopBuilderContentsPostAsync
     *
     * Create new content.
     *
     * @param  string|null $frontend_lang Language to be used when rendering frontend widgets. (optional)
     * @param  \ck/plenty-client\Model\RestShopBuilderContentsPostRequest|null $_rest_shop_builder_contents (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restShopBuilderContentsPostAsync(
        ?string $frontend_lang = null,
        ?\ck/plenty-client\Model\RestShopBuilderContentsPostRequest $_rest_shop_builder_contents = null,
        string $contentType = self::contentTypes['restShopBuilderContentsPost'][0]
    ): PromiseInterface
    {
        return $this->restShopBuilderContentsPostAsyncWithHttpInfo($frontend_lang, $_rest_shop_builder_contents, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restShopBuilderContentsPostAsyncWithHttpInfo
     *
     * Create new content.
     *
     * @param  string|null $frontend_lang Language to be used when rendering frontend widgets. (optional)
     * @param  \ck/plenty-client\Model\RestShopBuilderContentsPostRequest|null $_rest_shop_builder_contents (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restShopBuilderContentsPostAsyncWithHttpInfo(
        $frontend_lang = null,
        $_rest_shop_builder_contents = null,
        string $contentType = self::contentTypes['restShopBuilderContentsPost'][0]
    ): PromiseInterface
    {
        $returnType = '\ck/plenty-client\Model\Content';
        $request = $this->restShopBuilderContentsPostRequest($frontend_lang, $_rest_shop_builder_contents, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restShopBuilderContentsPost'
     *
     * @param  string|null $frontend_lang Language to be used when rendering frontend widgets. (optional)
     * @param  \ck/plenty-client\Model\RestShopBuilderContentsPostRequest|null $_rest_shop_builder_contents (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restShopBuilderContentsPostRequest(
        $frontend_lang = null,
        $_rest_shop_builder_contents = null,
        string $contentType = self::contentTypes['restShopBuilderContentsPost'][0]
    ): Request
    {




        $resourcePath = '/rest/shop_builder/contents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $frontend_lang,
            'frontendLang', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($_rest_shop_builder_contents)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_rest_shop_builder_contents));
            } else {
                $httpBody = $_rest_shop_builder_contents;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restShopBuilderContentsPut
     *
     * Generate templates for all contents.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentsPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object
     */
    public function restShopBuilderContentsPut(
        string $contentType = self::contentTypes['restShopBuilderContentsPut'][0]
    ): object
    {
        list($response) = $this->restShopBuilderContentsPutWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation restShopBuilderContentsPutWithHttpInfo
     *
     * Generate templates for all contents.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentsPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restShopBuilderContentsPutWithHttpInfo(
        string $contentType = self::contentTypes['restShopBuilderContentsPut'][0]
    ): array
    {
        $request = $this->restShopBuilderContentsPutRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restShopBuilderContentsPutAsync
     *
     * Generate templates for all contents.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentsPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restShopBuilderContentsPutAsync(
        string $contentType = self::contentTypes['restShopBuilderContentsPut'][0]
    ): PromiseInterface
    {
        return $this->restShopBuilderContentsPutAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restShopBuilderContentsPutAsyncWithHttpInfo
     *
     * Generate templates for all contents.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentsPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restShopBuilderContentsPutAsyncWithHttpInfo(
        string $contentType = self::contentTypes['restShopBuilderContentsPut'][0]
    ): PromiseInterface
    {
        $returnType = 'object';
        $request = $this->restShopBuilderContentsPutRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restShopBuilderContentsPut'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentsPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restShopBuilderContentsPutRequest(
        string $contentType = self::contentTypes['restShopBuilderContentsPut'][0]
    ): Request
    {


        $resourcePath = '/rest/shop_builder/contents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restShopBuilderContentsSearchGet
     *
     * Search for contents.
     *
     * @param  int|null $page The page of results to search for (optional)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  string|null $data_provider_name Name of the content (optional)
     * @param  string|null $type Type of the content (optional)
     * @param  string|null $container_name Name of the linked container (optional)
     * @param  int|null $plugin_set_id Id of the linked plugin set (optional)
     * @param  string|null $language Language of the content link (optional)
     * @param  int|null $active Active state of the content link (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentsSearchGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck/plenty-client\Model\RestAccountsContactsSalesRepresentativeRegionsGet200Response
     */
    public function restShopBuilderContentsSearchGet(
        ?int $page = null,
        ?int $items_per_page = null,
        ?string $data_provider_name = null,
        ?string $type = null,
        ?string $container_name = null,
        ?int $plugin_set_id = null,
        ?string $language = null,
        ?int $active = null,
        string $contentType = self::contentTypes['restShopBuilderContentsSearchGet'][0]
    ): \ck/plenty-client\Model\RestAccountsContactsSalesRepresentativeRegionsGet200Response
    {
        list($response) = $this->restShopBuilderContentsSearchGetWithHttpInfo($page, $items_per_page, $data_provider_name, $type, $container_name, $plugin_set_id, $language, $active, $contentType);
        return $response;
    }

    /**
     * Operation restShopBuilderContentsSearchGetWithHttpInfo
     *
     * Search for contents.
     *
     * @param  int|null $page The page of results to search for (optional)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  string|null $data_provider_name Name of the content (optional)
     * @param  string|null $type Type of the content (optional)
     * @param  string|null $container_name Name of the linked container (optional)
     * @param  int|null $plugin_set_id Id of the linked plugin set (optional)
     * @param  string|null $language Language of the content link (optional)
     * @param  int|null $active Active state of the content link (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentsSearchGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck/plenty-client\Model\RestAccountsContactsSalesRepresentativeRegionsGet200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function restShopBuilderContentsSearchGetWithHttpInfo(
        ?int $page = null,
        ?int $items_per_page = null,
        ?string $data_provider_name = null,
        ?string $type = null,
        ?string $container_name = null,
        ?int $plugin_set_id = null,
        ?string $language = null,
        ?int $active = null,
        string $contentType = self::contentTypes['restShopBuilderContentsSearchGet'][0]
    ): array
    {
        $request = $this->restShopBuilderContentsSearchGetRequest($page, $items_per_page, $data_provider_name, $type, $container_name, $plugin_set_id, $language, $active, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck/plenty-client\Model\RestAccountsContactsSalesRepresentativeRegionsGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck/plenty-client\Model\RestAccountsContactsSalesRepresentativeRegionsGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck/plenty-client\Model\RestAccountsContactsSalesRepresentativeRegionsGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck/plenty-client\Model\RestAccountsContactsSalesRepresentativeRegionsGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck/plenty-client\Model\RestAccountsContactsSalesRepresentativeRegionsGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restShopBuilderContentsSearchGetAsync
     *
     * Search for contents.
     *
     * @param  int|null $page The page of results to search for (optional)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  string|null $data_provider_name Name of the content (optional)
     * @param  string|null $type Type of the content (optional)
     * @param  string|null $container_name Name of the linked container (optional)
     * @param  int|null $plugin_set_id Id of the linked plugin set (optional)
     * @param  string|null $language Language of the content link (optional)
     * @param  int|null $active Active state of the content link (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentsSearchGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restShopBuilderContentsSearchGetAsync(
        ?int $page = null,
        ?int $items_per_page = null,
        ?string $data_provider_name = null,
        ?string $type = null,
        ?string $container_name = null,
        ?int $plugin_set_id = null,
        ?string $language = null,
        ?int $active = null,
        string $contentType = self::contentTypes['restShopBuilderContentsSearchGet'][0]
    ): PromiseInterface
    {
        return $this->restShopBuilderContentsSearchGetAsyncWithHttpInfo($page, $items_per_page, $data_provider_name, $type, $container_name, $plugin_set_id, $language, $active, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restShopBuilderContentsSearchGetAsyncWithHttpInfo
     *
     * Search for contents.
     *
     * @param  int|null $page The page of results to search for (optional)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  string|null $data_provider_name Name of the content (optional)
     * @param  string|null $type Type of the content (optional)
     * @param  string|null $container_name Name of the linked container (optional)
     * @param  int|null $plugin_set_id Id of the linked plugin set (optional)
     * @param  string|null $language Language of the content link (optional)
     * @param  int|null $active Active state of the content link (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentsSearchGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restShopBuilderContentsSearchGetAsyncWithHttpInfo(
        $page = null,
        $items_per_page = null,
        $data_provider_name = null,
        $type = null,
        $container_name = null,
        $plugin_set_id = null,
        $language = null,
        $active = null,
        string $contentType = self::contentTypes['restShopBuilderContentsSearchGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck/plenty-client\Model\RestAccountsContactsSalesRepresentativeRegionsGet200Response';
        $request = $this->restShopBuilderContentsSearchGetRequest($page, $items_per_page, $data_provider_name, $type, $container_name, $plugin_set_id, $language, $active, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restShopBuilderContentsSearchGet'
     *
     * @param  int|null $page The page of results to search for (optional)
     * @param  int|null $items_per_page The number of items to list per page (optional)
     * @param  string|null $data_provider_name Name of the content (optional)
     * @param  string|null $type Type of the content (optional)
     * @param  string|null $container_name Name of the linked container (optional)
     * @param  int|null $plugin_set_id Id of the linked plugin set (optional)
     * @param  string|null $language Language of the content link (optional)
     * @param  int|null $active Active state of the content link (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderContentsSearchGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restShopBuilderContentsSearchGetRequest(
        $page = null,
        $items_per_page = null,
        $data_provider_name = null,
        $type = null,
        $container_name = null,
        $plugin_set_id = null,
        $language = null,
        $active = null,
        string $contentType = self::contentTypes['restShopBuilderContentsSearchGet'][0]
    ): Request
    {










        $resourcePath = '/rest/shop_builder/contents/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $items_per_page,
            'itemsPerPage', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $data_provider_name,
            'dataProviderName', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'type', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $container_name,
            'containerName', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $plugin_set_id,
            'pluginSetId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $language,
            'language', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $active,
            'active', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restShopBuilderPagesGet
     *
     * List content pages
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderPagesGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck/plenty-client\Model\ContentPage[]
     */
    public function restShopBuilderPagesGet(
        string $contentType = self::contentTypes['restShopBuilderPagesGet'][0]
    ): array
    {
        list($response) = $this->restShopBuilderPagesGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation restShopBuilderPagesGetWithHttpInfo
     *
     * List content pages
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderPagesGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck/plenty-client\Model\ContentPage[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restShopBuilderPagesGetWithHttpInfo(
        string $contentType = self::contentTypes['restShopBuilderPagesGet'][0]
    ): array
    {
        $request = $this->restShopBuilderPagesGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck/plenty-client\Model\ContentPage[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck/plenty-client\Model\ContentPage[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck/plenty-client\Model\ContentPage[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck/plenty-client\Model\ContentPage[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck/plenty-client\Model\ContentPage[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restShopBuilderPagesGetAsync
     *
     * List content pages
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderPagesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restShopBuilderPagesGetAsync(
        string $contentType = self::contentTypes['restShopBuilderPagesGet'][0]
    ): PromiseInterface
    {
        return $this->restShopBuilderPagesGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restShopBuilderPagesGetAsyncWithHttpInfo
     *
     * List content pages
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderPagesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restShopBuilderPagesGetAsyncWithHttpInfo(
        string $contentType = self::contentTypes['restShopBuilderPagesGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck/plenty-client\Model\ContentPage[]';
        $request = $this->restShopBuilderPagesGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restShopBuilderPagesGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderPagesGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restShopBuilderPagesGetRequest(
        string $contentType = self::contentTypes['restShopBuilderPagesGet'][0]
    ): Request
    {


        $resourcePath = '/rest/shop_builder/pages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restShopBuilderWidgetsGet
     *
     * List all widgets
     *
     * @param  string|null $identifier Filter results by widget identifier. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderWidgetsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object
     */
    public function restShopBuilderWidgetsGet(
        ?string $identifier = null,
        string $contentType = self::contentTypes['restShopBuilderWidgetsGet'][0]
    ): object
    {
        list($response) = $this->restShopBuilderWidgetsGetWithHttpInfo($identifier, $contentType);
        return $response;
    }

    /**
     * Operation restShopBuilderWidgetsGetWithHttpInfo
     *
     * List all widgets
     *
     * @param  string|null $identifier Filter results by widget identifier. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderWidgetsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restShopBuilderWidgetsGetWithHttpInfo(
        ?string $identifier = null,
        string $contentType = self::contentTypes['restShopBuilderWidgetsGet'][0]
    ): array
    {
        $request = $this->restShopBuilderWidgetsGetRequest($identifier, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restShopBuilderWidgetsGetAsync
     *
     * List all widgets
     *
     * @param  string|null $identifier Filter results by widget identifier. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderWidgetsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restShopBuilderWidgetsGetAsync(
        ?string $identifier = null,
        string $contentType = self::contentTypes['restShopBuilderWidgetsGet'][0]
    ): PromiseInterface
    {
        return $this->restShopBuilderWidgetsGetAsyncWithHttpInfo($identifier, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restShopBuilderWidgetsGetAsyncWithHttpInfo
     *
     * List all widgets
     *
     * @param  string|null $identifier Filter results by widget identifier. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderWidgetsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restShopBuilderWidgetsGetAsyncWithHttpInfo(
        $identifier = null,
        string $contentType = self::contentTypes['restShopBuilderWidgetsGet'][0]
    ): PromiseInterface
    {
        $returnType = 'object';
        $request = $this->restShopBuilderWidgetsGetRequest($identifier, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restShopBuilderWidgetsGet'
     *
     * @param  string|null $identifier Filter results by widget identifier. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderWidgetsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restShopBuilderWidgetsGetRequest(
        $identifier = null,
        string $contentType = self::contentTypes['restShopBuilderWidgetsGet'][0]
    ): Request
    {



        $resourcePath = '/rest/shop_builder/widgets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $identifier,
            'identifier', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restShopBuilderWidgetsOptions
     *
     * Get cross origin headers.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderWidgetsOptions'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object
     */
    public function restShopBuilderWidgetsOptions(
        string $contentType = self::contentTypes['restShopBuilderWidgetsOptions'][0]
    ): object
    {
        list($response) = $this->restShopBuilderWidgetsOptionsWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation restShopBuilderWidgetsOptionsWithHttpInfo
     *
     * Get cross origin headers.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderWidgetsOptions'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restShopBuilderWidgetsOptionsWithHttpInfo(
        string $contentType = self::contentTypes['restShopBuilderWidgetsOptions'][0]
    ): array
    {
        $request = $this->restShopBuilderWidgetsOptionsRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restShopBuilderWidgetsOptionsAsync
     *
     * Get cross origin headers.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderWidgetsOptions'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restShopBuilderWidgetsOptionsAsync(
        string $contentType = self::contentTypes['restShopBuilderWidgetsOptions'][0]
    ): PromiseInterface
    {
        return $this->restShopBuilderWidgetsOptionsAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restShopBuilderWidgetsOptionsAsyncWithHttpInfo
     *
     * Get cross origin headers.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderWidgetsOptions'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restShopBuilderWidgetsOptionsAsyncWithHttpInfo(
        string $contentType = self::contentTypes['restShopBuilderWidgetsOptions'][0]
    ): PromiseInterface
    {
        $returnType = 'object';
        $request = $this->restShopBuilderWidgetsOptionsRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restShopBuilderWidgetsOptions'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderWidgetsOptions'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restShopBuilderWidgetsOptionsRequest(
        string $contentType = self::contentTypes['restShopBuilderWidgetsOptions'][0]
    ): Request
    {


        $resourcePath = '/rest/shop_builder/widgets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'OPTIONS',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restShopBuilderWidgetsPost
     *
     * Render the preview for widgets
     *
     * @param  string|null $frontend_lang Language to be used when rendering frontend widgets. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderWidgetsPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return object
     */
    public function restShopBuilderWidgetsPost(
        ?string $frontend_lang = null,
        string $contentType = self::contentTypes['restShopBuilderWidgetsPost'][0]
    ): object
    {
        list($response) = $this->restShopBuilderWidgetsPostWithHttpInfo($frontend_lang, $contentType);
        return $response;
    }

    /**
     * Operation restShopBuilderWidgetsPostWithHttpInfo
     *
     * Render the preview for widgets
     *
     * @param  string|null $frontend_lang Language to be used when rendering frontend widgets. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderWidgetsPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restShopBuilderWidgetsPostWithHttpInfo(
        ?string $frontend_lang = null,
        string $contentType = self::contentTypes['restShopBuilderWidgetsPost'][0]
    ): array
    {
        $request = $this->restShopBuilderWidgetsPostRequest($frontend_lang, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restShopBuilderWidgetsPostAsync
     *
     * Render the preview for widgets
     *
     * @param  string|null $frontend_lang Language to be used when rendering frontend widgets. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderWidgetsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restShopBuilderWidgetsPostAsync(
        ?string $frontend_lang = null,
        string $contentType = self::contentTypes['restShopBuilderWidgetsPost'][0]
    ): PromiseInterface
    {
        return $this->restShopBuilderWidgetsPostAsyncWithHttpInfo($frontend_lang, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restShopBuilderWidgetsPostAsyncWithHttpInfo
     *
     * Render the preview for widgets
     *
     * @param  string|null $frontend_lang Language to be used when rendering frontend widgets. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderWidgetsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restShopBuilderWidgetsPostAsyncWithHttpInfo(
        $frontend_lang = null,
        string $contentType = self::contentTypes['restShopBuilderWidgetsPost'][0]
    ): PromiseInterface
    {
        $returnType = 'object';
        $request = $this->restShopBuilderWidgetsPostRequest($frontend_lang, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restShopBuilderWidgetsPost'
     *
     * @param  string|null $frontend_lang Language to be used when rendering frontend widgets. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restShopBuilderWidgetsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restShopBuilderWidgetsPostRequest(
        $frontend_lang = null,
        string $contentType = self::contentTypes['restShopBuilderWidgetsPost'][0]
    ): Request
    {



        $resourcePath = '/rest/shop_builder/widgets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $frontend_lang,
            'frontendLang', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
