<?php
/**
 * FeedbackApi
 * PHP version 8.1
 *
 * @package  ck/plenty-client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ck/plenty-client\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use ck/plenty-client\ApiException;
use ck/plenty-client\Configuration;
use ck/plenty-client\HeaderSelector;
use ck/plenty-client\ObjectSerializer;

/**
 * FeedbackApi Class Doc Comment
 *
 * @package  ck/plenty-client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class FeedbackApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'restFeedbacksCommentCommentIdDelete' => [
            'application/json',
        ],
        'restFeedbacksCommentCommentIdGet' => [
            'application/json',
        ],
        'restFeedbacksCommentPost' => [
            'application/json',
        ],
        'restFeedbacksCommentsGet' => [
            'application/json',
        ],
        'restFeedbacksDeleteFeedbacksFeedbackIdsDelete' => [
            'application/json',
        ],
        'restFeedbacksFeedbackFeedbackIdDelete' => [
            'application/json',
        ],
        'restFeedbacksFeedbackFeedbackIdGet' => [
            'application/json',
        ],
        'restFeedbacksFeedbackFeedbackIdPut' => [
            'application/json',
        ],
        'restFeedbacksFeedbackPost' => [
            'application/json',
        ],
        'restFeedbacksFeedbackRepliesFeedbackIdGet' => [
            'application/json',
        ],
        'restFeedbacksFeedbacksGet' => [
            'application/json',
        ],
        'restFeedbacksFeedbacksVisibilityPut' => [
            'application/json',
        ],
        'restFeedbacksMigratePost' => [
            'application/json',
        ],
        'restFeedbacksRatingPost' => [
            'application/json',
        ],
        'restFeedbacksRatingRatingIdDelete' => [
            'application/json',
        ],
        'restFeedbacksRatingRatingIdGet' => [
            'application/json',
        ],
        'restFeedbacksRatingsGet' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation restFeedbacksCommentCommentIdDelete
     *
     * Delete a feedback comment
     *
     * @param  int $feedback_comment_id The ID of the feedback comment (required)
     * @param  int $comment_id comment_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksCommentCommentIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return void
     */
    public function restFeedbacksCommentCommentIdDelete(
        int $feedback_comment_id,
        int $comment_id,
        string $contentType = self::contentTypes['restFeedbacksCommentCommentIdDelete'][0]
    ): void
    {
        $this->restFeedbacksCommentCommentIdDeleteWithHttpInfo($feedback_comment_id, $comment_id, $contentType);
    }

    /**
     * Operation restFeedbacksCommentCommentIdDeleteWithHttpInfo
     *
     * Delete a feedback comment
     *
     * @param  int $feedback_comment_id The ID of the feedback comment (required)
     * @param  int $comment_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksCommentCommentIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restFeedbacksCommentCommentIdDeleteWithHttpInfo(
        int $feedback_comment_id,
        int $comment_id,
        string $contentType = self::contentTypes['restFeedbacksCommentCommentIdDelete'][0]
    ): array
    {
        $request = $this->restFeedbacksCommentCommentIdDeleteRequest($feedback_comment_id, $comment_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restFeedbacksCommentCommentIdDeleteAsync
     *
     * Delete a feedback comment
     *
     * @param  int $feedback_comment_id The ID of the feedback comment (required)
     * @param  int $comment_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksCommentCommentIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restFeedbacksCommentCommentIdDeleteAsync(
        int $feedback_comment_id,
        int $comment_id,
        string $contentType = self::contentTypes['restFeedbacksCommentCommentIdDelete'][0]
    ): PromiseInterface
    {
        return $this->restFeedbacksCommentCommentIdDeleteAsyncWithHttpInfo($feedback_comment_id, $comment_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restFeedbacksCommentCommentIdDeleteAsyncWithHttpInfo
     *
     * Delete a feedback comment
     *
     * @param  int $feedback_comment_id The ID of the feedback comment (required)
     * @param  int $comment_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksCommentCommentIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restFeedbacksCommentCommentIdDeleteAsyncWithHttpInfo(
        $feedback_comment_id,
        $comment_id,
        string $contentType = self::contentTypes['restFeedbacksCommentCommentIdDelete'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->restFeedbacksCommentCommentIdDeleteRequest($feedback_comment_id, $comment_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restFeedbacksCommentCommentIdDelete'
     *
     * @param  int $feedback_comment_id The ID of the feedback comment (required)
     * @param  int $comment_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksCommentCommentIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restFeedbacksCommentCommentIdDeleteRequest(
        $feedback_comment_id,
        $comment_id,
        string $contentType = self::contentTypes['restFeedbacksCommentCommentIdDelete'][0]
    ): Request
    {

        // verify the required parameter 'feedback_comment_id' is set
        if ($feedback_comment_id === null || (is_array($feedback_comment_id) && count($feedback_comment_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $feedback_comment_id when calling restFeedbacksCommentCommentIdDelete'
            );
        }

        // verify the required parameter 'comment_id' is set
        if ($comment_id === null || (is_array($comment_id) && count($comment_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $comment_id when calling restFeedbacksCommentCommentIdDelete'
            );
        }


        $resourcePath = '/rest/feedbacks/comment/{commentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $feedback_comment_id,
            'feedbackCommentId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($comment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'commentId' . '}',
                ObjectSerializer::toPathValue($comment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restFeedbacksCommentCommentIdGet
     *
     * Get a feedback comment
     *
     * @param  int $feedback_comment_id The ID of the feedback comment (required)
     * @param  int $comment_id comment_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksCommentCommentIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck/plenty-client\Model\FeedbackComment
     */
    public function restFeedbacksCommentCommentIdGet(
        int $feedback_comment_id,
        int $comment_id,
        string $contentType = self::contentTypes['restFeedbacksCommentCommentIdGet'][0]
    ): \ck/plenty-client\Model\FeedbackComment
    {
        list($response) = $this->restFeedbacksCommentCommentIdGetWithHttpInfo($feedback_comment_id, $comment_id, $contentType);
        return $response;
    }

    /**
     * Operation restFeedbacksCommentCommentIdGetWithHttpInfo
     *
     * Get a feedback comment
     *
     * @param  int $feedback_comment_id The ID of the feedback comment (required)
     * @param  int $comment_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksCommentCommentIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck/plenty-client\Model\FeedbackComment, HTTP status code, HTTP response headers (array of strings)
     */
    public function restFeedbacksCommentCommentIdGetWithHttpInfo(
        int $feedback_comment_id,
        int $comment_id,
        string $contentType = self::contentTypes['restFeedbacksCommentCommentIdGet'][0]
    ): array
    {
        $request = $this->restFeedbacksCommentCommentIdGetRequest($feedback_comment_id, $comment_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck/plenty-client\Model\FeedbackComment' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck/plenty-client\Model\FeedbackComment' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck/plenty-client\Model\FeedbackComment', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck/plenty-client\Model\FeedbackComment';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck/plenty-client\Model\FeedbackComment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restFeedbacksCommentCommentIdGetAsync
     *
     * Get a feedback comment
     *
     * @param  int $feedback_comment_id The ID of the feedback comment (required)
     * @param  int $comment_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksCommentCommentIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restFeedbacksCommentCommentIdGetAsync(
        int $feedback_comment_id,
        int $comment_id,
        string $contentType = self::contentTypes['restFeedbacksCommentCommentIdGet'][0]
    ): PromiseInterface
    {
        return $this->restFeedbacksCommentCommentIdGetAsyncWithHttpInfo($feedback_comment_id, $comment_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restFeedbacksCommentCommentIdGetAsyncWithHttpInfo
     *
     * Get a feedback comment
     *
     * @param  int $feedback_comment_id The ID of the feedback comment (required)
     * @param  int $comment_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksCommentCommentIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restFeedbacksCommentCommentIdGetAsyncWithHttpInfo(
        $feedback_comment_id,
        $comment_id,
        string $contentType = self::contentTypes['restFeedbacksCommentCommentIdGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck/plenty-client\Model\FeedbackComment';
        $request = $this->restFeedbacksCommentCommentIdGetRequest($feedback_comment_id, $comment_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restFeedbacksCommentCommentIdGet'
     *
     * @param  int $feedback_comment_id The ID of the feedback comment (required)
     * @param  int $comment_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksCommentCommentIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restFeedbacksCommentCommentIdGetRequest(
        $feedback_comment_id,
        $comment_id,
        string $contentType = self::contentTypes['restFeedbacksCommentCommentIdGet'][0]
    ): Request
    {

        // verify the required parameter 'feedback_comment_id' is set
        if ($feedback_comment_id === null || (is_array($feedback_comment_id) && count($feedback_comment_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $feedback_comment_id when calling restFeedbacksCommentCommentIdGet'
            );
        }

        // verify the required parameter 'comment_id' is set
        if ($comment_id === null || (is_array($comment_id) && count($comment_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $comment_id when calling restFeedbacksCommentCommentIdGet'
            );
        }


        $resourcePath = '/rest/feedbacks/comment/{commentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $feedback_comment_id,
            'feedbackCommentId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($comment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'commentId' . '}',
                ObjectSerializer::toPathValue($comment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restFeedbacksCommentPost
     *
     * Create a feedback comment
     *
     * @param  string $message Feedback comment message (required)
     * @param  int $comment_relation_target_type_id The type ID of the comment&#39;s target (required)
     * @param  int $comment_relation_target_id The ID of the comment&#39;s target (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksCommentPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck/plenty-client\Model\FeedbackComment
     */
    public function restFeedbacksCommentPost(
        string $message,
        int $comment_relation_target_type_id,
        int $comment_relation_target_id,
        string $contentType = self::contentTypes['restFeedbacksCommentPost'][0]
    ): \ck/plenty-client\Model\FeedbackComment
    {
        list($response) = $this->restFeedbacksCommentPostWithHttpInfo($message, $comment_relation_target_type_id, $comment_relation_target_id, $contentType);
        return $response;
    }

    /**
     * Operation restFeedbacksCommentPostWithHttpInfo
     *
     * Create a feedback comment
     *
     * @param  string $message Feedback comment message (required)
     * @param  int $comment_relation_target_type_id The type ID of the comment&#39;s target (required)
     * @param  int $comment_relation_target_id The ID of the comment&#39;s target (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksCommentPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck/plenty-client\Model\FeedbackComment, HTTP status code, HTTP response headers (array of strings)
     */
    public function restFeedbacksCommentPostWithHttpInfo(
        string $message,
        int $comment_relation_target_type_id,
        int $comment_relation_target_id,
        string $contentType = self::contentTypes['restFeedbacksCommentPost'][0]
    ): array
    {
        $request = $this->restFeedbacksCommentPostRequest($message, $comment_relation_target_type_id, $comment_relation_target_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck/plenty-client\Model\FeedbackComment' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck/plenty-client\Model\FeedbackComment' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck/plenty-client\Model\FeedbackComment', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck/plenty-client\Model\FeedbackComment';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck/plenty-client\Model\FeedbackComment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restFeedbacksCommentPostAsync
     *
     * Create a feedback comment
     *
     * @param  string $message Feedback comment message (required)
     * @param  int $comment_relation_target_type_id The type ID of the comment&#39;s target (required)
     * @param  int $comment_relation_target_id The ID of the comment&#39;s target (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksCommentPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restFeedbacksCommentPostAsync(
        string $message,
        int $comment_relation_target_type_id,
        int $comment_relation_target_id,
        string $contentType = self::contentTypes['restFeedbacksCommentPost'][0]
    ): PromiseInterface
    {
        return $this->restFeedbacksCommentPostAsyncWithHttpInfo($message, $comment_relation_target_type_id, $comment_relation_target_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restFeedbacksCommentPostAsyncWithHttpInfo
     *
     * Create a feedback comment
     *
     * @param  string $message Feedback comment message (required)
     * @param  int $comment_relation_target_type_id The type ID of the comment&#39;s target (required)
     * @param  int $comment_relation_target_id The ID of the comment&#39;s target (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksCommentPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restFeedbacksCommentPostAsyncWithHttpInfo(
        $message,
        $comment_relation_target_type_id,
        $comment_relation_target_id,
        string $contentType = self::contentTypes['restFeedbacksCommentPost'][0]
    ): PromiseInterface
    {
        $returnType = '\ck/plenty-client\Model\FeedbackComment';
        $request = $this->restFeedbacksCommentPostRequest($message, $comment_relation_target_type_id, $comment_relation_target_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restFeedbacksCommentPost'
     *
     * @param  string $message Feedback comment message (required)
     * @param  int $comment_relation_target_type_id The type ID of the comment&#39;s target (required)
     * @param  int $comment_relation_target_id The ID of the comment&#39;s target (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksCommentPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restFeedbacksCommentPostRequest(
        $message,
        $comment_relation_target_type_id,
        $comment_relation_target_id,
        string $contentType = self::contentTypes['restFeedbacksCommentPost'][0]
    ): Request
    {

        // verify the required parameter 'message' is set
        if ($message === null || (is_array($message) && count($message) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $message when calling restFeedbacksCommentPost'
            );
        }

        // verify the required parameter 'comment_relation_target_type_id' is set
        if ($comment_relation_target_type_id === null || (is_array($comment_relation_target_type_id) && count($comment_relation_target_type_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $comment_relation_target_type_id when calling restFeedbacksCommentPost'
            );
        }

        // verify the required parameter 'comment_relation_target_id' is set
        if ($comment_relation_target_id === null || (is_array($comment_relation_target_id) && count($comment_relation_target_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $comment_relation_target_id when calling restFeedbacksCommentPost'
            );
        }


        $resourcePath = '/rest/feedbacks/comment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $message,
            'message', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $comment_relation_target_type_id,
            'commentRelationTargetTypeId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $comment_relation_target_id,
            'commentRelationTargetId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restFeedbacksCommentsGet
     *
     * List feedback comments
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksCommentsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck/plenty-client\Model\FeedbackComment[]
     */
    public function restFeedbacksCommentsGet(
        string $contentType = self::contentTypes['restFeedbacksCommentsGet'][0]
    ): array
    {
        list($response) = $this->restFeedbacksCommentsGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation restFeedbacksCommentsGetWithHttpInfo
     *
     * List feedback comments
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksCommentsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck/plenty-client\Model\FeedbackComment[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restFeedbacksCommentsGetWithHttpInfo(
        string $contentType = self::contentTypes['restFeedbacksCommentsGet'][0]
    ): array
    {
        $request = $this->restFeedbacksCommentsGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck/plenty-client\Model\FeedbackComment[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck/plenty-client\Model\FeedbackComment[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck/plenty-client\Model\FeedbackComment[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck/plenty-client\Model\FeedbackComment[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck/plenty-client\Model\FeedbackComment[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restFeedbacksCommentsGetAsync
     *
     * List feedback comments
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksCommentsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restFeedbacksCommentsGetAsync(
        string $contentType = self::contentTypes['restFeedbacksCommentsGet'][0]
    ): PromiseInterface
    {
        return $this->restFeedbacksCommentsGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restFeedbacksCommentsGetAsyncWithHttpInfo
     *
     * List feedback comments
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksCommentsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restFeedbacksCommentsGetAsyncWithHttpInfo(
        string $contentType = self::contentTypes['restFeedbacksCommentsGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck/plenty-client\Model\FeedbackComment[]';
        $request = $this->restFeedbacksCommentsGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restFeedbacksCommentsGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksCommentsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restFeedbacksCommentsGetRequest(
        string $contentType = self::contentTypes['restFeedbacksCommentsGet'][0]
    ): Request
    {


        $resourcePath = '/rest/feedbacks/comments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restFeedbacksDeleteFeedbacksFeedbackIdsDelete
     *
     * Delete multiple feedbacks
     *
     * @param  string $feedback_ids The list of feedback IDs, separated by commas (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksDeleteFeedbacksFeedbackIdsDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return void
     */
    public function restFeedbacksDeleteFeedbacksFeedbackIdsDelete(
        string $feedback_ids,
        string $contentType = self::contentTypes['restFeedbacksDeleteFeedbacksFeedbackIdsDelete'][0]
    ): void
    {
        $this->restFeedbacksDeleteFeedbacksFeedbackIdsDeleteWithHttpInfo($feedback_ids, $contentType);
    }

    /**
     * Operation restFeedbacksDeleteFeedbacksFeedbackIdsDeleteWithHttpInfo
     *
     * Delete multiple feedbacks
     *
     * @param  string $feedback_ids The list of feedback IDs, separated by commas (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksDeleteFeedbacksFeedbackIdsDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restFeedbacksDeleteFeedbacksFeedbackIdsDeleteWithHttpInfo(
        string $feedback_ids,
        string $contentType = self::contentTypes['restFeedbacksDeleteFeedbacksFeedbackIdsDelete'][0]
    ): array
    {
        $request = $this->restFeedbacksDeleteFeedbacksFeedbackIdsDeleteRequest($feedback_ids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restFeedbacksDeleteFeedbacksFeedbackIdsDeleteAsync
     *
     * Delete multiple feedbacks
     *
     * @param  string $feedback_ids The list of feedback IDs, separated by commas (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksDeleteFeedbacksFeedbackIdsDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restFeedbacksDeleteFeedbacksFeedbackIdsDeleteAsync(
        string $feedback_ids,
        string $contentType = self::contentTypes['restFeedbacksDeleteFeedbacksFeedbackIdsDelete'][0]
    ): PromiseInterface
    {
        return $this->restFeedbacksDeleteFeedbacksFeedbackIdsDeleteAsyncWithHttpInfo($feedback_ids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restFeedbacksDeleteFeedbacksFeedbackIdsDeleteAsyncWithHttpInfo
     *
     * Delete multiple feedbacks
     *
     * @param  string $feedback_ids The list of feedback IDs, separated by commas (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksDeleteFeedbacksFeedbackIdsDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restFeedbacksDeleteFeedbacksFeedbackIdsDeleteAsyncWithHttpInfo(
        $feedback_ids,
        string $contentType = self::contentTypes['restFeedbacksDeleteFeedbacksFeedbackIdsDelete'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->restFeedbacksDeleteFeedbacksFeedbackIdsDeleteRequest($feedback_ids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restFeedbacksDeleteFeedbacksFeedbackIdsDelete'
     *
     * @param  string $feedback_ids The list of feedback IDs, separated by commas (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksDeleteFeedbacksFeedbackIdsDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restFeedbacksDeleteFeedbacksFeedbackIdsDeleteRequest(
        $feedback_ids,
        string $contentType = self::contentTypes['restFeedbacksDeleteFeedbacksFeedbackIdsDelete'][0]
    ): Request
    {

        // verify the required parameter 'feedback_ids' is set
        if ($feedback_ids === null || (is_array($feedback_ids) && count($feedback_ids) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $feedback_ids when calling restFeedbacksDeleteFeedbacksFeedbackIdsDelete'
            );
        }


        $resourcePath = '/rest/feedbacks/delete_feedbacks/{feedbackIds}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($feedback_ids !== null) {
            $resourcePath = str_replace(
                '{' . 'feedbackIds' . '}',
                ObjectSerializer::toPathValue($feedback_ids),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restFeedbacksFeedbackFeedbackIdDelete
     *
     * Delete a feedback
     *
     * @param  int $feedback_id The ID of the feedback (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksFeedbackFeedbackIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return void
     */
    public function restFeedbacksFeedbackFeedbackIdDelete(
        int $feedback_id,
        string $contentType = self::contentTypes['restFeedbacksFeedbackFeedbackIdDelete'][0]
    ): void
    {
        $this->restFeedbacksFeedbackFeedbackIdDeleteWithHttpInfo($feedback_id, $contentType);
    }

    /**
     * Operation restFeedbacksFeedbackFeedbackIdDeleteWithHttpInfo
     *
     * Delete a feedback
     *
     * @param  int $feedback_id The ID of the feedback (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksFeedbackFeedbackIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restFeedbacksFeedbackFeedbackIdDeleteWithHttpInfo(
        int $feedback_id,
        string $contentType = self::contentTypes['restFeedbacksFeedbackFeedbackIdDelete'][0]
    ): array
    {
        $request = $this->restFeedbacksFeedbackFeedbackIdDeleteRequest($feedback_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restFeedbacksFeedbackFeedbackIdDeleteAsync
     *
     * Delete a feedback
     *
     * @param  int $feedback_id The ID of the feedback (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksFeedbackFeedbackIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restFeedbacksFeedbackFeedbackIdDeleteAsync(
        int $feedback_id,
        string $contentType = self::contentTypes['restFeedbacksFeedbackFeedbackIdDelete'][0]
    ): PromiseInterface
    {
        return $this->restFeedbacksFeedbackFeedbackIdDeleteAsyncWithHttpInfo($feedback_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restFeedbacksFeedbackFeedbackIdDeleteAsyncWithHttpInfo
     *
     * Delete a feedback
     *
     * @param  int $feedback_id The ID of the feedback (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksFeedbackFeedbackIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restFeedbacksFeedbackFeedbackIdDeleteAsyncWithHttpInfo(
        $feedback_id,
        string $contentType = self::contentTypes['restFeedbacksFeedbackFeedbackIdDelete'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->restFeedbacksFeedbackFeedbackIdDeleteRequest($feedback_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restFeedbacksFeedbackFeedbackIdDelete'
     *
     * @param  int $feedback_id The ID of the feedback (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksFeedbackFeedbackIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restFeedbacksFeedbackFeedbackIdDeleteRequest(
        $feedback_id,
        string $contentType = self::contentTypes['restFeedbacksFeedbackFeedbackIdDelete'][0]
    ): Request
    {

        // verify the required parameter 'feedback_id' is set
        if ($feedback_id === null || (is_array($feedback_id) && count($feedback_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $feedback_id when calling restFeedbacksFeedbackFeedbackIdDelete'
            );
        }


        $resourcePath = '/rest/feedbacks/feedback/{feedbackId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($feedback_id !== null) {
            $resourcePath = str_replace(
                '{' . 'feedbackId' . '}',
                ObjectSerializer::toPathValue($feedback_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restFeedbacksFeedbackFeedbackIdGet
     *
     * Get a feedback
     *
     * @param  int $feedback_id The ID of the feedback (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksFeedbackFeedbackIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck/plenty-client\Model\Feedback
     */
    public function restFeedbacksFeedbackFeedbackIdGet(
        int $feedback_id,
        string $contentType = self::contentTypes['restFeedbacksFeedbackFeedbackIdGet'][0]
    ): \ck/plenty-client\Model\Feedback
    {
        list($response) = $this->restFeedbacksFeedbackFeedbackIdGetWithHttpInfo($feedback_id, $contentType);
        return $response;
    }

    /**
     * Operation restFeedbacksFeedbackFeedbackIdGetWithHttpInfo
     *
     * Get a feedback
     *
     * @param  int $feedback_id The ID of the feedback (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksFeedbackFeedbackIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck/plenty-client\Model\Feedback, HTTP status code, HTTP response headers (array of strings)
     */
    public function restFeedbacksFeedbackFeedbackIdGetWithHttpInfo(
        int $feedback_id,
        string $contentType = self::contentTypes['restFeedbacksFeedbackFeedbackIdGet'][0]
    ): array
    {
        $request = $this->restFeedbacksFeedbackFeedbackIdGetRequest($feedback_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck/plenty-client\Model\Feedback' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck/plenty-client\Model\Feedback' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck/plenty-client\Model\Feedback', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck/plenty-client\Model\Feedback';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck/plenty-client\Model\Feedback',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restFeedbacksFeedbackFeedbackIdGetAsync
     *
     * Get a feedback
     *
     * @param  int $feedback_id The ID of the feedback (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksFeedbackFeedbackIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restFeedbacksFeedbackFeedbackIdGetAsync(
        int $feedback_id,
        string $contentType = self::contentTypes['restFeedbacksFeedbackFeedbackIdGet'][0]
    ): PromiseInterface
    {
        return $this->restFeedbacksFeedbackFeedbackIdGetAsyncWithHttpInfo($feedback_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restFeedbacksFeedbackFeedbackIdGetAsyncWithHttpInfo
     *
     * Get a feedback
     *
     * @param  int $feedback_id The ID of the feedback (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksFeedbackFeedbackIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restFeedbacksFeedbackFeedbackIdGetAsyncWithHttpInfo(
        $feedback_id,
        string $contentType = self::contentTypes['restFeedbacksFeedbackFeedbackIdGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck/plenty-client\Model\Feedback';
        $request = $this->restFeedbacksFeedbackFeedbackIdGetRequest($feedback_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restFeedbacksFeedbackFeedbackIdGet'
     *
     * @param  int $feedback_id The ID of the feedback (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksFeedbackFeedbackIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restFeedbacksFeedbackFeedbackIdGetRequest(
        $feedback_id,
        string $contentType = self::contentTypes['restFeedbacksFeedbackFeedbackIdGet'][0]
    ): Request
    {

        // verify the required parameter 'feedback_id' is set
        if ($feedback_id === null || (is_array($feedback_id) && count($feedback_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $feedback_id when calling restFeedbacksFeedbackFeedbackIdGet'
            );
        }


        $resourcePath = '/rest/feedbacks/feedback/{feedbackId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($feedback_id !== null) {
            $resourcePath = str_replace(
                '{' . 'feedbackId' . '}',
                ObjectSerializer::toPathValue($feedback_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restFeedbacksFeedbackFeedbackIdPut
     *
     * Update a feedback
     *
     * @param  int $feedback_id The ID of the feedback (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksFeedbackFeedbackIdPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck/plenty-client\Model\Feedback
     */
    public function restFeedbacksFeedbackFeedbackIdPut(
        int $feedback_id,
        string $contentType = self::contentTypes['restFeedbacksFeedbackFeedbackIdPut'][0]
    ): \ck/plenty-client\Model\Feedback
    {
        list($response) = $this->restFeedbacksFeedbackFeedbackIdPutWithHttpInfo($feedback_id, $contentType);
        return $response;
    }

    /**
     * Operation restFeedbacksFeedbackFeedbackIdPutWithHttpInfo
     *
     * Update a feedback
     *
     * @param  int $feedback_id The ID of the feedback (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksFeedbackFeedbackIdPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck/plenty-client\Model\Feedback, HTTP status code, HTTP response headers (array of strings)
     */
    public function restFeedbacksFeedbackFeedbackIdPutWithHttpInfo(
        int $feedback_id,
        string $contentType = self::contentTypes['restFeedbacksFeedbackFeedbackIdPut'][0]
    ): array
    {
        $request = $this->restFeedbacksFeedbackFeedbackIdPutRequest($feedback_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck/plenty-client\Model\Feedback' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck/plenty-client\Model\Feedback' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck/plenty-client\Model\Feedback', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck/plenty-client\Model\Feedback';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck/plenty-client\Model\Feedback',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restFeedbacksFeedbackFeedbackIdPutAsync
     *
     * Update a feedback
     *
     * @param  int $feedback_id The ID of the feedback (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksFeedbackFeedbackIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restFeedbacksFeedbackFeedbackIdPutAsync(
        int $feedback_id,
        string $contentType = self::contentTypes['restFeedbacksFeedbackFeedbackIdPut'][0]
    ): PromiseInterface
    {
        return $this->restFeedbacksFeedbackFeedbackIdPutAsyncWithHttpInfo($feedback_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restFeedbacksFeedbackFeedbackIdPutAsyncWithHttpInfo
     *
     * Update a feedback
     *
     * @param  int $feedback_id The ID of the feedback (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksFeedbackFeedbackIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restFeedbacksFeedbackFeedbackIdPutAsyncWithHttpInfo(
        $feedback_id,
        string $contentType = self::contentTypes['restFeedbacksFeedbackFeedbackIdPut'][0]
    ): PromiseInterface
    {
        $returnType = '\ck/plenty-client\Model\Feedback';
        $request = $this->restFeedbacksFeedbackFeedbackIdPutRequest($feedback_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restFeedbacksFeedbackFeedbackIdPut'
     *
     * @param  int $feedback_id The ID of the feedback (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksFeedbackFeedbackIdPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restFeedbacksFeedbackFeedbackIdPutRequest(
        $feedback_id,
        string $contentType = self::contentTypes['restFeedbacksFeedbackFeedbackIdPut'][0]
    ): Request
    {

        // verify the required parameter 'feedback_id' is set
        if ($feedback_id === null || (is_array($feedback_id) && count($feedback_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $feedback_id when calling restFeedbacksFeedbackFeedbackIdPut'
            );
        }


        $resourcePath = '/rest/feedbacks/feedback/{feedbackId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($feedback_id !== null) {
            $resourcePath = str_replace(
                '{' . 'feedbackId' . '}',
                ObjectSerializer::toPathValue($feedback_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restFeedbacksFeedbackPost
     *
     * Create a feedback
     *
     * @param  string|null $title Feedback title (optional)
     * @param  string|null $feedback_relation_target_id The ID of the feedback&#39;s target (optional)
     * @param  string|null $feedback_relation_target_type_id The type ID of the feedback&#39;s target (optional)
     * @param  string|null $feedback_relation_source_type_id The type ID of the feedback&#39;s source (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksFeedbackPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck/plenty-client\Model\Feedback
     */
    public function restFeedbacksFeedbackPost(
        ?string $title = null,
        ?string $feedback_relation_target_id = null,
        ?string $feedback_relation_target_type_id = null,
        ?string $feedback_relation_source_type_id = null,
        string $contentType = self::contentTypes['restFeedbacksFeedbackPost'][0]
    ): \ck/plenty-client\Model\Feedback
    {
        list($response) = $this->restFeedbacksFeedbackPostWithHttpInfo($title, $feedback_relation_target_id, $feedback_relation_target_type_id, $feedback_relation_source_type_id, $contentType);
        return $response;
    }

    /**
     * Operation restFeedbacksFeedbackPostWithHttpInfo
     *
     * Create a feedback
     *
     * @param  string|null $title Feedback title (optional)
     * @param  string|null $feedback_relation_target_id The ID of the feedback&#39;s target (optional)
     * @param  string|null $feedback_relation_target_type_id The type ID of the feedback&#39;s target (optional)
     * @param  string|null $feedback_relation_source_type_id The type ID of the feedback&#39;s source (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksFeedbackPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck/plenty-client\Model\Feedback, HTTP status code, HTTP response headers (array of strings)
     */
    public function restFeedbacksFeedbackPostWithHttpInfo(
        ?string $title = null,
        ?string $feedback_relation_target_id = null,
        ?string $feedback_relation_target_type_id = null,
        ?string $feedback_relation_source_type_id = null,
        string $contentType = self::contentTypes['restFeedbacksFeedbackPost'][0]
    ): array
    {
        $request = $this->restFeedbacksFeedbackPostRequest($title, $feedback_relation_target_id, $feedback_relation_target_type_id, $feedback_relation_source_type_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck/plenty-client\Model\Feedback' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck/plenty-client\Model\Feedback' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck/plenty-client\Model\Feedback', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck/plenty-client\Model\Feedback';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck/plenty-client\Model\Feedback',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restFeedbacksFeedbackPostAsync
     *
     * Create a feedback
     *
     * @param  string|null $title Feedback title (optional)
     * @param  string|null $feedback_relation_target_id The ID of the feedback&#39;s target (optional)
     * @param  string|null $feedback_relation_target_type_id The type ID of the feedback&#39;s target (optional)
     * @param  string|null $feedback_relation_source_type_id The type ID of the feedback&#39;s source (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksFeedbackPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restFeedbacksFeedbackPostAsync(
        ?string $title = null,
        ?string $feedback_relation_target_id = null,
        ?string $feedback_relation_target_type_id = null,
        ?string $feedback_relation_source_type_id = null,
        string $contentType = self::contentTypes['restFeedbacksFeedbackPost'][0]
    ): PromiseInterface
    {
        return $this->restFeedbacksFeedbackPostAsyncWithHttpInfo($title, $feedback_relation_target_id, $feedback_relation_target_type_id, $feedback_relation_source_type_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restFeedbacksFeedbackPostAsyncWithHttpInfo
     *
     * Create a feedback
     *
     * @param  string|null $title Feedback title (optional)
     * @param  string|null $feedback_relation_target_id The ID of the feedback&#39;s target (optional)
     * @param  string|null $feedback_relation_target_type_id The type ID of the feedback&#39;s target (optional)
     * @param  string|null $feedback_relation_source_type_id The type ID of the feedback&#39;s source (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksFeedbackPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restFeedbacksFeedbackPostAsyncWithHttpInfo(
        $title = null,
        $feedback_relation_target_id = null,
        $feedback_relation_target_type_id = null,
        $feedback_relation_source_type_id = null,
        string $contentType = self::contentTypes['restFeedbacksFeedbackPost'][0]
    ): PromiseInterface
    {
        $returnType = '\ck/plenty-client\Model\Feedback';
        $request = $this->restFeedbacksFeedbackPostRequest($title, $feedback_relation_target_id, $feedback_relation_target_type_id, $feedback_relation_source_type_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restFeedbacksFeedbackPost'
     *
     * @param  string|null $title Feedback title (optional)
     * @param  string|null $feedback_relation_target_id The ID of the feedback&#39;s target (optional)
     * @param  string|null $feedback_relation_target_type_id The type ID of the feedback&#39;s target (optional)
     * @param  string|null $feedback_relation_source_type_id The type ID of the feedback&#39;s source (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksFeedbackPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restFeedbacksFeedbackPostRequest(
        $title = null,
        $feedback_relation_target_id = null,
        $feedback_relation_target_type_id = null,
        $feedback_relation_source_type_id = null,
        string $contentType = self::contentTypes['restFeedbacksFeedbackPost'][0]
    ): Request
    {






        $resourcePath = '/rest/feedbacks/feedback';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $title,
            'title', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $feedback_relation_target_id,
            'feedbackRelationTargetId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $feedback_relation_target_type_id,
            'feedbackRelationTargetTypeId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $feedback_relation_source_type_id,
            'feedbackRelationSourceTypeId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restFeedbacksFeedbackRepliesFeedbackIdGet
     *
     * List feedback replies
     *
     * @param  int $feedback_id The ID of the feedback (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksFeedbackRepliesFeedbackIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck/plenty-client\Model\Feedback
     */
    public function restFeedbacksFeedbackRepliesFeedbackIdGet(
        int $feedback_id,
        string $contentType = self::contentTypes['restFeedbacksFeedbackRepliesFeedbackIdGet'][0]
    ): \ck/plenty-client\Model\Feedback
    {
        list($response) = $this->restFeedbacksFeedbackRepliesFeedbackIdGetWithHttpInfo($feedback_id, $contentType);
        return $response;
    }

    /**
     * Operation restFeedbacksFeedbackRepliesFeedbackIdGetWithHttpInfo
     *
     * List feedback replies
     *
     * @param  int $feedback_id The ID of the feedback (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksFeedbackRepliesFeedbackIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck/plenty-client\Model\Feedback, HTTP status code, HTTP response headers (array of strings)
     */
    public function restFeedbacksFeedbackRepliesFeedbackIdGetWithHttpInfo(
        int $feedback_id,
        string $contentType = self::contentTypes['restFeedbacksFeedbackRepliesFeedbackIdGet'][0]
    ): array
    {
        $request = $this->restFeedbacksFeedbackRepliesFeedbackIdGetRequest($feedback_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck/plenty-client\Model\Feedback' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck/plenty-client\Model\Feedback' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck/plenty-client\Model\Feedback', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck/plenty-client\Model\Feedback';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck/plenty-client\Model\Feedback',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restFeedbacksFeedbackRepliesFeedbackIdGetAsync
     *
     * List feedback replies
     *
     * @param  int $feedback_id The ID of the feedback (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksFeedbackRepliesFeedbackIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restFeedbacksFeedbackRepliesFeedbackIdGetAsync(
        int $feedback_id,
        string $contentType = self::contentTypes['restFeedbacksFeedbackRepliesFeedbackIdGet'][0]
    ): PromiseInterface
    {
        return $this->restFeedbacksFeedbackRepliesFeedbackIdGetAsyncWithHttpInfo($feedback_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restFeedbacksFeedbackRepliesFeedbackIdGetAsyncWithHttpInfo
     *
     * List feedback replies
     *
     * @param  int $feedback_id The ID of the feedback (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksFeedbackRepliesFeedbackIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restFeedbacksFeedbackRepliesFeedbackIdGetAsyncWithHttpInfo(
        $feedback_id,
        string $contentType = self::contentTypes['restFeedbacksFeedbackRepliesFeedbackIdGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck/plenty-client\Model\Feedback';
        $request = $this->restFeedbacksFeedbackRepliesFeedbackIdGetRequest($feedback_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restFeedbacksFeedbackRepliesFeedbackIdGet'
     *
     * @param  int $feedback_id The ID of the feedback (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksFeedbackRepliesFeedbackIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restFeedbacksFeedbackRepliesFeedbackIdGetRequest(
        $feedback_id,
        string $contentType = self::contentTypes['restFeedbacksFeedbackRepliesFeedbackIdGet'][0]
    ): Request
    {

        // verify the required parameter 'feedback_id' is set
        if ($feedback_id === null || (is_array($feedback_id) && count($feedback_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $feedback_id when calling restFeedbacksFeedbackRepliesFeedbackIdGet'
            );
        }


        $resourcePath = '/rest/feedbacks/feedback/replies/{feedbackId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($feedback_id !== null) {
            $resourcePath = str_replace(
                '{' . 'feedbackId' . '}',
                ObjectSerializer::toPathValue($feedback_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restFeedbacksFeedbacksGet
     *
     * List feedbacks
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksFeedbacksGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck/plenty-client\Model\Feedback[]
     */
    public function restFeedbacksFeedbacksGet(
        string $contentType = self::contentTypes['restFeedbacksFeedbacksGet'][0]
    ): array
    {
        list($response) = $this->restFeedbacksFeedbacksGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation restFeedbacksFeedbacksGetWithHttpInfo
     *
     * List feedbacks
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksFeedbacksGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck/plenty-client\Model\Feedback[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restFeedbacksFeedbacksGetWithHttpInfo(
        string $contentType = self::contentTypes['restFeedbacksFeedbacksGet'][0]
    ): array
    {
        $request = $this->restFeedbacksFeedbacksGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck/plenty-client\Model\Feedback[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck/plenty-client\Model\Feedback[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck/plenty-client\Model\Feedback[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck/plenty-client\Model\Feedback[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck/plenty-client\Model\Feedback[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restFeedbacksFeedbacksGetAsync
     *
     * List feedbacks
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksFeedbacksGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restFeedbacksFeedbacksGetAsync(
        string $contentType = self::contentTypes['restFeedbacksFeedbacksGet'][0]
    ): PromiseInterface
    {
        return $this->restFeedbacksFeedbacksGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restFeedbacksFeedbacksGetAsyncWithHttpInfo
     *
     * List feedbacks
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksFeedbacksGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restFeedbacksFeedbacksGetAsyncWithHttpInfo(
        string $contentType = self::contentTypes['restFeedbacksFeedbacksGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck/plenty-client\Model\Feedback[]';
        $request = $this->restFeedbacksFeedbacksGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restFeedbacksFeedbacksGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksFeedbacksGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restFeedbacksFeedbacksGetRequest(
        string $contentType = self::contentTypes['restFeedbacksFeedbacksGet'][0]
    ): Request
    {


        $resourcePath = '/rest/feedbacks/feedbacks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restFeedbacksFeedbacksVisibilityPut
     *
     * Update the visibility of multiple feedbacks
     *
     * @param  string $feedback_ids The list of feedback IDs, separated by commas (required)
     * @param  bool $is_visible The visibility value (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksFeedbacksVisibilityPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck/plenty-client\Model\Feedback[]
     */
    public function restFeedbacksFeedbacksVisibilityPut(
        string $feedback_ids,
        bool $is_visible,
        string $contentType = self::contentTypes['restFeedbacksFeedbacksVisibilityPut'][0]
    ): array
    {
        list($response) = $this->restFeedbacksFeedbacksVisibilityPutWithHttpInfo($feedback_ids, $is_visible, $contentType);
        return $response;
    }

    /**
     * Operation restFeedbacksFeedbacksVisibilityPutWithHttpInfo
     *
     * Update the visibility of multiple feedbacks
     *
     * @param  string $feedback_ids The list of feedback IDs, separated by commas (required)
     * @param  bool $is_visible The visibility value (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksFeedbacksVisibilityPut'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck/plenty-client\Model\Feedback[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restFeedbacksFeedbacksVisibilityPutWithHttpInfo(
        string $feedback_ids,
        bool $is_visible,
        string $contentType = self::contentTypes['restFeedbacksFeedbacksVisibilityPut'][0]
    ): array
    {
        $request = $this->restFeedbacksFeedbacksVisibilityPutRequest($feedback_ids, $is_visible, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck/plenty-client\Model\Feedback[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck/plenty-client\Model\Feedback[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck/plenty-client\Model\Feedback[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck/plenty-client\Model\Feedback[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck/plenty-client\Model\Feedback[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restFeedbacksFeedbacksVisibilityPutAsync
     *
     * Update the visibility of multiple feedbacks
     *
     * @param  string $feedback_ids The list of feedback IDs, separated by commas (required)
     * @param  bool $is_visible The visibility value (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksFeedbacksVisibilityPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restFeedbacksFeedbacksVisibilityPutAsync(
        string $feedback_ids,
        bool $is_visible,
        string $contentType = self::contentTypes['restFeedbacksFeedbacksVisibilityPut'][0]
    ): PromiseInterface
    {
        return $this->restFeedbacksFeedbacksVisibilityPutAsyncWithHttpInfo($feedback_ids, $is_visible, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restFeedbacksFeedbacksVisibilityPutAsyncWithHttpInfo
     *
     * Update the visibility of multiple feedbacks
     *
     * @param  string $feedback_ids The list of feedback IDs, separated by commas (required)
     * @param  bool $is_visible The visibility value (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksFeedbacksVisibilityPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restFeedbacksFeedbacksVisibilityPutAsyncWithHttpInfo(
        $feedback_ids,
        $is_visible,
        string $contentType = self::contentTypes['restFeedbacksFeedbacksVisibilityPut'][0]
    ): PromiseInterface
    {
        $returnType = '\ck/plenty-client\Model\Feedback[]';
        $request = $this->restFeedbacksFeedbacksVisibilityPutRequest($feedback_ids, $is_visible, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restFeedbacksFeedbacksVisibilityPut'
     *
     * @param  string $feedback_ids The list of feedback IDs, separated by commas (required)
     * @param  bool $is_visible The visibility value (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksFeedbacksVisibilityPut'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restFeedbacksFeedbacksVisibilityPutRequest(
        $feedback_ids,
        $is_visible,
        string $contentType = self::contentTypes['restFeedbacksFeedbacksVisibilityPut'][0]
    ): Request
    {

        // verify the required parameter 'feedback_ids' is set
        if ($feedback_ids === null || (is_array($feedback_ids) && count($feedback_ids) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $feedback_ids when calling restFeedbacksFeedbacksVisibilityPut'
            );
        }

        // verify the required parameter 'is_visible' is set
        if ($is_visible === null || (is_array($is_visible) && count($is_visible) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $is_visible when calling restFeedbacksFeedbacksVisibilityPut'
            );
        }


        $resourcePath = '/rest/feedbacks/feedbacks_visibility';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $feedback_ids,
            'feedbackIds', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_visible,
            'isVisible', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restFeedbacksMigratePost
     *
     * Migrate legacy feedbacks
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksMigratePost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return void
     */
    public function restFeedbacksMigratePost(
        string $contentType = self::contentTypes['restFeedbacksMigratePost'][0]
    ): void
    {
        $this->restFeedbacksMigratePostWithHttpInfo($contentType);
    }

    /**
     * Operation restFeedbacksMigratePostWithHttpInfo
     *
     * Migrate legacy feedbacks
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksMigratePost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restFeedbacksMigratePostWithHttpInfo(
        string $contentType = self::contentTypes['restFeedbacksMigratePost'][0]
    ): array
    {
        $request = $this->restFeedbacksMigratePostRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restFeedbacksMigratePostAsync
     *
     * Migrate legacy feedbacks
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksMigratePost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restFeedbacksMigratePostAsync(
        string $contentType = self::contentTypes['restFeedbacksMigratePost'][0]
    ): PromiseInterface
    {
        return $this->restFeedbacksMigratePostAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restFeedbacksMigratePostAsyncWithHttpInfo
     *
     * Migrate legacy feedbacks
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksMigratePost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restFeedbacksMigratePostAsyncWithHttpInfo(
        string $contentType = self::contentTypes['restFeedbacksMigratePost'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->restFeedbacksMigratePostRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restFeedbacksMigratePost'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksMigratePost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restFeedbacksMigratePostRequest(
        string $contentType = self::contentTypes['restFeedbacksMigratePost'][0]
    ): Request
    {


        $resourcePath = '/rest/feedbacks/migrate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restFeedbacksRatingPost
     *
     * Create a feedback rating
     *
     * @param  int $rating_value The feedback&#39;s comment message (required)
     * @param  int $rating_relation_target_type_id The type ID of the rating&#39;s target (required)
     * @param  int $rating_relation_target_id The ID of the rating&#39;s target (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksRatingPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck/plenty-client\Model\FeedbackRating
     */
    public function restFeedbacksRatingPost(
        int $rating_value,
        int $rating_relation_target_type_id,
        int $rating_relation_target_id,
        string $contentType = self::contentTypes['restFeedbacksRatingPost'][0]
    ): \ck/plenty-client\Model\FeedbackRating
    {
        list($response) = $this->restFeedbacksRatingPostWithHttpInfo($rating_value, $rating_relation_target_type_id, $rating_relation_target_id, $contentType);
        return $response;
    }

    /**
     * Operation restFeedbacksRatingPostWithHttpInfo
     *
     * Create a feedback rating
     *
     * @param  int $rating_value The feedback&#39;s comment message (required)
     * @param  int $rating_relation_target_type_id The type ID of the rating&#39;s target (required)
     * @param  int $rating_relation_target_id The ID of the rating&#39;s target (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksRatingPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck/plenty-client\Model\FeedbackRating, HTTP status code, HTTP response headers (array of strings)
     */
    public function restFeedbacksRatingPostWithHttpInfo(
        int $rating_value,
        int $rating_relation_target_type_id,
        int $rating_relation_target_id,
        string $contentType = self::contentTypes['restFeedbacksRatingPost'][0]
    ): array
    {
        $request = $this->restFeedbacksRatingPostRequest($rating_value, $rating_relation_target_type_id, $rating_relation_target_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck/plenty-client\Model\FeedbackRating' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck/plenty-client\Model\FeedbackRating' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck/plenty-client\Model\FeedbackRating', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck/plenty-client\Model\FeedbackRating';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck/plenty-client\Model\FeedbackRating',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restFeedbacksRatingPostAsync
     *
     * Create a feedback rating
     *
     * @param  int $rating_value The feedback&#39;s comment message (required)
     * @param  int $rating_relation_target_type_id The type ID of the rating&#39;s target (required)
     * @param  int $rating_relation_target_id The ID of the rating&#39;s target (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksRatingPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restFeedbacksRatingPostAsync(
        int $rating_value,
        int $rating_relation_target_type_id,
        int $rating_relation_target_id,
        string $contentType = self::contentTypes['restFeedbacksRatingPost'][0]
    ): PromiseInterface
    {
        return $this->restFeedbacksRatingPostAsyncWithHttpInfo($rating_value, $rating_relation_target_type_id, $rating_relation_target_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restFeedbacksRatingPostAsyncWithHttpInfo
     *
     * Create a feedback rating
     *
     * @param  int $rating_value The feedback&#39;s comment message (required)
     * @param  int $rating_relation_target_type_id The type ID of the rating&#39;s target (required)
     * @param  int $rating_relation_target_id The ID of the rating&#39;s target (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksRatingPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restFeedbacksRatingPostAsyncWithHttpInfo(
        $rating_value,
        $rating_relation_target_type_id,
        $rating_relation_target_id,
        string $contentType = self::contentTypes['restFeedbacksRatingPost'][0]
    ): PromiseInterface
    {
        $returnType = '\ck/plenty-client\Model\FeedbackRating';
        $request = $this->restFeedbacksRatingPostRequest($rating_value, $rating_relation_target_type_id, $rating_relation_target_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restFeedbacksRatingPost'
     *
     * @param  int $rating_value The feedback&#39;s comment message (required)
     * @param  int $rating_relation_target_type_id The type ID of the rating&#39;s target (required)
     * @param  int $rating_relation_target_id The ID of the rating&#39;s target (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksRatingPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restFeedbacksRatingPostRequest(
        $rating_value,
        $rating_relation_target_type_id,
        $rating_relation_target_id,
        string $contentType = self::contentTypes['restFeedbacksRatingPost'][0]
    ): Request
    {

        // verify the required parameter 'rating_value' is set
        if ($rating_value === null || (is_array($rating_value) && count($rating_value) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $rating_value when calling restFeedbacksRatingPost'
            );
        }

        // verify the required parameter 'rating_relation_target_type_id' is set
        if ($rating_relation_target_type_id === null || (is_array($rating_relation_target_type_id) && count($rating_relation_target_type_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $rating_relation_target_type_id when calling restFeedbacksRatingPost'
            );
        }

        // verify the required parameter 'rating_relation_target_id' is set
        if ($rating_relation_target_id === null || (is_array($rating_relation_target_id) && count($rating_relation_target_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $rating_relation_target_id when calling restFeedbacksRatingPost'
            );
        }


        $resourcePath = '/rest/feedbacks/rating';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $rating_value,
            'ratingValue', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $rating_relation_target_type_id,
            'ratingRelationTargetTypeId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $rating_relation_target_id,
            'ratingRelationTargetId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restFeedbacksRatingRatingIdDelete
     *
     * Delete a feedback rating
     *
     * @param  int $feedback_rating_id The ID of the feedback rating (required)
     * @param  int $rating_id rating_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksRatingRatingIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return void
     */
    public function restFeedbacksRatingRatingIdDelete(
        int $feedback_rating_id,
        int $rating_id,
        string $contentType = self::contentTypes['restFeedbacksRatingRatingIdDelete'][0]
    ): void
    {
        $this->restFeedbacksRatingRatingIdDeleteWithHttpInfo($feedback_rating_id, $rating_id, $contentType);
    }

    /**
     * Operation restFeedbacksRatingRatingIdDeleteWithHttpInfo
     *
     * Delete a feedback rating
     *
     * @param  int $feedback_rating_id The ID of the feedback rating (required)
     * @param  int $rating_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksRatingRatingIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restFeedbacksRatingRatingIdDeleteWithHttpInfo(
        int $feedback_rating_id,
        int $rating_id,
        string $contentType = self::contentTypes['restFeedbacksRatingRatingIdDelete'][0]
    ): array
    {
        $request = $this->restFeedbacksRatingRatingIdDeleteRequest($feedback_rating_id, $rating_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restFeedbacksRatingRatingIdDeleteAsync
     *
     * Delete a feedback rating
     *
     * @param  int $feedback_rating_id The ID of the feedback rating (required)
     * @param  int $rating_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksRatingRatingIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restFeedbacksRatingRatingIdDeleteAsync(
        int $feedback_rating_id,
        int $rating_id,
        string $contentType = self::contentTypes['restFeedbacksRatingRatingIdDelete'][0]
    ): PromiseInterface
    {
        return $this->restFeedbacksRatingRatingIdDeleteAsyncWithHttpInfo($feedback_rating_id, $rating_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restFeedbacksRatingRatingIdDeleteAsyncWithHttpInfo
     *
     * Delete a feedback rating
     *
     * @param  int $feedback_rating_id The ID of the feedback rating (required)
     * @param  int $rating_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksRatingRatingIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restFeedbacksRatingRatingIdDeleteAsyncWithHttpInfo(
        $feedback_rating_id,
        $rating_id,
        string $contentType = self::contentTypes['restFeedbacksRatingRatingIdDelete'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->restFeedbacksRatingRatingIdDeleteRequest($feedback_rating_id, $rating_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restFeedbacksRatingRatingIdDelete'
     *
     * @param  int $feedback_rating_id The ID of the feedback rating (required)
     * @param  int $rating_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksRatingRatingIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restFeedbacksRatingRatingIdDeleteRequest(
        $feedback_rating_id,
        $rating_id,
        string $contentType = self::contentTypes['restFeedbacksRatingRatingIdDelete'][0]
    ): Request
    {

        // verify the required parameter 'feedback_rating_id' is set
        if ($feedback_rating_id === null || (is_array($feedback_rating_id) && count($feedback_rating_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $feedback_rating_id when calling restFeedbacksRatingRatingIdDelete'
            );
        }

        // verify the required parameter 'rating_id' is set
        if ($rating_id === null || (is_array($rating_id) && count($rating_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $rating_id when calling restFeedbacksRatingRatingIdDelete'
            );
        }


        $resourcePath = '/rest/feedbacks/rating/{ratingId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $feedback_rating_id,
            'feedbackRatingId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($rating_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ratingId' . '}',
                ObjectSerializer::toPathValue($rating_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restFeedbacksRatingRatingIdGet
     *
     * Get a feedback rating
     *
     * @param  int $feedback_rating_id The ID of the feedback rating (required)
     * @param  int $rating_id rating_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksRatingRatingIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck/plenty-client\Model\FeedbackRating
     */
    public function restFeedbacksRatingRatingIdGet(
        int $feedback_rating_id,
        int $rating_id,
        string $contentType = self::contentTypes['restFeedbacksRatingRatingIdGet'][0]
    ): \ck/plenty-client\Model\FeedbackRating
    {
        list($response) = $this->restFeedbacksRatingRatingIdGetWithHttpInfo($feedback_rating_id, $rating_id, $contentType);
        return $response;
    }

    /**
     * Operation restFeedbacksRatingRatingIdGetWithHttpInfo
     *
     * Get a feedback rating
     *
     * @param  int $feedback_rating_id The ID of the feedback rating (required)
     * @param  int $rating_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksRatingRatingIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck/plenty-client\Model\FeedbackRating, HTTP status code, HTTP response headers (array of strings)
     */
    public function restFeedbacksRatingRatingIdGetWithHttpInfo(
        int $feedback_rating_id,
        int $rating_id,
        string $contentType = self::contentTypes['restFeedbacksRatingRatingIdGet'][0]
    ): array
    {
        $request = $this->restFeedbacksRatingRatingIdGetRequest($feedback_rating_id, $rating_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck/plenty-client\Model\FeedbackRating' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck/plenty-client\Model\FeedbackRating' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck/plenty-client\Model\FeedbackRating', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck/plenty-client\Model\FeedbackRating';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck/plenty-client\Model\FeedbackRating',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restFeedbacksRatingRatingIdGetAsync
     *
     * Get a feedback rating
     *
     * @param  int $feedback_rating_id The ID of the feedback rating (required)
     * @param  int $rating_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksRatingRatingIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restFeedbacksRatingRatingIdGetAsync(
        int $feedback_rating_id,
        int $rating_id,
        string $contentType = self::contentTypes['restFeedbacksRatingRatingIdGet'][0]
    ): PromiseInterface
    {
        return $this->restFeedbacksRatingRatingIdGetAsyncWithHttpInfo($feedback_rating_id, $rating_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restFeedbacksRatingRatingIdGetAsyncWithHttpInfo
     *
     * Get a feedback rating
     *
     * @param  int $feedback_rating_id The ID of the feedback rating (required)
     * @param  int $rating_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksRatingRatingIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restFeedbacksRatingRatingIdGetAsyncWithHttpInfo(
        $feedback_rating_id,
        $rating_id,
        string $contentType = self::contentTypes['restFeedbacksRatingRatingIdGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck/plenty-client\Model\FeedbackRating';
        $request = $this->restFeedbacksRatingRatingIdGetRequest($feedback_rating_id, $rating_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restFeedbacksRatingRatingIdGet'
     *
     * @param  int $feedback_rating_id The ID of the feedback rating (required)
     * @param  int $rating_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksRatingRatingIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restFeedbacksRatingRatingIdGetRequest(
        $feedback_rating_id,
        $rating_id,
        string $contentType = self::contentTypes['restFeedbacksRatingRatingIdGet'][0]
    ): Request
    {

        // verify the required parameter 'feedback_rating_id' is set
        if ($feedback_rating_id === null || (is_array($feedback_rating_id) && count($feedback_rating_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $feedback_rating_id when calling restFeedbacksRatingRatingIdGet'
            );
        }

        // verify the required parameter 'rating_id' is set
        if ($rating_id === null || (is_array($rating_id) && count($rating_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $rating_id when calling restFeedbacksRatingRatingIdGet'
            );
        }


        $resourcePath = '/rest/feedbacks/rating/{ratingId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $feedback_rating_id,
            'feedbackRatingId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($rating_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ratingId' . '}',
                ObjectSerializer::toPathValue($rating_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restFeedbacksRatingsGet
     *
     * List feedback ratings
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksRatingsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \ck/plenty-client\Model\FeedbackRating[]
     */
    public function restFeedbacksRatingsGet(
        string $contentType = self::contentTypes['restFeedbacksRatingsGet'][0]
    ): array
    {
        list($response) = $this->restFeedbacksRatingsGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation restFeedbacksRatingsGetWithHttpInfo
     *
     * List feedback ratings
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksRatingsGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \ck/plenty-client\Model\FeedbackRating[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restFeedbacksRatingsGetWithHttpInfo(
        string $contentType = self::contentTypes['restFeedbacksRatingsGet'][0]
    ): array
    {
        $request = $this->restFeedbacksRatingsGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ck/plenty-client\Model\FeedbackRating[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ck/plenty-client\Model\FeedbackRating[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ck/plenty-client\Model\FeedbackRating[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ck/plenty-client\Model\FeedbackRating[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ck/plenty-client\Model\FeedbackRating[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restFeedbacksRatingsGetAsync
     *
     * List feedback ratings
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksRatingsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restFeedbacksRatingsGetAsync(
        string $contentType = self::contentTypes['restFeedbacksRatingsGet'][0]
    ): PromiseInterface
    {
        return $this->restFeedbacksRatingsGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restFeedbacksRatingsGetAsyncWithHttpInfo
     *
     * List feedback ratings
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksRatingsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restFeedbacksRatingsGetAsyncWithHttpInfo(
        string $contentType = self::contentTypes['restFeedbacksRatingsGet'][0]
    ): PromiseInterface
    {
        $returnType = '\ck/plenty-client\Model\FeedbackRating[]';
        $request = $this->restFeedbacksRatingsGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restFeedbacksRatingsGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restFeedbacksRatingsGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restFeedbacksRatingsGetRequest(
        string $contentType = self::contentTypes['restFeedbacksRatingsGet'][0]
    ): Request
    {


        $resourcePath = '/rest/feedbacks/ratings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
