<?php
/**
 * OrderItemTransaction
 *
 * PHP version 8.1
 *
 * @package  ck/plenty-client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ck/plenty-client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use ck/plenty-client\ObjectSerializer;

/**
 * OrderItemTransaction Class Doc Comment
 *
 * @package  ck/plenty-client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class OrderItemTransaction implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'OrderItemTransaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'int',
        'order_item_id' => 'int',
        'quantity' => 'float',
        'user_id' => 'int',
        'identification' => 'string',
        'direction' => 'string',
        'status' => 'string',
        'receipt_id' => 'int',
        'warehouse_location_id' => 'int',
        'batch' => 'string',
        'best_before_date' => 'string',
        'batch_best_before_date_id' => 'int',
        'created_at' => 'string',
        'updated_at' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => null,
        'order_item_id' => null,
        'quantity' => null,
        'user_id' => null,
        'identification' => null,
        'direction' => null,
        'status' => null,
        'receipt_id' => null,
        'warehouse_location_id' => null,
        'batch' => null,
        'best_before_date' => null,
        'batch_best_before_date_id' => null,
        'created_at' => null,
        'updated_at' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
		'order_item_id' => false,
		'quantity' => false,
		'user_id' => false,
		'identification' => false,
		'direction' => false,
		'status' => false,
		'receipt_id' => false,
		'warehouse_location_id' => false,
		'batch' => false,
		'best_before_date' => false,
		'batch_best_before_date_id' => false,
		'created_at' => false,
		'updated_at' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'order_item_id' => 'orderItemId',
        'quantity' => 'quantity',
        'user_id' => 'userId',
        'identification' => 'identification',
        'direction' => 'direction',
        'status' => 'status',
        'receipt_id' => 'receiptId',
        'warehouse_location_id' => 'warehouseLocationId',
        'batch' => 'batch',
        'best_before_date' => 'bestBeforeDate',
        'batch_best_before_date_id' => 'batchBestBeforeDateId',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'order_item_id' => 'setOrderItemId',
        'quantity' => 'setQuantity',
        'user_id' => 'setUserId',
        'identification' => 'setIdentification',
        'direction' => 'setDirection',
        'status' => 'setStatus',
        'receipt_id' => 'setReceiptId',
        'warehouse_location_id' => 'setWarehouseLocationId',
        'batch' => 'setBatch',
        'best_before_date' => 'setBestBeforeDate',
        'batch_best_before_date_id' => 'setBatchBestBeforeDateId',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'order_item_id' => 'getOrderItemId',
        'quantity' => 'getQuantity',
        'user_id' => 'getUserId',
        'identification' => 'getIdentification',
        'direction' => 'getDirection',
        'status' => 'getStatus',
        'receipt_id' => 'getReceiptId',
        'warehouse_location_id' => 'getWarehouseLocationId',
        'batch' => 'getBatch',
        'best_before_date' => 'getBestBeforeDate',
        'batch_best_before_date_id' => 'getBatchBestBeforeDateId',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('order_item_id', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('identification', $data ?? [], null);
        $this->setIfExists('direction', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('receipt_id', $data ?? [], null);
        $this->setIfExists('warehouse_location_id', $data ?? [], null);
        $this->setIfExists('batch', $data ?? [], null);
        $this->setIfExists('best_before_date', $data ?? [], null);
        $this->setIfExists('batch_best_before_date_id', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The ID of the transaction
     *
     * @return $this
     */
    public function setId(?int $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets order_item_id
     *
     * @return int|null
     */
    public function getOrderItemId(): ?int
    {
        return $this->container['order_item_id'];
    }

    /**
     * Sets order_item_id
     *
     * @param int|null $order_item_id The ID of the order item
     *
     * @return $this
     */
    public function setOrderItemId(?int $order_item_id): static
    {
        if (is_null($order_item_id)) {
            throw new InvalidArgumentException('non-nullable order_item_id cannot be null');
        }
        $this->container['order_item_id'] = $order_item_id;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float|null
     */
    public function getQuantity(): ?float
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float|null $quantity The quantity
     *
     * @return $this
     */
    public function setQuantity(?float $quantity): static
    {
        if (is_null($quantity)) {
            throw new InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int|null
     */
    public function getUserId(): ?int
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int|null $user_id The ID of the user
     *
     * @return $this
     */
    public function setUserId(?int $user_id): static
    {
        if (is_null($user_id)) {
            throw new InvalidArgumentException('non-nullable user_id cannot be null');
        }
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets identification
     *
     * @return string|null
     */
    public function getIdentification(): ?string
    {
        return $this->container['identification'];
    }

    /**
     * Sets identification
     *
     * @param string|null $identification External identification. Can be an arbitrary string.
     *
     * @return $this
     */
    public function setIdentification(?string $identification): static
    {
        if (is_null($identification)) {
            throw new InvalidArgumentException('non-nullable identification cannot be null');
        }
        $this->container['identification'] = $identification;

        return $this;
    }

    /**
     * Gets direction
     *
     * @return string|null
     */
    public function getDirection(): ?string
    {
        return $this->container['direction'];
    }

    /**
     * Sets direction
     *
     * @param string|null $direction The direction. Possible values are 'in' and 'out'.
     *
     * @return $this
     */
    public function setDirection(?string $direction): static
    {
        if (is_null($direction)) {
            throw new InvalidArgumentException('non-nullable direction cannot be null');
        }
        $this->container['direction'] = $direction;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus(): ?string
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status The status. Possible values are 'regular' and 'cancelled'.
     *
     * @return $this
     */
    public function setStatus(?string $status): static
    {
        if (is_null($status)) {
            throw new InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets receipt_id
     *
     * @return int|null
     */
    public function getReceiptId(): ?int
    {
        return $this->container['receipt_id'];
    }

    /**
     * Sets receipt_id
     *
     * @param int|null $receipt_id The receipt ID
     *
     * @return $this
     */
    public function setReceiptId(?int $receipt_id): static
    {
        if (is_null($receipt_id)) {
            throw new InvalidArgumentException('non-nullable receipt_id cannot be null');
        }
        $this->container['receipt_id'] = $receipt_id;

        return $this;
    }

    /**
     * Gets warehouse_location_id
     *
     * @return int|null
     */
    public function getWarehouseLocationId(): ?int
    {
        return $this->container['warehouse_location_id'];
    }

    /**
     * Sets warehouse_location_id
     *
     * @param int|null $warehouse_location_id The ID of the warehouse location
     *
     * @return $this
     */
    public function setWarehouseLocationId(?int $warehouse_location_id): static
    {
        if (is_null($warehouse_location_id)) {
            throw new InvalidArgumentException('non-nullable warehouse_location_id cannot be null');
        }
        $this->container['warehouse_location_id'] = $warehouse_location_id;

        return $this;
    }

    /**
     * Gets batch
     *
     * @return string|null
     */
    public function getBatch(): ?string
    {
        return $this->container['batch'];
    }

    /**
     * Sets batch
     *
     * @param string|null $batch The batch
     *
     * @return $this
     */
    public function setBatch(?string $batch): static
    {
        if (is_null($batch)) {
            throw new InvalidArgumentException('non-nullable batch cannot be null');
        }
        $this->container['batch'] = $batch;

        return $this;
    }

    /**
     * Gets best_before_date
     *
     * @return string|null
     */
    public function getBestBeforeDate(): ?string
    {
        return $this->container['best_before_date'];
    }

    /**
     * Sets best_before_date
     *
     * @param string|null $best_before_date The best before date
     *
     * @return $this
     */
    public function setBestBeforeDate(?string $best_before_date): static
    {
        if (is_null($best_before_date)) {
            throw new InvalidArgumentException('non-nullable best_before_date cannot be null');
        }
        $this->container['best_before_date'] = $best_before_date;

        return $this;
    }

    /**
     * Gets batch_best_before_date_id
     *
     * @return int|null
     */
    public function getBatchBestBeforeDateId(): ?int
    {
        return $this->container['batch_best_before_date_id'];
    }

    /**
     * Sets batch_best_before_date_id
     *
     * @param int|null $batch_best_before_date_id Deprecated. Replaced by $batch and $bestBeforeDate.
     *
     * @return $this
     */
    public function setBatchBestBeforeDateId(?int $batch_best_before_date_id): static
    {
        if (is_null($batch_best_before_date_id)) {
            throw new InvalidArgumentException('non-nullable batch_best_before_date_id cannot be null');
        }
        $this->container['batch_best_before_date_id'] = $batch_best_before_date_id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt(): ?string
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at The date the transaction was created
     *
     * @return $this
     */
    public function setCreatedAt(?string $created_at): static
    {
        if (is_null($created_at)) {
            throw new InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt(): ?string
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at The date the transaction was last updated
     *
     * @return $this
     */
    public function setUpdatedAt(?string $updated_at): static
    {
        if (is_null($updated_at)) {
            throw new InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


