<?php
/**
 * RestItemsIdImagesUploadPostRequest
 *
 * PHP version 8.1
 *
 * @package  ck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ck\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use ck\ObjectSerializer;

/**
 * RestItemsIdImagesUploadPostRequest Class Doc Comment
 *
 * @package  ck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class RestItemsIdImagesUploadPostRequest implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = '_rest_items__id__images_upload_post_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'item_id' => 'int',
        'position' => 'int',
        'file_type' => 'string',
        'upload_file_name' => 'string',
        'upload_image_data' => 'string',
        'upload_url' => 'string',
        'names' => '\ck\Model\ItemImageName[]',
        'lang' => 'string',
        'name' => 'string',
        'alternate' => 'string',
        'availabilities' => '\ck\Model\ItemImageAvailability[]',
        'type' => 'string',
        'value' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'item_id' => null,
        'position' => null,
        'file_type' => null,
        'upload_file_name' => null,
        'upload_image_data' => null,
        'upload_url' => null,
        'names' => null,
        'lang' => null,
        'name' => null,
        'alternate' => null,
        'availabilities' => null,
        'type' => null,
        'value' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'item_id' => false,
		'position' => false,
		'file_type' => false,
		'upload_file_name' => false,
		'upload_image_data' => false,
		'upload_url' => false,
		'names' => false,
		'lang' => false,
		'name' => false,
		'alternate' => false,
		'availabilities' => false,
		'type' => false,
		'value' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'item_id' => 'itemId',
        'position' => 'position',
        'file_type' => 'fileType',
        'upload_file_name' => 'uploadFileName',
        'upload_image_data' => 'uploadImageData',
        'upload_url' => 'uploadUrl',
        'names' => 'names',
        'lang' => 'lang',
        'name' => 'name',
        'alternate' => 'alternate',
        'availabilities' => 'availabilities',
        'type' => 'type',
        'value' => 'value'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'item_id' => 'setItemId',
        'position' => 'setPosition',
        'file_type' => 'setFileType',
        'upload_file_name' => 'setUploadFileName',
        'upload_image_data' => 'setUploadImageData',
        'upload_url' => 'setUploadUrl',
        'names' => 'setNames',
        'lang' => 'setLang',
        'name' => 'setName',
        'alternate' => 'setAlternate',
        'availabilities' => 'setAvailabilities',
        'type' => 'setType',
        'value' => 'setValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'item_id' => 'getItemId',
        'position' => 'getPosition',
        'file_type' => 'getFileType',
        'upload_file_name' => 'getUploadFileName',
        'upload_image_data' => 'getUploadImageData',
        'upload_url' => 'getUploadUrl',
        'names' => 'getNames',
        'lang' => 'getLang',
        'name' => 'getName',
        'alternate' => 'getAlternate',
        'availabilities' => 'getAvailabilities',
        'type' => 'getType',
        'value' => 'getValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('item_id', $data ?? [], null);
        $this->setIfExists('position', $data ?? [], null);
        $this->setIfExists('file_type', $data ?? [], null);
        $this->setIfExists('upload_file_name', $data ?? [], null);
        $this->setIfExists('upload_image_data', $data ?? [], null);
        $this->setIfExists('upload_url', $data ?? [], null);
        $this->setIfExists('names', $data ?? [], null);
        $this->setIfExists('lang', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('alternate', $data ?? [], null);
        $this->setIfExists('availabilities', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('value', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['item_id'] === null) {
            $invalidProperties[] = "'item_id' can't be null";
        }
        if ($this->container['upload_file_name'] === null) {
            $invalidProperties[] = "'upload_file_name' can't be null";
        }
        if ($this->container['lang'] === null) {
            $invalidProperties[] = "'lang' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['value'] === null) {
            $invalidProperties[] = "'value' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets item_id
     *
     * @return int
     */
    public function getItemId(): int
    {
        return $this->container['item_id'];
    }

    /**
     * Sets item_id
     *
     * @param int $item_id The ID of the item the image is associated with
     *
     * @return $this
     */
    public function setItemId(int $item_id): static
    {
        if (is_null($item_id)) {
            throw new InvalidArgumentException('non-nullable item_id cannot be null');
        }
        $this->container['item_id'] = $item_id;

        return $this;
    }

    /**
     * Gets position
     *
     * @return int|null
     */
    public function getPosition(): ?int
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param int|null $position The position of the image. The position is used for sorting images in the online store. optional
     *
     * @return $this
     */
    public function setPosition(?int $position): static
    {
        if (is_null($position)) {
            throw new InvalidArgumentException('non-nullable position cannot be null');
        }
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets file_type
     *
     * @return string|null
     */
    public function getFileType(): ?string
    {
        return $this->container['file_type'];
    }

    /**
     * Sets file_type
     *
     * @param string|null $file_type The file format of the image. Possible file formats: JPG, JPEG, PNG, GIF, SVG optional
     *
     * @return $this
     */
    public function setFileType(?string $file_type): static
    {
        if (is_null($file_type)) {
            throw new InvalidArgumentException('non-nullable file_type cannot be null');
        }
        $this->container['file_type'] = $file_type;

        return $this;
    }

    /**
     * Gets upload_file_name
     *
     * @return string
     */
    public function getUploadFileName(): string
    {
        return $this->container['upload_file_name'];
    }

    /**
     * Sets upload_file_name
     *
     * @param string $upload_file_name The file name assigned to the uploaded image. Permitted characters for file names: alphanumeric (a-z, A-Z, 0-9), hypens (-), underscores (_).  with uploadImageData
     *
     * @return $this
     */
    public function setUploadFileName(string $upload_file_name): static
    {
        if (is_null($upload_file_name)) {
            throw new InvalidArgumentException('non-nullable upload_file_name cannot be null');
        }
        $this->container['upload_file_name'] = $upload_file_name;

        return $this;
    }

    /**
     * Gets upload_image_data
     *
     * @return string|null
     */
    public function getUploadImageData(): ?string
    {
        return $this->container['upload_image_data'];
    }

    /**
     * Sets upload_image_data
     *
     * @param string|null $upload_image_data The base64 encoded image data of the image
     *
     * @return $this
     */
    public function setUploadImageData(?string $upload_image_data): static
    {
        if (is_null($upload_image_data)) {
            throw new InvalidArgumentException('non-nullable upload_image_data cannot be null');
        }
        $this->container['upload_image_data'] = $upload_image_data;

        return $this;
    }

    /**
     * Gets upload_url
     *
     * @return string|null
     */
    public function getUploadUrl(): ?string
    {
        return $this->container['upload_url'];
    }

    /**
     * Sets upload_url
     *
     * @param string|null $upload_url The URL under which the image can be accessed for uploading. Permitted characters for file names: alphanumeric (a-z, A-Z, 0-9), hypens (-), underscores (_).
     *
     * @return $this
     */
    public function setUploadUrl(?string $upload_url): static
    {
        if (is_null($upload_url)) {
            throw new InvalidArgumentException('non-nullable upload_url cannot be null');
        }
        $this->container['upload_url'] = $upload_url;

        return $this;
    }

    /**
     * Gets names
     *
     * @return \ck\Model\ItemImageName[]|null
     */
    public function getNames(): ?array
    {
        return $this->container['names'];
    }

    /**
     * Sets names
     *
     * @param \ck\Model\ItemImageName[]|null $names names
     *
     * @return $this
     */
    public function setNames(?array $names): static
    {
        if (is_null($names)) {
            throw new InvalidArgumentException('non-nullable names cannot be null');
        }
        $this->container['names'] = $names;

        return $this;
    }

    /**
     * Gets lang
     *
     * @return string
     */
    public function getLang(): string
    {
        return $this->container['lang'];
    }

    /**
     * Sets lang
     *
     * @param string $lang The language of the image name
     *
     * @return $this
     */
    public function setLang(string $lang): static
    {
        if (is_null($lang)) {
            throw new InvalidArgumentException('non-nullable lang cannot be null');
        }
        $this->container['lang'] = $lang;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName(): string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the image in the specified language
     *
     * @return $this
     */
    public function setName(string $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets alternate
     *
     * @return string|null
     */
    public function getAlternate(): ?string
    {
        return $this->container['alternate'];
    }

    /**
     * Sets alternate
     *
     * @param string|null $alternate The alternative name of the image in the specified language optional
     *
     * @return $this
     */
    public function setAlternate(?string $alternate): static
    {
        if (is_null($alternate)) {
            throw new InvalidArgumentException('non-nullable alternate cannot be null');
        }
        $this->container['alternate'] = $alternate;

        return $this;
    }

    /**
     * Gets availabilities
     *
     * @return \ck\Model\ItemImageAvailability[]|null
     */
    public function getAvailabilities(): ?array
    {
        return $this->container['availabilities'];
    }

    /**
     * Sets availabilities
     *
     * @param \ck\Model\ItemImageAvailability[]|null $availabilities availabilities
     *
     * @return $this
     */
    public function setAvailabilities(?array $availabilities): static
    {
        if (is_null($availabilities)) {
            throw new InvalidArgumentException('non-nullable availabilities cannot be null');
        }
        $this->container['availabilities'] = $availabilities;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType(): string
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The type of referrer for which the image is available. Possible types: mandant = The image can be made available for clients (stores).marketplace = The image can be made available for markets.listing = The image can be made available for listings.  allowed values are mandant, marketplace, listing
     *
     * @return $this
     */
    public function setType(string $type): static
    {
        if (is_null($type)) {
            throw new InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets value
     *
     * @return float
     */
    public function getValue(): float
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param float $value For the type mandant, this is the plentyID of the client (store) for which the image is available. For the types marketplace and listing, this is the ID of the referrer for which the image is available. -1.00 = The image is available for all referrers of this type.
     *
     * @return $this
     */
    public function setValue(float $value): static
    {
        if (is_null($value)) {
            throw new InvalidArgumentException('non-nullable value cannot be null');
        }
        $this->container['value'] = $value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


