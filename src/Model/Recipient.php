<?php
/**
 * Recipient
 *
 * PHP version 8.1
 *
 * @package  ck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ck\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use ck\ObjectSerializer;

/**
 * Recipient Class Doc Comment
 *
 * @package  ck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class Recipient implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Recipient';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'int',
        'folder_id' => 'int',
        'contact_id' => 'int',
        'first_name' => 'string',
        'last_name' => 'string',
        'email' => 'string',
        'gender' => 'string',
        'birthday' => 'string',
        'timestamp' => 'int',
        'template_lang' => 'string',
        'confirmed_timestamp' => 'int',
        'confirm_auth_string' => 'string',
        'confirmation_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => null,
        'folder_id' => null,
        'contact_id' => null,
        'first_name' => null,
        'last_name' => null,
        'email' => null,
        'gender' => null,
        'birthday' => null,
        'timestamp' => null,
        'template_lang' => null,
        'confirmed_timestamp' => null,
        'confirm_auth_string' => null,
        'confirmation_url' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
		'folder_id' => false,
		'contact_id' => false,
		'first_name' => false,
		'last_name' => false,
		'email' => false,
		'gender' => false,
		'birthday' => false,
		'timestamp' => false,
		'template_lang' => false,
		'confirmed_timestamp' => false,
		'confirm_auth_string' => false,
		'confirmation_url' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'folder_id' => 'folderId',
        'contact_id' => 'contactId',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'email' => 'email',
        'gender' => 'gender',
        'birthday' => 'birthday',
        'timestamp' => 'timestamp',
        'template_lang' => 'templateLang',
        'confirmed_timestamp' => 'confirmedTimestamp',
        'confirm_auth_string' => 'confirmAuthString',
        'confirmation_url' => 'confirmationURL'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'folder_id' => 'setFolderId',
        'contact_id' => 'setContactId',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'email' => 'setEmail',
        'gender' => 'setGender',
        'birthday' => 'setBirthday',
        'timestamp' => 'setTimestamp',
        'template_lang' => 'setTemplateLang',
        'confirmed_timestamp' => 'setConfirmedTimestamp',
        'confirm_auth_string' => 'setConfirmAuthString',
        'confirmation_url' => 'setConfirmationUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'folder_id' => 'getFolderId',
        'contact_id' => 'getContactId',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'email' => 'getEmail',
        'gender' => 'getGender',
        'birthday' => 'getBirthday',
        'timestamp' => 'getTimestamp',
        'template_lang' => 'getTemplateLang',
        'confirmed_timestamp' => 'getConfirmedTimestamp',
        'confirm_auth_string' => 'getConfirmAuthString',
        'confirmation_url' => 'getConfirmationUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('folder_id', $data ?? [], null);
        $this->setIfExists('contact_id', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('gender', $data ?? [], null);
        $this->setIfExists('birthday', $data ?? [], null);
        $this->setIfExists('timestamp', $data ?? [], null);
        $this->setIfExists('template_lang', $data ?? [], null);
        $this->setIfExists('confirmed_timestamp', $data ?? [], null);
        $this->setIfExists('confirm_auth_string', $data ?? [], null);
        $this->setIfExists('confirmation_url', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The ID of the newsletter recipient
     *
     * @return $this
     */
    public function setId(?int $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets folder_id
     *
     * @return int|null
     */
    public function getFolderId(): ?int
    {
        return $this->container['folder_id'];
    }

    /**
     * Sets folder_id
     *
     * @param int|null $folder_id The ID of the newsletter folder
     *
     * @return $this
     */
    public function setFolderId(?int $folder_id): static
    {
        if (is_null($folder_id)) {
            throw new InvalidArgumentException('non-nullable folder_id cannot be null');
        }
        $this->container['folder_id'] = $folder_id;

        return $this;
    }

    /**
     * Gets contact_id
     *
     * @return int|null
     */
    public function getContactId(): ?int
    {
        return $this->container['contact_id'];
    }

    /**
     * Sets contact_id
     *
     * @param int|null $contact_id The ID of the contact
     *
     * @return $this
     */
    public function setContactId(?int $contact_id): static
    {
        if (is_null($contact_id)) {
            throw new InvalidArgumentException('non-nullable contact_id cannot be null');
        }
        $this->container['contact_id'] = $contact_id;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName(): ?string
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name The first name of the recipient
     *
     * @return $this
     */
    public function setFirstName(?string $first_name): static
    {
        if (is_null($first_name)) {
            throw new InvalidArgumentException('non-nullable first_name cannot be null');
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName(): ?string
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name The last name of the recipient
     *
     * @return $this
     */
    public function setLastName(?string $last_name): static
    {
        if (is_null($last_name)) {
            throw new InvalidArgumentException('non-nullable last_name cannot be null');
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail(): ?string
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email The email address of the recipient
     *
     * @return $this
     */
    public function setEmail(?string $email): static
    {
        if (is_null($email)) {
            throw new InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string|null
     */
    public function getGender(): ?string
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string|null $gender The gender of the recipient
     *
     * @return $this
     */
    public function setGender(?string $gender): static
    {
        if (is_null($gender)) {
            throw new InvalidArgumentException('non-nullable gender cannot be null');
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets birthday
     *
     * @return string|null
     */
    public function getBirthday(): ?string
    {
        return $this->container['birthday'];
    }

    /**
     * Sets birthday
     *
     * @param string|null $birthday The birthday of the recipient
     *
     * @return $this
     */
    public function setBirthday(?string $birthday): static
    {
        if (is_null($birthday)) {
            throw new InvalidArgumentException('non-nullable birthday cannot be null');
        }
        $this->container['birthday'] = $birthday;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return int|null
     */
    public function getTimestamp(): ?int
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param int|null $timestamp The timestamp when the newsletter email was sent to the recipient
     *
     * @return $this
     */
    public function setTimestamp(?int $timestamp): static
    {
        if (is_null($timestamp)) {
            throw new InvalidArgumentException('non-nullable timestamp cannot be null');
        }
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets template_lang
     *
     * @return string|null
     */
    public function getTemplateLang(): ?string
    {
        return $this->container['template_lang'];
    }

    /**
     * Sets template_lang
     *
     * @param string|null $template_lang The language of the newsletter email template
     *
     * @return $this
     */
    public function setTemplateLang(?string $template_lang): static
    {
        if (is_null($template_lang)) {
            throw new InvalidArgumentException('non-nullable template_lang cannot be null');
        }
        $this->container['template_lang'] = $template_lang;

        return $this;
    }

    /**
     * Gets confirmed_timestamp
     *
     * @return int|null
     */
    public function getConfirmedTimestamp(): ?int
    {
        return $this->container['confirmed_timestamp'];
    }

    /**
     * Sets confirmed_timestamp
     *
     * @param int|null $confirmed_timestamp The timestamp when the recipient confirmed the newsletter subscription
     *
     * @return $this
     */
    public function setConfirmedTimestamp(?int $confirmed_timestamp): static
    {
        if (is_null($confirmed_timestamp)) {
            throw new InvalidArgumentException('non-nullable confirmed_timestamp cannot be null');
        }
        $this->container['confirmed_timestamp'] = $confirmed_timestamp;

        return $this;
    }

    /**
     * Gets confirm_auth_string
     *
     * @return string|null
     */
    public function getConfirmAuthString(): ?string
    {
        return $this->container['confirm_auth_string'];
    }

    /**
     * Sets confirm_auth_string
     *
     * @param string|null $confirm_auth_string The key that is automatically generated by the system. This key recognises the user regardless whether the user is logged in to the system and will then set the confirmation timestamp.
     *
     * @return $this
     */
    public function setConfirmAuthString(?string $confirm_auth_string): static
    {
        if (is_null($confirm_auth_string)) {
            throw new InvalidArgumentException('non-nullable confirm_auth_string cannot be null');
        }
        $this->container['confirm_auth_string'] = $confirm_auth_string;

        return $this;
    }

    /**
     * Gets confirmation_url
     *
     * @return string|null
     */
    public function getConfirmationUrl(): ?string
    {
        return $this->container['confirmation_url'];
    }

    /**
     * Sets confirmation_url
     *
     * @param string|null $confirmation_url The url with which the customer has confirmed the newsletter
     *
     * @return $this
     */
    public function setConfirmationUrl(?string $confirmation_url): static
    {
        if (is_null($confirmation_url)) {
            throw new InvalidArgumentException('non-nullable confirmation_url cannot be null');
        }
        $this->container['confirmation_url'] = $confirmation_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


