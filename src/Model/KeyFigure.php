<?php
/**
 * KeyFigure
 *
 * PHP version 8.1
 *
 * @package  ck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ck\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use ck\ObjectSerializer;

/**
 * KeyFigure Class Doc Comment
 *
 * @package  ck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class KeyFigure implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'KeyFigure';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'title' => 'string',
        'description' => 'string',
        'key_figure' => 'string',
        'data_series' => 'bool',
        'data_group' => 'bool',
        'result_fields' => 'object[]',
        'primary_result_field' => 'string',
        'calculation' => 'object[]',
        'data_filters' => 'object[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'title' => null,
        'description' => null,
        'key_figure' => null,
        'data_series' => null,
        'data_group' => null,
        'result_fields' => null,
        'primary_result_field' => null,
        'calculation' => null,
        'data_filters' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'title' => false,
		'description' => false,
		'key_figure' => false,
		'data_series' => false,
		'data_group' => false,
		'result_fields' => false,
		'primary_result_field' => false,
		'calculation' => false,
		'data_filters' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'title' => 'title',
        'description' => 'description',
        'key_figure' => 'keyFigure',
        'data_series' => 'dataSeries',
        'data_group' => 'dataGroup',
        'result_fields' => 'resultFields',
        'primary_result_field' => 'primaryResultField',
        'calculation' => 'calculation',
        'data_filters' => 'dataFilters'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'title' => 'setTitle',
        'description' => 'setDescription',
        'key_figure' => 'setKeyFigure',
        'data_series' => 'setDataSeries',
        'data_group' => 'setDataGroup',
        'result_fields' => 'setResultFields',
        'primary_result_field' => 'setPrimaryResultField',
        'calculation' => 'setCalculation',
        'data_filters' => 'setDataFilters'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'title' => 'getTitle',
        'description' => 'getDescription',
        'key_figure' => 'getKeyFigure',
        'data_series' => 'getDataSeries',
        'data_group' => 'getDataGroup',
        'result_fields' => 'getResultFields',
        'primary_result_field' => 'getPrimaryResultField',
        'calculation' => 'getCalculation',
        'data_filters' => 'getDataFilters'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('key_figure', $data ?? [], null);
        $this->setIfExists('data_series', $data ?? [], null);
        $this->setIfExists('data_group', $data ?? [], null);
        $this->setIfExists('result_fields', $data ?? [], null);
        $this->setIfExists('primary_result_field', $data ?? [], null);
        $this->setIfExists('calculation', $data ?? [], null);
        $this->setIfExists('data_filters', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle(): ?string
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title 
     *
     * @return $this
     */
    public function setTitle(?string $title): static
    {
        if (is_null($title)) {
            throw new InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription(): ?string
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description 
     *
     * @return $this
     */
    public function setDescription(?string $description): static
    {
        if (is_null($description)) {
            throw new InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets key_figure
     *
     * @return string|null
     */
    public function getKeyFigure(): ?string
    {
        return $this->container['key_figure'];
    }

    /**
     * Sets key_figure
     *
     * @param string|null $key_figure 
     *
     * @return $this
     */
    public function setKeyFigure(?string $key_figure): static
    {
        if (is_null($key_figure)) {
            throw new InvalidArgumentException('non-nullable key_figure cannot be null');
        }
        $this->container['key_figure'] = $key_figure;

        return $this;
    }

    /**
     * Gets data_series
     *
     * @return bool|null
     */
    public function getDataSeries(): ?bool
    {
        return $this->container['data_series'];
    }

    /**
     * Sets data_series
     *
     * @param bool|null $data_series 
     *
     * @return $this
     */
    public function setDataSeries(?bool $data_series): static
    {
        if (is_null($data_series)) {
            throw new InvalidArgumentException('non-nullable data_series cannot be null');
        }
        $this->container['data_series'] = $data_series;

        return $this;
    }

    /**
     * Gets data_group
     *
     * @return bool|null
     */
    public function getDataGroup(): ?bool
    {
        return $this->container['data_group'];
    }

    /**
     * Sets data_group
     *
     * @param bool|null $data_group 
     *
     * @return $this
     */
    public function setDataGroup(?bool $data_group): static
    {
        if (is_null($data_group)) {
            throw new InvalidArgumentException('non-nullable data_group cannot be null');
        }
        $this->container['data_group'] = $data_group;

        return $this;
    }

    /**
     * Gets result_fields
     *
     * @return object[]|null
     */
    public function getResultFields(): ?array
    {
        return $this->container['result_fields'];
    }

    /**
     * Sets result_fields
     *
     * @param object[]|null $result_fields 
     *
     * @return $this
     */
    public function setResultFields(?array $result_fields): static
    {
        if (is_null($result_fields)) {
            throw new InvalidArgumentException('non-nullable result_fields cannot be null');
        }
        $this->container['result_fields'] = $result_fields;

        return $this;
    }

    /**
     * Gets primary_result_field
     *
     * @return string|null
     */
    public function getPrimaryResultField(): ?string
    {
        return $this->container['primary_result_field'];
    }

    /**
     * Sets primary_result_field
     *
     * @param string|null $primary_result_field 
     *
     * @return $this
     */
    public function setPrimaryResultField(?string $primary_result_field): static
    {
        if (is_null($primary_result_field)) {
            throw new InvalidArgumentException('non-nullable primary_result_field cannot be null');
        }
        $this->container['primary_result_field'] = $primary_result_field;

        return $this;
    }

    /**
     * Gets calculation
     *
     * @return object[]|null
     */
    public function getCalculation(): ?array
    {
        return $this->container['calculation'];
    }

    /**
     * Sets calculation
     *
     * @param object[]|null $calculation 
     *
     * @return $this
     */
    public function setCalculation(?array $calculation): static
    {
        if (is_null($calculation)) {
            throw new InvalidArgumentException('non-nullable calculation cannot be null');
        }
        $this->container['calculation'] = $calculation;

        return $this;
    }

    /**
     * Gets data_filters
     *
     * @return object[]|null
     */
    public function getDataFilters(): ?array
    {
        return $this->container['data_filters'];
    }

    /**
     * Sets data_filters
     *
     * @param object[]|null $data_filters 
     *
     * @return $this
     */
    public function setDataFilters(?array $data_filters): static
    {
        if (is_null($data_filters)) {
            throw new InvalidArgumentException('non-nullable data_filters cannot be null');
        }
        $this->container['data_filters'] = $data_filters;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


