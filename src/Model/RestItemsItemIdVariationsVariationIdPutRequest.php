<?php
/**
 * RestItemsItemIdVariationsVariationIdPutRequest
 *
 * PHP version 8.1
 *
 * @package  ck/plenty-client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ck/plenty-client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use ck/plenty-client\ObjectSerializer;

/**
 * RestItemsItemIdVariationsVariationIdPutRequest Class Doc Comment
 *
 * @package  ck/plenty-client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class RestItemsItemIdVariationsVariationIdPutRequest implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = '_rest_items__itemId__variations__variationId__put_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'int',
        'is_main' => 'bool',
        'main_variation_id' => 'int',
        'item_id' => 'int',
        'position' => 'int',
        'is_active' => 'bool',
        'number' => 'string',
        'model' => 'string',
        'external_id' => 'string',
        'availability' => 'int',
        'estimated_available_at' => 'string',
        'purchase_price' => 'float',
        'moving_average_price' => 'float',
        'created_at' => 'string',
        'updated_at' => 'string',
        'related_updated_at' => 'string',
        'price_calculation_id' => 'int',
        'picking' => 'string',
        'stock_limitation' => 'int',
        'is_visible_if_net_stock_is_positive' => 'bool',
        'is_invisible_if_net_stock_is_not_positive' => 'bool',
        'is_available_if_net_stock_is_positive' => 'bool',
        'is_unavailable_if_net_stock_is_not_positive' => 'bool',
        'main_warehouse_id' => 'int',
        'maximum_order_quantity' => 'float',
        'minimum_order_quantity' => 'float',
        'interval_order_quantity' => 'float',
        'available_until' => 'string',
        'released_at' => 'string',
        'name' => 'string',
        'weight_g' => 'int',
        'weight_net_g' => 'int',
        'width_mm' => 'int',
        'length_mm' => 'int',
        'height_mm' => 'int',
        'extra_shipping_charge1' => 'float',
        'extra_shipping_charge2' => 'float',
        'units_contained' => 'int',
        'pallet_type_id' => 'int',
        'packing_units' => 'int',
        'packing_unit_type_id' => 'int',
        'transportation_costs' => 'float',
        'storage_costs' => 'float',
        'customs' => 'float',
        'operating_costs' => 'float',
        'vat_id' => 'int',
        'bundle_type' => 'string',
        'automatic_client_visibility' => 'int',
        'is_hidden_in_category_list' => 'bool',
        'may_show_unit_price' => 'bool',
        'has_calculated_bundle_weight' => 'bool',
        'has_calculated_bundle_net_weight' => 'bool',
        'has_calculated_bundle_purchase_price' => 'bool',
        'has_calculated_bundle_moving_average_price' => 'bool',
        'customs_tariff_number' => 'string',
        'category_variation_id' => 'int',
        'market_variation_id' => 'int',
        'client_variation_id' => 'int',
        'sales_price_variation_id' => 'int',
        'supplier_variation_id' => 'int',
        'warehouse_variation_id' => 'int',
        'variation_barcodes' => '\ck/plenty-client\Model\VariationBarcode[]',
        'barcode_id' => 'int',
        'code' => 'string',
        'variation_sales_prices' => '\ck/plenty-client\Model\VariationSalesPrice[]',
        'sales_price_id' => 'int',
        'price' => 'float',
        'variation_categories' => '\ck/plenty-client\Model\VariationCategory[]',
        'category_id' => 'int',
        'is_neckermann_primary' => 'string',
        'variation_clients' => '\ck/plenty-client\Model\VariationClient[]',
        'plenty_id' => 'int',
        'variation_markets' => '\ck/plenty-client\Model\VariationMarket[]',
        'market_id' => 'float',
        'variation_default_category' => '\ck/plenty-client\Model\VariationDefaultCategory[]',
        'branch_id' => 'int',
        'variation_suppliers' => '\ck/plenty-client\Model\VariationSupplier[]',
        'supplier_id' => 'int',
        'item_number' => 'string',
        'last_price_query' => 'string',
        'discount' => 'float',
        'is_discountable' => 'string',
        'packaging_unit' => 'float',
        'variation_warehouses' => '\ck/plenty-client\Model\VariationWarehouse[]',
        'warehouse_id' => 'int',
        'warehouse_zone_id' => 'int',
        'storage_location_type' => 'string',
        'reorder_level' => 'int',
        'maximum_stock' => 'int',
        'stock_turnover_in_days' => 'int',
        'storage_location' => 'int',
        'stock_buffer' => 'int',
        'variation_attribute_values' => '\ck/plenty-client\Model\AttributeValueSet[]',
        'value_id' => 'int',
        'unit' => '\ck/plenty-client\Model\UnitCombination[]',
        'parent_variation_id' => 'int',
        'parent_variation_quantity' => 'float',
        'item' => 'object[]',
        'item_cross_selling' => '\ck/plenty-client\Model\ItemCrossSelling[]',
        'cross_item_id' => 'int',
        'relationship' => 'string',
        'is_dynamic' => 'bool',
        'item_shipping_profiles' => '\ck/plenty-client\Model\ItemShippingProfiles[]',
        'profile_id' => 'int',
        'variation_texts' => '\ck/plenty-client\Model\VariationDescription[]',
        'lang' => 'string',
        'name2' => 'string',
        'name3' => 'string',
        'preview_description' => 'string',
        'meta_description' => 'string',
        'description' => 'string',
        'technical_data' => 'string',
        'url_path' => 'string',
        'meta_keywords' => 'string',
        'images' => 'object[]',
        'item_images' => 'object[]',
        'variation_bundle_components' => '\ck/plenty-client\Model\VariationBundle[]',
        'component_variation_id' => 'int',
        'component_quantity' => 'int',
        'market_item_numbers' => '\ck/plenty-client\Model\VariationMarketIdentNumber[]',
        'country_id' => 'int',
        'type' => 'string',
        'value' => 'string',
        'variation_skus' => '\ck/plenty-client\Model\VariationSku[]',
        'account_id' => 'int',
        'sku' => 'string',
        'initial_sku' => 'string',
        'parent_sku' => 'string',
        'status' => 'string',
        'additional_information' => 'string',
        'variation_additional_skus' => '\ck/plenty-client\Model\VariationAdditionalSku[]',
        'market_account_id' => 'int',
        'properties' => '\ck/plenty-client\Model\PropertyRelation[]',
        'property_id' => 'int',
        'selection_relation_id' => 'int',
        'variation_properties' => '\ck/plenty-client\Model\VariationPropertyValue[]',
        'property_selection_id' => 'int',
        'value_int' => 'int',
        'value_float' => 'float',
        'value_file' => 'string',
        'tags' => '\ck/plenty-client\Model\Tag[]',
        'comments' => '\ck/plenty-client\Model\Comment[]',
        'user_id' => 'int',
        'text' => 'string',
        'is_visible_for_contact' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => null,
        'is_main' => null,
        'main_variation_id' => null,
        'item_id' => null,
        'position' => null,
        'is_active' => null,
        'number' => null,
        'model' => null,
        'external_id' => null,
        'availability' => null,
        'estimated_available_at' => null,
        'purchase_price' => null,
        'moving_average_price' => null,
        'created_at' => null,
        'updated_at' => null,
        'related_updated_at' => null,
        'price_calculation_id' => null,
        'picking' => null,
        'stock_limitation' => null,
        'is_visible_if_net_stock_is_positive' => null,
        'is_invisible_if_net_stock_is_not_positive' => null,
        'is_available_if_net_stock_is_positive' => null,
        'is_unavailable_if_net_stock_is_not_positive' => null,
        'main_warehouse_id' => null,
        'maximum_order_quantity' => null,
        'minimum_order_quantity' => null,
        'interval_order_quantity' => null,
        'available_until' => null,
        'released_at' => null,
        'name' => null,
        'weight_g' => null,
        'weight_net_g' => null,
        'width_mm' => null,
        'length_mm' => null,
        'height_mm' => null,
        'extra_shipping_charge1' => null,
        'extra_shipping_charge2' => null,
        'units_contained' => null,
        'pallet_type_id' => null,
        'packing_units' => null,
        'packing_unit_type_id' => null,
        'transportation_costs' => null,
        'storage_costs' => null,
        'customs' => null,
        'operating_costs' => null,
        'vat_id' => null,
        'bundle_type' => null,
        'automatic_client_visibility' => null,
        'is_hidden_in_category_list' => null,
        'may_show_unit_price' => null,
        'has_calculated_bundle_weight' => null,
        'has_calculated_bundle_net_weight' => null,
        'has_calculated_bundle_purchase_price' => null,
        'has_calculated_bundle_moving_average_price' => null,
        'customs_tariff_number' => null,
        'category_variation_id' => null,
        'market_variation_id' => null,
        'client_variation_id' => null,
        'sales_price_variation_id' => null,
        'supplier_variation_id' => null,
        'warehouse_variation_id' => null,
        'variation_barcodes' => null,
        'barcode_id' => null,
        'code' => null,
        'variation_sales_prices' => null,
        'sales_price_id' => null,
        'price' => null,
        'variation_categories' => null,
        'category_id' => null,
        'is_neckermann_primary' => null,
        'variation_clients' => null,
        'plenty_id' => null,
        'variation_markets' => null,
        'market_id' => null,
        'variation_default_category' => null,
        'branch_id' => null,
        'variation_suppliers' => null,
        'supplier_id' => null,
        'item_number' => null,
        'last_price_query' => null,
        'discount' => null,
        'is_discountable' => null,
        'packaging_unit' => null,
        'variation_warehouses' => null,
        'warehouse_id' => null,
        'warehouse_zone_id' => null,
        'storage_location_type' => null,
        'reorder_level' => null,
        'maximum_stock' => null,
        'stock_turnover_in_days' => null,
        'storage_location' => null,
        'stock_buffer' => null,
        'variation_attribute_values' => null,
        'value_id' => null,
        'unit' => null,
        'parent_variation_id' => null,
        'parent_variation_quantity' => null,
        'item' => null,
        'item_cross_selling' => null,
        'cross_item_id' => null,
        'relationship' => null,
        'is_dynamic' => null,
        'item_shipping_profiles' => null,
        'profile_id' => null,
        'variation_texts' => null,
        'lang' => null,
        'name2' => null,
        'name3' => null,
        'preview_description' => null,
        'meta_description' => null,
        'description' => null,
        'technical_data' => null,
        'url_path' => null,
        'meta_keywords' => null,
        'images' => null,
        'item_images' => null,
        'variation_bundle_components' => null,
        'component_variation_id' => null,
        'component_quantity' => null,
        'market_item_numbers' => null,
        'country_id' => null,
        'type' => null,
        'value' => null,
        'variation_skus' => null,
        'account_id' => null,
        'sku' => null,
        'initial_sku' => null,
        'parent_sku' => null,
        'status' => null,
        'additional_information' => null,
        'variation_additional_skus' => null,
        'market_account_id' => null,
        'properties' => null,
        'property_id' => null,
        'selection_relation_id' => null,
        'variation_properties' => null,
        'property_selection_id' => null,
        'value_int' => null,
        'value_float' => null,
        'value_file' => null,
        'tags' => null,
        'comments' => null,
        'user_id' => null,
        'text' => null,
        'is_visible_for_contact' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
		'is_main' => false,
		'main_variation_id' => false,
		'item_id' => false,
		'position' => false,
		'is_active' => false,
		'number' => false,
		'model' => false,
		'external_id' => false,
		'availability' => false,
		'estimated_available_at' => false,
		'purchase_price' => false,
		'moving_average_price' => false,
		'created_at' => false,
		'updated_at' => false,
		'related_updated_at' => false,
		'price_calculation_id' => false,
		'picking' => false,
		'stock_limitation' => false,
		'is_visible_if_net_stock_is_positive' => false,
		'is_invisible_if_net_stock_is_not_positive' => false,
		'is_available_if_net_stock_is_positive' => false,
		'is_unavailable_if_net_stock_is_not_positive' => false,
		'main_warehouse_id' => false,
		'maximum_order_quantity' => false,
		'minimum_order_quantity' => false,
		'interval_order_quantity' => false,
		'available_until' => false,
		'released_at' => false,
		'name' => false,
		'weight_g' => false,
		'weight_net_g' => false,
		'width_mm' => false,
		'length_mm' => false,
		'height_mm' => false,
		'extra_shipping_charge1' => false,
		'extra_shipping_charge2' => false,
		'units_contained' => false,
		'pallet_type_id' => false,
		'packing_units' => false,
		'packing_unit_type_id' => false,
		'transportation_costs' => false,
		'storage_costs' => false,
		'customs' => false,
		'operating_costs' => false,
		'vat_id' => false,
		'bundle_type' => false,
		'automatic_client_visibility' => false,
		'is_hidden_in_category_list' => false,
		'may_show_unit_price' => false,
		'has_calculated_bundle_weight' => false,
		'has_calculated_bundle_net_weight' => false,
		'has_calculated_bundle_purchase_price' => false,
		'has_calculated_bundle_moving_average_price' => false,
		'customs_tariff_number' => false,
		'category_variation_id' => false,
		'market_variation_id' => false,
		'client_variation_id' => false,
		'sales_price_variation_id' => false,
		'supplier_variation_id' => false,
		'warehouse_variation_id' => false,
		'variation_barcodes' => false,
		'barcode_id' => false,
		'code' => false,
		'variation_sales_prices' => false,
		'sales_price_id' => false,
		'price' => false,
		'variation_categories' => false,
		'category_id' => false,
		'is_neckermann_primary' => false,
		'variation_clients' => false,
		'plenty_id' => false,
		'variation_markets' => false,
		'market_id' => false,
		'variation_default_category' => false,
		'branch_id' => false,
		'variation_suppliers' => false,
		'supplier_id' => false,
		'item_number' => false,
		'last_price_query' => false,
		'discount' => false,
		'is_discountable' => false,
		'packaging_unit' => false,
		'variation_warehouses' => false,
		'warehouse_id' => false,
		'warehouse_zone_id' => false,
		'storage_location_type' => false,
		'reorder_level' => false,
		'maximum_stock' => false,
		'stock_turnover_in_days' => false,
		'storage_location' => false,
		'stock_buffer' => false,
		'variation_attribute_values' => false,
		'value_id' => false,
		'unit' => false,
		'parent_variation_id' => false,
		'parent_variation_quantity' => false,
		'item' => false,
		'item_cross_selling' => false,
		'cross_item_id' => false,
		'relationship' => false,
		'is_dynamic' => false,
		'item_shipping_profiles' => false,
		'profile_id' => false,
		'variation_texts' => false,
		'lang' => false,
		'name2' => false,
		'name3' => false,
		'preview_description' => false,
		'meta_description' => false,
		'description' => false,
		'technical_data' => false,
		'url_path' => false,
		'meta_keywords' => false,
		'images' => false,
		'item_images' => false,
		'variation_bundle_components' => false,
		'component_variation_id' => false,
		'component_quantity' => false,
		'market_item_numbers' => false,
		'country_id' => false,
		'type' => false,
		'value' => false,
		'variation_skus' => false,
		'account_id' => false,
		'sku' => false,
		'initial_sku' => false,
		'parent_sku' => false,
		'status' => false,
		'additional_information' => false,
		'variation_additional_skus' => false,
		'market_account_id' => false,
		'properties' => false,
		'property_id' => false,
		'selection_relation_id' => false,
		'variation_properties' => false,
		'property_selection_id' => false,
		'value_int' => false,
		'value_float' => false,
		'value_file' => false,
		'tags' => false,
		'comments' => false,
		'user_id' => false,
		'text' => false,
		'is_visible_for_contact' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'is_main' => 'isMain',
        'main_variation_id' => 'mainVariationId',
        'item_id' => 'itemId',
        'position' => 'position',
        'is_active' => 'isActive',
        'number' => 'number',
        'model' => 'model',
        'external_id' => 'externalId',
        'availability' => 'availability',
        'estimated_available_at' => 'estimatedAvailableAt',
        'purchase_price' => 'purchasePrice',
        'moving_average_price' => 'movingAveragePrice',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt',
        'related_updated_at' => 'relatedUpdatedAt',
        'price_calculation_id' => 'priceCalculationId',
        'picking' => 'picking',
        'stock_limitation' => 'stockLimitation',
        'is_visible_if_net_stock_is_positive' => 'isVisibleIfNetStockIsPositive',
        'is_invisible_if_net_stock_is_not_positive' => 'isInvisibleIfNetStockIsNotPositive',
        'is_available_if_net_stock_is_positive' => 'isAvailableIfNetStockIsPositive',
        'is_unavailable_if_net_stock_is_not_positive' => 'isUnavailableIfNetStockIsNotPositive',
        'main_warehouse_id' => 'mainWarehouseId',
        'maximum_order_quantity' => 'maximumOrderQuantity',
        'minimum_order_quantity' => 'minimumOrderQuantity',
        'interval_order_quantity' => 'intervalOrderQuantity',
        'available_until' => 'availableUntil',
        'released_at' => 'releasedAt',
        'name' => 'name',
        'weight_g' => 'weightG',
        'weight_net_g' => 'weightNetG',
        'width_mm' => 'widthMM',
        'length_mm' => 'lengthMM',
        'height_mm' => 'heightMM',
        'extra_shipping_charge1' => 'extraShippingCharge1',
        'extra_shipping_charge2' => 'extraShippingCharge2',
        'units_contained' => 'unitsContained',
        'pallet_type_id' => 'palletTypeId',
        'packing_units' => 'packingUnits',
        'packing_unit_type_id' => 'packingUnitTypeId',
        'transportation_costs' => 'transportationCosts',
        'storage_costs' => 'storageCosts',
        'customs' => 'customs',
        'operating_costs' => 'operatingCosts',
        'vat_id' => 'vatId',
        'bundle_type' => 'bundleType',
        'automatic_client_visibility' => 'automaticClientVisibility',
        'is_hidden_in_category_list' => 'isHiddenInCategoryList',
        'may_show_unit_price' => 'mayShowUnitPrice',
        'has_calculated_bundle_weight' => 'hasCalculatedBundleWeight',
        'has_calculated_bundle_net_weight' => 'hasCalculatedBundleNetWeight',
        'has_calculated_bundle_purchase_price' => 'hasCalculatedBundlePurchasePrice',
        'has_calculated_bundle_moving_average_price' => 'hasCalculatedBundleMovingAveragePrice',
        'customs_tariff_number' => 'customsTariffNumber',
        'category_variation_id' => 'categoryVariationId',
        'market_variation_id' => 'marketVariationId',
        'client_variation_id' => 'clientVariationId',
        'sales_price_variation_id' => 'salesPriceVariationId',
        'supplier_variation_id' => 'supplierVariationId',
        'warehouse_variation_id' => 'warehouseVariationId',
        'variation_barcodes' => 'variationBarcodes',
        'barcode_id' => 'barcodeId',
        'code' => 'code',
        'variation_sales_prices' => 'variationSalesPrices',
        'sales_price_id' => 'salesPriceId',
        'price' => 'price',
        'variation_categories' => 'variationCategories',
        'category_id' => 'categoryId',
        'is_neckermann_primary' => 'isNeckermannPrimary',
        'variation_clients' => 'variationClients',
        'plenty_id' => 'plentyId',
        'variation_markets' => 'variationMarkets',
        'market_id' => 'marketId',
        'variation_default_category' => 'variationDefaultCategory',
        'branch_id' => 'branchId',
        'variation_suppliers' => 'variationSuppliers',
        'supplier_id' => 'supplierId',
        'item_number' => 'itemNumber',
        'last_price_query' => 'lastPriceQuery',
        'discount' => 'discount',
        'is_discountable' => 'isDiscountable',
        'packaging_unit' => 'packagingUnit',
        'variation_warehouses' => 'variationWarehouses',
        'warehouse_id' => 'warehouseId',
        'warehouse_zone_id' => 'warehouseZoneId',
        'storage_location_type' => 'storageLocationType',
        'reorder_level' => 'reorderLevel',
        'maximum_stock' => 'maximumStock',
        'stock_turnover_in_days' => 'stockTurnoverInDays',
        'storage_location' => 'storageLocation',
        'stock_buffer' => 'stockBuffer',
        'variation_attribute_values' => 'variationAttributeValues',
        'value_id' => 'valueId',
        'unit' => 'unit',
        'parent_variation_id' => 'parentVariationId',
        'parent_variation_quantity' => 'parentVariationQuantity',
        'item' => 'item',
        'item_cross_selling' => 'itemCrossSelling',
        'cross_item_id' => 'crossItemId',
        'relationship' => 'relationship',
        'is_dynamic' => 'isDynamic',
        'item_shipping_profiles' => 'itemShippingProfiles',
        'profile_id' => 'profileId',
        'variation_texts' => 'variationTexts',
        'lang' => 'lang',
        'name2' => 'name2',
        'name3' => 'name3',
        'preview_description' => 'previewDescription',
        'meta_description' => 'metaDescription',
        'description' => 'description',
        'technical_data' => 'technicalData',
        'url_path' => 'urlPath',
        'meta_keywords' => 'metaKeywords',
        'images' => 'images',
        'item_images' => 'itemImages',
        'variation_bundle_components' => 'variationBundleComponents',
        'component_variation_id' => 'componentVariationId',
        'component_quantity' => 'componentQuantity',
        'market_item_numbers' => 'marketItemNumbers',
        'country_id' => 'countryId',
        'type' => 'type',
        'value' => 'value',
        'variation_skus' => 'variationSkus',
        'account_id' => 'accountId',
        'sku' => 'sku',
        'initial_sku' => 'initialSku',
        'parent_sku' => 'parentSku',
        'status' => 'status',
        'additional_information' => 'additionalInformation',
        'variation_additional_skus' => 'variationAdditionalSkus',
        'market_account_id' => 'marketAccountId',
        'properties' => 'properties',
        'property_id' => 'propertyId',
        'selection_relation_id' => 'selectionRelationId',
        'variation_properties' => 'variationProperties',
        'property_selection_id' => 'propertySelectionId',
        'value_int' => 'valueInt',
        'value_float' => 'valueFloat',
        'value_file' => 'valueFile',
        'tags' => 'tags',
        'comments' => 'comments',
        'user_id' => 'userId',
        'text' => 'text',
        'is_visible_for_contact' => 'isVisibleForContact'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'is_main' => 'setIsMain',
        'main_variation_id' => 'setMainVariationId',
        'item_id' => 'setItemId',
        'position' => 'setPosition',
        'is_active' => 'setIsActive',
        'number' => 'setNumber',
        'model' => 'setModel',
        'external_id' => 'setExternalId',
        'availability' => 'setAvailability',
        'estimated_available_at' => 'setEstimatedAvailableAt',
        'purchase_price' => 'setPurchasePrice',
        'moving_average_price' => 'setMovingAveragePrice',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'related_updated_at' => 'setRelatedUpdatedAt',
        'price_calculation_id' => 'setPriceCalculationId',
        'picking' => 'setPicking',
        'stock_limitation' => 'setStockLimitation',
        'is_visible_if_net_stock_is_positive' => 'setIsVisibleIfNetStockIsPositive',
        'is_invisible_if_net_stock_is_not_positive' => 'setIsInvisibleIfNetStockIsNotPositive',
        'is_available_if_net_stock_is_positive' => 'setIsAvailableIfNetStockIsPositive',
        'is_unavailable_if_net_stock_is_not_positive' => 'setIsUnavailableIfNetStockIsNotPositive',
        'main_warehouse_id' => 'setMainWarehouseId',
        'maximum_order_quantity' => 'setMaximumOrderQuantity',
        'minimum_order_quantity' => 'setMinimumOrderQuantity',
        'interval_order_quantity' => 'setIntervalOrderQuantity',
        'available_until' => 'setAvailableUntil',
        'released_at' => 'setReleasedAt',
        'name' => 'setName',
        'weight_g' => 'setWeightG',
        'weight_net_g' => 'setWeightNetG',
        'width_mm' => 'setWidthMm',
        'length_mm' => 'setLengthMm',
        'height_mm' => 'setHeightMm',
        'extra_shipping_charge1' => 'setExtraShippingCharge1',
        'extra_shipping_charge2' => 'setExtraShippingCharge2',
        'units_contained' => 'setUnitsContained',
        'pallet_type_id' => 'setPalletTypeId',
        'packing_units' => 'setPackingUnits',
        'packing_unit_type_id' => 'setPackingUnitTypeId',
        'transportation_costs' => 'setTransportationCosts',
        'storage_costs' => 'setStorageCosts',
        'customs' => 'setCustoms',
        'operating_costs' => 'setOperatingCosts',
        'vat_id' => 'setVatId',
        'bundle_type' => 'setBundleType',
        'automatic_client_visibility' => 'setAutomaticClientVisibility',
        'is_hidden_in_category_list' => 'setIsHiddenInCategoryList',
        'may_show_unit_price' => 'setMayShowUnitPrice',
        'has_calculated_bundle_weight' => 'setHasCalculatedBundleWeight',
        'has_calculated_bundle_net_weight' => 'setHasCalculatedBundleNetWeight',
        'has_calculated_bundle_purchase_price' => 'setHasCalculatedBundlePurchasePrice',
        'has_calculated_bundle_moving_average_price' => 'setHasCalculatedBundleMovingAveragePrice',
        'customs_tariff_number' => 'setCustomsTariffNumber',
        'category_variation_id' => 'setCategoryVariationId',
        'market_variation_id' => 'setMarketVariationId',
        'client_variation_id' => 'setClientVariationId',
        'sales_price_variation_id' => 'setSalesPriceVariationId',
        'supplier_variation_id' => 'setSupplierVariationId',
        'warehouse_variation_id' => 'setWarehouseVariationId',
        'variation_barcodes' => 'setVariationBarcodes',
        'barcode_id' => 'setBarcodeId',
        'code' => 'setCode',
        'variation_sales_prices' => 'setVariationSalesPrices',
        'sales_price_id' => 'setSalesPriceId',
        'price' => 'setPrice',
        'variation_categories' => 'setVariationCategories',
        'category_id' => 'setCategoryId',
        'is_neckermann_primary' => 'setIsNeckermannPrimary',
        'variation_clients' => 'setVariationClients',
        'plenty_id' => 'setPlentyId',
        'variation_markets' => 'setVariationMarkets',
        'market_id' => 'setMarketId',
        'variation_default_category' => 'setVariationDefaultCategory',
        'branch_id' => 'setBranchId',
        'variation_suppliers' => 'setVariationSuppliers',
        'supplier_id' => 'setSupplierId',
        'item_number' => 'setItemNumber',
        'last_price_query' => 'setLastPriceQuery',
        'discount' => 'setDiscount',
        'is_discountable' => 'setIsDiscountable',
        'packaging_unit' => 'setPackagingUnit',
        'variation_warehouses' => 'setVariationWarehouses',
        'warehouse_id' => 'setWarehouseId',
        'warehouse_zone_id' => 'setWarehouseZoneId',
        'storage_location_type' => 'setStorageLocationType',
        'reorder_level' => 'setReorderLevel',
        'maximum_stock' => 'setMaximumStock',
        'stock_turnover_in_days' => 'setStockTurnoverInDays',
        'storage_location' => 'setStorageLocation',
        'stock_buffer' => 'setStockBuffer',
        'variation_attribute_values' => 'setVariationAttributeValues',
        'value_id' => 'setValueId',
        'unit' => 'setUnit',
        'parent_variation_id' => 'setParentVariationId',
        'parent_variation_quantity' => 'setParentVariationQuantity',
        'item' => 'setItem',
        'item_cross_selling' => 'setItemCrossSelling',
        'cross_item_id' => 'setCrossItemId',
        'relationship' => 'setRelationship',
        'is_dynamic' => 'setIsDynamic',
        'item_shipping_profiles' => 'setItemShippingProfiles',
        'profile_id' => 'setProfileId',
        'variation_texts' => 'setVariationTexts',
        'lang' => 'setLang',
        'name2' => 'setName2',
        'name3' => 'setName3',
        'preview_description' => 'setPreviewDescription',
        'meta_description' => 'setMetaDescription',
        'description' => 'setDescription',
        'technical_data' => 'setTechnicalData',
        'url_path' => 'setUrlPath',
        'meta_keywords' => 'setMetaKeywords',
        'images' => 'setImages',
        'item_images' => 'setItemImages',
        'variation_bundle_components' => 'setVariationBundleComponents',
        'component_variation_id' => 'setComponentVariationId',
        'component_quantity' => 'setComponentQuantity',
        'market_item_numbers' => 'setMarketItemNumbers',
        'country_id' => 'setCountryId',
        'type' => 'setType',
        'value' => 'setValue',
        'variation_skus' => 'setVariationSkus',
        'account_id' => 'setAccountId',
        'sku' => 'setSku',
        'initial_sku' => 'setInitialSku',
        'parent_sku' => 'setParentSku',
        'status' => 'setStatus',
        'additional_information' => 'setAdditionalInformation',
        'variation_additional_skus' => 'setVariationAdditionalSkus',
        'market_account_id' => 'setMarketAccountId',
        'properties' => 'setProperties',
        'property_id' => 'setPropertyId',
        'selection_relation_id' => 'setSelectionRelationId',
        'variation_properties' => 'setVariationProperties',
        'property_selection_id' => 'setPropertySelectionId',
        'value_int' => 'setValueInt',
        'value_float' => 'setValueFloat',
        'value_file' => 'setValueFile',
        'tags' => 'setTags',
        'comments' => 'setComments',
        'user_id' => 'setUserId',
        'text' => 'setText',
        'is_visible_for_contact' => 'setIsVisibleForContact'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'is_main' => 'getIsMain',
        'main_variation_id' => 'getMainVariationId',
        'item_id' => 'getItemId',
        'position' => 'getPosition',
        'is_active' => 'getIsActive',
        'number' => 'getNumber',
        'model' => 'getModel',
        'external_id' => 'getExternalId',
        'availability' => 'getAvailability',
        'estimated_available_at' => 'getEstimatedAvailableAt',
        'purchase_price' => 'getPurchasePrice',
        'moving_average_price' => 'getMovingAveragePrice',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'related_updated_at' => 'getRelatedUpdatedAt',
        'price_calculation_id' => 'getPriceCalculationId',
        'picking' => 'getPicking',
        'stock_limitation' => 'getStockLimitation',
        'is_visible_if_net_stock_is_positive' => 'getIsVisibleIfNetStockIsPositive',
        'is_invisible_if_net_stock_is_not_positive' => 'getIsInvisibleIfNetStockIsNotPositive',
        'is_available_if_net_stock_is_positive' => 'getIsAvailableIfNetStockIsPositive',
        'is_unavailable_if_net_stock_is_not_positive' => 'getIsUnavailableIfNetStockIsNotPositive',
        'main_warehouse_id' => 'getMainWarehouseId',
        'maximum_order_quantity' => 'getMaximumOrderQuantity',
        'minimum_order_quantity' => 'getMinimumOrderQuantity',
        'interval_order_quantity' => 'getIntervalOrderQuantity',
        'available_until' => 'getAvailableUntil',
        'released_at' => 'getReleasedAt',
        'name' => 'getName',
        'weight_g' => 'getWeightG',
        'weight_net_g' => 'getWeightNetG',
        'width_mm' => 'getWidthMm',
        'length_mm' => 'getLengthMm',
        'height_mm' => 'getHeightMm',
        'extra_shipping_charge1' => 'getExtraShippingCharge1',
        'extra_shipping_charge2' => 'getExtraShippingCharge2',
        'units_contained' => 'getUnitsContained',
        'pallet_type_id' => 'getPalletTypeId',
        'packing_units' => 'getPackingUnits',
        'packing_unit_type_id' => 'getPackingUnitTypeId',
        'transportation_costs' => 'getTransportationCosts',
        'storage_costs' => 'getStorageCosts',
        'customs' => 'getCustoms',
        'operating_costs' => 'getOperatingCosts',
        'vat_id' => 'getVatId',
        'bundle_type' => 'getBundleType',
        'automatic_client_visibility' => 'getAutomaticClientVisibility',
        'is_hidden_in_category_list' => 'getIsHiddenInCategoryList',
        'may_show_unit_price' => 'getMayShowUnitPrice',
        'has_calculated_bundle_weight' => 'getHasCalculatedBundleWeight',
        'has_calculated_bundle_net_weight' => 'getHasCalculatedBundleNetWeight',
        'has_calculated_bundle_purchase_price' => 'getHasCalculatedBundlePurchasePrice',
        'has_calculated_bundle_moving_average_price' => 'getHasCalculatedBundleMovingAveragePrice',
        'customs_tariff_number' => 'getCustomsTariffNumber',
        'category_variation_id' => 'getCategoryVariationId',
        'market_variation_id' => 'getMarketVariationId',
        'client_variation_id' => 'getClientVariationId',
        'sales_price_variation_id' => 'getSalesPriceVariationId',
        'supplier_variation_id' => 'getSupplierVariationId',
        'warehouse_variation_id' => 'getWarehouseVariationId',
        'variation_barcodes' => 'getVariationBarcodes',
        'barcode_id' => 'getBarcodeId',
        'code' => 'getCode',
        'variation_sales_prices' => 'getVariationSalesPrices',
        'sales_price_id' => 'getSalesPriceId',
        'price' => 'getPrice',
        'variation_categories' => 'getVariationCategories',
        'category_id' => 'getCategoryId',
        'is_neckermann_primary' => 'getIsNeckermannPrimary',
        'variation_clients' => 'getVariationClients',
        'plenty_id' => 'getPlentyId',
        'variation_markets' => 'getVariationMarkets',
        'market_id' => 'getMarketId',
        'variation_default_category' => 'getVariationDefaultCategory',
        'branch_id' => 'getBranchId',
        'variation_suppliers' => 'getVariationSuppliers',
        'supplier_id' => 'getSupplierId',
        'item_number' => 'getItemNumber',
        'last_price_query' => 'getLastPriceQuery',
        'discount' => 'getDiscount',
        'is_discountable' => 'getIsDiscountable',
        'packaging_unit' => 'getPackagingUnit',
        'variation_warehouses' => 'getVariationWarehouses',
        'warehouse_id' => 'getWarehouseId',
        'warehouse_zone_id' => 'getWarehouseZoneId',
        'storage_location_type' => 'getStorageLocationType',
        'reorder_level' => 'getReorderLevel',
        'maximum_stock' => 'getMaximumStock',
        'stock_turnover_in_days' => 'getStockTurnoverInDays',
        'storage_location' => 'getStorageLocation',
        'stock_buffer' => 'getStockBuffer',
        'variation_attribute_values' => 'getVariationAttributeValues',
        'value_id' => 'getValueId',
        'unit' => 'getUnit',
        'parent_variation_id' => 'getParentVariationId',
        'parent_variation_quantity' => 'getParentVariationQuantity',
        'item' => 'getItem',
        'item_cross_selling' => 'getItemCrossSelling',
        'cross_item_id' => 'getCrossItemId',
        'relationship' => 'getRelationship',
        'is_dynamic' => 'getIsDynamic',
        'item_shipping_profiles' => 'getItemShippingProfiles',
        'profile_id' => 'getProfileId',
        'variation_texts' => 'getVariationTexts',
        'lang' => 'getLang',
        'name2' => 'getName2',
        'name3' => 'getName3',
        'preview_description' => 'getPreviewDescription',
        'meta_description' => 'getMetaDescription',
        'description' => 'getDescription',
        'technical_data' => 'getTechnicalData',
        'url_path' => 'getUrlPath',
        'meta_keywords' => 'getMetaKeywords',
        'images' => 'getImages',
        'item_images' => 'getItemImages',
        'variation_bundle_components' => 'getVariationBundleComponents',
        'component_variation_id' => 'getComponentVariationId',
        'component_quantity' => 'getComponentQuantity',
        'market_item_numbers' => 'getMarketItemNumbers',
        'country_id' => 'getCountryId',
        'type' => 'getType',
        'value' => 'getValue',
        'variation_skus' => 'getVariationSkus',
        'account_id' => 'getAccountId',
        'sku' => 'getSku',
        'initial_sku' => 'getInitialSku',
        'parent_sku' => 'getParentSku',
        'status' => 'getStatus',
        'additional_information' => 'getAdditionalInformation',
        'variation_additional_skus' => 'getVariationAdditionalSkus',
        'market_account_id' => 'getMarketAccountId',
        'properties' => 'getProperties',
        'property_id' => 'getPropertyId',
        'selection_relation_id' => 'getSelectionRelationId',
        'variation_properties' => 'getVariationProperties',
        'property_selection_id' => 'getPropertySelectionId',
        'value_int' => 'getValueInt',
        'value_float' => 'getValueFloat',
        'value_file' => 'getValueFile',
        'tags' => 'getTags',
        'comments' => 'getComments',
        'user_id' => 'getUserId',
        'text' => 'getText',
        'is_visible_for_contact' => 'getIsVisibleForContact'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('is_main', $data ?? [], null);
        $this->setIfExists('main_variation_id', $data ?? [], null);
        $this->setIfExists('item_id', $data ?? [], null);
        $this->setIfExists('position', $data ?? [], null);
        $this->setIfExists('is_active', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('model', $data ?? [], null);
        $this->setIfExists('external_id', $data ?? [], null);
        $this->setIfExists('availability', $data ?? [], null);
        $this->setIfExists('estimated_available_at', $data ?? [], null);
        $this->setIfExists('purchase_price', $data ?? [], null);
        $this->setIfExists('moving_average_price', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('related_updated_at', $data ?? [], null);
        $this->setIfExists('price_calculation_id', $data ?? [], null);
        $this->setIfExists('picking', $data ?? [], null);
        $this->setIfExists('stock_limitation', $data ?? [], null);
        $this->setIfExists('is_visible_if_net_stock_is_positive', $data ?? [], null);
        $this->setIfExists('is_invisible_if_net_stock_is_not_positive', $data ?? [], null);
        $this->setIfExists('is_available_if_net_stock_is_positive', $data ?? [], null);
        $this->setIfExists('is_unavailable_if_net_stock_is_not_positive', $data ?? [], null);
        $this->setIfExists('main_warehouse_id', $data ?? [], null);
        $this->setIfExists('maximum_order_quantity', $data ?? [], null);
        $this->setIfExists('minimum_order_quantity', $data ?? [], null);
        $this->setIfExists('interval_order_quantity', $data ?? [], null);
        $this->setIfExists('available_until', $data ?? [], null);
        $this->setIfExists('released_at', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('weight_g', $data ?? [], null);
        $this->setIfExists('weight_net_g', $data ?? [], null);
        $this->setIfExists('width_mm', $data ?? [], null);
        $this->setIfExists('length_mm', $data ?? [], null);
        $this->setIfExists('height_mm', $data ?? [], null);
        $this->setIfExists('extra_shipping_charge1', $data ?? [], null);
        $this->setIfExists('extra_shipping_charge2', $data ?? [], null);
        $this->setIfExists('units_contained', $data ?? [], null);
        $this->setIfExists('pallet_type_id', $data ?? [], null);
        $this->setIfExists('packing_units', $data ?? [], null);
        $this->setIfExists('packing_unit_type_id', $data ?? [], null);
        $this->setIfExists('transportation_costs', $data ?? [], null);
        $this->setIfExists('storage_costs', $data ?? [], null);
        $this->setIfExists('customs', $data ?? [], null);
        $this->setIfExists('operating_costs', $data ?? [], null);
        $this->setIfExists('vat_id', $data ?? [], null);
        $this->setIfExists('bundle_type', $data ?? [], null);
        $this->setIfExists('automatic_client_visibility', $data ?? [], null);
        $this->setIfExists('is_hidden_in_category_list', $data ?? [], null);
        $this->setIfExists('may_show_unit_price', $data ?? [], null);
        $this->setIfExists('has_calculated_bundle_weight', $data ?? [], null);
        $this->setIfExists('has_calculated_bundle_net_weight', $data ?? [], null);
        $this->setIfExists('has_calculated_bundle_purchase_price', $data ?? [], null);
        $this->setIfExists('has_calculated_bundle_moving_average_price', $data ?? [], null);
        $this->setIfExists('customs_tariff_number', $data ?? [], null);
        $this->setIfExists('category_variation_id', $data ?? [], null);
        $this->setIfExists('market_variation_id', $data ?? [], null);
        $this->setIfExists('client_variation_id', $data ?? [], null);
        $this->setIfExists('sales_price_variation_id', $data ?? [], null);
        $this->setIfExists('supplier_variation_id', $data ?? [], null);
        $this->setIfExists('warehouse_variation_id', $data ?? [], null);
        $this->setIfExists('variation_barcodes', $data ?? [], null);
        $this->setIfExists('barcode_id', $data ?? [], null);
        $this->setIfExists('code', $data ?? [], null);
        $this->setIfExists('variation_sales_prices', $data ?? [], null);
        $this->setIfExists('sales_price_id', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('variation_categories', $data ?? [], null);
        $this->setIfExists('category_id', $data ?? [], null);
        $this->setIfExists('is_neckermann_primary', $data ?? [], null);
        $this->setIfExists('variation_clients', $data ?? [], null);
        $this->setIfExists('plenty_id', $data ?? [], null);
        $this->setIfExists('variation_markets', $data ?? [], null);
        $this->setIfExists('market_id', $data ?? [], null);
        $this->setIfExists('variation_default_category', $data ?? [], null);
        $this->setIfExists('branch_id', $data ?? [], null);
        $this->setIfExists('variation_suppliers', $data ?? [], null);
        $this->setIfExists('supplier_id', $data ?? [], null);
        $this->setIfExists('item_number', $data ?? [], null);
        $this->setIfExists('last_price_query', $data ?? [], null);
        $this->setIfExists('discount', $data ?? [], null);
        $this->setIfExists('is_discountable', $data ?? [], null);
        $this->setIfExists('packaging_unit', $data ?? [], null);
        $this->setIfExists('variation_warehouses', $data ?? [], null);
        $this->setIfExists('warehouse_id', $data ?? [], null);
        $this->setIfExists('warehouse_zone_id', $data ?? [], null);
        $this->setIfExists('storage_location_type', $data ?? [], null);
        $this->setIfExists('reorder_level', $data ?? [], null);
        $this->setIfExists('maximum_stock', $data ?? [], null);
        $this->setIfExists('stock_turnover_in_days', $data ?? [], null);
        $this->setIfExists('storage_location', $data ?? [], null);
        $this->setIfExists('stock_buffer', $data ?? [], null);
        $this->setIfExists('variation_attribute_values', $data ?? [], null);
        $this->setIfExists('value_id', $data ?? [], null);
        $this->setIfExists('unit', $data ?? [], null);
        $this->setIfExists('parent_variation_id', $data ?? [], null);
        $this->setIfExists('parent_variation_quantity', $data ?? [], null);
        $this->setIfExists('item', $data ?? [], null);
        $this->setIfExists('item_cross_selling', $data ?? [], null);
        $this->setIfExists('cross_item_id', $data ?? [], null);
        $this->setIfExists('relationship', $data ?? [], null);
        $this->setIfExists('is_dynamic', $data ?? [], null);
        $this->setIfExists('item_shipping_profiles', $data ?? [], null);
        $this->setIfExists('profile_id', $data ?? [], null);
        $this->setIfExists('variation_texts', $data ?? [], null);
        $this->setIfExists('lang', $data ?? [], null);
        $this->setIfExists('name2', $data ?? [], null);
        $this->setIfExists('name3', $data ?? [], null);
        $this->setIfExists('preview_description', $data ?? [], null);
        $this->setIfExists('meta_description', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('technical_data', $data ?? [], null);
        $this->setIfExists('url_path', $data ?? [], null);
        $this->setIfExists('meta_keywords', $data ?? [], null);
        $this->setIfExists('images', $data ?? [], null);
        $this->setIfExists('item_images', $data ?? [], null);
        $this->setIfExists('variation_bundle_components', $data ?? [], null);
        $this->setIfExists('component_variation_id', $data ?? [], null);
        $this->setIfExists('component_quantity', $data ?? [], null);
        $this->setIfExists('market_item_numbers', $data ?? [], null);
        $this->setIfExists('country_id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('value', $data ?? [], null);
        $this->setIfExists('variation_skus', $data ?? [], null);
        $this->setIfExists('account_id', $data ?? [], null);
        $this->setIfExists('sku', $data ?? [], null);
        $this->setIfExists('initial_sku', $data ?? [], null);
        $this->setIfExists('parent_sku', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('additional_information', $data ?? [], null);
        $this->setIfExists('variation_additional_skus', $data ?? [], null);
        $this->setIfExists('market_account_id', $data ?? [], null);
        $this->setIfExists('properties', $data ?? [], null);
        $this->setIfExists('property_id', $data ?? [], null);
        $this->setIfExists('selection_relation_id', $data ?? [], null);
        $this->setIfExists('variation_properties', $data ?? [], null);
        $this->setIfExists('property_selection_id', $data ?? [], null);
        $this->setIfExists('value_int', $data ?? [], null);
        $this->setIfExists('value_float', $data ?? [], null);
        $this->setIfExists('value_file', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('comments', $data ?? [], null);
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('text', $data ?? [], null);
        $this->setIfExists('is_visible_for_contact', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['item_id'] === null) {
            $invalidProperties[] = "'item_id' can't be null";
        }
        if ($this->container['purchase_price'] === null) {
            $invalidProperties[] = "'purchase_price' can't be null";
        }
        if ($this->container['barcode_id'] === null) {
            $invalidProperties[] = "'barcode_id' can't be null";
        }
        if ($this->container['code'] === null) {
            $invalidProperties[] = "'code' can't be null";
        }
        if ($this->container['sales_price_id'] === null) {
            $invalidProperties[] = "'sales_price_id' can't be null";
        }
        if ($this->container['price'] === null) {
            $invalidProperties[] = "'price' can't be null";
        }
        if ($this->container['category_id'] === null) {
            $invalidProperties[] = "'category_id' can't be null";
        }
        if ($this->container['plenty_id'] === null) {
            $invalidProperties[] = "'plenty_id' can't be null";
        }
        if ($this->container['market_id'] === null) {
            $invalidProperties[] = "'market_id' can't be null";
        }
        if ($this->container['branch_id'] === null) {
            $invalidProperties[] = "'branch_id' can't be null";
        }
        if ($this->container['warehouse_id'] === null) {
            $invalidProperties[] = "'warehouse_id' can't be null";
        }
        if ($this->container['value_id'] === null) {
            $invalidProperties[] = "'value_id' can't be null";
        }
        if ($this->container['unit'] === null) {
            $invalidProperties[] = "'unit' can't be null";
        }
        if ($this->container['cross_item_id'] === null) {
            $invalidProperties[] = "'cross_item_id' can't be null";
        }
        if ($this->container['relationship'] === null) {
            $invalidProperties[] = "'relationship' can't be null";
        }
        if ($this->container['profile_id'] === null) {
            $invalidProperties[] = "'profile_id' can't be null";
        }
        if ($this->container['lang'] === null) {
            $invalidProperties[] = "'lang' can't be null";
        }
        if ($this->container['component_variation_id'] === null) {
            $invalidProperties[] = "'component_variation_id' can't be null";
        }
        if ($this->container['component_quantity'] === null) {
            $invalidProperties[] = "'component_quantity' can't be null";
        }
        if ($this->container['sku'] === null) {
            $invalidProperties[] = "'sku' can't be null";
        }
        if ($this->container['property_id'] === null) {
            $invalidProperties[] = "'property_id' can't be null";
        }
        if ($this->container['text'] === null) {
            $invalidProperties[] = "'text' can't be null";
        }
        if ($this->container['is_visible_for_contact'] === null) {
            $invalidProperties[] = "'is_visible_for_contact' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The ID of the comment optional
     *
     * @return $this
     */
    public function setId(?int $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_main
     *
     * @return bool|null
     */
    public function getIsMain(): ?bool
    {
        return $this->container['is_main'];
    }

    /**
     * Sets is_main
     *
     * @param bool|null $is_main Flag that indicates if the variation is the main variation of the item. optional
     *
     * @return $this
     */
    public function setIsMain(?bool $is_main): static
    {
        if (is_null($is_main)) {
            throw new InvalidArgumentException('non-nullable is_main cannot be null');
        }
        $this->container['is_main'] = $is_main;

        return $this;
    }

    /**
     * Gets main_variation_id
     *
     * @return int|null
     */
    public function getMainVariationId(): ?int
    {
        return $this->container['main_variation_id'];
    }

    /**
     * Sets main_variation_id
     *
     * @param int|null $main_variation_id The variation ID of the item's main variation. Value is NULL if this variation is the item's main variation. optional
     *
     * @return $this
     */
    public function setMainVariationId(?int $main_variation_id): static
    {
        if (is_null($main_variation_id)) {
            throw new InvalidArgumentException('non-nullable main_variation_id cannot be null');
        }
        $this->container['main_variation_id'] = $main_variation_id;

        return $this;
    }

    /**
     * Gets item_id
     *
     * @return int
     */
    public function getItemId(): int
    {
        return $this->container['item_id'];
    }

    /**
     * Sets item_id
     *
     * @param int $item_id The item ID of the item that this variation belongs to.
     *
     * @return $this
     */
    public function setItemId(int $item_id): static
    {
        if (is_null($item_id)) {
            throw new InvalidArgumentException('non-nullable item_id cannot be null');
        }
        $this->container['item_id'] = $item_id;

        return $this;
    }

    /**
     * Gets position
     *
     * @return int|null
     */
    public function getPosition(): ?int
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param int|null $position The position of the market ident number  (ASIN/ePID)
     *
     * @return $this
     */
    public function setPosition(?int $position): static
    {
        if (is_null($position)) {
            throw new InvalidArgumentException('non-nullable position cannot be null');
        }
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool|null
     */
    public function getIsActive(): ?bool
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool|null $is_active Flag that indicates if the item is ready for export (currently not in use). optional
     *
     * @return $this
     */
    public function setIsActive(?bool $is_active): static
    {
        if (is_null($is_active)) {
            throw new InvalidArgumentException('non-nullable is_active cannot be null');
        }
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string|null
     */
    public function getNumber(): ?string
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string|null $number The unique variation number of the variation. The variation number must be specified. optional
     *
     * @return $this
     */
    public function setNumber(?string $number): static
    {
        if (is_null($number)) {
            throw new InvalidArgumentException('non-nullable number cannot be null');
        }
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets model
     *
     * @return string|null
     */
    public function getModel(): ?string
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param string|null $model The model of the variation. Value is inherited from the item's main variation if inheritance is active. optional
     *
     * @return $this
     */
    public function setModel(?string $model): static
    {
        if (is_null($model)) {
            throw new InvalidArgumentException('non-nullable model cannot be null');
        }
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId(): ?string
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id The external variation ID of this variation. The external variation number is optional and allows importing items and variations from external systems to plentymarkets. optional
     *
     * @return $this
     */
    public function setExternalId(?string $external_id): static
    {
        if (is_null($external_id)) {
            throw new InvalidArgumentException('non-nullable external_id cannot be null');
        }
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets availability
     *
     * @return int|null
     */
    public function getAvailability(): ?int
    {
        return $this->container['availability'];
    }

    /**
     * Sets availability
     *
     * @param int|null $availability The availability of the variation. Possible values: 1 to 10, null = Variation inherits value of main variation. optional
     *
     * @return $this
     */
    public function setAvailability(?int $availability): static
    {
        if (is_null($availability)) {
            throw new InvalidArgumentException('non-nullable availability cannot be null');
        }
        $this->container['availability'] = $availability;

        return $this;
    }

    /**
     * Gets estimated_available_at
     *
     * @return string|null
     */
    public function getEstimatedAvailableAt(): ?string
    {
        return $this->container['estimated_available_at'];
    }

    /**
     * Sets estimated_available_at
     *
     * @param string|null $estimated_available_at The estimated delivery date of variations on reorder. optional
     *
     * @return $this
     */
    public function setEstimatedAvailableAt(?string $estimated_available_at): static
    {
        if (is_null($estimated_available_at)) {
            throw new InvalidArgumentException('non-nullable estimated_available_at cannot be null');
        }
        $this->container['estimated_available_at'] = $estimated_available_at;

        return $this;
    }

    /**
     * Gets purchase_price
     *
     * @return float
     */
    public function getPurchasePrice(): float
    {
        return $this->container['purchase_price'];
    }

    /**
     * Sets purchase_price
     *
     * @param float $purchase_price The price at which the variation was purchased from this supplier.
     *
     * @return $this
     */
    public function setPurchasePrice(float $purchase_price): static
    {
        if (is_null($purchase_price)) {
            throw new InvalidArgumentException('non-nullable purchase_price cannot be null');
        }
        $this->container['purchase_price'] = $purchase_price;

        return $this;
    }

    /**
     * Gets moving_average_price
     *
     * @return float|null
     */
    public function getMovingAveragePrice(): ?float
    {
        return $this->container['moving_average_price'];
    }

    /**
     * Sets moving_average_price
     *
     * @param float|null $moving_average_price The moving average purchase price of the variation. optional
     *
     * @return $this
     */
    public function setMovingAveragePrice(?float $moving_average_price): static
    {
        if (is_null($moving_average_price)) {
            throw new InvalidArgumentException('non-nullable moving_average_price cannot be null');
        }
        $this->container['moving_average_price'] = $moving_average_price;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt(): ?string
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at The time the variation was created. optional
     *
     * @return $this
     */
    public function setCreatedAt(?string $created_at): static
    {
        if (is_null($created_at)) {
            throw new InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt(): ?string
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at The time the variation was last updated. optional
     *
     * @return $this
     */
    public function setUpdatedAt(?string $updated_at): static
    {
        if (is_null($updated_at)) {
            throw new InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets related_updated_at
     *
     * @return string|null
     */
    public function getRelatedUpdatedAt(): ?string
    {
        return $this->container['related_updated_at'];
    }

    /**
     * Sets related_updated_at
     *
     * @param string|null $related_updated_at The time at which related information for this variation was last updated. Related information is defined as information that is linked to the variation, i.e. barcodes, categories, images, markets, clients (stores), prices, suppliers, warehouses and the default category. optional
     *
     * @return $this
     */
    public function setRelatedUpdatedAt(?string $related_updated_at): static
    {
        if (is_null($related_updated_at)) {
            throw new InvalidArgumentException('non-nullable related_updated_at cannot be null');
        }
        $this->container['related_updated_at'] = $related_updated_at;

        return $this;
    }

    /**
     * Gets price_calculation_id
     *
     * @return int|null
     */
    public function getPriceCalculationId(): ?int
    {
        return $this->container['price_calculation_id'];
    }

    /**
     * Sets price_calculation_id
     *
     * @param int|null $price_calculation_id The ID of the price calculation linked to the variation. optional
     *
     * @return $this
     */
    public function setPriceCalculationId(?int $price_calculation_id): static
    {
        if (is_null($price_calculation_id)) {
            throw new InvalidArgumentException('non-nullable price_calculation_id cannot be null');
        }
        $this->container['price_calculation_id'] = $price_calculation_id;

        return $this;
    }

    /**
     * Gets picking
     *
     * @return string|null
     */
    public function getPicking(): ?string
    {
        return $this->container['picking'];
    }

    /**
     * Sets picking
     *
     * @param string|null $picking The order picking type of the variation. Possible values: single_picking, no_single_picking, exclude_from_picklist, null (no order picking type) optional allowed values are single_picking, no_single_picking, exclude_from_picklist
     *
     * @return $this
     */
    public function setPicking(?string $picking): static
    {
        if (is_null($picking)) {
            throw new InvalidArgumentException('non-nullable picking cannot be null');
        }
        $this->container['picking'] = $picking;

        return $this;
    }

    /**
     * Gets stock_limitation
     *
     * @return int|null
     */
    public function getStockLimitation(): ?int
    {
        return $this->container['stock_limitation'];
    }

    /**
     * Sets stock_limitation
     *
     * @param int|null $stock_limitation The stock limitation for the variation. Possible values: 0 = No limitation, i.e. stock is not limited. The variations's availability is not checked automatically.1 = Stock is limited to net stock. The variation's availability is checked automatically.2 = Do not administer stock for this variation. optional allowed values are 0, 1, 2
     *
     * @return $this
     */
    public function setStockLimitation(?int $stock_limitation): static
    {
        if (is_null($stock_limitation)) {
            throw new InvalidArgumentException('non-nullable stock_limitation cannot be null');
        }
        $this->container['stock_limitation'] = $stock_limitation;

        return $this;
    }

    /**
     * Gets is_visible_if_net_stock_is_positive
     *
     * @return bool|null
     */
    public function getIsVisibleIfNetStockIsPositive(): ?bool
    {
        return $this->container['is_visible_if_net_stock_is_positive'];
    }

    /**
     * Sets is_visible_if_net_stock_is_positive
     *
     * @param bool|null $is_visible_if_net_stock_is_positive Flag that indicates if the variation is visible in the online store if net stock is positive. If true, the variation automatically becomes visible when the net stock changes to positive. optional
     *
     * @return $this
     */
    public function setIsVisibleIfNetStockIsPositive(?bool $is_visible_if_net_stock_is_positive): static
    {
        if (is_null($is_visible_if_net_stock_is_positive)) {
            throw new InvalidArgumentException('non-nullable is_visible_if_net_stock_is_positive cannot be null');
        }
        $this->container['is_visible_if_net_stock_is_positive'] = $is_visible_if_net_stock_is_positive;

        return $this;
    }

    /**
     * Gets is_invisible_if_net_stock_is_not_positive
     *
     * @return bool|null
     */
    public function getIsInvisibleIfNetStockIsNotPositive(): ?bool
    {
        return $this->container['is_invisible_if_net_stock_is_not_positive'];
    }

    /**
     * Sets is_invisible_if_net_stock_is_not_positive
     *
     * @param bool|null $is_invisible_if_net_stock_is_not_positive Flag that indicates if the variation is invisible in the online store if net stock is not positive. If true, the variation automatically becomes invisible when the net stock changes to 0 or negative. optional
     *
     * @return $this
     */
    public function setIsInvisibleIfNetStockIsNotPositive(?bool $is_invisible_if_net_stock_is_not_positive): static
    {
        if (is_null($is_invisible_if_net_stock_is_not_positive)) {
            throw new InvalidArgumentException('non-nullable is_invisible_if_net_stock_is_not_positive cannot be null');
        }
        $this->container['is_invisible_if_net_stock_is_not_positive'] = $is_invisible_if_net_stock_is_not_positive;

        return $this;
    }

    /**
     * Gets is_available_if_net_stock_is_positive
     *
     * @return bool|null
     */
    public function getIsAvailableIfNetStockIsPositive(): ?bool
    {
        return $this->container['is_available_if_net_stock_is_positive'];
    }

    /**
     * Sets is_available_if_net_stock_is_positive
     *
     * @param bool|null $is_available_if_net_stock_is_positive Flag that indicates if the variation is available in the online store if net stock is positive. If true, the variation automatically becomes available when the net stock changes to positive. optional
     *
     * @return $this
     */
    public function setIsAvailableIfNetStockIsPositive(?bool $is_available_if_net_stock_is_positive): static
    {
        if (is_null($is_available_if_net_stock_is_positive)) {
            throw new InvalidArgumentException('non-nullable is_available_if_net_stock_is_positive cannot be null');
        }
        $this->container['is_available_if_net_stock_is_positive'] = $is_available_if_net_stock_is_positive;

        return $this;
    }

    /**
     * Gets is_unavailable_if_net_stock_is_not_positive
     *
     * @return bool|null
     */
    public function getIsUnavailableIfNetStockIsNotPositive(): ?bool
    {
        return $this->container['is_unavailable_if_net_stock_is_not_positive'];
    }

    /**
     * Sets is_unavailable_if_net_stock_is_not_positive
     *
     * @param bool|null $is_unavailable_if_net_stock_is_not_positive Flag that indicates if the variation is unavailable in the online store if net stock is not positive. If true, the variation automatically becomes available when the net stock changes to 0 or negative. optional
     *
     * @return $this
     */
    public function setIsUnavailableIfNetStockIsNotPositive(?bool $is_unavailable_if_net_stock_is_not_positive): static
    {
        if (is_null($is_unavailable_if_net_stock_is_not_positive)) {
            throw new InvalidArgumentException('non-nullable is_unavailable_if_net_stock_is_not_positive cannot be null');
        }
        $this->container['is_unavailable_if_net_stock_is_not_positive'] = $is_unavailable_if_net_stock_is_not_positive;

        return $this;
    }

    /**
     * Gets main_warehouse_id
     *
     * @return int|null
     */
    public function getMainWarehouseId(): ?int
    {
        return $this->container['main_warehouse_id'];
    }

    /**
     * Sets main_warehouse_id
     *
     * @param int|null $main_warehouse_id The ID of the main warehouse of the variation. optional
     *
     * @return $this
     */
    public function setMainWarehouseId(?int $main_warehouse_id): static
    {
        if (is_null($main_warehouse_id)) {
            throw new InvalidArgumentException('non-nullable main_warehouse_id cannot be null');
        }
        $this->container['main_warehouse_id'] = $main_warehouse_id;

        return $this;
    }

    /**
     * Gets maximum_order_quantity
     *
     * @return float|null
     */
    public function getMaximumOrderQuantity(): ?float
    {
        return $this->container['maximum_order_quantity'];
    }

    /**
     * Sets maximum_order_quantity
     *
     * @param float|null $maximum_order_quantity The maximum order quantity permitted per order. Decimal values are possible to allow orders by weight or length. Default value is 0. If value is 0, the maximum order quantity is unlimited. optional
     *
     * @return $this
     */
    public function setMaximumOrderQuantity(?float $maximum_order_quantity): static
    {
        if (is_null($maximum_order_quantity)) {
            throw new InvalidArgumentException('non-nullable maximum_order_quantity cannot be null');
        }
        $this->container['maximum_order_quantity'] = $maximum_order_quantity;

        return $this;
    }

    /**
     * Gets minimum_order_quantity
     *
     * @return float|null
     */
    public function getMinimumOrderQuantity(): ?float
    {
        return $this->container['minimum_order_quantity'];
    }

    /**
     * Sets minimum_order_quantity
     *
     * @param float|null $minimum_order_quantity The minimum order quantity. Decimal values are possible to allow orders by weight or length. optional
     *
     * @return $this
     */
    public function setMinimumOrderQuantity(?float $minimum_order_quantity): static
    {
        if (is_null($minimum_order_quantity)) {
            throw new InvalidArgumentException('non-nullable minimum_order_quantity cannot be null');
        }
        $this->container['minimum_order_quantity'] = $minimum_order_quantity;

        return $this;
    }

    /**
     * Gets interval_order_quantity
     *
     * @return float|null
     */
    public function getIntervalOrderQuantity(): ?float
    {
        return $this->container['interval_order_quantity'];
    }

    /**
     * Sets interval_order_quantity
     *
     * @param float|null $interval_order_quantity The quantity intervals the variation can be ordered in. Decimal values are possible to allow orders by weight or length. optional
     *
     * @return $this
     */
    public function setIntervalOrderQuantity(?float $interval_order_quantity): static
    {
        if (is_null($interval_order_quantity)) {
            throw new InvalidArgumentException('non-nullable interval_order_quantity cannot be null');
        }
        $this->container['interval_order_quantity'] = $interval_order_quantity;

        return $this;
    }

    /**
     * Gets available_until
     *
     * @return string|null
     */
    public function getAvailableUntil(): ?string
    {
        return $this->container['available_until'];
    }

    /**
     * Sets available_until
     *
     * @param string|null $available_until The last date the item will be available for sale. optional
     *
     * @return $this
     */
    public function setAvailableUntil(?string $available_until): static
    {
        if (is_null($available_until)) {
            throw new InvalidArgumentException('non-nullable available_until cannot be null');
        }
        $this->container['available_until'] = $available_until;

        return $this;
    }

    /**
     * Gets released_at
     *
     * @return string|null
     */
    public function getReleasedAt(): ?string
    {
        return $this->container['released_at'];
    }

    /**
     * Sets released_at
     *
     * @param string|null $released_at The release date of the variation. This is the date on which the variation will become available. The variation can be visible in the online store before this date, e.g. for preorders. optional
     *
     * @return $this
     */
    public function setReleasedAt(?string $released_at): static
    {
        if (is_null($released_at)) {
            throw new InvalidArgumentException('non-nullable released_at cannot be null');
        }
        $this->container['released_at'] = $released_at;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The default name of the item. By default, this name is displayed in the online store. For Default items, this name is also used for markets. Character limit: max. 240 characters. optional
     *
     * @return $this
     */
    public function setName(?string $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets weight_g
     *
     * @return int|null
     */
    public function getWeightG(): ?int
    {
        return $this->container['weight_g'];
    }

    /**
     * Sets weight_g
     *
     * @param int|null $weight_g The gross weight of the variation in gramms (g). This weight includes the packaging for variations that are packaged separately. This value is used for calculating shipping packages and weight-based shipping costs. optional
     *
     * @return $this
     */
    public function setWeightG(?int $weight_g): static
    {
        if (is_null($weight_g)) {
            throw new InvalidArgumentException('non-nullable weight_g cannot be null');
        }
        $this->container['weight_g'] = $weight_g;

        return $this;
    }

    /**
     * Gets weight_net_g
     *
     * @return int|null
     */
    public function getWeightNetG(): ?int
    {
        return $this->container['weight_net_g'];
    }

    /**
     * Sets weight_net_g
     *
     * @param int|null $weight_net_g The net weight of the variation in gramms (g). This is the weight of the variation without packaging. optional
     *
     * @return $this
     */
    public function setWeightNetG(?int $weight_net_g): static
    {
        if (is_null($weight_net_g)) {
            throw new InvalidArgumentException('non-nullable weight_net_g cannot be null');
        }
        $this->container['weight_net_g'] = $weight_net_g;

        return $this;
    }

    /**
     * Gets width_mm
     *
     * @return int|null
     */
    public function getWidthMm(): ?int
    {
        return $this->container['width_mm'];
    }

    /**
     * Sets width_mm
     *
     * @param int|null $width_mm The width of the variation in millimetres (mm) optional
     *
     * @return $this
     */
    public function setWidthMm(?int $width_mm): static
    {
        if (is_null($width_mm)) {
            throw new InvalidArgumentException('non-nullable width_mm cannot be null');
        }
        $this->container['width_mm'] = $width_mm;

        return $this;
    }

    /**
     * Gets length_mm
     *
     * @return int|null
     */
    public function getLengthMm(): ?int
    {
        return $this->container['length_mm'];
    }

    /**
     * Sets length_mm
     *
     * @param int|null $length_mm The length of the variation in millimeters (mm) optional
     *
     * @return $this
     */
    public function setLengthMm(?int $length_mm): static
    {
        if (is_null($length_mm)) {
            throw new InvalidArgumentException('non-nullable length_mm cannot be null');
        }
        $this->container['length_mm'] = $length_mm;

        return $this;
    }

    /**
     * Gets height_mm
     *
     * @return int|null
     */
    public function getHeightMm(): ?int
    {
        return $this->container['height_mm'];
    }

    /**
     * Sets height_mm
     *
     * @param int|null $height_mm The height of the variation in millimetres (mm) optional
     *
     * @return $this
     */
    public function setHeightMm(?int $height_mm): static
    {
        if (is_null($height_mm)) {
            throw new InvalidArgumentException('non-nullable height_mm cannot be null');
        }
        $this->container['height_mm'] = $height_mm;

        return $this;
    }

    /**
     * Gets extra_shipping_charge1
     *
     * @return float|null
     */
    public function getExtraShippingCharge1(): ?float
    {
        return $this->container['extra_shipping_charge1'];
    }

    /**
     * Sets extra_shipping_charge1
     *
     * @param float|null $extra_shipping_charge1 The extra shipping charge 1 for the variation. Extra shipping charges are useful for large or bulky items that are particularly expensive to ship. Charge 1 is added to the regular shipping costs for the first item of an order. If different variations are ordered, the extra shipping charge 1 of the variation with the highest charge 1 is selected. optional
     *
     * @return $this
     */
    public function setExtraShippingCharge1(?float $extra_shipping_charge1): static
    {
        if (is_null($extra_shipping_charge1)) {
            throw new InvalidArgumentException('non-nullable extra_shipping_charge1 cannot be null');
        }
        $this->container['extra_shipping_charge1'] = $extra_shipping_charge1;

        return $this;
    }

    /**
     * Gets extra_shipping_charge2
     *
     * @return float|null
     */
    public function getExtraShippingCharge2(): ?float
    {
        return $this->container['extra_shipping_charge2'];
    }

    /**
     * Sets extra_shipping_charge2
     *
     * @param float|null $extra_shipping_charge2 The extra shipping charge 2 for the variation. Extra shipping charges are useful for large or bulky items that are expensive to ship. Charge 2 is added to the shipping costs for any additional items of an order. optional
     *
     * @return $this
     */
    public function setExtraShippingCharge2(?float $extra_shipping_charge2): static
    {
        if (is_null($extra_shipping_charge2)) {
            throw new InvalidArgumentException('non-nullable extra_shipping_charge2 cannot be null');
        }
        $this->container['extra_shipping_charge2'] = $extra_shipping_charge2;

        return $this;
    }

    /**
     * Gets units_contained
     *
     * @return int|null
     */
    public function getUnitsContained(): ?int
    {
        return $this->container['units_contained'];
    }

    /**
     * Sets units_contained
     *
     * @param int|null $units_contained The number of sales units contained in one package. Default value is 1. optional
     *
     * @return $this
     */
    public function setUnitsContained(?int $units_contained): static
    {
        if (is_null($units_contained)) {
            throw new InvalidArgumentException('non-nullable units_contained cannot be null');
        }
        $this->container['units_contained'] = $units_contained;

        return $this;
    }

    /**
     * Gets pallet_type_id
     *
     * @return int|null
     */
    public function getPalletTypeId(): ?int
    {
        return $this->container['pallet_type_id'];
    }

    /**
     * Sets pallet_type_id
     *
     * @param int|null $pallet_type_id The ID of the pallet type optional
     *
     * @return $this
     */
    public function setPalletTypeId(?int $pallet_type_id): static
    {
        if (is_null($pallet_type_id)) {
            throw new InvalidArgumentException('non-nullable pallet_type_id cannot be null');
        }
        $this->container['pallet_type_id'] = $pallet_type_id;

        return $this;
    }

    /**
     * Gets packing_units
     *
     * @return int|null
     */
    public function getPackingUnits(): ?int
    {
        return $this->container['packing_units'];
    }

    /**
     * Sets packing_units
     *
     * @param int|null $packing_units The number of packing units if the item consists of multiple packages. Value is 0 if an item is sent as one package. All items of an order that have the value 0 will be packed into one package. optional
     *
     * @return $this
     */
    public function setPackingUnits(?int $packing_units): static
    {
        if (is_null($packing_units)) {
            throw new InvalidArgumentException('non-nullable packing_units cannot be null');
        }
        $this->container['packing_units'] = $packing_units;

        return $this;
    }

    /**
     * Gets packing_unit_type_id
     *
     * @return int|null
     */
    public function getPackingUnitTypeId(): ?int
    {
        return $this->container['packing_unit_type_id'];
    }

    /**
     * Sets packing_unit_type_id
     *
     * @param int|null $packing_unit_type_id The ID of the packing unit type. optional
     *
     * @return $this
     */
    public function setPackingUnitTypeId(?int $packing_unit_type_id): static
    {
        if (is_null($packing_unit_type_id)) {
            throw new InvalidArgumentException('non-nullable packing_unit_type_id cannot be null');
        }
        $this->container['packing_unit_type_id'] = $packing_unit_type_id;

        return $this;
    }

    /**
     * Gets transportation_costs
     *
     * @return float|null
     */
    public function getTransportationCosts(): ?float
    {
        return $this->container['transportation_costs'];
    }

    /**
     * Sets transportation_costs
     *
     * @param float|null $transportation_costs The net transportation costs for the variation. This value is used for price calculations and for calculating the acquisition price. optional
     *
     * @return $this
     */
    public function setTransportationCosts(?float $transportation_costs): static
    {
        if (is_null($transportation_costs)) {
            throw new InvalidArgumentException('non-nullable transportation_costs cannot be null');
        }
        $this->container['transportation_costs'] = $transportation_costs;

        return $this;
    }

    /**
     * Gets storage_costs
     *
     * @return float|null
     */
    public function getStorageCosts(): ?float
    {
        return $this->container['storage_costs'];
    }

    /**
     * Sets storage_costs
     *
     * @param float|null $storage_costs The net storage costs for the variation optional
     *
     * @return $this
     */
    public function setStorageCosts(?float $storage_costs): static
    {
        if (is_null($storage_costs)) {
            throw new InvalidArgumentException('non-nullable storage_costs cannot be null');
        }
        $this->container['storage_costs'] = $storage_costs;

        return $this;
    }

    /**
     * Gets customs
     *
     * @return float|null
     */
    public function getCustoms(): ?float
    {
        return $this->container['customs'];
    }

    /**
     * Sets customs
     *
     * @param float|null $customs The customs rate in percent optional
     *
     * @return $this
     */
    public function setCustoms(?float $customs): static
    {
        if (is_null($customs)) {
            throw new InvalidArgumentException('non-nullable customs cannot be null');
        }
        $this->container['customs'] = $customs;

        return $this;
    }

    /**
     * Gets operating_costs
     *
     * @return float|null
     */
    public function getOperatingCosts(): ?float
    {
        return $this->container['operating_costs'];
    }

    /**
     * Sets operating_costs
     *
     * @param float|null $operating_costs The operating costs for the variation in percent optional
     *
     * @return $this
     */
    public function setOperatingCosts(?float $operating_costs): static
    {
        if (is_null($operating_costs)) {
            throw new InvalidArgumentException('non-nullable operating_costs cannot be null');
        }
        $this->container['operating_costs'] = $operating_costs;

        return $this;
    }

    /**
     * Gets vat_id
     *
     * @return int|null
     */
    public function getVatId(): ?int
    {
        return $this->container['vat_id'];
    }

    /**
     * Sets vat_id
     *
     * @param int|null $vat_id The ID of the VAT rate of the variation. VAT rates are created for each client (store) and linked to the variation. optional allowed values are 0, 1, 2, 3
     *
     * @return $this
     */
    public function setVatId(?int $vat_id): static
    {
        if (is_null($vat_id)) {
            throw new InvalidArgumentException('non-nullable vat_id cannot be null');
        }
        $this->container['vat_id'] = $vat_id;

        return $this;
    }

    /**
     * Gets bundle_type
     *
     * @return string|null
     */
    public function getBundleType(): ?string
    {
        return $this->container['bundle_type'];
    }

    /**
     * Sets bundle_type
     *
     * @param string|null $bundle_type Indicates the bundle type of the variation. Possible values:bundle = The variation is a bundlebundle_item = The variation is a bundle component.Null = The variation is not associated with a bundle optional allowed values are bundle, bundle_item
     *
     * @return $this
     */
    public function setBundleType(?string $bundle_type): static
    {
        if (is_null($bundle_type)) {
            throw new InvalidArgumentException('non-nullable bundle_type cannot be null');
        }
        $this->container['bundle_type'] = $bundle_type;

        return $this;
    }

    /**
     * Gets automatic_client_visibility
     *
     * @return int|null
     */
    public function getAutomaticClientVisibility(): ?int
    {
        return $this->container['automatic_client_visibility'];
    }

    /**
     * Sets automatic_client_visibility
     *
     * @param int|null $automatic_client_visibility Indicates if the variation is set as available for any clients (stores). Possible values:0 / -1 (GET) or 0 (POST) = Variation is not available in any client (store).1 / 2 (GET) or 1 (POST) = Variation is available in at least one client (store).The variation's actual visibility depends on the settings for net stock dependency. optional allowed values are -1, 0, 1, 2
     *
     * @return $this
     */
    public function setAutomaticClientVisibility(?int $automatic_client_visibility): static
    {
        if (is_null($automatic_client_visibility)) {
            throw new InvalidArgumentException('non-nullable automatic_client_visibility cannot be null');
        }
        $this->container['automatic_client_visibility'] = $automatic_client_visibility;

        return $this;
    }

    /**
     * Gets is_hidden_in_category_list
     *
     * @return bool|null
     */
    public function getIsHiddenInCategoryList(): ?bool
    {
        return $this->container['is_hidden_in_category_list'];
    }

    /**
     * Sets is_hidden_in_category_list
     *
     * @param bool|null $is_hidden_in_category_list Flag that indicates if the variation is hidden in the category list. If true, the variation will not be shown in any item category and will not be returned as a search result. The variation can only be accessed via its URL. optional
     *
     * @return $this
     */
    public function setIsHiddenInCategoryList(?bool $is_hidden_in_category_list): static
    {
        if (is_null($is_hidden_in_category_list)) {
            throw new InvalidArgumentException('non-nullable is_hidden_in_category_list cannot be null');
        }
        $this->container['is_hidden_in_category_list'] = $is_hidden_in_category_list;

        return $this;
    }

    /**
     * Gets may_show_unit_price
     *
     * @return bool|null
     */
    public function getMayShowUnitPrice(): ?bool
    {
        return $this->container['may_show_unit_price'];
    }

    /**
     * Sets may_show_unit_price
     *
     * @param bool|null $may_show_unit_price Display unit price in the online store optional
     *
     * @return $this
     */
    public function setMayShowUnitPrice(?bool $may_show_unit_price): static
    {
        if (is_null($may_show_unit_price)) {
            throw new InvalidArgumentException('non-nullable may_show_unit_price cannot be null');
        }
        $this->container['may_show_unit_price'] = $may_show_unit_price;

        return $this;
    }

    /**
     * Gets has_calculated_bundle_weight
     *
     * @return bool|null
     */
    public function getHasCalculatedBundleWeight(): ?bool
    {
        return $this->container['has_calculated_bundle_weight'];
    }

    /**
     * Sets has_calculated_bundle_weight
     *
     * @param bool|null $has_calculated_bundle_weight Indicates if the gross bundle weight is calculated by its components. optional
     *
     * @return $this
     */
    public function setHasCalculatedBundleWeight(?bool $has_calculated_bundle_weight): static
    {
        if (is_null($has_calculated_bundle_weight)) {
            throw new InvalidArgumentException('non-nullable has_calculated_bundle_weight cannot be null');
        }
        $this->container['has_calculated_bundle_weight'] = $has_calculated_bundle_weight;

        return $this;
    }

    /**
     * Gets has_calculated_bundle_net_weight
     *
     * @return bool|null
     */
    public function getHasCalculatedBundleNetWeight(): ?bool
    {
        return $this->container['has_calculated_bundle_net_weight'];
    }

    /**
     * Sets has_calculated_bundle_net_weight
     *
     * @param bool|null $has_calculated_bundle_net_weight Indicates if the net bundle weight is calculated by its components. optional
     *
     * @return $this
     */
    public function setHasCalculatedBundleNetWeight(?bool $has_calculated_bundle_net_weight): static
    {
        if (is_null($has_calculated_bundle_net_weight)) {
            throw new InvalidArgumentException('non-nullable has_calculated_bundle_net_weight cannot be null');
        }
        $this->container['has_calculated_bundle_net_weight'] = $has_calculated_bundle_net_weight;

        return $this;
    }

    /**
     * Gets has_calculated_bundle_purchase_price
     *
     * @return bool|null
     */
    public function getHasCalculatedBundlePurchasePrice(): ?bool
    {
        return $this->container['has_calculated_bundle_purchase_price'];
    }

    /**
     * Sets has_calculated_bundle_purchase_price
     *
     * @param bool|null $has_calculated_bundle_purchase_price Indicates if the net purchase price is calculated by its components. optional
     *
     * @return $this
     */
    public function setHasCalculatedBundlePurchasePrice(?bool $has_calculated_bundle_purchase_price): static
    {
        if (is_null($has_calculated_bundle_purchase_price)) {
            throw new InvalidArgumentException('non-nullable has_calculated_bundle_purchase_price cannot be null');
        }
        $this->container['has_calculated_bundle_purchase_price'] = $has_calculated_bundle_purchase_price;

        return $this;
    }

    /**
     * Gets has_calculated_bundle_moving_average_price
     *
     * @return bool|null
     */
    public function getHasCalculatedBundleMovingAveragePrice(): ?bool
    {
        return $this->container['has_calculated_bundle_moving_average_price'];
    }

    /**
     * Sets has_calculated_bundle_moving_average_price
     *
     * @param bool|null $has_calculated_bundle_moving_average_price Indicates if the moving average net purchase price is calculated by its components. optional
     *
     * @return $this
     */
    public function setHasCalculatedBundleMovingAveragePrice(?bool $has_calculated_bundle_moving_average_price): static
    {
        if (is_null($has_calculated_bundle_moving_average_price)) {
            throw new InvalidArgumentException('non-nullable has_calculated_bundle_moving_average_price cannot be null');
        }
        $this->container['has_calculated_bundle_moving_average_price'] = $has_calculated_bundle_moving_average_price;

        return $this;
    }

    /**
     * Gets customs_tariff_number
     *
     * @return string|null
     */
    public function getCustomsTariffNumber(): ?string
    {
        return $this->container['customs_tariff_number'];
    }

    /**
     * Sets customs_tariff_number
     *
     * @param string|null $customs_tariff_number The customs tariff number of the variation; usually a 11 digit code number based on the Harmonised System optional
     *
     * @return $this
     */
    public function setCustomsTariffNumber(?string $customs_tariff_number): static
    {
        if (is_null($customs_tariff_number)) {
            throw new InvalidArgumentException('non-nullable customs_tariff_number cannot be null');
        }
        $this->container['customs_tariff_number'] = $customs_tariff_number;

        return $this;
    }

    /**
     * Gets category_variation_id
     *
     * @return int|null
     */
    public function getCategoryVariationId(): ?int
    {
        return $this->container['category_variation_id'];
    }

    /**
     * Sets category_variation_id
     *
     * @param int|null $category_variation_id Either the ID of the variation or the ID of the item's main variation. No other values are permitted.ID of the variation = Categories are not inherited from the main variation.ID of the item's main variation = Inheritance of categories is active. optional
     *
     * @return $this
     */
    public function setCategoryVariationId(?int $category_variation_id): static
    {
        if (is_null($category_variation_id)) {
            throw new InvalidArgumentException('non-nullable category_variation_id cannot be null');
        }
        $this->container['category_variation_id'] = $category_variation_id;

        return $this;
    }

    /**
     * Gets market_variation_id
     *
     * @return int|null
     */
    public function getMarketVariationId(): ?int
    {
        return $this->container['market_variation_id'];
    }

    /**
     * Sets market_variation_id
     *
     * @param int|null $market_variation_id Either the ID of the variation or the ID of the item's main variation. No other values are permitted.ID of the variation = Markets are not inherited from the main variation.ID of the item's main variation = Inheritance of markets is active. optional
     *
     * @return $this
     */
    public function setMarketVariationId(?int $market_variation_id): static
    {
        if (is_null($market_variation_id)) {
            throw new InvalidArgumentException('non-nullable market_variation_id cannot be null');
        }
        $this->container['market_variation_id'] = $market_variation_id;

        return $this;
    }

    /**
     * Gets client_variation_id
     *
     * @return int|null
     */
    public function getClientVariationId(): ?int
    {
        return $this->container['client_variation_id'];
    }

    /**
     * Sets client_variation_id
     *
     * @param int|null $client_variation_id Either the ID of the variation or the ID of the item's main variation. No other values are permitted.ID of the variation = Clients (stores) are not inherited from the main variation.ID of the item's main variation = Inheritance of clients (stores) is active. optional
     *
     * @return $this
     */
    public function setClientVariationId(?int $client_variation_id): static
    {
        if (is_null($client_variation_id)) {
            throw new InvalidArgumentException('non-nullable client_variation_id cannot be null');
        }
        $this->container['client_variation_id'] = $client_variation_id;

        return $this;
    }

    /**
     * Gets sales_price_variation_id
     *
     * @return int|null
     */
    public function getSalesPriceVariationId(): ?int
    {
        return $this->container['sales_price_variation_id'];
    }

    /**
     * Sets sales_price_variation_id
     *
     * @param int|null $sales_price_variation_id Either the ID of the variation or the ID of the item's main variation. No other values are permitted.ID of the variation = Sales prices are not inherited from the main variation.ID of the item's main variation = Inheritance of sales prices is active. optional
     *
     * @return $this
     */
    public function setSalesPriceVariationId(?int $sales_price_variation_id): static
    {
        if (is_null($sales_price_variation_id)) {
            throw new InvalidArgumentException('non-nullable sales_price_variation_id cannot be null');
        }
        $this->container['sales_price_variation_id'] = $sales_price_variation_id;

        return $this;
    }

    /**
     * Gets supplier_variation_id
     *
     * @return int|null
     */
    public function getSupplierVariationId(): ?int
    {
        return $this->container['supplier_variation_id'];
    }

    /**
     * Sets supplier_variation_id
     *
     * @param int|null $supplier_variation_id Either the ID of the variation or the ID of the item's main variation. No other values are permitted.ID of the variation = Suppliers are not inherited from the main variation.ID of the item's main variation = Inheritance of suppliers is active. optional
     *
     * @return $this
     */
    public function setSupplierVariationId(?int $supplier_variation_id): static
    {
        if (is_null($supplier_variation_id)) {
            throw new InvalidArgumentException('non-nullable supplier_variation_id cannot be null');
        }
        $this->container['supplier_variation_id'] = $supplier_variation_id;

        return $this;
    }

    /**
     * Gets warehouse_variation_id
     *
     * @return int|null
     */
    public function getWarehouseVariationId(): ?int
    {
        return $this->container['warehouse_variation_id'];
    }

    /**
     * Sets warehouse_variation_id
     *
     * @param int|null $warehouse_variation_id Either the ID of the variation or the ID of the item's main variation. No other values are permitted.ID of the variation = Warehouses are not inherited from the main variation.ID of the item's main variation = Inheritance of warehouses is active. optional
     *
     * @return $this
     */
    public function setWarehouseVariationId(?int $warehouse_variation_id): static
    {
        if (is_null($warehouse_variation_id)) {
            throw new InvalidArgumentException('non-nullable warehouse_variation_id cannot be null');
        }
        $this->container['warehouse_variation_id'] = $warehouse_variation_id;

        return $this;
    }

    /**
     * Gets variation_barcodes
     *
     * @return \ck/plenty-client\Model\VariationBarcode[]|null
     */
    public function getVariationBarcodes(): ?array
    {
        return $this->container['variation_barcodes'];
    }

    /**
     * Sets variation_barcodes
     *
     * @param \ck/plenty-client\Model\VariationBarcode[]|null $variation_barcodes variation_barcodes
     *
     * @return $this
     */
    public function setVariationBarcodes(?array $variation_barcodes): static
    {
        if (is_null($variation_barcodes)) {
            throw new InvalidArgumentException('non-nullable variation_barcodes cannot be null');
        }
        $this->container['variation_barcodes'] = $variation_barcodes;

        return $this;
    }

    /**
     * Gets barcode_id
     *
     * @return int
     */
    public function getBarcodeId(): int
    {
        return $this->container['barcode_id'];
    }

    /**
     * Sets barcode_id
     *
     * @param int $barcode_id The unique ID of the barcode linked to the variation. The combination of code and barcode ID must be unique.
     *
     * @return $this
     */
    public function setBarcodeId(int $barcode_id): static
    {
        if (is_null($barcode_id)) {
            throw new InvalidArgumentException('non-nullable barcode_id cannot be null');
        }
        $this->container['barcode_id'] = $barcode_id;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode(): string
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code The code of the variation's barcode. The combination of code and barcode ID must be unique.
     *
     * @return $this
     */
    public function setCode(string $code): static
    {
        if (is_null($code)) {
            throw new InvalidArgumentException('non-nullable code cannot be null');
        }
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets variation_sales_prices
     *
     * @return \ck/plenty-client\Model\VariationSalesPrice[]|null
     */
    public function getVariationSalesPrices(): ?array
    {
        return $this->container['variation_sales_prices'];
    }

    /**
     * Sets variation_sales_prices
     *
     * @param \ck/plenty-client\Model\VariationSalesPrice[]|null $variation_sales_prices variation_sales_prices
     *
     * @return $this
     */
    public function setVariationSalesPrices(?array $variation_sales_prices): static
    {
        if (is_null($variation_sales_prices)) {
            throw new InvalidArgumentException('non-nullable variation_sales_prices cannot be null');
        }
        $this->container['variation_sales_prices'] = $variation_sales_prices;

        return $this;
    }

    /**
     * Gets sales_price_id
     *
     * @return int
     */
    public function getSalesPriceId(): int
    {
        return $this->container['sales_price_id'];
    }

    /**
     * Sets sales_price_id
     *
     * @param int $sales_price_id The unique ID of the sales price
     *
     * @return $this
     */
    public function setSalesPriceId(int $sales_price_id): static
    {
        if (is_null($sales_price_id)) {
            throw new InvalidArgumentException('non-nullable sales_price_id cannot be null');
        }
        $this->container['sales_price_id'] = $sales_price_id;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float
     */
    public function getPrice(): float
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float $price The price of the variation saved for this sales price
     *
     * @return $this
     */
    public function setPrice(float $price): static
    {
        if (is_null($price)) {
            throw new InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets variation_categories
     *
     * @return \ck/plenty-client\Model\VariationCategory[]|null
     */
    public function getVariationCategories(): ?array
    {
        return $this->container['variation_categories'];
    }

    /**
     * Sets variation_categories
     *
     * @param \ck/plenty-client\Model\VariationCategory[]|null $variation_categories variation_categories
     *
     * @return $this
     */
    public function setVariationCategories(?array $variation_categories): static
    {
        if (is_null($variation_categories)) {
            throw new InvalidArgumentException('non-nullable variation_categories cannot be null');
        }
        $this->container['variation_categories'] = $variation_categories;

        return $this;
    }

    /**
     * Gets category_id
     *
     * @return int
     */
    public function getCategoryId(): int
    {
        return $this->container['category_id'];
    }

    /**
     * Sets category_id
     *
     * @param int $category_id The unique ID of the category
     *
     * @return $this
     */
    public function setCategoryId(int $category_id): static
    {
        if (is_null($category_id)) {
            throw new InvalidArgumentException('non-nullable category_id cannot be null');
        }
        $this->container['category_id'] = $category_id;

        return $this;
    }

    /**
     * Gets is_neckermann_primary
     *
     * @return string|null
     */
    public function getIsNeckermannPrimary(): ?string
    {
        return $this->container['is_neckermann_primary'];
    }

    /**
     * Sets is_neckermann_primary
     *
     * @param string|null $is_neckermann_primary Flag that indicates if the category is the primary category for the market Neckermann for this variation. optional
     *
     * @return $this
     */
    public function setIsNeckermannPrimary(?string $is_neckermann_primary): static
    {
        if (is_null($is_neckermann_primary)) {
            throw new InvalidArgumentException('non-nullable is_neckermann_primary cannot be null');
        }
        $this->container['is_neckermann_primary'] = $is_neckermann_primary;

        return $this;
    }

    /**
     * Gets variation_clients
     *
     * @return \ck/plenty-client\Model\VariationClient[]|null
     */
    public function getVariationClients(): ?array
    {
        return $this->container['variation_clients'];
    }

    /**
     * Sets variation_clients
     *
     * @param \ck/plenty-client\Model\VariationClient[]|null $variation_clients variation_clients
     *
     * @return $this
     */
    public function setVariationClients(?array $variation_clients): static
    {
        if (is_null($variation_clients)) {
            throw new InvalidArgumentException('non-nullable variation_clients cannot be null');
        }
        $this->container['variation_clients'] = $variation_clients;

        return $this;
    }

    /**
     * Gets plenty_id
     *
     * @return int
     */
    public function getPlentyId(): int
    {
        return $this->container['plenty_id'];
    }

    /**
     * Sets plenty_id
     *
     * @param int $plenty_id The unique plenty ID of the client (store)
     *
     * @return $this
     */
    public function setPlentyId(int $plenty_id): static
    {
        if (is_null($plenty_id)) {
            throw new InvalidArgumentException('non-nullable plenty_id cannot be null');
        }
        $this->container['plenty_id'] = $plenty_id;

        return $this;
    }

    /**
     * Gets variation_markets
     *
     * @return \ck/plenty-client\Model\VariationMarket[]|null
     */
    public function getVariationMarkets(): ?array
    {
        return $this->container['variation_markets'];
    }

    /**
     * Sets variation_markets
     *
     * @param \ck/plenty-client\Model\VariationMarket[]|null $variation_markets variation_markets
     *
     * @return $this
     */
    public function setVariationMarkets(?array $variation_markets): static
    {
        if (is_null($variation_markets)) {
            throw new InvalidArgumentException('non-nullable variation_markets cannot be null');
        }
        $this->container['variation_markets'] = $variation_markets;

        return $this;
    }

    /**
     * Gets market_id
     *
     * @return float
     */
    public function getMarketId(): float
    {
        return $this->container['market_id'];
    }

    /**
     * Sets market_id
     *
     * @param float $market_id The ID of the market reference.
     *
     * @return $this
     */
    public function setMarketId(float $market_id): static
    {
        if (is_null($market_id)) {
            throw new InvalidArgumentException('non-nullable market_id cannot be null');
        }
        $this->container['market_id'] = $market_id;

        return $this;
    }

    /**
     * Gets variation_default_category
     *
     * @return \ck/plenty-client\Model\VariationDefaultCategory[]|null
     */
    public function getVariationDefaultCategory(): ?array
    {
        return $this->container['variation_default_category'];
    }

    /**
     * Sets variation_default_category
     *
     * @param \ck/plenty-client\Model\VariationDefaultCategory[]|null $variation_default_category variation_default_category
     *
     * @return $this
     */
    public function setVariationDefaultCategory(?array $variation_default_category): static
    {
        if (is_null($variation_default_category)) {
            throw new InvalidArgumentException('non-nullable variation_default_category cannot be null');
        }
        $this->container['variation_default_category'] = $variation_default_category;

        return $this;
    }

    /**
     * Gets branch_id
     *
     * @return int
     */
    public function getBranchId(): int
    {
        return $this->container['branch_id'];
    }

    /**
     * Sets branch_id
     *
     * @param int $branch_id The unique ID of the category branch
     *
     * @return $this
     */
    public function setBranchId(int $branch_id): static
    {
        if (is_null($branch_id)) {
            throw new InvalidArgumentException('non-nullable branch_id cannot be null');
        }
        $this->container['branch_id'] = $branch_id;

        return $this;
    }

    /**
     * Gets variation_suppliers
     *
     * @return \ck/plenty-client\Model\VariationSupplier[]|null
     */
    public function getVariationSuppliers(): ?array
    {
        return $this->container['variation_suppliers'];
    }

    /**
     * Sets variation_suppliers
     *
     * @param \ck/plenty-client\Model\VariationSupplier[]|null $variation_suppliers variation_suppliers
     *
     * @return $this
     */
    public function setVariationSuppliers(?array $variation_suppliers): static
    {
        if (is_null($variation_suppliers)) {
            throw new InvalidArgumentException('non-nullable variation_suppliers cannot be null');
        }
        $this->container['variation_suppliers'] = $variation_suppliers;

        return $this;
    }

    /**
     * Gets supplier_id
     *
     * @return int|null
     */
    public function getSupplierId(): ?int
    {
        return $this->container['supplier_id'];
    }

    /**
     * Sets supplier_id
     *
     * @param int|null $supplier_id The unique ID of the supplier optional
     *
     * @return $this
     */
    public function setSupplierId(?int $supplier_id): static
    {
        if (is_null($supplier_id)) {
            throw new InvalidArgumentException('non-nullable supplier_id cannot be null');
        }
        $this->container['supplier_id'] = $supplier_id;

        return $this;
    }

    /**
     * Gets item_number
     *
     * @return string|null
     */
    public function getItemNumber(): ?string
    {
        return $this->container['item_number'];
    }

    /**
     * Sets item_number
     *
     * @param string|null $item_number The external item number assigned to the variation by this supplier optional
     *
     * @return $this
     */
    public function setItemNumber(?string $item_number): static
    {
        if (is_null($item_number)) {
            throw new InvalidArgumentException('non-nullable item_number cannot be null');
        }
        $this->container['item_number'] = $item_number;

        return $this;
    }

    /**
     * Gets last_price_query
     *
     * @return string|null
     */
    public function getLastPriceQuery(): ?string
    {
        return $this->container['last_price_query'];
    }

    /**
     * Sets last_price_query
     *
     * @param string|null $last_price_query The date of the last price query to this supplier. This helps to plan price negotiations. optional
     *
     * @return $this
     */
    public function setLastPriceQuery(?string $last_price_query): static
    {
        if (is_null($last_price_query)) {
            throw new InvalidArgumentException('non-nullable last_price_query cannot be null');
        }
        $this->container['last_price_query'] = $last_price_query;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return float|null
     */
    public function getDiscount(): ?float
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param float|null $discount The discount in percent the supplier grants for the variation. optional
     *
     * @return $this
     */
    public function setDiscount(?float $discount): static
    {
        if (is_null($discount)) {
            throw new InvalidArgumentException('non-nullable discount cannot be null');
        }
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets is_discountable
     *
     * @return string|null
     */
    public function getIsDiscountable(): ?string
    {
        return $this->container['is_discountable'];
    }

    /**
     * Sets is_discountable
     *
     * @param string|null $is_discountable Flag that indicates if the supplier's discount for this variation is active. optional
     *
     * @return $this
     */
    public function setIsDiscountable(?string $is_discountable): static
    {
        if (is_null($is_discountable)) {
            throw new InvalidArgumentException('non-nullable is_discountable cannot be null');
        }
        $this->container['is_discountable'] = $is_discountable;

        return $this;
    }

    /**
     * Gets packaging_unit
     *
     * @return float|null
     */
    public function getPackagingUnit(): ?float
    {
        return $this->container['packaging_unit'];
    }

    /**
     * Sets packaging_unit
     *
     * @param float|null $packaging_unit The packaging unit of the supplier if it differs from the packaging unit settings in plentymarkets. optional
     *
     * @return $this
     */
    public function setPackagingUnit(?float $packaging_unit): static
    {
        if (is_null($packaging_unit)) {
            throw new InvalidArgumentException('non-nullable packaging_unit cannot be null');
        }
        $this->container['packaging_unit'] = $packaging_unit;

        return $this;
    }

    /**
     * Gets variation_warehouses
     *
     * @return \ck/plenty-client\Model\VariationWarehouse[]|null
     */
    public function getVariationWarehouses(): ?array
    {
        return $this->container['variation_warehouses'];
    }

    /**
     * Sets variation_warehouses
     *
     * @param \ck/plenty-client\Model\VariationWarehouse[]|null $variation_warehouses variation_warehouses
     *
     * @return $this
     */
    public function setVariationWarehouses(?array $variation_warehouses): static
    {
        if (is_null($variation_warehouses)) {
            throw new InvalidArgumentException('non-nullable variation_warehouses cannot be null');
        }
        $this->container['variation_warehouses'] = $variation_warehouses;

        return $this;
    }

    /**
     * Gets warehouse_id
     *
     * @return int
     */
    public function getWarehouseId(): int
    {
        return $this->container['warehouse_id'];
    }

    /**
     * Sets warehouse_id
     *
     * @param int $warehouse_id The unique ID of the warehouse
     *
     * @return $this
     */
    public function setWarehouseId(int $warehouse_id): static
    {
        if (is_null($warehouse_id)) {
            throw new InvalidArgumentException('non-nullable warehouse_id cannot be null');
        }
        $this->container['warehouse_id'] = $warehouse_id;

        return $this;
    }

    /**
     * Gets warehouse_zone_id
     *
     * @return int|null
     */
    public function getWarehouseZoneId(): ?int
    {
        return $this->container['warehouse_zone_id'];
    }

    /**
     * Sets warehouse_zone_id
     *
     * @param int|null $warehouse_zone_id The unique ID of the warehouse zone optional
     *
     * @return $this
     */
    public function setWarehouseZoneId(?int $warehouse_zone_id): static
    {
        if (is_null($warehouse_zone_id)) {
            throw new InvalidArgumentException('non-nullable warehouse_zone_id cannot be null');
        }
        $this->container['warehouse_zone_id'] = $warehouse_zone_id;

        return $this;
    }

    /**
     * Gets storage_location_type
     *
     * @return string|null
     */
    public function getStorageLocationType(): ?string
    {
        return $this->container['storage_location_type'];
    }

    /**
     * Sets storage_location_type
     *
     * @param string|null $storage_location_type The storage location type of the warehouse optional allowed values are none, small, medium, large, europallet
     *
     * @return $this
     */
    public function setStorageLocationType(?string $storage_location_type): static
    {
        if (is_null($storage_location_type)) {
            throw new InvalidArgumentException('non-nullable storage_location_type cannot be null');
        }
        $this->container['storage_location_type'] = $storage_location_type;

        return $this;
    }

    /**
     * Gets reorder_level
     *
     * @return int|null
     */
    public function getReorderLevel(): ?int
    {
        return $this->container['reorder_level'];
    }

    /**
     * Sets reorder_level
     *
     * @param int|null $reorder_level The reorder level for the variation in this warehouse optional
     *
     * @return $this
     */
    public function setReorderLevel(?int $reorder_level): static
    {
        if (is_null($reorder_level)) {
            throw new InvalidArgumentException('non-nullable reorder_level cannot be null');
        }
        $this->container['reorder_level'] = $reorder_level;

        return $this;
    }

    /**
     * Gets maximum_stock
     *
     * @return int|null
     */
    public function getMaximumStock(): ?int
    {
        return $this->container['maximum_stock'];
    }

    /**
     * Sets maximum_stock
     *
     * @param int|null $maximum_stock The maximum stock for the variation in this warehouse optional
     *
     * @return $this
     */
    public function setMaximumStock(?int $maximum_stock): static
    {
        if (is_null($maximum_stock)) {
            throw new InvalidArgumentException('non-nullable maximum_stock cannot be null');
        }
        $this->container['maximum_stock'] = $maximum_stock;

        return $this;
    }

    /**
     * Gets stock_turnover_in_days
     *
     * @return int|null
     */
    public function getStockTurnoverInDays(): ?int
    {
        return $this->container['stock_turnover_in_days'];
    }

    /**
     * Sets stock_turnover_in_days
     *
     * @param int|null $stock_turnover_in_days The stock turnover in days for the variation in this warehouse optional
     *
     * @return $this
     */
    public function setStockTurnoverInDays(?int $stock_turnover_in_days): static
    {
        if (is_null($stock_turnover_in_days)) {
            throw new InvalidArgumentException('non-nullable stock_turnover_in_days cannot be null');
        }
        $this->container['stock_turnover_in_days'] = $stock_turnover_in_days;

        return $this;
    }

    /**
     * Gets storage_location
     *
     * @return int|null
     */
    public function getStorageLocation(): ?int
    {
        return $this->container['storage_location'];
    }

    /**
     * Sets storage_location
     *
     * @param int|null $storage_location The storage location of the variation in this warehouse optional
     *
     * @return $this
     */
    public function setStorageLocation(?int $storage_location): static
    {
        if (is_null($storage_location)) {
            throw new InvalidArgumentException('non-nullable storage_location cannot be null');
        }
        $this->container['storage_location'] = $storage_location;

        return $this;
    }

    /**
     * Gets stock_buffer
     *
     * @return int|null
     */
    public function getStockBuffer(): ?int
    {
        return $this->container['stock_buffer'];
    }

    /**
     * Sets stock_buffer
     *
     * @param int|null $stock_buffer The stock buffer for the variation in this warehouse optional
     *
     * @return $this
     */
    public function setStockBuffer(?int $stock_buffer): static
    {
        if (is_null($stock_buffer)) {
            throw new InvalidArgumentException('non-nullable stock_buffer cannot be null');
        }
        $this->container['stock_buffer'] = $stock_buffer;

        return $this;
    }

    /**
     * Gets variation_attribute_values
     *
     * @return \ck/plenty-client\Model\AttributeValueSet[]|null
     */
    public function getVariationAttributeValues(): ?array
    {
        return $this->container['variation_attribute_values'];
    }

    /**
     * Sets variation_attribute_values
     *
     * @param \ck/plenty-client\Model\AttributeValueSet[]|null $variation_attribute_values variation_attribute_values
     *
     * @return $this
     */
    public function setVariationAttributeValues(?array $variation_attribute_values): static
    {
        if (is_null($variation_attribute_values)) {
            throw new InvalidArgumentException('non-nullable variation_attribute_values cannot be null');
        }
        $this->container['variation_attribute_values'] = $variation_attribute_values;

        return $this;
    }

    /**
     * Gets value_id
     *
     * @return int
     */
    public function getValueId(): int
    {
        return $this->container['value_id'];
    }

    /**
     * Sets value_id
     *
     * @param int $value_id The ID of the attribute value
     *
     * @return $this
     */
    public function setValueId(int $value_id): static
    {
        if (is_null($value_id)) {
            throw new InvalidArgumentException('non-nullable value_id cannot be null');
        }
        $this->container['value_id'] = $value_id;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return \ck/plenty-client\Model\UnitCombination[]
     */
    public function getUnit(): array
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param \ck/plenty-client\Model\UnitCombination[] $unit unit
     *
     * @return $this
     */
    public function setUnit(array $unit): static
    {
        if (is_null($unit)) {
            throw new InvalidArgumentException('non-nullable unit cannot be null');
        }
        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets parent_variation_id
     *
     * @return int|null
     */
    public function getParentVariationId(): ?int
    {
        return $this->container['parent_variation_id'];
    }

    /**
     * Sets parent_variation_id
     *
     * @param int|null $parent_variation_id optional
     *
     * @return $this
     */
    public function setParentVariationId(?int $parent_variation_id): static
    {
        if (is_null($parent_variation_id)) {
            throw new InvalidArgumentException('non-nullable parent_variation_id cannot be null');
        }
        $this->container['parent_variation_id'] = $parent_variation_id;

        return $this;
    }

    /**
     * Gets parent_variation_quantity
     *
     * @return float|null
     */
    public function getParentVariationQuantity(): ?float
    {
        return $this->container['parent_variation_quantity'];
    }

    /**
     * Sets parent_variation_quantity
     *
     * @param float|null $parent_variation_quantity optional
     *
     * @return $this
     */
    public function setParentVariationQuantity(?float $parent_variation_quantity): static
    {
        if (is_null($parent_variation_quantity)) {
            throw new InvalidArgumentException('non-nullable parent_variation_quantity cannot be null');
        }
        $this->container['parent_variation_quantity'] = $parent_variation_quantity;

        return $this;
    }

    /**
     * Gets item
     *
     * @return object[]|null
     */
    public function getItem(): ?array
    {
        return $this->container['item'];
    }

    /**
     * Sets item
     *
     * @param object[]|null $item item
     *
     * @return $this
     */
    public function setItem(?array $item): static
    {
        if (is_null($item)) {
            throw new InvalidArgumentException('non-nullable item cannot be null');
        }
        $this->container['item'] = $item;

        return $this;
    }

    /**
     * Gets item_cross_selling
     *
     * @return \ck/plenty-client\Model\ItemCrossSelling[]|null
     */
    public function getItemCrossSelling(): ?array
    {
        return $this->container['item_cross_selling'];
    }

    /**
     * Sets item_cross_selling
     *
     * @param \ck/plenty-client\Model\ItemCrossSelling[]|null $item_cross_selling item_cross_selling
     *
     * @return $this
     */
    public function setItemCrossSelling(?array $item_cross_selling): static
    {
        if (is_null($item_cross_selling)) {
            throw new InvalidArgumentException('non-nullable item_cross_selling cannot be null');
        }
        $this->container['item_cross_selling'] = $item_cross_selling;

        return $this;
    }

    /**
     * Gets cross_item_id
     *
     * @return int
     */
    public function getCrossItemId(): int
    {
        return $this->container['cross_item_id'];
    }

    /**
     * Sets cross_item_id
     *
     * @param int $cross_item_id The unique ID of the cross-selling item that is linked to the item
     *
     * @return $this
     */
    public function setCrossItemId(int $cross_item_id): static
    {
        if (is_null($cross_item_id)) {
            throw new InvalidArgumentException('non-nullable cross_item_id cannot be null');
        }
        $this->container['cross_item_id'] = $cross_item_id;

        return $this;
    }

    /**
     * Gets relationship
     *
     * @return string
     */
    public function getRelationship(): string
    {
        return $this->container['relationship'];
    }

    /**
     * Sets relationship
     *
     * @param string $relationship The cross-selling relationship between item and cross-selling item. Possible values:Accessory = The cross-selling item is an accessory of the item.ReplacementPart = The cross-selling item is a replacement part for the item.Similar = The cross-selling item is similar to the item.Bundle = The cross-selling item is suitable to be sold as a bundle with the item.  allowed values are Variation, DisplaySet, Collection, Accessory, Customized, Part, Complements, Piece, Necessary, ReplacementPart, Similar, Episode, Season, Bundle, Component
     *
     * @return $this
     */
    public function setRelationship(string $relationship): static
    {
        if (is_null($relationship)) {
            throw new InvalidArgumentException('non-nullable relationship cannot be null');
        }
        $this->container['relationship'] = $relationship;

        return $this;
    }

    /**
     * Gets is_dynamic
     *
     * @return bool|null
     */
    public function getIsDynamic(): ?bool
    {
        return $this->container['is_dynamic'];
    }

    /**
     * Sets is_dynamic
     *
     * @param bool|null $is_dynamic Flag that indicates if the cross-selling link was generated automatically. optional
     *
     * @return $this
     */
    public function setIsDynamic(?bool $is_dynamic): static
    {
        if (is_null($is_dynamic)) {
            throw new InvalidArgumentException('non-nullable is_dynamic cannot be null');
        }
        $this->container['is_dynamic'] = $is_dynamic;

        return $this;
    }

    /**
     * Gets item_shipping_profiles
     *
     * @return \ck/plenty-client\Model\ItemShippingProfiles[]|null
     */
    public function getItemShippingProfiles(): ?array
    {
        return $this->container['item_shipping_profiles'];
    }

    /**
     * Sets item_shipping_profiles
     *
     * @param \ck/plenty-client\Model\ItemShippingProfiles[]|null $item_shipping_profiles item_shipping_profiles
     *
     * @return $this
     */
    public function setItemShippingProfiles(?array $item_shipping_profiles): static
    {
        if (is_null($item_shipping_profiles)) {
            throw new InvalidArgumentException('non-nullable item_shipping_profiles cannot be null');
        }
        $this->container['item_shipping_profiles'] = $item_shipping_profiles;

        return $this;
    }

    /**
     * Gets profile_id
     *
     * @return int
     */
    public function getProfileId(): int
    {
        return $this->container['profile_id'];
    }

    /**
     * Sets profile_id
     *
     * @param int $profile_id The unique ID of the shipping profile
     *
     * @return $this
     */
    public function setProfileId(int $profile_id): static
    {
        if (is_null($profile_id)) {
            throw new InvalidArgumentException('non-nullable profile_id cannot be null');
        }
        $this->container['profile_id'] = $profile_id;

        return $this;
    }

    /**
     * Gets variation_texts
     *
     * @return \ck/plenty-client\Model\VariationDescription[]|null
     */
    public function getVariationTexts(): ?array
    {
        return $this->container['variation_texts'];
    }

    /**
     * Sets variation_texts
     *
     * @param \ck/plenty-client\Model\VariationDescription[]|null $variation_texts variation_texts
     *
     * @return $this
     */
    public function setVariationTexts(?array $variation_texts): static
    {
        if (is_null($variation_texts)) {
            throw new InvalidArgumentException('non-nullable variation_texts cannot be null');
        }
        $this->container['variation_texts'] = $variation_texts;

        return $this;
    }

    /**
     * Gets lang
     *
     * @return string
     */
    public function getLang(): string
    {
        return $this->container['lang'];
    }

    /**
     * Sets lang
     *
     * @param string $lang The language code of the description
     *
     * @return $this
     */
    public function setLang(string $lang): static
    {
        if (is_null($lang)) {
            throw new InvalidArgumentException('non-nullable lang cannot be null');
        }
        $this->container['lang'] = $lang;

        return $this;
    }

    /**
     * Gets name2
     *
     * @return string|null
     */
    public function getName2(): ?string
    {
        return $this->container['name2'];
    }

    /**
     * Sets name2
     *
     * @param string|null $name2 Alternative item name that can be used e.g. for markets. Character limit: max. 240 characters. optional
     *
     * @return $this
     */
    public function setName2(?string $name2): static
    {
        if (is_null($name2)) {
            throw new InvalidArgumentException('non-nullable name2 cannot be null');
        }
        $this->container['name2'] = $name2;

        return $this;
    }

    /**
     * Gets name3
     *
     * @return string|null
     */
    public function getName3(): ?string
    {
        return $this->container['name3'];
    }

    /**
     * Sets name3
     *
     * @param string|null $name3 Alternative item name that can be used e.g. for markets. Character limit: max. 240 characters. optional
     *
     * @return $this
     */
    public function setName3(?string $name3): static
    {
        if (is_null($name3)) {
            throw new InvalidArgumentException('non-nullable name3 cannot be null');
        }
        $this->container['name3'] = $name3;

        return $this;
    }

    /**
     * Gets preview_description
     *
     * @return string|null
     */
    public function getPreviewDescription(): ?string
    {
        return $this->container['preview_description'];
    }

    /**
     * Sets preview_description
     *
     * @param string|null $preview_description The preview text. The preview text is a short description that can be displayed in item lists. optional
     *
     * @return $this
     */
    public function setPreviewDescription(?string $preview_description): static
    {
        if (is_null($preview_description)) {
            throw new InvalidArgumentException('non-nullable preview_description cannot be null');
        }
        $this->container['preview_description'] = $preview_description;

        return $this;
    }

    /**
     * Gets meta_description
     *
     * @return string|null
     */
    public function getMetaDescription(): ?string
    {
        return $this->container['meta_description'];
    }

    /**
     * Sets meta_description
     *
     * @param string|null $meta_description The meta description of the item. This description is analysed by search engines and displayed in search results. This text should be treated as an advertising text to maximise click-through from search engine result pages. Current recommended limit is 156 characters. optional
     *
     * @return $this
     */
    public function setMetaDescription(?string $meta_description): static
    {
        if (is_null($meta_description)) {
            throw new InvalidArgumentException('non-nullable meta_description cannot be null');
        }
        $this->container['meta_description'] = $meta_description;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription(): ?string
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The item description. This is a detailed description displayed in the item layout of the online store. optional
     *
     * @return $this
     */
    public function setDescription(?string $description): static
    {
        if (is_null($description)) {
            throw new InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets technical_data
     *
     * @return string|null
     */
    public function getTechnicalData(): ?string
    {
        return $this->container['technical_data'];
    }

    /**
     * Sets technical_data
     *
     * @param string|null $technical_data The technical data for the item. To display the technical data in the online store, insert the template variable TechnicalData and an optional title into the template ItemViewSingleItem. optional
     *
     * @return $this
     */
    public function setTechnicalData(?string $technical_data): static
    {
        if (is_null($technical_data)) {
            throw new InvalidArgumentException('non-nullable technical_data cannot be null');
        }
        $this->container['technical_data'] = $technical_data;

        return $this;
    }

    /**
     * Gets url_path
     *
     * @return string|null
     */
    public function getUrlPath(): ?string
    {
        return $this->container['url_path'];
    }

    /**
     * Sets url_path
     *
     * @param string|null $url_path The URL path of the item in the online store. By default, the URL path consists of the categories and the item name. The path will be assigned automatically by plentymarkets when the item is created and will be displayed as part of the URL when the item is selected in the online store. optional
     *
     * @return $this
     */
    public function setUrlPath(?string $url_path): static
    {
        if (is_null($url_path)) {
            throw new InvalidArgumentException('non-nullable url_path cannot be null');
        }
        $this->container['url_path'] = $url_path;

        return $this;
    }

    /**
     * Gets meta_keywords
     *
     * @return string|null
     */
    public function getMetaKeywords(): ?string
    {
        return $this->container['meta_keywords'];
    }

    /**
     * Sets meta_keywords
     *
     * @param string|null $meta_keywords Meta keywords to tag the item for search engines. More than one keyword can be separated by commas. optional
     *
     * @return $this
     */
    public function setMetaKeywords(?string $meta_keywords): static
    {
        if (is_null($meta_keywords)) {
            throw new InvalidArgumentException('non-nullable meta_keywords cannot be null');
        }
        $this->container['meta_keywords'] = $meta_keywords;

        return $this;
    }

    /**
     * Gets images
     *
     * @return object[]|null
     */
    public function getImages(): ?array
    {
        return $this->container['images'];
    }

    /**
     * Sets images
     *
     * @param object[]|null $images images
     *
     * @return $this
     */
    public function setImages(?array $images): static
    {
        if (is_null($images)) {
            throw new InvalidArgumentException('non-nullable images cannot be null');
        }
        $this->container['images'] = $images;

        return $this;
    }

    /**
     * Gets item_images
     *
     * @return object[]|null
     */
    public function getItemImages(): ?array
    {
        return $this->container['item_images'];
    }

    /**
     * Sets item_images
     *
     * @param object[]|null $item_images item_images
     *
     * @return $this
     */
    public function setItemImages(?array $item_images): static
    {
        if (is_null($item_images)) {
            throw new InvalidArgumentException('non-nullable item_images cannot be null');
        }
        $this->container['item_images'] = $item_images;

        return $this;
    }

    /**
     * Gets variation_bundle_components
     *
     * @return \ck/plenty-client\Model\VariationBundle[]|null
     */
    public function getVariationBundleComponents(): ?array
    {
        return $this->container['variation_bundle_components'];
    }

    /**
     * Sets variation_bundle_components
     *
     * @param \ck/plenty-client\Model\VariationBundle[]|null $variation_bundle_components variation_bundle_components
     *
     * @return $this
     */
    public function setVariationBundleComponents(?array $variation_bundle_components): static
    {
        if (is_null($variation_bundle_components)) {
            throw new InvalidArgumentException('non-nullable variation_bundle_components cannot be null');
        }
        $this->container['variation_bundle_components'] = $variation_bundle_components;

        return $this;
    }

    /**
     * Gets component_variation_id
     *
     * @return int
     */
    public function getComponentVariationId(): int
    {
        return $this->container['component_variation_id'];
    }

    /**
     * Sets component_variation_id
     *
     * @param int $component_variation_id The unique ID of the variation added as bundle component  with componentQuantity
     *
     * @return $this
     */
    public function setComponentVariationId(int $component_variation_id): static
    {
        if (is_null($component_variation_id)) {
            throw new InvalidArgumentException('non-nullable component_variation_id cannot be null');
        }
        $this->container['component_variation_id'] = $component_variation_id;

        return $this;
    }

    /**
     * Gets component_quantity
     *
     * @return int
     */
    public function getComponentQuantity(): int
    {
        return $this->container['component_quantity'];
    }

    /**
     * Sets component_quantity
     *
     * @param int $component_quantity The quantity of the variation to be added as bundle component  with componentVariationId
     *
     * @return $this
     */
    public function setComponentQuantity(int $component_quantity): static
    {
        if (is_null($component_quantity)) {
            throw new InvalidArgumentException('non-nullable component_quantity cannot be null');
        }
        $this->container['component_quantity'] = $component_quantity;

        return $this;
    }

    /**
     * Gets market_item_numbers
     *
     * @return \ck/plenty-client\Model\VariationMarketIdentNumber[]|null
     */
    public function getMarketItemNumbers(): ?array
    {
        return $this->container['market_item_numbers'];
    }

    /**
     * Sets market_item_numbers
     *
     * @param \ck/plenty-client\Model\VariationMarketIdentNumber[]|null $market_item_numbers market_item_numbers
     *
     * @return $this
     */
    public function setMarketItemNumbers(?array $market_item_numbers): static
    {
        if (is_null($market_item_numbers)) {
            throw new InvalidArgumentException('non-nullable market_item_numbers cannot be null');
        }
        $this->container['market_item_numbers'] = $market_item_numbers;

        return $this;
    }

    /**
     * Gets country_id
     *
     * @return int|null
     */
    public function getCountryId(): ?int
    {
        return $this->container['country_id'];
    }

    /**
     * Sets country_id
     *
     * @param int|null $country_id The country code of the market ident number (ASIN/ePID)
     *
     * @return $this
     */
    public function setCountryId(?int $country_id): static
    {
        if (is_null($country_id)) {
            throw new InvalidArgumentException('non-nullable country_id cannot be null');
        }
        $this->container['country_id'] = $country_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType(): ?string
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type The type of market ident number (ASIN/ePID) allowed values are ASIN, EPID, UPC, RSIN
     *
     * @return $this
     */
    public function setType(?string $type): static
    {
        if (is_null($type)) {
            throw new InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets value
     *
     * @return string|null
     */
    public function getValue(): ?string
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param string|null $value The value of the market ident number (ASIN/ePID)
     *
     * @return $this
     */
    public function setValue(?string $value): static
    {
        if (is_null($value)) {
            throw new InvalidArgumentException('non-nullable value cannot be null');
        }
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets variation_skus
     *
     * @return \ck/plenty-client\Model\VariationSku[]|null
     */
    public function getVariationSkus(): ?array
    {
        return $this->container['variation_skus'];
    }

    /**
     * Sets variation_skus
     *
     * @param \ck/plenty-client\Model\VariationSku[]|null $variation_skus variation_skus
     *
     * @return $this
     */
    public function setVariationSkus(?array $variation_skus): static
    {
        if (is_null($variation_skus)) {
            throw new InvalidArgumentException('non-nullable variation_skus cannot be null');
        }
        $this->container['variation_skus'] = $variation_skus;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return int|null
     */
    public function getAccountId(): ?int
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int|null $account_id The ID of the market account
     *
     * @return $this
     */
    public function setAccountId(?int $account_id): static
    {
        if (is_null($account_id)) {
            throw new InvalidArgumentException('non-nullable account_id cannot be null');
        }
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string
     */
    public function getSku(): string
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string $sku The additional sku for this variation.
     *
     * @return $this
     */
    public function setSku(string $sku): static
    {
        if (is_null($sku)) {
            throw new InvalidArgumentException('non-nullable sku cannot be null');
        }
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets initial_sku
     *
     * @return string|null
     */
    public function getInitialSku(): ?string
    {
        return $this->container['initial_sku'];
    }

    /**
     * Sets initial_sku
     *
     * @param string|null $initial_sku The initial SKU of the variation. The initial SKU cannot be modified even if the variation SKU is changed. However, it is possible to reset the variation SKU to the initial SKU. optional
     *
     * @return $this
     */
    public function setInitialSku(?string $initial_sku): static
    {
        if (is_null($initial_sku)) {
            throw new InvalidArgumentException('non-nullable initial_sku cannot be null');
        }
        $this->container['initial_sku'] = $initial_sku;

        return $this;
    }

    /**
     * Gets parent_sku
     *
     * @return string|null
     */
    public function getParentSku(): ?string
    {
        return $this->container['parent_sku'];
    }

    /**
     * Sets parent_sku
     *
     * @param string|null $parent_sku The Parent SKU of the variation. The Parent SKU is adjustable. The same Parent SKU value should be used on variations of same article. optional
     *
     * @return $this
     */
    public function setParentSku(?string $parent_sku): static
    {
        if (is_null($parent_sku)) {
            throw new InvalidArgumentException('non-nullable parent_sku cannot be null');
        }
        $this->container['parent_sku'] = $parent_sku;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus(): ?string
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status The status of the variation after the export. Possible entries are INACTIVE, ERROR, SENT and ACTIVE. optional allowed values are ACTIVE, INACTIVE, ERROR, SENT
     *
     * @return $this
     */
    public function setStatus(?string $status): static
    {
        if (is_null($status)) {
            throw new InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets additional_information
     *
     * @return string|null
     */
    public function getAdditionalInformation(): ?string
    {
        return $this->container['additional_information'];
    }

    /**
     * Sets additional_information
     *
     * @param string|null $additional_information The field that contains additional information. optional
     *
     * @return $this
     */
    public function setAdditionalInformation(?string $additional_information): static
    {
        if (is_null($additional_information)) {
            throw new InvalidArgumentException('non-nullable additional_information cannot be null');
        }
        $this->container['additional_information'] = $additional_information;

        return $this;
    }

    /**
     * Gets variation_additional_skus
     *
     * @return \ck/plenty-client\Model\VariationAdditionalSku[]|null
     */
    public function getVariationAdditionalSkus(): ?array
    {
        return $this->container['variation_additional_skus'];
    }

    /**
     * Sets variation_additional_skus
     *
     * @param \ck/plenty-client\Model\VariationAdditionalSku[]|null $variation_additional_skus variation_additional_skus
     *
     * @return $this
     */
    public function setVariationAdditionalSkus(?array $variation_additional_skus): static
    {
        if (is_null($variation_additional_skus)) {
            throw new InvalidArgumentException('non-nullable variation_additional_skus cannot be null');
        }
        $this->container['variation_additional_skus'] = $variation_additional_skus;

        return $this;
    }

    /**
     * Gets market_account_id
     *
     * @return int|null
     */
    public function getMarketAccountId(): ?int
    {
        return $this->container['market_account_id'];
    }

    /**
     * Sets market_account_id
     *
     * @param int|null $market_account_id The ID of the market account.
     *
     * @return $this
     */
    public function setMarketAccountId(?int $market_account_id): static
    {
        if (is_null($market_account_id)) {
            throw new InvalidArgumentException('non-nullable market_account_id cannot be null');
        }
        $this->container['market_account_id'] = $market_account_id;

        return $this;
    }

    /**
     * Gets properties
     *
     * @return \ck/plenty-client\Model\PropertyRelation[]|null
     */
    public function getProperties(): ?array
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     *
     * @param \ck/plenty-client\Model\PropertyRelation[]|null $properties properties
     *
     * @return $this
     */
    public function setProperties(?array $properties): static
    {
        if (is_null($properties)) {
            throw new InvalidArgumentException('non-nullable properties cannot be null');
        }
        $this->container['properties'] = $properties;

        return $this;
    }

    /**
     * Gets property_id
     *
     * @return int
     */
    public function getPropertyId(): int
    {
        return $this->container['property_id'];
    }

    /**
     * Sets property_id
     *
     * @param int $property_id The unique ID of the property
     *
     * @return $this
     */
    public function setPropertyId(int $property_id): static
    {
        if (is_null($property_id)) {
            throw new InvalidArgumentException('non-nullable property_id cannot be null');
        }
        $this->container['property_id'] = $property_id;

        return $this;
    }

    /**
     * Gets selection_relation_id
     *
     * @return int|null
     */
    public function getSelectionRelationId(): ?int
    {
        return $this->container['selection_relation_id'];
    }

    /**
     * Sets selection_relation_id
     *
     * @param int|null $selection_relation_id The ID of the selection relation optional
     *
     * @return $this
     */
    public function setSelectionRelationId(?int $selection_relation_id): static
    {
        if (is_null($selection_relation_id)) {
            throw new InvalidArgumentException('non-nullable selection_relation_id cannot be null');
        }
        $this->container['selection_relation_id'] = $selection_relation_id;

        return $this;
    }

    /**
     * Gets variation_properties
     *
     * @return \ck/plenty-client\Model\VariationPropertyValue[]|null
     */
    public function getVariationProperties(): ?array
    {
        return $this->container['variation_properties'];
    }

    /**
     * Sets variation_properties
     *
     * @param \ck/plenty-client\Model\VariationPropertyValue[]|null $variation_properties variation_properties
     *
     * @return $this
     */
    public function setVariationProperties(?array $variation_properties): static
    {
        if (is_null($variation_properties)) {
            throw new InvalidArgumentException('non-nullable variation_properties cannot be null');
        }
        $this->container['variation_properties'] = $variation_properties;

        return $this;
    }

    /**
     * Gets property_selection_id
     *
     * @return int|null
     */
    public function getPropertySelectionId(): ?int
    {
        return $this->container['property_selection_id'];
    }

    /**
     * Sets property_selection_id
     *
     * @param int|null $property_selection_id The unique ID of the property selection of the variation optional
     *
     * @return $this
     */
    public function setPropertySelectionId(?int $property_selection_id): static
    {
        if (is_null($property_selection_id)) {
            throw new InvalidArgumentException('non-nullable property_selection_id cannot be null');
        }
        $this->container['property_selection_id'] = $property_selection_id;

        return $this;
    }

    /**
     * Gets value_int
     *
     * @return int|null
     */
    public function getValueInt(): ?int
    {
        return $this->container['value_int'];
    }

    /**
     * Sets value_int
     *
     * @param int|null $value_int The int value of the property value of the variation optional
     *
     * @return $this
     */
    public function setValueInt(?int $value_int): static
    {
        if (is_null($value_int)) {
            throw new InvalidArgumentException('non-nullable value_int cannot be null');
        }
        $this->container['value_int'] = $value_int;

        return $this;
    }

    /**
     * Gets value_float
     *
     * @return float|null
     */
    public function getValueFloat(): ?float
    {
        return $this->container['value_float'];
    }

    /**
     * Sets value_float
     *
     * @param float|null $value_float The float value of the property value of the variation optional
     *
     * @return $this
     */
    public function setValueFloat(?float $value_float): static
    {
        if (is_null($value_float)) {
            throw new InvalidArgumentException('non-nullable value_float cannot be null');
        }
        $this->container['value_float'] = $value_float;

        return $this;
    }

    /**
     * Gets value_file
     *
     * @return string|null
     */
    public function getValueFile(): ?string
    {
        return $this->container['value_file'];
    }

    /**
     * Sets value_file
     *
     * @param string|null $value_file The file value of the property value of the variation optional
     *
     * @return $this
     */
    public function setValueFile(?string $value_file): static
    {
        if (is_null($value_file)) {
            throw new InvalidArgumentException('non-nullable value_file cannot be null');
        }
        $this->container['value_file'] = $value_file;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \ck/plenty-client\Model\Tag[]|null
     */
    public function getTags(): ?array
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \ck/plenty-client\Model\Tag[]|null $tags tags
     *
     * @return $this
     */
    public function setTags(?array $tags): static
    {
        if (is_null($tags)) {
            throw new InvalidArgumentException('non-nullable tags cannot be null');
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return \ck/plenty-client\Model\Comment[]|null
     */
    public function getComments(): ?array
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param \ck/plenty-client\Model\Comment[]|null $comments comments
     *
     * @return $this
     */
    public function setComments(?array $comments): static
    {
        if (is_null($comments)) {
            throw new InvalidArgumentException('non-nullable comments cannot be null');
        }
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int|null
     */
    public function getUserId(): ?int
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int|null $user_id The ID of the user optional
     *
     * @return $this
     */
    public function setUserId(?int $user_id): static
    {
        if (is_null($user_id)) {
            throw new InvalidArgumentException('non-nullable user_id cannot be null');
        }
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string
     */
    public function getText(): string
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string $text The comment text
     *
     * @return $this
     */
    public function setText(string $text): static
    {
        if (is_null($text)) {
            throw new InvalidArgumentException('non-nullable text cannot be null');
        }
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets is_visible_for_contact
     *
     * @return bool
     */
    public function getIsVisibleForContact(): bool
    {
        return $this->container['is_visible_for_contact'];
    }

    /**
     * Sets is_visible_for_contact
     *
     * @param bool $is_visible_for_contact If true, the comment is visible for the associated contact.
     *
     * @return $this
     */
    public function setIsVisibleForContact(bool $is_visible_for_contact): static
    {
        if (is_null($is_visible_for_contact)) {
            throw new InvalidArgumentException('non-nullable is_visible_for_contact cannot be null');
        }
        $this->container['is_visible_for_contact'] = $is_visible_for_contact;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


