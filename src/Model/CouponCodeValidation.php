<?php
/**
 * CouponCodeValidation
 *
 * PHP version 8.1
 *
 * @package  ck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ck\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use ck\ObjectSerializer;

/**
 * CouponCodeValidation Class Doc Comment
 *
 * @package  ck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class CouponCodeValidation implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'CouponCodeValidation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'campaign_id' => 'int',
        'validation_type' => 'string',
        'contact_id' => 'int',
        'coupon_code' => 'string',
        'currency' => 'string',
        'referrer' => 'float',
        'sales_discount' => 'float',
        'sales_discount_net' => 'float',
        'item_discount' => 'float',
        'item_discount_net' => 'float',
        'shipping_discount' => 'float',
        'shipping_discount_net' => 'float',
        'used_vat_fields' => 'object[]',
        'rest_coupon_amount' => 'float',
        'checked_items' => 'object[]',
        'validate_params' => 'object[]',
        'coupon_campaign_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'campaign_id' => null,
        'validation_type' => null,
        'contact_id' => null,
        'coupon_code' => null,
        'currency' => null,
        'referrer' => null,
        'sales_discount' => null,
        'sales_discount_net' => null,
        'item_discount' => null,
        'item_discount_net' => null,
        'shipping_discount' => null,
        'shipping_discount_net' => null,
        'used_vat_fields' => null,
        'rest_coupon_amount' => null,
        'checked_items' => null,
        'validate_params' => null,
        'coupon_campaign_type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'campaign_id' => false,
		'validation_type' => false,
		'contact_id' => false,
		'coupon_code' => false,
		'currency' => false,
		'referrer' => false,
		'sales_discount' => false,
		'sales_discount_net' => false,
		'item_discount' => false,
		'item_discount_net' => false,
		'shipping_discount' => false,
		'shipping_discount_net' => false,
		'used_vat_fields' => false,
		'rest_coupon_amount' => false,
		'checked_items' => false,
		'validate_params' => false,
		'coupon_campaign_type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'campaign_id' => 'campaignId',
        'validation_type' => 'validationType',
        'contact_id' => 'contactId',
        'coupon_code' => 'couponCode',
        'currency' => 'currency',
        'referrer' => 'referrer',
        'sales_discount' => 'salesDiscount',
        'sales_discount_net' => 'salesDiscountNet',
        'item_discount' => 'itemDiscount',
        'item_discount_net' => 'itemDiscountNet',
        'shipping_discount' => 'shippingDiscount',
        'shipping_discount_net' => 'shippingDiscountNet',
        'used_vat_fields' => 'usedVatFields',
        'rest_coupon_amount' => 'restCouponAmount',
        'checked_items' => 'checkedItems',
        'validate_params' => 'validateParams',
        'coupon_campaign_type' => 'couponCampaignType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'campaign_id' => 'setCampaignId',
        'validation_type' => 'setValidationType',
        'contact_id' => 'setContactId',
        'coupon_code' => 'setCouponCode',
        'currency' => 'setCurrency',
        'referrer' => 'setReferrer',
        'sales_discount' => 'setSalesDiscount',
        'sales_discount_net' => 'setSalesDiscountNet',
        'item_discount' => 'setItemDiscount',
        'item_discount_net' => 'setItemDiscountNet',
        'shipping_discount' => 'setShippingDiscount',
        'shipping_discount_net' => 'setShippingDiscountNet',
        'used_vat_fields' => 'setUsedVatFields',
        'rest_coupon_amount' => 'setRestCouponAmount',
        'checked_items' => 'setCheckedItems',
        'validate_params' => 'setValidateParams',
        'coupon_campaign_type' => 'setCouponCampaignType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'campaign_id' => 'getCampaignId',
        'validation_type' => 'getValidationType',
        'contact_id' => 'getContactId',
        'coupon_code' => 'getCouponCode',
        'currency' => 'getCurrency',
        'referrer' => 'getReferrer',
        'sales_discount' => 'getSalesDiscount',
        'sales_discount_net' => 'getSalesDiscountNet',
        'item_discount' => 'getItemDiscount',
        'item_discount_net' => 'getItemDiscountNet',
        'shipping_discount' => 'getShippingDiscount',
        'shipping_discount_net' => 'getShippingDiscountNet',
        'used_vat_fields' => 'getUsedVatFields',
        'rest_coupon_amount' => 'getRestCouponAmount',
        'checked_items' => 'getCheckedItems',
        'validate_params' => 'getValidateParams',
        'coupon_campaign_type' => 'getCouponCampaignType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('campaign_id', $data ?? [], null);
        $this->setIfExists('validation_type', $data ?? [], null);
        $this->setIfExists('contact_id', $data ?? [], null);
        $this->setIfExists('coupon_code', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('referrer', $data ?? [], null);
        $this->setIfExists('sales_discount', $data ?? [], null);
        $this->setIfExists('sales_discount_net', $data ?? [], null);
        $this->setIfExists('item_discount', $data ?? [], null);
        $this->setIfExists('item_discount_net', $data ?? [], null);
        $this->setIfExists('shipping_discount', $data ?? [], null);
        $this->setIfExists('shipping_discount_net', $data ?? [], null);
        $this->setIfExists('used_vat_fields', $data ?? [], null);
        $this->setIfExists('rest_coupon_amount', $data ?? [], null);
        $this->setIfExists('checked_items', $data ?? [], null);
        $this->setIfExists('validate_params', $data ?? [], null);
        $this->setIfExists('coupon_campaign_type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets campaign_id
     *
     * @return int|null
     */
    public function getCampaignId(): ?int
    {
        return $this->container['campaign_id'];
    }

    /**
     * Sets campaign_id
     *
     * @param int|null $campaign_id The ID of the campaign
     *
     * @return $this
     */
    public function setCampaignId(?int $campaign_id): static
    {
        if (is_null($campaign_id)) {
            throw new InvalidArgumentException('non-nullable campaign_id cannot be null');
        }
        $this->container['campaign_id'] = $campaign_id;

        return $this;
    }

    /**
     * Gets validation_type
     *
     * @return string|null
     */
    public function getValidationType(): ?string
    {
        return $this->container['validation_type'];
    }

    /**
     * Sets validation_type
     *
     * @param string|null $validation_type The type of the campaign. Currently the only type available is plentymarkets.
     *
     * @return $this
     */
    public function setValidationType(?string $validation_type): static
    {
        if (is_null($validation_type)) {
            throw new InvalidArgumentException('non-nullable validation_type cannot be null');
        }
        $this->container['validation_type'] = $validation_type;

        return $this;
    }

    /**
     * Gets contact_id
     *
     * @return int|null
     */
    public function getContactId(): ?int
    {
        return $this->container['contact_id'];
    }

    /**
     * Sets contact_id
     *
     * @param int|null $contact_id The ID of the contact that wants to redeem the coupon
     *
     * @return $this
     */
    public function setContactId(?int $contact_id): static
    {
        if (is_null($contact_id)) {
            throw new InvalidArgumentException('non-nullable contact_id cannot be null');
        }
        $this->container['contact_id'] = $contact_id;

        return $this;
    }

    /**
     * Gets coupon_code
     *
     * @return string|null
     */
    public function getCouponCode(): ?string
    {
        return $this->container['coupon_code'];
    }

    /**
     * Sets coupon_code
     *
     * @param string|null $coupon_code The coupon code
     *
     * @return $this
     */
    public function setCouponCode(?string $coupon_code): static
    {
        if (is_null($coupon_code)) {
            throw new InvalidArgumentException('non-nullable coupon_code cannot be null');
        }
        $this->container['coupon_code'] = $coupon_code;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency(): ?string
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency The currency of the purchase
     *
     * @return $this
     */
    public function setCurrency(?string $currency): static
    {
        if (is_null($currency)) {
            throw new InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets referrer
     *
     * @return float|null
     */
    public function getReferrer(): ?float
    {
        return $this->container['referrer'];
    }

    /**
     * Sets referrer
     *
     * @param float|null $referrer The order referrer
     *
     * @return $this
     */
    public function setReferrer(?float $referrer): static
    {
        if (is_null($referrer)) {
            throw new InvalidArgumentException('non-nullable referrer cannot be null');
        }
        $this->container['referrer'] = $referrer;

        return $this;
    }

    /**
     * Gets sales_discount
     *
     * @return float|null
     */
    public function getSalesDiscount(): ?float
    {
        return $this->container['sales_discount'];
    }

    /**
     * Sets sales_discount
     *
     * @param float|null $sales_discount The total discount from a coupon applied to an order. The discount is given as gross amount.
     *
     * @return $this
     */
    public function setSalesDiscount(?float $sales_discount): static
    {
        if (is_null($sales_discount)) {
            throw new InvalidArgumentException('non-nullable sales_discount cannot be null');
        }
        $this->container['sales_discount'] = $sales_discount;

        return $this;
    }

    /**
     * Gets sales_discount_net
     *
     * @return float|null
     */
    public function getSalesDiscountNet(): ?float
    {
        return $this->container['sales_discount_net'];
    }

    /**
     * Sets sales_discount_net
     *
     * @param float|null $sales_discount_net The net discount from a coupon applied to an order. The net discount is the total discount minus the vat amount.
     *
     * @return $this
     */
    public function setSalesDiscountNet(?float $sales_discount_net): static
    {
        if (is_null($sales_discount_net)) {
            throw new InvalidArgumentException('non-nullable sales_discount_net cannot be null');
        }
        $this->container['sales_discount_net'] = $sales_discount_net;

        return $this;
    }

    /**
     * Gets item_discount
     *
     * @return float|null
     */
    public function getItemDiscount(): ?float
    {
        return $this->container['item_discount'];
    }

    /**
     * Sets item_discount
     *
     * @param float|null $item_discount The discount amount applied to items.
     *
     * @return $this
     */
    public function setItemDiscount(?float $item_discount): static
    {
        if (is_null($item_discount)) {
            throw new InvalidArgumentException('non-nullable item_discount cannot be null');
        }
        $this->container['item_discount'] = $item_discount;

        return $this;
    }

    /**
     * Gets item_discount_net
     *
     * @return float|null
     */
    public function getItemDiscountNet(): ?float
    {
        return $this->container['item_discount_net'];
    }

    /**
     * Sets item_discount_net
     *
     * @param float|null $item_discount_net The net discount applied to items.
     *
     * @return $this
     */
    public function setItemDiscountNet(?float $item_discount_net): static
    {
        if (is_null($item_discount_net)) {
            throw new InvalidArgumentException('non-nullable item_discount_net cannot be null');
        }
        $this->container['item_discount_net'] = $item_discount_net;

        return $this;
    }

    /**
     * Gets shipping_discount
     *
     * @return float|null
     */
    public function getShippingDiscount(): ?float
    {
        return $this->container['shipping_discount'];
    }

    /**
     * Sets shipping_discount
     *
     * @param float|null $shipping_discount The discount applied to shipping costs.
     *
     * @return $this
     */
    public function setShippingDiscount(?float $shipping_discount): static
    {
        if (is_null($shipping_discount)) {
            throw new InvalidArgumentException('non-nullable shipping_discount cannot be null');
        }
        $this->container['shipping_discount'] = $shipping_discount;

        return $this;
    }

    /**
     * Gets shipping_discount_net
     *
     * @return float|null
     */
    public function getShippingDiscountNet(): ?float
    {
        return $this->container['shipping_discount_net'];
    }

    /**
     * Sets shipping_discount_net
     *
     * @param float|null $shipping_discount_net The net discount applied to shipping costs.
     *
     * @return $this
     */
    public function setShippingDiscountNet(?float $shipping_discount_net): static
    {
        if (is_null($shipping_discount_net)) {
            throw new InvalidArgumentException('non-nullable shipping_discount_net cannot be null');
        }
        $this->container['shipping_discount_net'] = $shipping_discount_net;

        return $this;
    }

    /**
     * Gets used_vat_fields
     *
     * @return object[]|null
     */
    public function getUsedVatFields(): ?array
    {
        return $this->container['used_vat_fields'];
    }

    /**
     * Sets used_vat_fields
     *
     * @param object[]|null $used_vat_fields The vat fields used for the validation
     *
     * @return $this
     */
    public function setUsedVatFields(?array $used_vat_fields): static
    {
        if (is_null($used_vat_fields)) {
            throw new InvalidArgumentException('non-nullable used_vat_fields cannot be null');
        }
        $this->container['used_vat_fields'] = $used_vat_fields;

        return $this;
    }

    /**
     * Gets rest_coupon_amount
     *
     * @return float|null
     */
    public function getRestCouponAmount(): ?float
    {
        return $this->container['rest_coupon_amount'];
    }

    /**
     * Sets rest_coupon_amount
     *
     * @param float|null $rest_coupon_amount The remaining coupon amount
     *
     * @return $this
     */
    public function setRestCouponAmount(?float $rest_coupon_amount): static
    {
        if (is_null($rest_coupon_amount)) {
            throw new InvalidArgumentException('non-nullable rest_coupon_amount cannot be null');
        }
        $this->container['rest_coupon_amount'] = $rest_coupon_amount;

        return $this;
    }

    /**
     * Gets checked_items
     *
     * @return object[]|null
     */
    public function getCheckedItems(): ?array
    {
        return $this->container['checked_items'];
    }

    /**
     * Sets checked_items
     *
     * @param object[]|null $checked_items The list of variations that passed the validation
     *
     * @return $this
     */
    public function setCheckedItems(?array $checked_items): static
    {
        if (is_null($checked_items)) {
            throw new InvalidArgumentException('non-nullable checked_items cannot be null');
        }
        $this->container['checked_items'] = $checked_items;

        return $this;
    }

    /**
     * Gets validate_params
     *
     * @return object[]|null
     */
    public function getValidateParams(): ?array
    {
        return $this->container['validate_params'];
    }

    /**
     * Sets validate_params
     *
     * @param object[]|null $validate_params Validation parameters
     *
     * @return $this
     */
    public function setValidateParams(?array $validate_params): static
    {
        if (is_null($validate_params)) {
            throw new InvalidArgumentException('non-nullable validate_params cannot be null');
        }
        $this->container['validate_params'] = $validate_params;

        return $this;
    }

    /**
     * Gets coupon_campaign_type
     *
     * @return string|null
     */
    public function getCouponCampaignType(): ?string
    {
        return $this->container['coupon_campaign_type'];
    }

    /**
     * Sets coupon_campaign_type
     *
     * @param string|null $coupon_campaign_type The campaign type
     *
     * @return $this
     */
    public function setCouponCampaignType(?string $coupon_campaign_type): static
    {
        if (is_null($coupon_campaign_type)) {
            throw new InvalidArgumentException('non-nullable coupon_campaign_type cannot be null');
        }
        $this->container['coupon_campaign_type'] = $coupon_campaign_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


