<?php
/**
 * RestAccountsAddressesPostRequest
 *
 * PHP version 8.1
 *
 * @package  ck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ck\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use ck\ObjectSerializer;

/**
 * RestAccountsAddressesPostRequest Class Doc Comment
 *
 * @package  ck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class RestAccountsAddressesPostRequest implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = '_rest_accounts_addresses_post_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'gender' => 'string',
        'name1' => 'string',
        'name2' => 'string',
        'name3' => 'string',
        'name4' => 'string',
        'address1' => 'string',
        'address2' => 'string',
        'address3' => 'string',
        'address4' => 'string',
        'postal_code' => 'string',
        'town' => 'string',
        'country_id' => 'int',
        'state_id' => 'int',
        'read_only' => 'bool',
        'options' => 'object[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'gender' => null,
        'name1' => null,
        'name2' => null,
        'name3' => null,
        'name4' => null,
        'address1' => null,
        'address2' => null,
        'address3' => null,
        'address4' => null,
        'postal_code' => null,
        'town' => null,
        'country_id' => null,
        'state_id' => null,
        'read_only' => null,
        'options' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'gender' => false,
		'name1' => false,
		'name2' => false,
		'name3' => false,
		'name4' => false,
		'address1' => false,
		'address2' => false,
		'address3' => false,
		'address4' => false,
		'postal_code' => false,
		'town' => false,
		'country_id' => false,
		'state_id' => false,
		'read_only' => false,
		'options' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'gender' => 'gender',
        'name1' => 'name1',
        'name2' => 'name2',
        'name3' => 'name3',
        'name4' => 'name4',
        'address1' => 'address1',
        'address2' => 'address2',
        'address3' => 'address3',
        'address4' => 'address4',
        'postal_code' => 'postalCode',
        'town' => 'town',
        'country_id' => 'countryId',
        'state_id' => 'stateId',
        'read_only' => 'readOnly',
        'options' => 'options'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'gender' => 'setGender',
        'name1' => 'setName1',
        'name2' => 'setName2',
        'name3' => 'setName3',
        'name4' => 'setName4',
        'address1' => 'setAddress1',
        'address2' => 'setAddress2',
        'address3' => 'setAddress3',
        'address4' => 'setAddress4',
        'postal_code' => 'setPostalCode',
        'town' => 'setTown',
        'country_id' => 'setCountryId',
        'state_id' => 'setStateId',
        'read_only' => 'setReadOnly',
        'options' => 'setOptions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'gender' => 'getGender',
        'name1' => 'getName1',
        'name2' => 'getName2',
        'name3' => 'getName3',
        'name4' => 'getName4',
        'address1' => 'getAddress1',
        'address2' => 'getAddress2',
        'address3' => 'getAddress3',
        'address4' => 'getAddress4',
        'postal_code' => 'getPostalCode',
        'town' => 'getTown',
        'country_id' => 'getCountryId',
        'state_id' => 'getStateId',
        'read_only' => 'getReadOnly',
        'options' => 'getOptions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('gender', $data ?? [], null);
        $this->setIfExists('name1', $data ?? [], null);
        $this->setIfExists('name2', $data ?? [], null);
        $this->setIfExists('name3', $data ?? [], null);
        $this->setIfExists('name4', $data ?? [], null);
        $this->setIfExists('address1', $data ?? [], null);
        $this->setIfExists('address2', $data ?? [], null);
        $this->setIfExists('address3', $data ?? [], null);
        $this->setIfExists('address4', $data ?? [], null);
        $this->setIfExists('postal_code', $data ?? [], null);
        $this->setIfExists('town', $data ?? [], null);
        $this->setIfExists('country_id', $data ?? [], null);
        $this->setIfExists('state_id', $data ?? [], null);
        $this->setIfExists('read_only', $data ?? [], null);
        $this->setIfExists('options', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['town'] === null) {
            $invalidProperties[] = "'town' can't be null";
        }
        if ($this->container['country_id'] === null) {
            $invalidProperties[] = "'country_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets gender
     *
     * @return string|null
     */
    public function getGender(): ?string
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string|null $gender The gender (\"female\", \"male\" or \"diverse\") optional allowed values are male, female, diverse
     *
     * @return $this
     */
    public function setGender(?string $gender): static
    {
        if (is_null($gender)) {
            throw new InvalidArgumentException('non-nullable gender cannot be null');
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets name1
     *
     * @return string|null
     */
    public function getName1(): ?string
    {
        return $this->container['name1'];
    }

    /**
     * Sets name1
     *
     * @param string|null $name1 The name 1 field (defaults to: company name)
     *
     * @return $this
     */
    public function setName1(?string $name1): static
    {
        if (is_null($name1)) {
            throw new InvalidArgumentException('non-nullable name1 cannot be null');
        }
        $this->container['name1'] = $name1;

        return $this;
    }

    /**
     * Gets name2
     *
     * @return string|null
     */
    public function getName2(): ?string
    {
        return $this->container['name2'];
    }

    /**
     * Sets name2
     *
     * @param string|null $name2 The name 2 field (defaults to: first name)
     *
     * @return $this
     */
    public function setName2(?string $name2): static
    {
        if (is_null($name2)) {
            throw new InvalidArgumentException('non-nullable name2 cannot be null');
        }
        $this->container['name2'] = $name2;

        return $this;
    }

    /**
     * Gets name3
     *
     * @return string|null
     */
    public function getName3(): ?string
    {
        return $this->container['name3'];
    }

    /**
     * Sets name3
     *
     * @param string|null $name3 The name 3 field (defaults to: last name)
     *
     * @return $this
     */
    public function setName3(?string $name3): static
    {
        if (is_null($name3)) {
            throw new InvalidArgumentException('non-nullable name3 cannot be null');
        }
        $this->container['name3'] = $name3;

        return $this;
    }

    /**
     * Gets name4
     *
     * @return string|null
     */
    public function getName4(): ?string
    {
        return $this->container['name4'];
    }

    /**
     * Sets name4
     *
     * @param string|null $name4 The name 4 field (defaults to: c/o)
     *
     * @return $this
     */
    public function setName4(?string $name4): static
    {
        if (is_null($name4)) {
            throw new InvalidArgumentException('non-nullable name4 cannot be null');
        }
        $this->container['name4'] = $name4;

        return $this;
    }

    /**
     * Gets address1
     *
     * @return string|null
     */
    public function getAddress1(): ?string
    {
        return $this->container['address1'];
    }

    /**
     * Sets address1
     *
     * @param string|null $address1 The address 1 field (defaults to: street|'PACKSTATION'|'POSTFILIALE')
     *
     * @return $this
     */
    public function setAddress1(?string $address1): static
    {
        if (is_null($address1)) {
            throw new InvalidArgumentException('non-nullable address1 cannot be null');
        }
        $this->container['address1'] = $address1;

        return $this;
    }

    /**
     * Gets address2
     *
     * @return string|null
     */
    public function getAddress2(): ?string
    {
        return $this->container['address2'];
    }

    /**
     * Sets address2
     *
     * @param string|null $address2 The address 2 field (defaults to: houseNumber|packstationNo)
     *
     * @return $this
     */
    public function setAddress2(?string $address2): static
    {
        if (is_null($address2)) {
            throw new InvalidArgumentException('non-nullable address2 cannot be null');
        }
        $this->container['address2'] = $address2;

        return $this;
    }

    /**
     * Gets address3
     *
     * @return string|null
     */
    public function getAddress3(): ?string
    {
        return $this->container['address3'];
    }

    /**
     * Sets address3
     *
     * @param string|null $address3 The address 3 field (defaults to: additional)
     *
     * @return $this
     */
    public function setAddress3(?string $address3): static
    {
        if (is_null($address3)) {
            throw new InvalidArgumentException('non-nullable address3 cannot be null');
        }
        $this->container['address3'] = $address3;

        return $this;
    }

    /**
     * Gets address4
     *
     * @return string|null
     */
    public function getAddress4(): ?string
    {
        return $this->container['address4'];
    }

    /**
     * Sets address4
     *
     * @param string|null $address4 The address 4 field is currently undefined and can be freely used.
     *
     * @return $this
     */
    public function setAddress4(?string $address4): static
    {
        if (is_null($address4)) {
            throw new InvalidArgumentException('non-nullable address4 cannot be null');
        }
        $this->container['address4'] = $address4;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string|null
     */
    public function getPostalCode(): ?string
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string|null $postal_code The postcode optional
     *
     * @return $this
     */
    public function setPostalCode(?string $postal_code): static
    {
        if (is_null($postal_code)) {
            throw new InvalidArgumentException('non-nullable postal_code cannot be null');
        }
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets town
     *
     * @return string
     */
    public function getTown(): string
    {
        return $this->container['town'];
    }

    /**
     * Sets town
     *
     * @param string $town The town
     *
     * @return $this
     */
    public function setTown(string $town): static
    {
        if (is_null($town)) {
            throw new InvalidArgumentException('non-nullable town cannot be null');
        }
        $this->container['town'] = $town;

        return $this;
    }

    /**
     * Gets country_id
     *
     * @return int
     */
    public function getCountryId(): int
    {
        return $this->container['country_id'];
    }

    /**
     * Sets country_id
     *
     * @param int $country_id The ID of the country
     *
     * @return $this
     */
    public function setCountryId(int $country_id): static
    {
        if (is_null($country_id)) {
            throw new InvalidArgumentException('non-nullable country_id cannot be null');
        }
        $this->container['country_id'] = $country_id;

        return $this;
    }

    /**
     * Gets state_id
     *
     * @return int|null
     */
    public function getStateId(): ?int
    {
        return $this->container['state_id'];
    }

    /**
     * Sets state_id
     *
     * @param int|null $state_id The ID of the state
     *
     * @return $this
     */
    public function setStateId(?int $state_id): static
    {
        if (is_null($state_id)) {
            throw new InvalidArgumentException('non-nullable state_id cannot be null');
        }
        $this->container['state_id'] = $state_id;

        return $this;
    }

    /**
     * Gets read_only
     *
     * @return bool|null
     */
    public function getReadOnly(): ?bool
    {
        return $this->container['read_only'];
    }

    /**
     * Sets read_only
     *
     * @param bool|null $read_only Flag that indicates if the data record is read only optional
     *
     * @return $this
     */
    public function setReadOnly(?bool $read_only): static
    {
        if (is_null($read_only)) {
            throw new InvalidArgumentException('non-nullable read_only cannot be null');
        }
        $this->container['read_only'] = $read_only;

        return $this;
    }

    /**
     * Gets options
     *
     * @return object[]|null
     */
    public function getOptions(): ?array
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param object[]|null $options options
     *
     * @return $this
     */
    public function setOptions(?array $options): static
    {
        if (is_null($options)) {
            throw new InvalidArgumentException('non-nullable options cannot be null');
        }
        $this->container['options'] = $options;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


