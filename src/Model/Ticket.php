<?php
/**
 * Ticket
 *
 * PHP version 8.1
 *
 * @package  ck/plenty-client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ck/plenty-client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use ck/plenty-client\ObjectSerializer;

/**
 * Ticket Class Doc Comment
 *
 * @package  ck/plenty-client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class Ticket implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Ticket';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'int',
        'type_id' => 'int',
        'priority_id' => 'int',
        'parent_ticket_id' => 'int',
        'status_id' => 'int',
        'confidential' => 'object[]',
        'contact_id' => 'int',
        'order_id' => 'int',
        'created_at' => 'string',
        'updated_at' => 'string',
        'contact_last_update_at' => 'string',
        'deadline_at' => 'string',
        'finished_at' => 'string',
        'title' => 'string',
        'progress' => 'int',
        'plenty_id' => 'int',
        'source' => 'object[]',
        'documents_count' => 'int',
        'has_documents' => 'int',
        'children_count' => 'int',
        'resubmission_at' => 'string',
        'parse_data' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => null,
        'type_id' => null,
        'priority_id' => null,
        'parent_ticket_id' => null,
        'status_id' => null,
        'confidential' => null,
        'contact_id' => null,
        'order_id' => null,
        'created_at' => null,
        'updated_at' => null,
        'contact_last_update_at' => null,
        'deadline_at' => null,
        'finished_at' => null,
        'title' => null,
        'progress' => null,
        'plenty_id' => null,
        'source' => null,
        'documents_count' => null,
        'has_documents' => null,
        'children_count' => null,
        'resubmission_at' => null,
        'parse_data' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
		'type_id' => false,
		'priority_id' => false,
		'parent_ticket_id' => false,
		'status_id' => false,
		'confidential' => false,
		'contact_id' => false,
		'order_id' => false,
		'created_at' => false,
		'updated_at' => false,
		'contact_last_update_at' => false,
		'deadline_at' => false,
		'finished_at' => false,
		'title' => false,
		'progress' => false,
		'plenty_id' => false,
		'source' => false,
		'documents_count' => false,
		'has_documents' => false,
		'children_count' => false,
		'resubmission_at' => false,
		'parse_data' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'type_id' => 'typeId',
        'priority_id' => 'priorityId',
        'parent_ticket_id' => 'parentTicketId',
        'status_id' => 'statusId',
        'confidential' => 'confidential',
        'contact_id' => 'contactId',
        'order_id' => 'orderId',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt',
        'contact_last_update_at' => 'contactLastUpdateAt',
        'deadline_at' => 'deadlineAt',
        'finished_at' => 'finishedAt',
        'title' => 'title',
        'progress' => 'progress',
        'plenty_id' => 'plentyId',
        'source' => 'source',
        'documents_count' => 'documentsCount',
        'has_documents' => 'hasDocuments',
        'children_count' => 'childrenCount',
        'resubmission_at' => 'resubmissionAt',
        'parse_data' => 'parseData'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'type_id' => 'setTypeId',
        'priority_id' => 'setPriorityId',
        'parent_ticket_id' => 'setParentTicketId',
        'status_id' => 'setStatusId',
        'confidential' => 'setConfidential',
        'contact_id' => 'setContactId',
        'order_id' => 'setOrderId',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'contact_last_update_at' => 'setContactLastUpdateAt',
        'deadline_at' => 'setDeadlineAt',
        'finished_at' => 'setFinishedAt',
        'title' => 'setTitle',
        'progress' => 'setProgress',
        'plenty_id' => 'setPlentyId',
        'source' => 'setSource',
        'documents_count' => 'setDocumentsCount',
        'has_documents' => 'setHasDocuments',
        'children_count' => 'setChildrenCount',
        'resubmission_at' => 'setResubmissionAt',
        'parse_data' => 'setParseData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'type_id' => 'getTypeId',
        'priority_id' => 'getPriorityId',
        'parent_ticket_id' => 'getParentTicketId',
        'status_id' => 'getStatusId',
        'confidential' => 'getConfidential',
        'contact_id' => 'getContactId',
        'order_id' => 'getOrderId',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'contact_last_update_at' => 'getContactLastUpdateAt',
        'deadline_at' => 'getDeadlineAt',
        'finished_at' => 'getFinishedAt',
        'title' => 'getTitle',
        'progress' => 'getProgress',
        'plenty_id' => 'getPlentyId',
        'source' => 'getSource',
        'documents_count' => 'getDocumentsCount',
        'has_documents' => 'getHasDocuments',
        'children_count' => 'getChildrenCount',
        'resubmission_at' => 'getResubmissionAt',
        'parse_data' => 'getParseData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('type_id', $data ?? [], null);
        $this->setIfExists('priority_id', $data ?? [], null);
        $this->setIfExists('parent_ticket_id', $data ?? [], null);
        $this->setIfExists('status_id', $data ?? [], null);
        $this->setIfExists('confidential', $data ?? [], null);
        $this->setIfExists('contact_id', $data ?? [], null);
        $this->setIfExists('order_id', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('contact_last_update_at', $data ?? [], null);
        $this->setIfExists('deadline_at', $data ?? [], null);
        $this->setIfExists('finished_at', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('progress', $data ?? [], null);
        $this->setIfExists('plenty_id', $data ?? [], null);
        $this->setIfExists('source', $data ?? [], null);
        $this->setIfExists('documents_count', $data ?? [], null);
        $this->setIfExists('has_documents', $data ?? [], null);
        $this->setIfExists('children_count', $data ?? [], null);
        $this->setIfExists('resubmission_at', $data ?? [], null);
        $this->setIfExists('parse_data', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The ID of the ticket
     *
     * @return $this
     */
    public function setId(?int $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type_id
     *
     * @return int|null
     */
    public function getTypeId(): ?int
    {
        return $this->container['type_id'];
    }

    /**
     * Sets type_id
     *
     * @param int|null $type_id The type ID of the ticket
     *
     * @return $this
     */
    public function setTypeId(?int $type_id): static
    {
        if (is_null($type_id)) {
            throw new InvalidArgumentException('non-nullable type_id cannot be null');
        }
        $this->container['type_id'] = $type_id;

        return $this;
    }

    /**
     * Gets priority_id
     *
     * @return int|null
     */
    public function getPriorityId(): ?int
    {
        return $this->container['priority_id'];
    }

    /**
     * Sets priority_id
     *
     * @param int|null $priority_id The priority ID of the ticket
     *
     * @return $this
     */
    public function setPriorityId(?int $priority_id): static
    {
        if (is_null($priority_id)) {
            throw new InvalidArgumentException('non-nullable priority_id cannot be null');
        }
        $this->container['priority_id'] = $priority_id;

        return $this;
    }

    /**
     * Gets parent_ticket_id
     *
     * @return int|null
     */
    public function getParentTicketId(): ?int
    {
        return $this->container['parent_ticket_id'];
    }

    /**
     * Sets parent_ticket_id
     *
     * @param int|null $parent_ticket_id The ID of the parent ticket
     *
     * @return $this
     */
    public function setParentTicketId(?int $parent_ticket_id): static
    {
        if (is_null($parent_ticket_id)) {
            throw new InvalidArgumentException('non-nullable parent_ticket_id cannot be null');
        }
        $this->container['parent_ticket_id'] = $parent_ticket_id;

        return $this;
    }

    /**
     * Gets status_id
     *
     * @return int|null
     */
    public function getStatusId(): ?int
    {
        return $this->container['status_id'];
    }

    /**
     * Sets status_id
     *
     * @param int|null $status_id The status ID of the ticket
     *
     * @return $this
     */
    public function setStatusId(?int $status_id): static
    {
        if (is_null($status_id)) {
            throw new InvalidArgumentException('non-nullable status_id cannot be null');
        }
        $this->container['status_id'] = $status_id;

        return $this;
    }

    /**
     * Gets confidential
     *
     * @return object[]|null
     */
    public function getConfidential(): ?array
    {
        return $this->container['confidential'];
    }

    /**
     * Sets confidential
     *
     * @param object[]|null $confidential The confidential value. Displays 1 if the ticket is confidential. Displays 0 if the ticket is not confidential.
     *
     * @return $this
     */
    public function setConfidential(?array $confidential): static
    {
        if (is_null($confidential)) {
            throw new InvalidArgumentException('non-nullable confidential cannot be null');
        }
        $this->container['confidential'] = $confidential;

        return $this;
    }

    /**
     * Gets contact_id
     *
     * @return int|null
     */
    public function getContactId(): ?int
    {
        return $this->container['contact_id'];
    }

    /**
     * Sets contact_id
     *
     * @param int|null $contact_id The ID of the contact that is linked with the ticket
     *
     * @return $this
     */
    public function setContactId(?int $contact_id): static
    {
        if (is_null($contact_id)) {
            throw new InvalidArgumentException('non-nullable contact_id cannot be null');
        }
        $this->container['contact_id'] = $contact_id;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return int|null
     */
    public function getOrderId(): ?int
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param int|null $order_id The ID of the order linked with the ticket
     *
     * @return $this
     */
    public function setOrderId(?int $order_id): static
    {
        if (is_null($order_id)) {
            throw new InvalidArgumentException('non-nullable order_id cannot be null');
        }
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt(): ?string
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at The time the ticket was created as unix timestamp or carbon object
     *
     * @return $this
     */
    public function setCreatedAt(?string $created_at): static
    {
        if (is_null($created_at)) {
            throw new InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt(): ?string
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at The time the ticket was last updated as unix timestamp or carbon object
     *
     * @return $this
     */
    public function setUpdatedAt(?string $updated_at): static
    {
        if (is_null($updated_at)) {
            throw new InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets contact_last_update_at
     *
     * @return string|null
     */
    public function getContactLastUpdateAt(): ?string
    {
        return $this->container['contact_last_update_at'];
    }

    /**
     * Sets contact_last_update_at
     *
     * @param string|null $contact_last_update_at The time the contact was last updated
     *
     * @return $this
     */
    public function setContactLastUpdateAt(?string $contact_last_update_at): static
    {
        if (is_null($contact_last_update_at)) {
            throw new InvalidArgumentException('non-nullable contact_last_update_at cannot be null');
        }
        $this->container['contact_last_update_at'] = $contact_last_update_at;

        return $this;
    }

    /**
     * Gets deadline_at
     *
     * @return string|null
     */
    public function getDeadlineAt(): ?string
    {
        return $this->container['deadline_at'];
    }

    /**
     * Sets deadline_at
     *
     * @param string|null $deadline_at The date of the ticket deadline
     *
     * @return $this
     */
    public function setDeadlineAt(?string $deadline_at): static
    {
        if (is_null($deadline_at)) {
            throw new InvalidArgumentException('non-nullable deadline_at cannot be null');
        }
        $this->container['deadline_at'] = $deadline_at;

        return $this;
    }

    /**
     * Gets finished_at
     *
     * @return string|null
     */
    public function getFinishedAt(): ?string
    {
        return $this->container['finished_at'];
    }

    /**
     * Sets finished_at
     *
     * @param string|null $finished_at The date the ticket is solved and displays 100 percent in the progress bar
     *
     * @return $this
     */
    public function setFinishedAt(?string $finished_at): static
    {
        if (is_null($finished_at)) {
            throw new InvalidArgumentException('non-nullable finished_at cannot be null');
        }
        $this->container['finished_at'] = $finished_at;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle(): ?string
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title The title of the ticket
     *
     * @return $this
     */
    public function setTitle(?string $title): static
    {
        if (is_null($title)) {
            throw new InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets progress
     *
     * @return int|null
     */
    public function getProgress(): ?int
    {
        return $this->container['progress'];
    }

    /**
     * Sets progress
     *
     * @param int|null $progress The progress of the ticket in percent
     *
     * @return $this
     */
    public function setProgress(?int $progress): static
    {
        if (is_null($progress)) {
            throw new InvalidArgumentException('non-nullable progress cannot be null');
        }
        $this->container['progress'] = $progress;

        return $this;
    }

    /**
     * Gets plenty_id
     *
     * @return int|null
     */
    public function getPlentyId(): ?int
    {
        return $this->container['plenty_id'];
    }

    /**
     * Sets plenty_id
     *
     * @param int|null $plenty_id The ID of the client (store)
     *
     * @return $this
     */
    public function setPlentyId(?int $plenty_id): static
    {
        if (is_null($plenty_id)) {
            throw new InvalidArgumentException('non-nullable plenty_id cannot be null');
        }
        $this->container['plenty_id'] = $plenty_id;

        return $this;
    }

    /**
     * Gets source
     *
     * @return object[]|null
     */
    public function getSource(): ?array
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param object[]|null $source The source of the ticket. Possible values are 'frontend', 'backend', 'ebay' and 'email'.
     *
     * @return $this
     */
    public function setSource(?array $source): static
    {
        if (is_null($source)) {
            throw new InvalidArgumentException('non-nullable source cannot be null');
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets documents_count
     *
     * @return int|null
     */
    public function getDocumentsCount(): ?int
    {
        return $this->container['documents_count'];
    }

    /**
     * Sets documents_count
     *
     * @param int|null $documents_count The number of documents that are attached to the ticket
     *
     * @return $this
     */
    public function setDocumentsCount(?int $documents_count): static
    {
        if (is_null($documents_count)) {
            throw new InvalidArgumentException('non-nullable documents_count cannot be null');
        }
        $this->container['documents_count'] = $documents_count;

        return $this;
    }

    /**
     * Gets has_documents
     *
     * @return int|null
     */
    public function getHasDocuments(): ?int
    {
        return $this->container['has_documents'];
    }

    /**
     * Sets has_documents
     *
     * @param int|null $has_documents Displays 1 if the ticket has one or more documents. Displays 0 if the ticket has no document.
     *
     * @return $this
     */
    public function setHasDocuments(?int $has_documents): static
    {
        if (is_null($has_documents)) {
            throw new InvalidArgumentException('non-nullable has_documents cannot be null');
        }
        $this->container['has_documents'] = $has_documents;

        return $this;
    }

    /**
     * Gets children_count
     *
     * @return int|null
     */
    public function getChildrenCount(): ?int
    {
        return $this->container['children_count'];
    }

    /**
     * Sets children_count
     *
     * @param int|null $children_count The number of child tickets
     *
     * @return $this
     */
    public function setChildrenCount(?int $children_count): static
    {
        if (is_null($children_count)) {
            throw new InvalidArgumentException('non-nullable children_count cannot be null');
        }
        $this->container['children_count'] = $children_count;

        return $this;
    }

    /**
     * Gets resubmission_at
     *
     * @return string|null
     */
    public function getResubmissionAt(): ?string
    {
        return $this->container['resubmission_at'];
    }

    /**
     * Sets resubmission_at
     *
     * @param string|null $resubmission_at The date the ticket should be resubmitted
     *
     * @return $this
     */
    public function setResubmissionAt(?string $resubmission_at): static
    {
        if (is_null($resubmission_at)) {
            throw new InvalidArgumentException('non-nullable resubmission_at cannot be null');
        }
        $this->container['resubmission_at'] = $resubmission_at;

        return $this;
    }

    /**
     * Gets parse_data
     *
     * @return string|null
     */
    public function getParseData(): ?string
    {
        return $this->container['parse_data'];
    }

    /**
     * Sets parse_data
     *
     * @param string|null $parse_data The ParseData from the ticket
     *
     * @return $this
     */
    public function setParseData(?string $parse_data): static
    {
        if (is_null($parse_data)) {
            throw new InvalidArgumentException('non-nullable parse_data cannot be null');
        }
        $this->container['parse_data'] = $parse_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


