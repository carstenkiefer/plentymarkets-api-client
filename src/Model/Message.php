<?php
/**
 * Message
 *
 * PHP version 8.1
 *
 * @package  ck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ck\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use ck\ObjectSerializer;

/**
 * Message Class Doc Comment
 *
 * @package  ck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class Message implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Message';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'uuid' => 'string',
        'plenty_id_hash' => 'string',
        'parent_uuid' => 'string',
        'whispered' => 'bool',
        'tags' => 'object[]',
        'title' => 'string',
        'preview' => 'string',
        'message' => 'string',
        'attached_files_count' => 'int',
        'done_at' => 'string',
        'created_at' => 'string',
        'updated_at' => 'string',
        'deleted_at' => 'string',
        'deleted_by' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'uuid' => null,
        'plenty_id_hash' => null,
        'parent_uuid' => null,
        'whispered' => null,
        'tags' => null,
        'title' => null,
        'preview' => null,
        'message' => null,
        'attached_files_count' => null,
        'done_at' => null,
        'created_at' => null,
        'updated_at' => null,
        'deleted_at' => null,
        'deleted_by' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'uuid' => false,
		'plenty_id_hash' => false,
		'parent_uuid' => false,
		'whispered' => false,
		'tags' => false,
		'title' => false,
		'preview' => false,
		'message' => false,
		'attached_files_count' => false,
		'done_at' => false,
		'created_at' => false,
		'updated_at' => false,
		'deleted_at' => false,
		'deleted_by' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'uuid' => 'uuid',
        'plenty_id_hash' => 'plentyIdHash',
        'parent_uuid' => 'parentUuid',
        'whispered' => 'whispered',
        'tags' => 'tags',
        'title' => 'title',
        'preview' => 'preview',
        'message' => 'message',
        'attached_files_count' => 'attachedFilesCount',
        'done_at' => 'doneAt',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt',
        'deleted_at' => 'deletedAt',
        'deleted_by' => 'deletedBy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'uuid' => 'setUuid',
        'plenty_id_hash' => 'setPlentyIdHash',
        'parent_uuid' => 'setParentUuid',
        'whispered' => 'setWhispered',
        'tags' => 'setTags',
        'title' => 'setTitle',
        'preview' => 'setPreview',
        'message' => 'setMessage',
        'attached_files_count' => 'setAttachedFilesCount',
        'done_at' => 'setDoneAt',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'deleted_at' => 'setDeletedAt',
        'deleted_by' => 'setDeletedBy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'uuid' => 'getUuid',
        'plenty_id_hash' => 'getPlentyIdHash',
        'parent_uuid' => 'getParentUuid',
        'whispered' => 'getWhispered',
        'tags' => 'getTags',
        'title' => 'getTitle',
        'preview' => 'getPreview',
        'message' => 'getMessage',
        'attached_files_count' => 'getAttachedFilesCount',
        'done_at' => 'getDoneAt',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'deleted_at' => 'getDeletedAt',
        'deleted_by' => 'getDeletedBy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('uuid', $data ?? [], null);
        $this->setIfExists('plenty_id_hash', $data ?? [], null);
        $this->setIfExists('parent_uuid', $data ?? [], null);
        $this->setIfExists('whispered', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('preview', $data ?? [], null);
        $this->setIfExists('message', $data ?? [], null);
        $this->setIfExists('attached_files_count', $data ?? [], null);
        $this->setIfExists('done_at', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('deleted_at', $data ?? [], null);
        $this->setIfExists('deleted_by', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets uuid
     *
     * @return string|null
     */
    public function getUuid(): ?string
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string|null $uuid The UUID5 identifier of the message
     *
     * @return $this
     */
    public function setUuid(?string $uuid): static
    {
        if (is_null($uuid)) {
            throw new InvalidArgumentException('non-nullable uuid cannot be null');
        }
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets plenty_id_hash
     *
     * @return string|null
     */
    public function getPlentyIdHash(): ?string
    {
        return $this->container['plenty_id_hash'];
    }

    /**
     * Sets plenty_id_hash
     *
     * @param string|null $plenty_id_hash The plenty ID hash
     *
     * @return $this
     */
    public function setPlentyIdHash(?string $plenty_id_hash): static
    {
        if (is_null($plenty_id_hash)) {
            throw new InvalidArgumentException('non-nullable plenty_id_hash cannot be null');
        }
        $this->container['plenty_id_hash'] = $plenty_id_hash;

        return $this;
    }

    /**
     * Gets parent_uuid
     *
     * @return string|null
     */
    public function getParentUuid(): ?string
    {
        return $this->container['parent_uuid'];
    }

    /**
     * Sets parent_uuid
     *
     * @param string|null $parent_uuid The UUID5 of the parent message
     *
     * @return $this
     */
    public function setParentUuid(?string $parent_uuid): static
    {
        if (is_null($parent_uuid)) {
            throw new InvalidArgumentException('non-nullable parent_uuid cannot be null');
        }
        $this->container['parent_uuid'] = $parent_uuid;

        return $this;
    }

    /**
     * Gets whispered
     *
     * @return bool|null
     */
    public function getWhispered(): ?bool
    {
        return $this->container['whispered'];
    }

    /**
     * Sets whispered
     *
     * @param bool|null $whispered Whether the message is whispered (not visible for the contact/order linked to the message) or not
     *
     * @return $this
     */
    public function setWhispered(?bool $whispered): static
    {
        if (is_null($whispered)) {
            throw new InvalidArgumentException('non-nullable whispered cannot be null');
        }
        $this->container['whispered'] = $whispered;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return object[]|null
     */
    public function getTags(): ?array
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param object[]|null $tags An array with tag IDs assigned to the message
     *
     * @return $this
     */
    public function setTags(?array $tags): static
    {
        if (is_null($tags)) {
            throw new InvalidArgumentException('non-nullable tags cannot be null');
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle(): ?string
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title The title of the message
     *
     * @return $this
     */
    public function setTitle(?string $title): static
    {
        if (is_null($title)) {
            throw new InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets preview
     *
     * @return string|null
     */
    public function getPreview(): ?string
    {
        return $this->container['preview'];
    }

    /**
     * Sets preview
     *
     * @param string|null $preview The first two lines of the message without any markup
     *
     * @return $this
     */
    public function setPreview(?string $preview): static
    {
        if (is_null($preview)) {
            throw new InvalidArgumentException('non-nullable preview cannot be null');
        }
        $this->container['preview'] = $preview;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string|null
     */
    public function getMessage(): ?string
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string|null $message The content of the message
     *
     * @return $this
     */
    public function setMessage(?string $message): static
    {
        if (is_null($message)) {
            throw new InvalidArgumentException('non-nullable message cannot be null');
        }
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets attached_files_count
     *
     * @return int|null
     */
    public function getAttachedFilesCount(): ?int
    {
        return $this->container['attached_files_count'];
    }

    /**
     * Sets attached_files_count
     *
     * @param int|null $attached_files_count The amount of attached files (readonly)
     *
     * @return $this
     */
    public function setAttachedFilesCount(?int $attached_files_count): static
    {
        if (is_null($attached_files_count)) {
            throw new InvalidArgumentException('non-nullable attached_files_count cannot be null');
        }
        $this->container['attached_files_count'] = $attached_files_count;

        return $this;
    }

    /**
     * Gets done_at
     *
     * @return string|null
     */
    public function getDoneAt(): ?string
    {
        return $this->container['done_at'];
    }

    /**
     * Sets done_at
     *
     * @param string|null $done_at The date the messages was set to done
     *
     * @return $this
     */
    public function setDoneAt(?string $done_at): static
    {
        if (is_null($done_at)) {
            throw new InvalidArgumentException('non-nullable done_at cannot be null');
        }
        $this->container['done_at'] = $done_at;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt(): ?string
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at The creation date of the message
     *
     * @return $this
     */
    public function setCreatedAt(?string $created_at): static
    {
        if (is_null($created_at)) {
            throw new InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt(): ?string
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at The date of the last update of the message
     *
     * @return $this
     */
    public function setUpdatedAt(?string $updated_at): static
    {
        if (is_null($updated_at)) {
            throw new InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets deleted_at
     *
     * @return string|null
     */
    public function getDeletedAt(): ?string
    {
        return $this->container['deleted_at'];
    }

    /**
     * Sets deleted_at
     *
     * @param string|null $deleted_at The date the message was deleted
     *
     * @return $this
     */
    public function setDeletedAt(?string $deleted_at): static
    {
        if (is_null($deleted_at)) {
            throw new InvalidArgumentException('non-nullable deleted_at cannot be null');
        }
        $this->container['deleted_at'] = $deleted_at;

        return $this;
    }

    /**
     * Gets deleted_by
     *
     * @return int|null
     */
    public function getDeletedBy(): ?int
    {
        return $this->container['deleted_by'];
    }

    /**
     * Sets deleted_by
     *
     * @param int|null $deleted_by The ID of the user who deleted the message
     *
     * @return $this
     */
    public function setDeletedBy(?int $deleted_by): static
    {
        if (is_null($deleted_by)) {
            throw new InvalidArgumentException('non-nullable deleted_by cannot be null');
        }
        $this->container['deleted_by'] = $deleted_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


