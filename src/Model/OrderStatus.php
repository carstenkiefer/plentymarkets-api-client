<?php
/**
 * OrderStatus
 *
 * PHP version 8.1
 *
 * @package  ck/plenty-client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ck/plenty-client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use ck/plenty-client\ObjectSerializer;

/**
 * OrderStatus Class Doc Comment
 *
 * @package  ck/plenty-client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class OrderStatus implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'OrderStatus';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'status_id' => 'float',
        'is_erasable' => 'bool',
        'created_at' => 'string',
        'updated_at' => 'string',
        'is_frontend_visible' => 'bool',
        'is_reorder_visible' => 'bool',
        'is_redistribution_visible' => 'bool',
        'color' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'status_id' => null,
        'is_erasable' => null,
        'created_at' => null,
        'updated_at' => null,
        'is_frontend_visible' => null,
        'is_reorder_visible' => null,
        'is_redistribution_visible' => null,
        'color' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'status_id' => false,
		'is_erasable' => false,
		'created_at' => false,
		'updated_at' => false,
		'is_frontend_visible' => false,
		'is_reorder_visible' => false,
		'is_redistribution_visible' => false,
		'color' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'status_id' => 'statusId',
        'is_erasable' => 'isErasable',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt',
        'is_frontend_visible' => 'isFrontendVisible',
        'is_reorder_visible' => 'isReorderVisible',
        'is_redistribution_visible' => 'isRedistributionVisible',
        'color' => 'color'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'status_id' => 'setStatusId',
        'is_erasable' => 'setIsErasable',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'is_frontend_visible' => 'setIsFrontendVisible',
        'is_reorder_visible' => 'setIsReorderVisible',
        'is_redistribution_visible' => 'setIsRedistributionVisible',
        'color' => 'setColor'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'status_id' => 'getStatusId',
        'is_erasable' => 'getIsErasable',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'is_frontend_visible' => 'getIsFrontendVisible',
        'is_reorder_visible' => 'getIsReorderVisible',
        'is_redistribution_visible' => 'getIsRedistributionVisible',
        'color' => 'getColor'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('status_id', $data ?? [], null);
        $this->setIfExists('is_erasable', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('is_frontend_visible', $data ?? [], null);
        $this->setIfExists('is_reorder_visible', $data ?? [], null);
        $this->setIfExists('is_redistribution_visible', $data ?? [], null);
        $this->setIfExists('color', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets status_id
     *
     * @return float|null
     */
    public function getStatusId(): ?float
    {
        return $this->container['status_id'];
    }

    /**
     * Sets status_id
     *
     * @param float|null $status_id The ID of the status.
     *
     * @return $this
     */
    public function setStatusId(?float $status_id): static
    {
        if (is_null($status_id)) {
            throw new InvalidArgumentException('non-nullable status_id cannot be null');
        }
        $this->container['status_id'] = $status_id;

        return $this;
    }

    /**
     * Gets is_erasable
     *
     * @return bool|null
     */
    public function getIsErasable(): ?bool
    {
        return $this->container['is_erasable'];
    }

    /**
     * Sets is_erasable
     *
     * @param bool|null $is_erasable Flag that indicates whether the status is erasable or not.
     *
     * @return $this
     */
    public function setIsErasable(?bool $is_erasable): static
    {
        if (is_null($is_erasable)) {
            throw new InvalidArgumentException('non-nullable is_erasable cannot be null');
        }
        $this->container['is_erasable'] = $is_erasable;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt(): ?string
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at The date, when the status was created.
     *
     * @return $this
     */
    public function setCreatedAt(?string $created_at): static
    {
        if (is_null($created_at)) {
            throw new InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt(): ?string
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at The date, when the status was updated.
     *
     * @return $this
     */
    public function setUpdatedAt(?string $updated_at): static
    {
        if (is_null($updated_at)) {
            throw new InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets is_frontend_visible
     *
     * @return bool|null
     */
    public function getIsFrontendVisible(): ?bool
    {
        return $this->container['is_frontend_visible'];
    }

    /**
     * Sets is_frontend_visible
     *
     * @param bool|null $is_frontend_visible Indicates visibility in frontend.
     *
     * @return $this
     */
    public function setIsFrontendVisible(?bool $is_frontend_visible): static
    {
        if (is_null($is_frontend_visible)) {
            throw new InvalidArgumentException('non-nullable is_frontend_visible cannot be null');
        }
        $this->container['is_frontend_visible'] = $is_frontend_visible;

        return $this;
    }

    /**
     * Gets is_reorder_visible
     *
     * @return bool|null
     */
    public function getIsReorderVisible(): ?bool
    {
        return $this->container['is_reorder_visible'];
    }

    /**
     * Sets is_reorder_visible
     *
     * @param bool|null $is_reorder_visible Indicates visibility in reorder.
     *
     * @return $this
     */
    public function setIsReorderVisible(?bool $is_reorder_visible): static
    {
        if (is_null($is_reorder_visible)) {
            throw new InvalidArgumentException('non-nullable is_reorder_visible cannot be null');
        }
        $this->container['is_reorder_visible'] = $is_reorder_visible;

        return $this;
    }

    /**
     * Gets is_redistribution_visible
     *
     * @return bool|null
     */
    public function getIsRedistributionVisible(): ?bool
    {
        return $this->container['is_redistribution_visible'];
    }

    /**
     * Sets is_redistribution_visible
     *
     * @param bool|null $is_redistribution_visible Indicates visibility in redistribution.
     *
     * @return $this
     */
    public function setIsRedistributionVisible(?bool $is_redistribution_visible): static
    {
        if (is_null($is_redistribution_visible)) {
            throw new InvalidArgumentException('non-nullable is_redistribution_visible cannot be null');
        }
        $this->container['is_redistribution_visible'] = $is_redistribution_visible;

        return $this;
    }

    /**
     * Gets color
     *
     * @return string|null
     */
    public function getColor(): ?string
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string|null $color The color of the status.
     *
     * @return $this
     */
    public function setColor(?string $color): static
    {
        if (is_null($color)) {
            throw new InvalidArgumentException('non-nullable color cannot be null');
        }
        $this->container['color'] = $color;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


