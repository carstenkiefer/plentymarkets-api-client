<?php
/**
 * ShippingInformation
 *
 * PHP version 8.1
 *
 * @package  ck/plenty-client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ck/plenty-client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use ck/plenty-client\ObjectSerializer;

/**
 * ShippingInformation Class Doc Comment
 *
 * @package  ck/plenty-client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ShippingInformation implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ShippingInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'order_id' => 'int',
        'shipping_service_provider' => 'string',
        'transaction_id' => 'string',
        'shipping_status' => 'string',
        'shipping_costs' => 'float',
        'additional_data' => 'string',
        'registration_at' => 'int',
        'shipment_at' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'order_id' => null,
        'shipping_service_provider' => null,
        'transaction_id' => null,
        'shipping_status' => null,
        'shipping_costs' => null,
        'additional_data' => null,
        'registration_at' => null,
        'shipment_at' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'order_id' => false,
		'shipping_service_provider' => false,
		'transaction_id' => false,
		'shipping_status' => false,
		'shipping_costs' => false,
		'additional_data' => false,
		'registration_at' => false,
		'shipment_at' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'order_id' => 'orderId',
        'shipping_service_provider' => 'shippingServiceProvider',
        'transaction_id' => 'transactionId',
        'shipping_status' => 'shippingStatus',
        'shipping_costs' => 'shippingCosts',
        'additional_data' => 'additionalData',
        'registration_at' => 'registrationAt',
        'shipment_at' => 'shipmentAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'order_id' => 'setOrderId',
        'shipping_service_provider' => 'setShippingServiceProvider',
        'transaction_id' => 'setTransactionId',
        'shipping_status' => 'setShippingStatus',
        'shipping_costs' => 'setShippingCosts',
        'additional_data' => 'setAdditionalData',
        'registration_at' => 'setRegistrationAt',
        'shipment_at' => 'setShipmentAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'order_id' => 'getOrderId',
        'shipping_service_provider' => 'getShippingServiceProvider',
        'transaction_id' => 'getTransactionId',
        'shipping_status' => 'getShippingStatus',
        'shipping_costs' => 'getShippingCosts',
        'additional_data' => 'getAdditionalData',
        'registration_at' => 'getRegistrationAt',
        'shipment_at' => 'getShipmentAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('order_id', $data ?? [], null);
        $this->setIfExists('shipping_service_provider', $data ?? [], null);
        $this->setIfExists('transaction_id', $data ?? [], null);
        $this->setIfExists('shipping_status', $data ?? [], null);
        $this->setIfExists('shipping_costs', $data ?? [], null);
        $this->setIfExists('additional_data', $data ?? [], null);
        $this->setIfExists('registration_at', $data ?? [], null);
        $this->setIfExists('shipment_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_id
     *
     * @return int|null
     */
    public function getOrderId(): ?int
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param int|null $order_id The ID of the order
     *
     * @return $this
     */
    public function setOrderId(?int $order_id): static
    {
        if (is_null($order_id)) {
            throw new InvalidArgumentException('non-nullable order_id cannot be null');
        }
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets shipping_service_provider
     *
     * @return string|null
     */
    public function getShippingServiceProvider(): ?string
    {
        return $this->container['shipping_service_provider'];
    }

    /**
     * Sets shipping_service_provider
     *
     * @param string|null $shipping_service_provider The name of the shipping service provider
     *
     * @return $this
     */
    public function setShippingServiceProvider(?string $shipping_service_provider): static
    {
        if (is_null($shipping_service_provider)) {
            throw new InvalidArgumentException('non-nullable shipping_service_provider cannot be null');
        }
        $this->container['shipping_service_provider'] = $shipping_service_provider;

        return $this;
    }

    /**
     * Gets transaction_id
     *
     * @return string|null
     */
    public function getTransactionId(): ?string
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     *
     * @param string|null $transaction_id The ID of the transaction
     *
     * @return $this
     */
    public function setTransactionId(?string $transaction_id): static
    {
        if (is_null($transaction_id)) {
            throw new InvalidArgumentException('non-nullable transaction_id cannot be null');
        }
        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }

    /**
     * Gets shipping_status
     *
     * @return string|null
     */
    public function getShippingStatus(): ?string
    {
        return $this->container['shipping_status'];
    }

    /**
     * Sets shipping_status
     *
     * @param string|null $shipping_status The shipping status. Possible values are 'open', 'prepared' and 'registered'.
     *
     * @return $this
     */
    public function setShippingStatus(?string $shipping_status): static
    {
        if (is_null($shipping_status)) {
            throw new InvalidArgumentException('non-nullable shipping_status cannot be null');
        }
        $this->container['shipping_status'] = $shipping_status;

        return $this;
    }

    /**
     * Gets shipping_costs
     *
     * @return float|null
     */
    public function getShippingCosts(): ?float
    {
        return $this->container['shipping_costs'];
    }

    /**
     * Sets shipping_costs
     *
     * @param float|null $shipping_costs The shipping costs
     *
     * @return $this
     */
    public function setShippingCosts(?float $shipping_costs): static
    {
        if (is_null($shipping_costs)) {
            throw new InvalidArgumentException('non-nullable shipping_costs cannot be null');
        }
        $this->container['shipping_costs'] = $shipping_costs;

        return $this;
    }

    /**
     * Gets additional_data
     *
     * @return string|null
     */
    public function getAdditionalData(): ?string
    {
        return $this->container['additional_data'];
    }

    /**
     * Sets additional_data
     *
     * @param string|null $additional_data The additional data. Depending on the shipping service provider selected, this data may contain different information, e.g. shipping service, email address and order ID.
     *
     * @return $this
     */
    public function setAdditionalData(?string $additional_data): static
    {
        if (is_null($additional_data)) {
            throw new InvalidArgumentException('non-nullable additional_data cannot be null');
        }
        $this->container['additional_data'] = $additional_data;

        return $this;
    }

    /**
     * Gets registration_at
     *
     * @return int|null
     */
    public function getRegistrationAt(): ?int
    {
        return $this->container['registration_at'];
    }

    /**
     * Sets registration_at
     *
     * @param int|null $registration_at The date and time the shipment was registered
     *
     * @return $this
     */
    public function setRegistrationAt(?int $registration_at): static
    {
        if (is_null($registration_at)) {
            throw new InvalidArgumentException('non-nullable registration_at cannot be null');
        }
        $this->container['registration_at'] = $registration_at;

        return $this;
    }

    /**
     * Gets shipment_at
     *
     * @return int|null
     */
    public function getShipmentAt(): ?int
    {
        return $this->container['shipment_at'];
    }

    /**
     * Sets shipment_at
     *
     * @param int|null $shipment_at The date the items will be shipped
     *
     * @return $this
     */
    public function setShipmentAt(?int $shipment_at): static
    {
        if (is_null($shipment_at)) {
            throw new InvalidArgumentException('non-nullable shipment_at cannot be null');
        }
        $this->container['shipment_at'] = $shipment_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


