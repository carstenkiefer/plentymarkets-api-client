<?php
/**
 * RestItemsPropertiesPostRequest
 *
 * PHP version 8.1
 *
 * @package  ck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ck\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use ck\ObjectSerializer;

/**
 * RestItemsPropertiesPostRequest Class Doc Comment
 *
 * @package  ck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class RestItemsPropertiesPostRequest implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = '_rest_items_properties_post_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'position' => 'int',
        'unit' => 'string',
        'property_group_id' => 'int',
        'backend_name' => 'string',
        'value_type' => 'string',
        'is_searchable' => 'bool',
        'is_oder_property' => 'bool',
        'is_shown_on_item_page' => 'bool',
        'is_shown_on_item_list' => 'bool',
        'is_shown_at_checkout' => 'bool',
        'is_shown_in_pdf' => 'bool',
        'is_shown_as_additional_costs' => 'bool',
        'comment' => 'string',
        'surcharge' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'position' => null,
        'unit' => null,
        'property_group_id' => null,
        'backend_name' => null,
        'value_type' => null,
        'is_searchable' => null,
        'is_oder_property' => null,
        'is_shown_on_item_page' => null,
        'is_shown_on_item_list' => null,
        'is_shown_at_checkout' => null,
        'is_shown_in_pdf' => null,
        'is_shown_as_additional_costs' => null,
        'comment' => null,
        'surcharge' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'position' => false,
		'unit' => false,
		'property_group_id' => false,
		'backend_name' => false,
		'value_type' => false,
		'is_searchable' => false,
		'is_oder_property' => false,
		'is_shown_on_item_page' => false,
		'is_shown_on_item_list' => false,
		'is_shown_at_checkout' => false,
		'is_shown_in_pdf' => false,
		'is_shown_as_additional_costs' => false,
		'comment' => false,
		'surcharge' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'position' => 'position',
        'unit' => 'unit',
        'property_group_id' => 'propertyGroupId',
        'backend_name' => 'backendName',
        'value_type' => 'valueType',
        'is_searchable' => 'isSearchable',
        'is_oder_property' => 'isOderProperty',
        'is_shown_on_item_page' => 'isShownOnItemPage',
        'is_shown_on_item_list' => 'isShownOnItemList',
        'is_shown_at_checkout' => 'isShownAtCheckout',
        'is_shown_in_pdf' => 'isShownInPdf',
        'is_shown_as_additional_costs' => 'isShownAsAdditionalCosts',
        'comment' => 'comment',
        'surcharge' => 'surcharge'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'position' => 'setPosition',
        'unit' => 'setUnit',
        'property_group_id' => 'setPropertyGroupId',
        'backend_name' => 'setBackendName',
        'value_type' => 'setValueType',
        'is_searchable' => 'setIsSearchable',
        'is_oder_property' => 'setIsOderProperty',
        'is_shown_on_item_page' => 'setIsShownOnItemPage',
        'is_shown_on_item_list' => 'setIsShownOnItemList',
        'is_shown_at_checkout' => 'setIsShownAtCheckout',
        'is_shown_in_pdf' => 'setIsShownInPdf',
        'is_shown_as_additional_costs' => 'setIsShownAsAdditionalCosts',
        'comment' => 'setComment',
        'surcharge' => 'setSurcharge'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'position' => 'getPosition',
        'unit' => 'getUnit',
        'property_group_id' => 'getPropertyGroupId',
        'backend_name' => 'getBackendName',
        'value_type' => 'getValueType',
        'is_searchable' => 'getIsSearchable',
        'is_oder_property' => 'getIsOderProperty',
        'is_shown_on_item_page' => 'getIsShownOnItemPage',
        'is_shown_on_item_list' => 'getIsShownOnItemList',
        'is_shown_at_checkout' => 'getIsShownAtCheckout',
        'is_shown_in_pdf' => 'getIsShownInPdf',
        'is_shown_as_additional_costs' => 'getIsShownAsAdditionalCosts',
        'comment' => 'getComment',
        'surcharge' => 'getSurcharge'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('position', $data ?? [], null);
        $this->setIfExists('unit', $data ?? [], null);
        $this->setIfExists('property_group_id', $data ?? [], null);
        $this->setIfExists('backend_name', $data ?? [], null);
        $this->setIfExists('value_type', $data ?? [], null);
        $this->setIfExists('is_searchable', $data ?? [], null);
        $this->setIfExists('is_oder_property', $data ?? [], null);
        $this->setIfExists('is_shown_on_item_page', $data ?? [], null);
        $this->setIfExists('is_shown_on_item_list', $data ?? [], null);
        $this->setIfExists('is_shown_at_checkout', $data ?? [], null);
        $this->setIfExists('is_shown_in_pdf', $data ?? [], null);
        $this->setIfExists('is_shown_as_additional_costs', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('surcharge', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['backend_name'] === null) {
            $invalidProperties[] = "'backend_name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets position
     *
     * @return int|null
     */
    public function getPosition(): ?int
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param int|null $position The position of the property optional
     *
     * @return $this
     */
    public function setPosition(?int $position): static
    {
        if (is_null($position)) {
            throw new InvalidArgumentException('non-nullable position cannot be null');
        }
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return string|null
     */
    public function getUnit(): ?string
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param string|null $unit The unit of measurement of the property. Value is null if no unit is associated. optional
     *
     * @return $this
     */
    public function setUnit(?string $unit): static
    {
        if (is_null($unit)) {
            throw new InvalidArgumentException('non-nullable unit cannot be null');
        }
        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets property_group_id
     *
     * @return int|null
     */
    public function getPropertyGroupId(): ?int
    {
        return $this->container['property_group_id'];
    }

    /**
     * Sets property_group_id
     *
     * @param int|null $property_group_id The ID of the property group the property is assigned to. Value is null if property is not assigned to a property group. optional
     *
     * @return $this
     */
    public function setPropertyGroupId(?int $property_group_id): static
    {
        if (is_null($property_group_id)) {
            throw new InvalidArgumentException('non-nullable property_group_id cannot be null');
        }
        $this->container['property_group_id'] = $property_group_id;

        return $this;
    }

    /**
     * Gets backend_name
     *
     * @return string
     */
    public function getBackendName(): string
    {
        return $this->container['backend_name'];
    }

    /**
     * Sets backend_name
     *
     * @param string $backend_name The backend name of the property. The back end name is not visible to customers.
     *
     * @return $this
     */
    public function setBackendName(string $backend_name): static
    {
        if (is_null($backend_name)) {
            throw new InvalidArgumentException('non-nullable backend_name cannot be null');
        }
        $this->container['backend_name'] = $backend_name;

        return $this;
    }

    /**
     * Gets value_type
     *
     * @return string|null
     */
    public function getValueType(): ?string
    {
        return $this->container['value_type'];
    }

    /**
     * Sets value_type
     *
     * @param string|null $value_type Permitted property values are: empty = No property typeint = A whole number can be saved for an item, e.g. a size.float = A number with decimal places can be saved for an item, e.g. a measurement.selection = One of several options can be saved for the item. The values of the property value Selection can be managed using the route PropertySelection.text = Text can be saved for an item.file = A file can be saved for an item. optional allowed values are empty, int, float, selection, text, file
     *
     * @return $this
     */
    public function setValueType(?string $value_type): static
    {
        if (is_null($value_type)) {
            throw new InvalidArgumentException('non-nullable value_type cannot be null');
        }
        $this->container['value_type'] = $value_type;

        return $this;
    }

    /**
     * Gets is_searchable
     *
     * @return bool|null
     */
    public function getIsSearchable(): ?bool
    {
        return $this->container['is_searchable'];
    }

    /**
     * Sets is_searchable
     *
     * @param bool|null $is_searchable Flag that indicates if items can be found by entering the property name as a search term. optional
     *
     * @return $this
     */
    public function setIsSearchable(?bool $is_searchable): static
    {
        if (is_null($is_searchable)) {
            throw new InvalidArgumentException('non-nullable is_searchable cannot be null');
        }
        $this->container['is_searchable'] = $is_searchable;

        return $this;
    }

    /**
     * Gets is_oder_property
     *
     * @return bool|null
     */
    public function getIsOderProperty(): ?bool
    {
        return $this->container['is_oder_property'];
    }

    /**
     * Sets is_oder_property
     *
     * @param bool|null $is_oder_property Flag that indicates if the property is available in the order process. Depending on the property type, customers e.g. can enter a text or value or select an option from a drop-down list. optional
     *
     * @return $this
     */
    public function setIsOderProperty(?bool $is_oder_property): static
    {
        if (is_null($is_oder_property)) {
            throw new InvalidArgumentException('non-nullable is_oder_property cannot be null');
        }
        $this->container['is_oder_property'] = $is_oder_property;

        return $this;
    }

    /**
     * Gets is_shown_on_item_page
     *
     * @return bool|null
     */
    public function getIsShownOnItemPage(): ?bool
    {
        return $this->container['is_shown_on_item_page'];
    }

    /**
     * Sets is_shown_on_item_page
     *
     * @param bool|null $is_shown_on_item_page Flag that indicates if the property will be shown on the item's page in the online store- optional
     *
     * @return $this
     */
    public function setIsShownOnItemPage(?bool $is_shown_on_item_page): static
    {
        if (is_null($is_shown_on_item_page)) {
            throw new InvalidArgumentException('non-nullable is_shown_on_item_page cannot be null');
        }
        $this->container['is_shown_on_item_page'] = $is_shown_on_item_page;

        return $this;
    }

    /**
     * Gets is_shown_on_item_list
     *
     * @return bool|null
     */
    public function getIsShownOnItemList(): ?bool
    {
        return $this->container['is_shown_on_item_list'];
    }

    /**
     * Sets is_shown_on_item_list
     *
     * @param bool|null $is_shown_on_item_list Flag that indicates if the property will be shown in the item listing in the online store. optional
     *
     * @return $this
     */
    public function setIsShownOnItemList(?bool $is_shown_on_item_list): static
    {
        if (is_null($is_shown_on_item_list)) {
            throw new InvalidArgumentException('non-nullable is_shown_on_item_list cannot be null');
        }
        $this->container['is_shown_on_item_list'] = $is_shown_on_item_list;

        return $this;
    }

    /**
     * Gets is_shown_at_checkout
     *
     * @return bool|null
     */
    public function getIsShownAtCheckout(): ?bool
    {
        return $this->container['is_shown_at_checkout'];
    }

    /**
     * Sets is_shown_at_checkout
     *
     * @param bool|null $is_shown_at_checkout Flag that indicates if the property will be shown in the order process. optional
     *
     * @return $this
     */
    public function setIsShownAtCheckout(?bool $is_shown_at_checkout): static
    {
        if (is_null($is_shown_at_checkout)) {
            throw new InvalidArgumentException('non-nullable is_shown_at_checkout cannot be null');
        }
        $this->container['is_shown_at_checkout'] = $is_shown_at_checkout;

        return $this;
    }

    /**
     * Gets is_shown_in_pdf
     *
     * @return bool|null
     */
    public function getIsShownInPdf(): ?bool
    {
        return $this->container['is_shown_in_pdf'];
    }

    /**
     * Sets is_shown_in_pdf
     *
     * @param bool|null $is_shown_in_pdf Flag that indicates if the property will be shown in PDF documents. optional
     *
     * @return $this
     */
    public function setIsShownInPdf(?bool $is_shown_in_pdf): static
    {
        if (is_null($is_shown_in_pdf)) {
            throw new InvalidArgumentException('non-nullable is_shown_in_pdf cannot be null');
        }
        $this->container['is_shown_in_pdf'] = $is_shown_in_pdf;

        return $this;
    }

    /**
     * Gets is_shown_as_additional_costs
     *
     * @return bool|null
     */
    public function getIsShownAsAdditionalCosts(): ?bool
    {
        return $this->container['is_shown_as_additional_costs'];
    }

    /**
     * Sets is_shown_as_additional_costs
     *
     * @param bool|null $is_shown_as_additional_costs Display as additional costs optional
     *
     * @return $this
     */
    public function setIsShownAsAdditionalCosts(?bool $is_shown_as_additional_costs): static
    {
        if (is_null($is_shown_as_additional_costs)) {
            throw new InvalidArgumentException('non-nullable is_shown_as_additional_costs cannot be null');
        }
        $this->container['is_shown_as_additional_costs'] = $is_shown_as_additional_costs;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment(): ?string
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment Internal comment/note saved for the property. Internal comments are not visible to customers. optional
     *
     * @return $this
     */
    public function setComment(?string $comment): static
    {
        if (is_null($comment)) {
            throw new InvalidArgumentException('non-nullable comment cannot be null');
        }
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets surcharge
     *
     * @return float|null
     */
    public function getSurcharge(): ?float
    {
        return $this->container['surcharge'];
    }

    /**
     * Sets surcharge
     *
     * @param float|null $surcharge The surcharge for the property. Surcharges will automatically be added to the item price in the detailed view of an item and in the order process. The default value is 0.00, i.e. no surcharge. In the plentymarkets front end, the template variable PriceDynamic displays the price of a variation including the surcharge. optional
     *
     * @return $this
     */
    public function setSurcharge(?float $surcharge): static
    {
        if (is_null($surcharge)) {
            throw new InvalidArgumentException('non-nullable surcharge cannot be null');
        }
        $this->container['surcharge'] = $surcharge;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


