<?php
/**
 * RestItemsPutRequest
 *
 * PHP version 8.1
 *
 * @package  ck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ck\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use ck\ObjectSerializer;

/**
 * RestItemsPutRequest Class Doc Comment
 *
 * @package  ck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class RestItemsPutRequest implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = '_rest_items_put_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'int',
        'position' => 'int',
        'stock_type' => 'int',
        'store_special' => 'int',
        'owner_id' => 'int',
        'manufacturer_id' => 'int',
        'created_at' => 'string',
        'customs_tariff_number' => 'string',
        'revenue_account' => 'int',
        'coupon_restriction' => 'int',
        'condition' => 'int',
        'condition_api' => 'int',
        'is_subscribable' => 'bool',
        'is_shipping_package' => 'bool',
        'amazon_fba_platform' => 'int',
        'is_shippable_by_amazon' => 'bool',
        'amazon_product_type' => 'int',
        'amazon_fedas' => 'string',
        'ebay_preset_id' => 'int',
        'ebay_category' => 'int',
        'ebay_category2' => 'int',
        'ebay_store_category' => 'int',
        'ebay_store_category2' => 'int',
        'rakuten_category_id' => 'int',
        'flag_one' => 'int',
        'flag_two' => 'int',
        'age_restriction' => 'int',
        'feedback' => 'int',
        'ebay_titles' => '\ck\Model\ItemEbayTitle[]',
        'title' => 'string',
        'item_shipping_profiles' => '\ck\Model\ItemShippingProfiles[]',
        'profile_id' => 'int',
        'item_properties' => '\ck\Model\ItemProperty[]',
        'property_id' => 'int',
        'property_selection_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => null,
        'position' => null,
        'stock_type' => null,
        'store_special' => null,
        'owner_id' => null,
        'manufacturer_id' => null,
        'created_at' => null,
        'customs_tariff_number' => null,
        'revenue_account' => null,
        'coupon_restriction' => null,
        'condition' => null,
        'condition_api' => null,
        'is_subscribable' => null,
        'is_shipping_package' => null,
        'amazon_fba_platform' => null,
        'is_shippable_by_amazon' => null,
        'amazon_product_type' => null,
        'amazon_fedas' => null,
        'ebay_preset_id' => null,
        'ebay_category' => null,
        'ebay_category2' => null,
        'ebay_store_category' => null,
        'ebay_store_category2' => null,
        'rakuten_category_id' => null,
        'flag_one' => null,
        'flag_two' => null,
        'age_restriction' => null,
        'feedback' => null,
        'ebay_titles' => null,
        'title' => null,
        'item_shipping_profiles' => null,
        'profile_id' => null,
        'item_properties' => null,
        'property_id' => null,
        'property_selection_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
		'position' => false,
		'stock_type' => false,
		'store_special' => false,
		'owner_id' => false,
		'manufacturer_id' => false,
		'created_at' => false,
		'customs_tariff_number' => false,
		'revenue_account' => false,
		'coupon_restriction' => false,
		'condition' => false,
		'condition_api' => false,
		'is_subscribable' => false,
		'is_shipping_package' => false,
		'amazon_fba_platform' => false,
		'is_shippable_by_amazon' => false,
		'amazon_product_type' => false,
		'amazon_fedas' => false,
		'ebay_preset_id' => false,
		'ebay_category' => false,
		'ebay_category2' => false,
		'ebay_store_category' => false,
		'ebay_store_category2' => false,
		'rakuten_category_id' => false,
		'flag_one' => false,
		'flag_two' => false,
		'age_restriction' => false,
		'feedback' => false,
		'ebay_titles' => false,
		'title' => false,
		'item_shipping_profiles' => false,
		'profile_id' => false,
		'item_properties' => false,
		'property_id' => false,
		'property_selection_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'position' => 'position',
        'stock_type' => 'stockType',
        'store_special' => 'storeSpecial',
        'owner_id' => 'ownerId',
        'manufacturer_id' => 'manufacturerId',
        'created_at' => 'createdAt',
        'customs_tariff_number' => 'customsTariffNumber',
        'revenue_account' => 'revenueAccount',
        'coupon_restriction' => 'couponRestriction',
        'condition' => 'condition',
        'condition_api' => 'conditionApi',
        'is_subscribable' => 'isSubscribable',
        'is_shipping_package' => 'isShippingPackage',
        'amazon_fba_platform' => 'amazonFbaPlatform',
        'is_shippable_by_amazon' => 'isShippableByAmazon',
        'amazon_product_type' => 'amazonProductType',
        'amazon_fedas' => 'amazonFedas',
        'ebay_preset_id' => 'ebayPresetId',
        'ebay_category' => 'ebayCategory',
        'ebay_category2' => 'ebayCategory2',
        'ebay_store_category' => 'ebayStoreCategory',
        'ebay_store_category2' => 'ebayStoreCategory2',
        'rakuten_category_id' => 'rakutenCategoryId',
        'flag_one' => 'flagOne',
        'flag_two' => 'flagTwo',
        'age_restriction' => 'ageRestriction',
        'feedback' => 'feedback',
        'ebay_titles' => 'ebayTitles',
        'title' => 'title',
        'item_shipping_profiles' => 'itemShippingProfiles',
        'profile_id' => 'profileId',
        'item_properties' => 'itemProperties',
        'property_id' => 'propertyId',
        'property_selection_id' => 'propertySelectionId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'position' => 'setPosition',
        'stock_type' => 'setStockType',
        'store_special' => 'setStoreSpecial',
        'owner_id' => 'setOwnerId',
        'manufacturer_id' => 'setManufacturerId',
        'created_at' => 'setCreatedAt',
        'customs_tariff_number' => 'setCustomsTariffNumber',
        'revenue_account' => 'setRevenueAccount',
        'coupon_restriction' => 'setCouponRestriction',
        'condition' => 'setCondition',
        'condition_api' => 'setConditionApi',
        'is_subscribable' => 'setIsSubscribable',
        'is_shipping_package' => 'setIsShippingPackage',
        'amazon_fba_platform' => 'setAmazonFbaPlatform',
        'is_shippable_by_amazon' => 'setIsShippableByAmazon',
        'amazon_product_type' => 'setAmazonProductType',
        'amazon_fedas' => 'setAmazonFedas',
        'ebay_preset_id' => 'setEbayPresetId',
        'ebay_category' => 'setEbayCategory',
        'ebay_category2' => 'setEbayCategory2',
        'ebay_store_category' => 'setEbayStoreCategory',
        'ebay_store_category2' => 'setEbayStoreCategory2',
        'rakuten_category_id' => 'setRakutenCategoryId',
        'flag_one' => 'setFlagOne',
        'flag_two' => 'setFlagTwo',
        'age_restriction' => 'setAgeRestriction',
        'feedback' => 'setFeedback',
        'ebay_titles' => 'setEbayTitles',
        'title' => 'setTitle',
        'item_shipping_profiles' => 'setItemShippingProfiles',
        'profile_id' => 'setProfileId',
        'item_properties' => 'setItemProperties',
        'property_id' => 'setPropertyId',
        'property_selection_id' => 'setPropertySelectionId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'position' => 'getPosition',
        'stock_type' => 'getStockType',
        'store_special' => 'getStoreSpecial',
        'owner_id' => 'getOwnerId',
        'manufacturer_id' => 'getManufacturerId',
        'created_at' => 'getCreatedAt',
        'customs_tariff_number' => 'getCustomsTariffNumber',
        'revenue_account' => 'getRevenueAccount',
        'coupon_restriction' => 'getCouponRestriction',
        'condition' => 'getCondition',
        'condition_api' => 'getConditionApi',
        'is_subscribable' => 'getIsSubscribable',
        'is_shipping_package' => 'getIsShippingPackage',
        'amazon_fba_platform' => 'getAmazonFbaPlatform',
        'is_shippable_by_amazon' => 'getIsShippableByAmazon',
        'amazon_product_type' => 'getAmazonProductType',
        'amazon_fedas' => 'getAmazonFedas',
        'ebay_preset_id' => 'getEbayPresetId',
        'ebay_category' => 'getEbayCategory',
        'ebay_category2' => 'getEbayCategory2',
        'ebay_store_category' => 'getEbayStoreCategory',
        'ebay_store_category2' => 'getEbayStoreCategory2',
        'rakuten_category_id' => 'getRakutenCategoryId',
        'flag_one' => 'getFlagOne',
        'flag_two' => 'getFlagTwo',
        'age_restriction' => 'getAgeRestriction',
        'feedback' => 'getFeedback',
        'ebay_titles' => 'getEbayTitles',
        'title' => 'getTitle',
        'item_shipping_profiles' => 'getItemShippingProfiles',
        'profile_id' => 'getProfileId',
        'item_properties' => 'getItemProperties',
        'property_id' => 'getPropertyId',
        'property_selection_id' => 'getPropertySelectionId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('position', $data ?? [], null);
        $this->setIfExists('stock_type', $data ?? [], null);
        $this->setIfExists('store_special', $data ?? [], null);
        $this->setIfExists('owner_id', $data ?? [], null);
        $this->setIfExists('manufacturer_id', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('customs_tariff_number', $data ?? [], null);
        $this->setIfExists('revenue_account', $data ?? [], null);
        $this->setIfExists('coupon_restriction', $data ?? [], null);
        $this->setIfExists('condition', $data ?? [], null);
        $this->setIfExists('condition_api', $data ?? [], null);
        $this->setIfExists('is_subscribable', $data ?? [], null);
        $this->setIfExists('is_shipping_package', $data ?? [], null);
        $this->setIfExists('amazon_fba_platform', $data ?? [], null);
        $this->setIfExists('is_shippable_by_amazon', $data ?? [], null);
        $this->setIfExists('amazon_product_type', $data ?? [], null);
        $this->setIfExists('amazon_fedas', $data ?? [], null);
        $this->setIfExists('ebay_preset_id', $data ?? [], null);
        $this->setIfExists('ebay_category', $data ?? [], null);
        $this->setIfExists('ebay_category2', $data ?? [], null);
        $this->setIfExists('ebay_store_category', $data ?? [], null);
        $this->setIfExists('ebay_store_category2', $data ?? [], null);
        $this->setIfExists('rakuten_category_id', $data ?? [], null);
        $this->setIfExists('flag_one', $data ?? [], null);
        $this->setIfExists('flag_two', $data ?? [], null);
        $this->setIfExists('age_restriction', $data ?? [], null);
        $this->setIfExists('feedback', $data ?? [], null);
        $this->setIfExists('ebay_titles', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('item_shipping_profiles', $data ?? [], null);
        $this->setIfExists('profile_id', $data ?? [], null);
        $this->setIfExists('item_properties', $data ?? [], null);
        $this->setIfExists('property_id', $data ?? [], null);
        $this->setIfExists('property_selection_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['age_restriction'] === null) {
            $invalidProperties[] = "'age_restriction' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ($this->container['profile_id'] === null) {
            $invalidProperties[] = "'profile_id' can't be null";
        }
        if ($this->container['property_id'] === null) {
            $invalidProperties[] = "'property_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId(): int
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The ID of the item. The ID must be unique.
     *
     * @return $this
     */
    public function setId(int $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets position
     *
     * @return int|null
     */
    public function getPosition(): ?int
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param int|null $position The position of the item optional
     *
     * @return $this
     */
    public function setPosition(?int $position): static
    {
        if (is_null($position)) {
            throw new InvalidArgumentException('non-nullable position cannot be null');
        }
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets stock_type
     *
     * @return int|null
     */
    public function getStockType(): ?int
    {
        return $this->container['stock_type'];
    }

    /**
     * Sets stock_type
     *
     * @param int|null $stock_type The stock type of the item. Possible values:0 = Stocked item (default)1 = Production item2 = Colli3 = Special order item optional allowed values are 0, 1, 2, 3
     *
     * @return $this
     */
    public function setStockType(?int $stock_type): static
    {
        if (is_null($stock_type)) {
            throw new InvalidArgumentException('non-nullable stock_type cannot be null');
        }
        $this->container['stock_type'] = $stock_type;

        return $this;
    }

    /**
     * Gets store_special
     *
     * @return int|null
     */
    public function getStoreSpecial(): ?int
    {
        return $this->container['store_special'];
    }

    /**
     * Sets store_special
     *
     * @param int|null $store_special Option to present items more prominently in the online store.1 = Special offer2 = New items3 = Top items optional allowed values are 0, 1, 2, 3
     *
     * @return $this
     */
    public function setStoreSpecial(?int $store_special): static
    {
        if (is_null($store_special)) {
            throw new InvalidArgumentException('non-nullable store_special cannot be null');
        }
        $this->container['store_special'] = $store_special;

        return $this;
    }

    /**
     * Gets owner_id
     *
     * @return int|null
     */
    public function getOwnerId(): ?int
    {
        return $this->container['owner_id'];
    }

    /**
     * Sets owner_id
     *
     * @param int|null $owner_id The plentymarkets user that is assigned as owner of this item. optional
     *
     * @return $this
     */
    public function setOwnerId(?int $owner_id): static
    {
        if (is_null($owner_id)) {
            throw new InvalidArgumentException('non-nullable owner_id cannot be null');
        }
        $this->container['owner_id'] = $owner_id;

        return $this;
    }

    /**
     * Gets manufacturer_id
     *
     * @return int|null
     */
    public function getManufacturerId(): ?int
    {
        return $this->container['manufacturer_id'];
    }

    /**
     * Sets manufacturer_id
     *
     * @param int|null $manufacturer_id The ID of the manufacturer of the item optional
     *
     * @return $this
     */
    public function setManufacturerId(?int $manufacturer_id): static
    {
        if (is_null($manufacturer_id)) {
            throw new InvalidArgumentException('non-nullable manufacturer_id cannot be null');
        }
        $this->container['manufacturer_id'] = $manufacturer_id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt(): ?string
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at Timestamp of the date and time the item was created. optional
     *
     * @return $this
     */
    public function setCreatedAt(?string $created_at): static
    {
        if (is_null($created_at)) {
            throw new InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets customs_tariff_number
     *
     * @return string|null
     */
    public function getCustomsTariffNumber(): ?string
    {
        return $this->container['customs_tariff_number'];
    }

    /**
     * Sets customs_tariff_number
     *
     * @param string|null $customs_tariff_number Deprecated: The customs tariff number of the item; usually a 11 digit code number based on the Harmonised System optional
     *
     * @return $this
     */
    public function setCustomsTariffNumber(?string $customs_tariff_number): static
    {
        if (is_null($customs_tariff_number)) {
            throw new InvalidArgumentException('non-nullable customs_tariff_number cannot be null');
        }
        $this->container['customs_tariff_number'] = $customs_tariff_number;

        return $this;
    }

    /**
     * Gets revenue_account
     *
     * @return int|null
     */
    public function getRevenueAccount(): ?int
    {
        return $this->container['revenue_account'];
    }

    /**
     * Sets revenue_account
     *
     * @param int|null $revenue_account The revenue account the item is linked to. An individual revenue account can be saved for each item in plentymarkets. If this is not done, plentymarkets automatically determines a revenue account based on the VAT rate. optional
     *
     * @return $this
     */
    public function setRevenueAccount(?int $revenue_account): static
    {
        if (is_null($revenue_account)) {
            throw new InvalidArgumentException('non-nullable revenue_account cannot be null');
        }
        $this->container['revenue_account'] = $revenue_account;

        return $this;
    }

    /**
     * Gets coupon_restriction
     *
     * @return int|null
     */
    public function getCouponRestriction(): ?int
    {
        return $this->container['coupon_restriction'];
    }

    /**
     * Sets coupon_restriction
     *
     * @param int|null $coupon_restriction Indicates if the item can be purchased using a promotional coupon.0 = Permitted1 = Not permitted2 = Purchasable with coupon only optional allowed values are 0, 1, 2
     *
     * @return $this
     */
    public function setCouponRestriction(?int $coupon_restriction): static
    {
        if (is_null($coupon_restriction)) {
            throw new InvalidArgumentException('non-nullable coupon_restriction cannot be null');
        }
        $this->container['coupon_restriction'] = $coupon_restriction;

        return $this;
    }

    /**
     * Gets condition
     *
     * @return int|null
     */
    public function getCondition(): ?int
    {
        return $this->container['condition'];
    }

    /**
     * Sets condition
     *
     * @param int|null $condition The condition of the item. Possible values:0 = New1 = Used2 = Boxed as new3 = New with label4 = Factory seconds optional allowed values are 0, 1, 2, 3, 4
     *
     * @return $this
     */
    public function setCondition(?int $condition): static
    {
        if (is_null($condition)) {
            throw new InvalidArgumentException('non-nullable condition cannot be null');
        }
        $this->container['condition'] = $condition;

        return $this;
    }

    /**
     * Gets condition_api
     *
     * @return int|null
     */
    public function getConditionApi(): ?int
    {
        return $this->container['condition_api'];
    }

    /**
     * Sets condition_api
     *
     * @param int|null $condition_api The condition of the item that is transferred to markets via API.0 = New1 = Used but as new2 = Used but very good3 = Used but good4 = Used but acceptable5 = Factory seconds optional allowed values are 0, 1, 2, 3, 4, 5
     *
     * @return $this
     */
    public function setConditionApi(?int $condition_api): static
    {
        if (is_null($condition_api)) {
            throw new InvalidArgumentException('non-nullable condition_api cannot be null');
        }
        $this->container['condition_api'] = $condition_api;

        return $this;
    }

    /**
     * Gets is_subscribable
     *
     * @return bool|null
     */
    public function getIsSubscribable(): ?bool
    {
        return $this->container['is_subscribable'];
    }

    /**
     * Sets is_subscribable
     *
     * @param bool|null $is_subscribable Flag that indicates if the item can be ordered as a subscription item. If yes, the item can be ordered for delivery at regular intervals. optional
     *
     * @return $this
     */
    public function setIsSubscribable(?bool $is_subscribable): static
    {
        if (is_null($is_subscribable)) {
            throw new InvalidArgumentException('non-nullable is_subscribable cannot be null');
        }
        $this->container['is_subscribable'] = $is_subscribable;

        return $this;
    }

    /**
     * Gets is_shipping_package
     *
     * @return bool|null
     */
    public function getIsShippingPackage(): ?bool
    {
        return $this->container['is_shipping_package'];
    }

    /**
     * Sets is_shipping_package
     *
     * @param bool|null $is_shipping_package Flag that indicates if a shipping package is to be used for this item. If yes and the variation's dimensions are entered in the Settings tab of a variation, the correct shipping package is assigned automatically. optional
     *
     * @return $this
     */
    public function setIsShippingPackage(?bool $is_shipping_package): static
    {
        if (is_null($is_shipping_package)) {
            throw new InvalidArgumentException('non-nullable is_shipping_package cannot be null');
        }
        $this->container['is_shipping_package'] = $is_shipping_package;

        return $this;
    }

    /**
     * Gets amazon_fba_platform
     *
     * @return int|null
     */
    public function getAmazonFbaPlatform(): ?int
    {
        return $this->container['amazon_fba_platform'];
    }

    /**
     * Sets amazon_fba_platform
     *
     * @param int|null $amazon_fba_platform Indicates the platform used for Fulfilment by Amazon (FBA). 0 = Do not use1 = AMAZON EU (Europe)2 = AMAZON FE (Far East)3 = AMAZON NA (North America) optional allowed values are 0, 1, 2, 3
     *
     * @return $this
     */
    public function setAmazonFbaPlatform(?int $amazon_fba_platform): static
    {
        if (is_null($amazon_fba_platform)) {
            throw new InvalidArgumentException('non-nullable amazon_fba_platform cannot be null');
        }
        $this->container['amazon_fba_platform'] = $amazon_fba_platform;

        return $this;
    }

    /**
     * Gets is_shippable_by_amazon
     *
     * @return bool|null
     */
    public function getIsShippableByAmazon(): ?bool
    {
        return $this->container['is_shippable_by_amazon'];
    }

    /**
     * Sets is_shippable_by_amazon
     *
     * @param bool|null $is_shippable_by_amazon Flag that indicates if the item can be shipped with Amazon Multi-Channel. Amazon Multi-Channel Fulfillment is a service for fulfilling orders from sales channels other than Amazon platforms using inventory stored in the Amazon fulfillment center. optional
     *
     * @return $this
     */
    public function setIsShippableByAmazon(?bool $is_shippable_by_amazon): static
    {
        if (is_null($is_shippable_by_amazon)) {
            throw new InvalidArgumentException('non-nullable is_shippable_by_amazon cannot be null');
        }
        $this->container['is_shippable_by_amazon'] = $is_shippable_by_amazon;

        return $this;
    }

    /**
     * Gets amazon_product_type
     *
     * @return int|null
     */
    public function getAmazonProductType(): ?int
    {
        return $this->container['amazon_product_type'];
    }

    /**
     * Sets amazon_product_type
     *
     * @param int|null $amazon_product_type The Amazon product type of the item. List of IDs: https://www.plentymarkets.co.uk/manual/data-exchange/data-formats/item/ optional
     *
     * @return $this
     */
    public function setAmazonProductType(?int $amazon_product_type): static
    {
        if (is_null($amazon_product_type)) {
            throw new InvalidArgumentException('non-nullable amazon_product_type cannot be null');
        }
        $this->container['amazon_product_type'] = $amazon_product_type;

        return $this;
    }

    /**
     * Gets amazon_fedas
     *
     * @return string|null
     */
    public function getAmazonFedas(): ?string
    {
        return $this->container['amazon_fedas'];
    }

    /**
     * Sets amazon_fedas
     *
     * @param string|null $amazon_fedas The FEDAS product classification key of the item. optional
     *
     * @return $this
     */
    public function setAmazonFedas(?string $amazon_fedas): static
    {
        if (is_null($amazon_fedas)) {
            throw new InvalidArgumentException('non-nullable amazon_fedas cannot be null');
        }
        $this->container['amazon_fedas'] = $amazon_fedas;

        return $this;
    }

    /**
     * Gets ebay_preset_id
     *
     * @return int|null
     */
    public function getEbayPresetId(): ?int
    {
        return $this->container['ebay_preset_id'];
    }

    /**
     * Sets ebay_preset_id
     *
     * @param int|null $ebay_preset_id The eBay preset ID. This plentymarkets ID must be specified to save values for $ebayCategory, $ebayCategory2, $ebayStoreCategory and $ebayStoreCategory2. optional
     *
     * @return $this
     */
    public function setEbayPresetId(?int $ebay_preset_id): static
    {
        if (is_null($ebay_preset_id)) {
            throw new InvalidArgumentException('non-nullable ebay_preset_id cannot be null');
        }
        $this->container['ebay_preset_id'] = $ebay_preset_id;

        return $this;
    }

    /**
     * Gets ebay_category
     *
     * @return int|null
     */
    public function getEbayCategory(): ?int
    {
        return $this->container['ebay_category'];
    }

    /**
     * Sets ebay_category
     *
     * @param int|null $ebay_category The eBay category 1 of the item. This category is used when a new listing is created. optional
     *
     * @return $this
     */
    public function setEbayCategory(?int $ebay_category): static
    {
        if (is_null($ebay_category)) {
            throw new InvalidArgumentException('non-nullable ebay_category cannot be null');
        }
        $this->container['ebay_category'] = $ebay_category;

        return $this;
    }

    /**
     * Gets ebay_category2
     *
     * @return int|null
     */
    public function getEbayCategory2(): ?int
    {
        return $this->container['ebay_category2'];
    }

    /**
     * Sets ebay_category2
     *
     * @param int|null $ebay_category2 The eBay category 2 of the item. This category is used when a new listing is created. optional
     *
     * @return $this
     */
    public function setEbayCategory2(?int $ebay_category2): static
    {
        if (is_null($ebay_category2)) {
            throw new InvalidArgumentException('non-nullable ebay_category2 cannot be null');
        }
        $this->container['ebay_category2'] = $ebay_category2;

        return $this;
    }

    /**
     * Gets ebay_store_category
     *
     * @return int|null
     */
    public function getEbayStoreCategory(): ?int
    {
        return $this->container['ebay_store_category'];
    }

    /**
     * Sets ebay_store_category
     *
     * @param int|null $ebay_store_category The ID of the eBay store category 1 of the item. This value is used for new listings. optional
     *
     * @return $this
     */
    public function setEbayStoreCategory(?int $ebay_store_category): static
    {
        if (is_null($ebay_store_category)) {
            throw new InvalidArgumentException('non-nullable ebay_store_category cannot be null');
        }
        $this->container['ebay_store_category'] = $ebay_store_category;

        return $this;
    }

    /**
     * Gets ebay_store_category2
     *
     * @return int|null
     */
    public function getEbayStoreCategory2(): ?int
    {
        return $this->container['ebay_store_category2'];
    }

    /**
     * Sets ebay_store_category2
     *
     * @param int|null $ebay_store_category2 The ID of the eBay store category 2 of the item. This value is used for new listings. optional
     *
     * @return $this
     */
    public function setEbayStoreCategory2(?int $ebay_store_category2): static
    {
        if (is_null($ebay_store_category2)) {
            throw new InvalidArgumentException('non-nullable ebay_store_category2 cannot be null');
        }
        $this->container['ebay_store_category2'] = $ebay_store_category2;

        return $this;
    }

    /**
     * Gets rakuten_category_id
     *
     * @return int|null
     */
    public function getRakutenCategoryId(): ?int
    {
        return $this->container['rakuten_category_id'];
    }

    /**
     * Sets rakuten_category_id
     *
     * @param int|null $rakuten_category_id The ID of the Rakuten category of this item. optional
     *
     * @return $this
     */
    public function setRakutenCategoryId(?int $rakuten_category_id): static
    {
        if (is_null($rakuten_category_id)) {
            throw new InvalidArgumentException('non-nullable rakuten_category_id cannot be null');
        }
        $this->container['rakuten_category_id'] = $rakuten_category_id;

        return $this;
    }

    /**
     * Gets flag_one
     *
     * @return int|null
     */
    public function getFlagOne(): ?int
    {
        return $this->container['flag_one'];
    }

    /**
     * Sets flag_one
     *
     * @param int|null $flag_one Flag 1 of the item. Flags can be used to organise and filter items. Each item can be assigned up to two flags. Possible values: 1 to 31, 0 = no flag optional allowed values are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31
     *
     * @return $this
     */
    public function setFlagOne(?int $flag_one): static
    {
        if (is_null($flag_one)) {
            throw new InvalidArgumentException('non-nullable flag_one cannot be null');
        }
        $this->container['flag_one'] = $flag_one;

        return $this;
    }

    /**
     * Gets flag_two
     *
     * @return int|null
     */
    public function getFlagTwo(): ?int
    {
        return $this->container['flag_two'];
    }

    /**
     * Sets flag_two
     *
     * @param int|null $flag_two Flag 2 of the item. Flags can be used to organise and filter items. Each item can be assigned up to two flags. Possible values: 1 to 11, 0 = no flag optional allowed values are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11
     *
     * @return $this
     */
    public function setFlagTwo(?int $flag_two): static
    {
        if (is_null($flag_two)) {
            throw new InvalidArgumentException('non-nullable flag_two cannot be null');
        }
        $this->container['flag_two'] = $flag_two;

        return $this;
    }

    /**
     * Gets age_restriction
     *
     * @return int
     */
    public function getAgeRestriction(): int
    {
        return $this->container['age_restriction'];
    }

    /**
     * Sets age_restriction
     *
     * @param int $age_restriction The age customers must be to purchase the item. Items with an age rating of 18+ must be linked to a shipping profile for which the PostIdent option is activated.0 = None available3 = Released for ages 3 and up6 = Ages 6 and up9 = Ages 9 and up12 = Ages 12 and up14 = Ages 14 and up16 = Ages 16 and up18 = Ages 18 and up50 = Not marked88 = Not 99 = Unknown optional allowed values are 0, 3, 6, 9, 12, 14, 16, 18, 50, 88, 99
     *
     * @return $this
     */
    public function setAgeRestriction(int $age_restriction): static
    {
        if (is_null($age_restriction)) {
            throw new InvalidArgumentException('non-nullable age_restriction cannot be null');
        }
        $this->container['age_restriction'] = $age_restriction;

        return $this;
    }

    /**
     * Gets feedback
     *
     * @return int|null
     */
    public function getFeedback(): ?int
    {
        return $this->container['feedback'];
    }

    /**
     * Sets feedback
     *
     * @param int|null $feedback The feedback, i.e. rating, that this item received. Possible values are 1 to 5 or 1 to 10 depending on the maximum rating setting. An initial feedback can be saved for items. The saved value will then be displayed as the initial feedback. Every time new feedback is submitted, the average value will be recalculated automatically. optional
     *
     * @return $this
     */
    public function setFeedback(?int $feedback): static
    {
        if (is_null($feedback)) {
            throw new InvalidArgumentException('non-nullable feedback cannot be null');
        }
        $this->container['feedback'] = $feedback;

        return $this;
    }

    /**
     * Gets ebay_titles
     *
     * @return \ck\Model\ItemEbayTitle[]|null
     */
    public function getEbayTitles(): ?array
    {
        return $this->container['ebay_titles'];
    }

    /**
     * Sets ebay_titles
     *
     * @param \ck\Model\ItemEbayTitle[]|null $ebay_titles ebay_titles
     *
     * @return $this
     */
    public function setEbayTitles(?array $ebay_titles): static
    {
        if (is_null($ebay_titles)) {
            throw new InvalidArgumentException('non-nullable ebay_titles cannot be null');
        }
        $this->container['ebay_titles'] = $ebay_titles;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle(): string
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title The title.
     *
     * @return $this
     */
    public function setTitle(string $title): static
    {
        if (is_null($title)) {
            throw new InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets item_shipping_profiles
     *
     * @return \ck\Model\ItemShippingProfiles[]|null
     */
    public function getItemShippingProfiles(): ?array
    {
        return $this->container['item_shipping_profiles'];
    }

    /**
     * Sets item_shipping_profiles
     *
     * @param \ck\Model\ItemShippingProfiles[]|null $item_shipping_profiles item_shipping_profiles
     *
     * @return $this
     */
    public function setItemShippingProfiles(?array $item_shipping_profiles): static
    {
        if (is_null($item_shipping_profiles)) {
            throw new InvalidArgumentException('non-nullable item_shipping_profiles cannot be null');
        }
        $this->container['item_shipping_profiles'] = $item_shipping_profiles;

        return $this;
    }

    /**
     * Gets profile_id
     *
     * @return int
     */
    public function getProfileId(): int
    {
        return $this->container['profile_id'];
    }

    /**
     * Sets profile_id
     *
     * @param int $profile_id The unique ID of the shipping profile
     *
     * @return $this
     */
    public function setProfileId(int $profile_id): static
    {
        if (is_null($profile_id)) {
            throw new InvalidArgumentException('non-nullable profile_id cannot be null');
        }
        $this->container['profile_id'] = $profile_id;

        return $this;
    }

    /**
     * Gets item_properties
     *
     * @return \ck\Model\ItemProperty[]|null
     */
    public function getItemProperties(): ?array
    {
        return $this->container['item_properties'];
    }

    /**
     * Sets item_properties
     *
     * @param \ck\Model\ItemProperty[]|null $item_properties item_properties
     *
     * @return $this
     */
    public function setItemProperties(?array $item_properties): static
    {
        if (is_null($item_properties)) {
            throw new InvalidArgumentException('non-nullable item_properties cannot be null');
        }
        $this->container['item_properties'] = $item_properties;

        return $this;
    }

    /**
     * Gets property_id
     *
     * @return int
     */
    public function getPropertyId(): int
    {
        return $this->container['property_id'];
    }

    /**
     * Sets property_id
     *
     * @param int $property_id The id of the property item
     *
     * @return $this
     */
    public function setPropertyId(int $property_id): static
    {
        if (is_null($property_id)) {
            throw new InvalidArgumentException('non-nullable property_id cannot be null');
        }
        $this->container['property_id'] = $property_id;

        return $this;
    }

    /**
     * Gets property_selection_id
     *
     * @return int|null
     */
    public function getPropertySelectionId(): ?int
    {
        return $this->container['property_selection_id'];
    }

    /**
     * Sets property_selection_id
     *
     * @param int|null $property_selection_id The id of the property selection optional
     *
     * @return $this
     */
    public function setPropertySelectionId(?int $property_selection_id): static
    {
        if (is_null($property_selection_id)) {
            throw new InvalidArgumentException('non-nullable property_selection_id cannot be null');
        }
        $this->container['property_selection_id'] = $property_selection_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


