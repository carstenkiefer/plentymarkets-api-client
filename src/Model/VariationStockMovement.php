<?php
/**
 * VariationStockMovement
 *
 * PHP version 8.1
 *
 * @package  ck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ck\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use ck\ObjectSerializer;

/**
 * VariationStockMovement Class Doc Comment
 *
 * @package  ck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class VariationStockMovement implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'VariationStockMovement';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'int',
        'item_id' => 'int',
        'variation_id' => 'int',
        'warehouse_id' => 'int',
        'reason_string' => 'string',
        'attribute_values' => 'string',
        'process_row_id' => 'int',
        'quantity' => 'int',
        'reason' => 'int',
        'created_at' => 'string',
        'process_row_type' => 'int',
        'best_before_date' => 'string',
        'batch' => 'string',
        'storage_location_name' => 'string',
        'warehouse_name' => 'string',
        'purchase_price' => 'int',
        'user_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => null,
        'item_id' => null,
        'variation_id' => null,
        'warehouse_id' => null,
        'reason_string' => null,
        'attribute_values' => null,
        'process_row_id' => null,
        'quantity' => null,
        'reason' => null,
        'created_at' => null,
        'process_row_type' => null,
        'best_before_date' => null,
        'batch' => null,
        'storage_location_name' => null,
        'warehouse_name' => null,
        'purchase_price' => null,
        'user_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
		'item_id' => false,
		'variation_id' => false,
		'warehouse_id' => false,
		'reason_string' => false,
		'attribute_values' => false,
		'process_row_id' => false,
		'quantity' => false,
		'reason' => false,
		'created_at' => false,
		'process_row_type' => false,
		'best_before_date' => false,
		'batch' => false,
		'storage_location_name' => false,
		'warehouse_name' => false,
		'purchase_price' => false,
		'user_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'item_id' => 'itemId',
        'variation_id' => 'variationId',
        'warehouse_id' => 'warehouseId',
        'reason_string' => 'reasonString',
        'attribute_values' => 'attributeValues',
        'process_row_id' => 'processRowId',
        'quantity' => 'quantity',
        'reason' => 'reason',
        'created_at' => 'createdAt',
        'process_row_type' => 'processRowType',
        'best_before_date' => 'bestBeforeDate',
        'batch' => 'batch',
        'storage_location_name' => 'storageLocationName',
        'warehouse_name' => 'warehouseName',
        'purchase_price' => 'purchasePrice',
        'user_id' => 'userId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'item_id' => 'setItemId',
        'variation_id' => 'setVariationId',
        'warehouse_id' => 'setWarehouseId',
        'reason_string' => 'setReasonString',
        'attribute_values' => 'setAttributeValues',
        'process_row_id' => 'setProcessRowId',
        'quantity' => 'setQuantity',
        'reason' => 'setReason',
        'created_at' => 'setCreatedAt',
        'process_row_type' => 'setProcessRowType',
        'best_before_date' => 'setBestBeforeDate',
        'batch' => 'setBatch',
        'storage_location_name' => 'setStorageLocationName',
        'warehouse_name' => 'setWarehouseName',
        'purchase_price' => 'setPurchasePrice',
        'user_id' => 'setUserId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'item_id' => 'getItemId',
        'variation_id' => 'getVariationId',
        'warehouse_id' => 'getWarehouseId',
        'reason_string' => 'getReasonString',
        'attribute_values' => 'getAttributeValues',
        'process_row_id' => 'getProcessRowId',
        'quantity' => 'getQuantity',
        'reason' => 'getReason',
        'created_at' => 'getCreatedAt',
        'process_row_type' => 'getProcessRowType',
        'best_before_date' => 'getBestBeforeDate',
        'batch' => 'getBatch',
        'storage_location_name' => 'getStorageLocationName',
        'warehouse_name' => 'getWarehouseName',
        'purchase_price' => 'getPurchasePrice',
        'user_id' => 'getUserId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('item_id', $data ?? [], null);
        $this->setIfExists('variation_id', $data ?? [], null);
        $this->setIfExists('warehouse_id', $data ?? [], null);
        $this->setIfExists('reason_string', $data ?? [], null);
        $this->setIfExists('attribute_values', $data ?? [], null);
        $this->setIfExists('process_row_id', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('reason', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('process_row_type', $data ?? [], null);
        $this->setIfExists('best_before_date', $data ?? [], null);
        $this->setIfExists('batch', $data ?? [], null);
        $this->setIfExists('storage_location_name', $data ?? [], null);
        $this->setIfExists('warehouse_name', $data ?? [], null);
        $this->setIfExists('purchase_price', $data ?? [], null);
        $this->setIfExists('user_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The ID of the stock movement
     *
     * @return $this
     */
    public function setId(?int $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets item_id
     *
     * @return int|null
     */
    public function getItemId(): ?int
    {
        return $this->container['item_id'];
    }

    /**
     * Sets item_id
     *
     * @param int|null $item_id The ID of the item
     *
     * @return $this
     */
    public function setItemId(?int $item_id): static
    {
        if (is_null($item_id)) {
            throw new InvalidArgumentException('non-nullable item_id cannot be null');
        }
        $this->container['item_id'] = $item_id;

        return $this;
    }

    /**
     * Gets variation_id
     *
     * @return int|null
     */
    public function getVariationId(): ?int
    {
        return $this->container['variation_id'];
    }

    /**
     * Sets variation_id
     *
     * @param int|null $variation_id The ID of the variation
     *
     * @return $this
     */
    public function setVariationId(?int $variation_id): static
    {
        if (is_null($variation_id)) {
            throw new InvalidArgumentException('non-nullable variation_id cannot be null');
        }
        $this->container['variation_id'] = $variation_id;

        return $this;
    }

    /**
     * Gets warehouse_id
     *
     * @return int|null
     */
    public function getWarehouseId(): ?int
    {
        return $this->container['warehouse_id'];
    }

    /**
     * Sets warehouse_id
     *
     * @param int|null $warehouse_id The ID of the warehouse
     *
     * @return $this
     */
    public function setWarehouseId(?int $warehouse_id): static
    {
        if (is_null($warehouse_id)) {
            throw new InvalidArgumentException('non-nullable warehouse_id cannot be null');
        }
        $this->container['warehouse_id'] = $warehouse_id;

        return $this;
    }

    /**
     * Gets reason_string
     *
     * @return string|null
     */
    public function getReasonString(): ?string
    {
        return $this->container['reason_string'];
    }

    /**
     * Sets reason_string
     *
     * @param string|null $reason_string The reason string
     *
     * @return $this
     */
    public function setReasonString(?string $reason_string): static
    {
        if (is_null($reason_string)) {
            throw new InvalidArgumentException('non-nullable reason_string cannot be null');
        }
        $this->container['reason_string'] = $reason_string;

        return $this;
    }

    /**
     * Gets attribute_values
     *
     * @return string|null
     */
    public function getAttributeValues(): ?string
    {
        return $this->container['attribute_values'];
    }

    /**
     * Sets attribute_values
     *
     * @param string|null $attribute_values The attribute values of a variation
     *
     * @return $this
     */
    public function setAttributeValues(?string $attribute_values): static
    {
        if (is_null($attribute_values)) {
            throw new InvalidArgumentException('non-nullable attribute_values cannot be null');
        }
        $this->container['attribute_values'] = $attribute_values;

        return $this;
    }

    /**
     * Gets process_row_id
     *
     * @return int|null
     */
    public function getProcessRowId(): ?int
    {
        return $this->container['process_row_id'];
    }

    /**
     * Sets process_row_id
     *
     * @param int|null $process_row_id The ID is either the actual ID of an order or of an incoming item data set. Whether it is an order ID or an incoming item data set ID depends on the processRowType.
     *
     * @return $this
     */
    public function setProcessRowId(?int $process_row_id): static
    {
        if (is_null($process_row_id)) {
            throw new InvalidArgumentException('non-nullable process_row_id cannot be null');
        }
        $this->container['process_row_id'] = $process_row_id;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int|null
     */
    public function getQuantity(): ?int
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int|null $quantity The quantity
     *
     * @return $this
     */
    public function setQuantity(?int $quantity): static
    {
        if (is_null($quantity)) {
            throw new InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return int|null
     */
    public function getReason(): ?int
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param int|null $reason The reason for the movement
     *
     * @return $this
     */
    public function setReason(?int $reason): static
    {
        if (is_null($reason)) {
            throw new InvalidArgumentException('non-nullable reason cannot be null');
        }
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt(): ?string
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at The date and time that the movement was created. This date is in W3C format.
     *
     * @return $this
     */
    public function setCreatedAt(?string $created_at): static
    {
        if (is_null($created_at)) {
            throw new InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets process_row_type
     *
     * @return int|null
     */
    public function getProcessRowType(): ?int
    {
        return $this->container['process_row_type'];
    }

    /**
     * Sets process_row_type
     *
     * @param int|null $process_row_type The type of the stock movement <ul>  <li>1 = incoming item data set</li>  <li>2 = order</li>                                      <li>3 = deleted stock movement</li>                                      <li>4 = new stock intake</li> </ul>
     *
     * @return $this
     */
    public function setProcessRowType(?int $process_row_type): static
    {
        if (is_null($process_row_type)) {
            throw new InvalidArgumentException('non-nullable process_row_type cannot be null');
        }
        $this->container['process_row_type'] = $process_row_type;

        return $this;
    }

    /**
     * Gets best_before_date
     *
     * @return string|null
     */
    public function getBestBeforeDate(): ?string
    {
        return $this->container['best_before_date'];
    }

    /**
     * Sets best_before_date
     *
     * @param string|null $best_before_date The best before date for the movement
     *
     * @return $this
     */
    public function setBestBeforeDate(?string $best_before_date): static
    {
        if (is_null($best_before_date)) {
            throw new InvalidArgumentException('non-nullable best_before_date cannot be null');
        }
        $this->container['best_before_date'] = $best_before_date;

        return $this;
    }

    /**
     * Gets batch
     *
     * @return string|null
     */
    public function getBatch(): ?string
    {
        return $this->container['batch'];
    }

    /**
     * Sets batch
     *
     * @param string|null $batch The batch for the movement
     *
     * @return $this
     */
    public function setBatch(?string $batch): static
    {
        if (is_null($batch)) {
            throw new InvalidArgumentException('non-nullable batch cannot be null');
        }
        $this->container['batch'] = $batch;

        return $this;
    }

    /**
     * Gets storage_location_name
     *
     * @return string|null
     */
    public function getStorageLocationName(): ?string
    {
        return $this->container['storage_location_name'];
    }

    /**
     * Sets storage_location_name
     *
     * @param string|null $storage_location_name The name of the storage location
     *
     * @return $this
     */
    public function setStorageLocationName(?string $storage_location_name): static
    {
        if (is_null($storage_location_name)) {
            throw new InvalidArgumentException('non-nullable storage_location_name cannot be null');
        }
        $this->container['storage_location_name'] = $storage_location_name;

        return $this;
    }

    /**
     * Gets warehouse_name
     *
     * @return string|null
     */
    public function getWarehouseName(): ?string
    {
        return $this->container['warehouse_name'];
    }

    /**
     * Sets warehouse_name
     *
     * @param string|null $warehouse_name The name of the warehouse
     *
     * @return $this
     */
    public function setWarehouseName(?string $warehouse_name): static
    {
        if (is_null($warehouse_name)) {
            throw new InvalidArgumentException('non-nullable warehouse_name cannot be null');
        }
        $this->container['warehouse_name'] = $warehouse_name;

        return $this;
    }

    /**
     * Gets purchase_price
     *
     * @return int|null
     */
    public function getPurchasePrice(): ?int
    {
        return $this->container['purchase_price'];
    }

    /**
     * Sets purchase_price
     *
     * @param int|null $purchase_price The purchase price of a variation
     *
     * @return $this
     */
    public function setPurchasePrice(?int $purchase_price): static
    {
        if (is_null($purchase_price)) {
            throw new InvalidArgumentException('non-nullable purchase_price cannot be null');
        }
        $this->container['purchase_price'] = $purchase_price;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int|null
     */
    public function getUserId(): ?int
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int|null $user_id The id of the user. Can be null if the movement was not triggered by an user.
     *
     * @return $this
     */
    public function setUserId(?int $user_id): static
    {
        if (is_null($user_id)) {
            throw new InvalidArgumentException('non-nullable user_id cannot be null');
        }
        $this->container['user_id'] = $user_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


