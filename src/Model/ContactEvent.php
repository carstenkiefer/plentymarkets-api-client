<?php
/**
 * ContactEvent
 *
 * PHP version 8.1
 *
 * @package  ck/plenty-client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ck/plenty-client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use ck/plenty-client\ObjectSerializer;

/**
 * ContactEvent Class Doc Comment
 *
 * @package  ck/plenty-client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ContactEvent implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ContactEvent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'event_id' => 'int',
        'contact_id' => 'int',
        'user_id' => 'int',
        'event_duration' => 'int',
        'event_type' => 'string',
        'order_row_id' => 'int',
        'event_info' => 'string',
        'billable' => 'bool',
        'event_inserted_at' => 'string',
        'event_billed_at' => 'string',
        'event_provision_paid_at' => 'string',
        'event_credit_value' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'event_id' => null,
        'contact_id' => null,
        'user_id' => null,
        'event_duration' => null,
        'event_type' => null,
        'order_row_id' => null,
        'event_info' => null,
        'billable' => null,
        'event_inserted_at' => null,
        'event_billed_at' => null,
        'event_provision_paid_at' => null,
        'event_credit_value' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'event_id' => false,
		'contact_id' => false,
		'user_id' => false,
		'event_duration' => false,
		'event_type' => false,
		'order_row_id' => false,
		'event_info' => false,
		'billable' => false,
		'event_inserted_at' => false,
		'event_billed_at' => false,
		'event_provision_paid_at' => false,
		'event_credit_value' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'event_id' => 'eventId',
        'contact_id' => 'contactId',
        'user_id' => 'userId',
        'event_duration' => 'eventDuration',
        'event_type' => 'eventType',
        'order_row_id' => 'orderRowId',
        'event_info' => 'eventInfo',
        'billable' => 'billable',
        'event_inserted_at' => 'eventInsertedAt',
        'event_billed_at' => 'eventBilledAt',
        'event_provision_paid_at' => 'eventProvisionPaidAt',
        'event_credit_value' => 'eventCreditValue'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'event_id' => 'setEventId',
        'contact_id' => 'setContactId',
        'user_id' => 'setUserId',
        'event_duration' => 'setEventDuration',
        'event_type' => 'setEventType',
        'order_row_id' => 'setOrderRowId',
        'event_info' => 'setEventInfo',
        'billable' => 'setBillable',
        'event_inserted_at' => 'setEventInsertedAt',
        'event_billed_at' => 'setEventBilledAt',
        'event_provision_paid_at' => 'setEventProvisionPaidAt',
        'event_credit_value' => 'setEventCreditValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'event_id' => 'getEventId',
        'contact_id' => 'getContactId',
        'user_id' => 'getUserId',
        'event_duration' => 'getEventDuration',
        'event_type' => 'getEventType',
        'order_row_id' => 'getOrderRowId',
        'event_info' => 'getEventInfo',
        'billable' => 'getBillable',
        'event_inserted_at' => 'getEventInsertedAt',
        'event_billed_at' => 'getEventBilledAt',
        'event_provision_paid_at' => 'getEventProvisionPaidAt',
        'event_credit_value' => 'getEventCreditValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('event_id', $data ?? [], null);
        $this->setIfExists('contact_id', $data ?? [], null);
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('event_duration', $data ?? [], null);
        $this->setIfExists('event_type', $data ?? [], null);
        $this->setIfExists('order_row_id', $data ?? [], null);
        $this->setIfExists('event_info', $data ?? [], null);
        $this->setIfExists('billable', $data ?? [], null);
        $this->setIfExists('event_inserted_at', $data ?? [], null);
        $this->setIfExists('event_billed_at', $data ?? [], null);
        $this->setIfExists('event_provision_paid_at', $data ?? [], null);
        $this->setIfExists('event_credit_value', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets event_id
     *
     * @return int|null
     */
    public function getEventId(): ?int
    {
        return $this->container['event_id'];
    }

    /**
     * Sets event_id
     *
     * @param int|null $event_id The ID of the event
     *
     * @return $this
     */
    public function setEventId(?int $event_id): static
    {
        if (is_null($event_id)) {
            throw new InvalidArgumentException('non-nullable event_id cannot be null');
        }
        $this->container['event_id'] = $event_id;

        return $this;
    }

    /**
     * Gets contact_id
     *
     * @return int|null
     */
    public function getContactId(): ?int
    {
        return $this->container['contact_id'];
    }

    /**
     * Sets contact_id
     *
     * @param int|null $contact_id The ID of the contact this event belongs to
     *
     * @return $this
     */
    public function setContactId(?int $contact_id): static
    {
        if (is_null($contact_id)) {
            throw new InvalidArgumentException('non-nullable contact_id cannot be null');
        }
        $this->container['contact_id'] = $contact_id;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int|null
     */
    public function getUserId(): ?int
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int|null $user_id The ID of the user this event belongs to
     *
     * @return $this
     */
    public function setUserId(?int $user_id): static
    {
        if (is_null($user_id)) {
            throw new InvalidArgumentException('non-nullable user_id cannot be null');
        }
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets event_duration
     *
     * @return int|null
     */
    public function getEventDuration(): ?int
    {
        return $this->container['event_duration'];
    }

    /**
     * Sets event_duration
     *
     * @param int|null $event_duration The duration of the event in seconds
     *
     * @return $this
     */
    public function setEventDuration(?int $event_duration): static
    {
        if (is_null($event_duration)) {
            throw new InvalidArgumentException('non-nullable event_duration cannot be null');
        }
        $this->container['event_duration'] = $event_duration;

        return $this;
    }

    /**
     * Gets event_type
     *
     * @return string|null
     */
    public function getEventType(): ?string
    {
        return $this->container['event_type'];
    }

    /**
     * Sets event_type
     *
     * @param string|null $event_type The type of the event. Possible values are call, ticket, email, meeting, webinar, development and design.
     *
     * @return $this
     */
    public function setEventType(?string $event_type): static
    {
        if (is_null($event_type)) {
            throw new InvalidArgumentException('non-nullable event_type cannot be null');
        }
        $this->container['event_type'] = $event_type;

        return $this;
    }

    /**
     * Gets order_row_id
     *
     * @return int|null
     */
    public function getOrderRowId(): ?int
    {
        return $this->container['order_row_id'];
    }

    /**
     * Sets order_row_id
     *
     * @param int|null $order_row_id 
     *
     * @return $this
     */
    public function setOrderRowId(?int $order_row_id): static
    {
        if (is_null($order_row_id)) {
            throw new InvalidArgumentException('non-nullable order_row_id cannot be null');
        }
        $this->container['order_row_id'] = $order_row_id;

        return $this;
    }

    /**
     * Gets event_info
     *
     * @return string|null
     */
    public function getEventInfo(): ?string
    {
        return $this->container['event_info'];
    }

    /**
     * Sets event_info
     *
     * @param string|null $event_info Informational text about the event
     *
     * @return $this
     */
    public function setEventInfo(?string $event_info): static
    {
        if (is_null($event_info)) {
            throw new InvalidArgumentException('non-nullable event_info cannot be null');
        }
        $this->container['event_info'] = $event_info;

        return $this;
    }

    /**
     * Gets billable
     *
     * @return bool|null
     */
    public function getBillable(): ?bool
    {
        return $this->container['billable'];
    }

    /**
     * Sets billable
     *
     * @param bool|null $billable Billable if set to 1
     *
     * @return $this
     */
    public function setBillable(?bool $billable): static
    {
        if (is_null($billable)) {
            throw new InvalidArgumentException('non-nullable billable cannot be null');
        }
        $this->container['billable'] = $billable;

        return $this;
    }

    /**
     * Gets event_inserted_at
     *
     * @return string|null
     */
    public function getEventInsertedAt(): ?string
    {
        return $this->container['event_inserted_at'];
    }

    /**
     * Sets event_inserted_at
     *
     * @param string|null $event_inserted_at The date the event was created at as unix timestamp
     *
     * @return $this
     */
    public function setEventInsertedAt(?string $event_inserted_at): static
    {
        if (is_null($event_inserted_at)) {
            throw new InvalidArgumentException('non-nullable event_inserted_at cannot be null');
        }
        $this->container['event_inserted_at'] = $event_inserted_at;

        return $this;
    }

    /**
     * Gets event_billed_at
     *
     * @return string|null
     */
    public function getEventBilledAt(): ?string
    {
        return $this->container['event_billed_at'];
    }

    /**
     * Sets event_billed_at
     *
     * @param string|null $event_billed_at The date the event was billed at as unix timestamp
     *
     * @return $this
     */
    public function setEventBilledAt(?string $event_billed_at): static
    {
        if (is_null($event_billed_at)) {
            throw new InvalidArgumentException('non-nullable event_billed_at cannot be null');
        }
        $this->container['event_billed_at'] = $event_billed_at;

        return $this;
    }

    /**
     * Gets event_provision_paid_at
     *
     * @return string|null
     */
    public function getEventProvisionPaidAt(): ?string
    {
        return $this->container['event_provision_paid_at'];
    }

    /**
     * Sets event_provision_paid_at
     *
     * @param string|null $event_provision_paid_at The date the provision was paid at as unix timestamp
     *
     * @return $this
     */
    public function setEventProvisionPaidAt(?string $event_provision_paid_at): static
    {
        if (is_null($event_provision_paid_at)) {
            throw new InvalidArgumentException('non-nullable event_provision_paid_at cannot be null');
        }
        $this->container['event_provision_paid_at'] = $event_provision_paid_at;

        return $this;
    }

    /**
     * Gets event_credit_value
     *
     * @return float|null
     */
    public function getEventCreditValue(): ?float
    {
        return $this->container['event_credit_value'];
    }

    /**
     * Sets event_credit_value
     *
     * @param float|null $event_credit_value The credit value of the event
     *
     * @return $this
     */
    public function setEventCreditValue(?float $event_credit_value): static
    {
        if (is_null($event_credit_value)) {
            throw new InvalidArgumentException('non-nullable event_credit_value cannot be null');
        }
        $this->container['event_credit_value'] = $event_credit_value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


