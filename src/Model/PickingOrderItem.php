<?php
/**
 * PickingOrderItem
 *
 * PHP version 8.1
 *
 * @package  ck/plenty-client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ck/plenty-client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use ck/plenty-client\ObjectSerializer;

/**
 * PickingOrderItem Class Doc Comment
 *
 * @package  ck/plenty-client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class PickingOrderItem implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'PickingOrderItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'int',
        'picking_order_id' => 'int',
        'order_item_id' => 'int',
        'process_state' => 'string',
        'process_date' => 'string',
        'process_user_id' => 'int',
        'comment' => 'string',
        'quantity' => 'float',
        'item_id' => 'int',
        'holding_area' => 'int',
        'warehouse_id' => 'int',
        'order_id_list' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => null,
        'picking_order_id' => null,
        'order_item_id' => null,
        'process_state' => null,
        'process_date' => null,
        'process_user_id' => null,
        'comment' => null,
        'quantity' => null,
        'item_id' => null,
        'holding_area' => null,
        'warehouse_id' => null,
        'order_id_list' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
		'picking_order_id' => false,
		'order_item_id' => false,
		'process_state' => false,
		'process_date' => false,
		'process_user_id' => false,
		'comment' => false,
		'quantity' => false,
		'item_id' => false,
		'holding_area' => false,
		'warehouse_id' => false,
		'order_id_list' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'picking_order_id' => 'pickingOrderId',
        'order_item_id' => 'orderItemId',
        'process_state' => 'processState',
        'process_date' => 'processDate',
        'process_user_id' => 'processUserId',
        'comment' => 'comment',
        'quantity' => 'quantity',
        'item_id' => 'itemId',
        'holding_area' => 'holdingArea',
        'warehouse_id' => 'warehouseId',
        'order_id_list' => 'orderIdList'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'picking_order_id' => 'setPickingOrderId',
        'order_item_id' => 'setOrderItemId',
        'process_state' => 'setProcessState',
        'process_date' => 'setProcessDate',
        'process_user_id' => 'setProcessUserId',
        'comment' => 'setComment',
        'quantity' => 'setQuantity',
        'item_id' => 'setItemId',
        'holding_area' => 'setHoldingArea',
        'warehouse_id' => 'setWarehouseId',
        'order_id_list' => 'setOrderIdList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'picking_order_id' => 'getPickingOrderId',
        'order_item_id' => 'getOrderItemId',
        'process_state' => 'getProcessState',
        'process_date' => 'getProcessDate',
        'process_user_id' => 'getProcessUserId',
        'comment' => 'getComment',
        'quantity' => 'getQuantity',
        'item_id' => 'getItemId',
        'holding_area' => 'getHoldingArea',
        'warehouse_id' => 'getWarehouseId',
        'order_id_list' => 'getOrderIdList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('picking_order_id', $data ?? [], null);
        $this->setIfExists('order_item_id', $data ?? [], null);
        $this->setIfExists('process_state', $data ?? [], null);
        $this->setIfExists('process_date', $data ?? [], null);
        $this->setIfExists('process_user_id', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('item_id', $data ?? [], null);
        $this->setIfExists('holding_area', $data ?? [], null);
        $this->setIfExists('warehouse_id', $data ?? [], null);
        $this->setIfExists('order_id_list', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id 
     *
     * @return $this
     */
    public function setId(?int $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets picking_order_id
     *
     * @return int|null
     */
    public function getPickingOrderId(): ?int
    {
        return $this->container['picking_order_id'];
    }

    /**
     * Sets picking_order_id
     *
     * @param int|null $picking_order_id 
     *
     * @return $this
     */
    public function setPickingOrderId(?int $picking_order_id): static
    {
        if (is_null($picking_order_id)) {
            throw new InvalidArgumentException('non-nullable picking_order_id cannot be null');
        }
        $this->container['picking_order_id'] = $picking_order_id;

        return $this;
    }

    /**
     * Gets order_item_id
     *
     * @return int|null
     */
    public function getOrderItemId(): ?int
    {
        return $this->container['order_item_id'];
    }

    /**
     * Sets order_item_id
     *
     * @param int|null $order_item_id 
     *
     * @return $this
     */
    public function setOrderItemId(?int $order_item_id): static
    {
        if (is_null($order_item_id)) {
            throw new InvalidArgumentException('non-nullable order_item_id cannot be null');
        }
        $this->container['order_item_id'] = $order_item_id;

        return $this;
    }

    /**
     * Gets process_state
     *
     * @return string|null
     */
    public function getProcessState(): ?string
    {
        return $this->container['process_state'];
    }

    /**
     * Sets process_state
     *
     * @param string|null $process_state 
     *
     * @return $this
     */
    public function setProcessState(?string $process_state): static
    {
        if (is_null($process_state)) {
            throw new InvalidArgumentException('non-nullable process_state cannot be null');
        }
        $this->container['process_state'] = $process_state;

        return $this;
    }

    /**
     * Gets process_date
     *
     * @return string|null
     */
    public function getProcessDate(): ?string
    {
        return $this->container['process_date'];
    }

    /**
     * Sets process_date
     *
     * @param string|null $process_date 
     *
     * @return $this
     */
    public function setProcessDate(?string $process_date): static
    {
        if (is_null($process_date)) {
            throw new InvalidArgumentException('non-nullable process_date cannot be null');
        }
        $this->container['process_date'] = $process_date;

        return $this;
    }

    /**
     * Gets process_user_id
     *
     * @return int|null
     */
    public function getProcessUserId(): ?int
    {
        return $this->container['process_user_id'];
    }

    /**
     * Sets process_user_id
     *
     * @param int|null $process_user_id 
     *
     * @return $this
     */
    public function setProcessUserId(?int $process_user_id): static
    {
        if (is_null($process_user_id)) {
            throw new InvalidArgumentException('non-nullable process_user_id cannot be null');
        }
        $this->container['process_user_id'] = $process_user_id;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment(): ?string
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment 
     *
     * @return $this
     */
    public function setComment(?string $comment): static
    {
        if (is_null($comment)) {
            throw new InvalidArgumentException('non-nullable comment cannot be null');
        }
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float|null
     */
    public function getQuantity(): ?float
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float|null $quantity 
     *
     * @return $this
     */
    public function setQuantity(?float $quantity): static
    {
        if (is_null($quantity)) {
            throw new InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets item_id
     *
     * @return int|null
     */
    public function getItemId(): ?int
    {
        return $this->container['item_id'];
    }

    /**
     * Sets item_id
     *
     * @param int|null $item_id 
     *
     * @return $this
     */
    public function setItemId(?int $item_id): static
    {
        if (is_null($item_id)) {
            throw new InvalidArgumentException('non-nullable item_id cannot be null');
        }
        $this->container['item_id'] = $item_id;

        return $this;
    }

    /**
     * Gets holding_area
     *
     * @return int|null
     */
    public function getHoldingArea(): ?int
    {
        return $this->container['holding_area'];
    }

    /**
     * Sets holding_area
     *
     * @param int|null $holding_area 
     *
     * @return $this
     */
    public function setHoldingArea(?int $holding_area): static
    {
        if (is_null($holding_area)) {
            throw new InvalidArgumentException('non-nullable holding_area cannot be null');
        }
        $this->container['holding_area'] = $holding_area;

        return $this;
    }

    /**
     * Gets warehouse_id
     *
     * @return int|null
     */
    public function getWarehouseId(): ?int
    {
        return $this->container['warehouse_id'];
    }

    /**
     * Sets warehouse_id
     *
     * @param int|null $warehouse_id 
     *
     * @return $this
     */
    public function setWarehouseId(?int $warehouse_id): static
    {
        if (is_null($warehouse_id)) {
            throw new InvalidArgumentException('non-nullable warehouse_id cannot be null');
        }
        $this->container['warehouse_id'] = $warehouse_id;

        return $this;
    }

    /**
     * Gets order_id_list
     *
     * @return string|null
     */
    public function getOrderIdList(): ?string
    {
        return $this->container['order_id_list'];
    }

    /**
     * Sets order_id_list
     *
     * @param string|null $order_id_list 
     *
     * @return $this
     */
    public function setOrderIdList(?string $order_id_list): static
    {
        if (is_null($order_id_list)) {
            throw new InvalidArgumentException('non-nullable order_id_list cannot be null');
        }
        $this->container['order_id_list'] = $order_id_list;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


