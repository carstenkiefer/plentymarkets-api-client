<?php
/**
 * Stock
 *
 * PHP version 8.1
 *
 * @package  ck/plenty-client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ck/plenty-client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use ck/plenty-client\ObjectSerializer;

/**
 * Stock Class Doc Comment
 *
 * @package  ck/plenty-client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class Stock implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Stock';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'item_id' => 'int',
        'variation_id' => 'int',
        'warehouse_id' => 'int',
        'stock_physical' => 'float',
        'reserved_stock' => 'float',
        'reserved_ebay' => 'float',
        'reorder_delta' => 'float',
        'stock_net' => 'float',
        'reordered' => 'int',
        'warehouse_priority' => 'int',
        'reserved_bundle' => 'float',
        'average_purchase_price' => 'float',
        'updated_at' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'item_id' => null,
        'variation_id' => null,
        'warehouse_id' => null,
        'stock_physical' => null,
        'reserved_stock' => null,
        'reserved_ebay' => null,
        'reorder_delta' => null,
        'stock_net' => null,
        'reordered' => null,
        'warehouse_priority' => null,
        'reserved_bundle' => null,
        'average_purchase_price' => null,
        'updated_at' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'item_id' => false,
		'variation_id' => false,
		'warehouse_id' => false,
		'stock_physical' => false,
		'reserved_stock' => false,
		'reserved_ebay' => false,
		'reorder_delta' => false,
		'stock_net' => false,
		'reordered' => false,
		'warehouse_priority' => false,
		'reserved_bundle' => false,
		'average_purchase_price' => false,
		'updated_at' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'item_id' => 'itemId',
        'variation_id' => 'variationId',
        'warehouse_id' => 'warehouseId',
        'stock_physical' => 'stockPhysical',
        'reserved_stock' => 'reservedStock',
        'reserved_ebay' => 'reservedEbay',
        'reorder_delta' => 'reorderDelta',
        'stock_net' => 'stockNet',
        'reordered' => 'reordered',
        'warehouse_priority' => 'warehousePriority',
        'reserved_bundle' => 'reservedBundle',
        'average_purchase_price' => 'averagePurchasePrice',
        'updated_at' => 'updatedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'item_id' => 'setItemId',
        'variation_id' => 'setVariationId',
        'warehouse_id' => 'setWarehouseId',
        'stock_physical' => 'setStockPhysical',
        'reserved_stock' => 'setReservedStock',
        'reserved_ebay' => 'setReservedEbay',
        'reorder_delta' => 'setReorderDelta',
        'stock_net' => 'setStockNet',
        'reordered' => 'setReordered',
        'warehouse_priority' => 'setWarehousePriority',
        'reserved_bundle' => 'setReservedBundle',
        'average_purchase_price' => 'setAveragePurchasePrice',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'item_id' => 'getItemId',
        'variation_id' => 'getVariationId',
        'warehouse_id' => 'getWarehouseId',
        'stock_physical' => 'getStockPhysical',
        'reserved_stock' => 'getReservedStock',
        'reserved_ebay' => 'getReservedEbay',
        'reorder_delta' => 'getReorderDelta',
        'stock_net' => 'getStockNet',
        'reordered' => 'getReordered',
        'warehouse_priority' => 'getWarehousePriority',
        'reserved_bundle' => 'getReservedBundle',
        'average_purchase_price' => 'getAveragePurchasePrice',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('item_id', $data ?? [], null);
        $this->setIfExists('variation_id', $data ?? [], null);
        $this->setIfExists('warehouse_id', $data ?? [], null);
        $this->setIfExists('stock_physical', $data ?? [], null);
        $this->setIfExists('reserved_stock', $data ?? [], null);
        $this->setIfExists('reserved_ebay', $data ?? [], null);
        $this->setIfExists('reorder_delta', $data ?? [], null);
        $this->setIfExists('stock_net', $data ?? [], null);
        $this->setIfExists('reordered', $data ?? [], null);
        $this->setIfExists('warehouse_priority', $data ?? [], null);
        $this->setIfExists('reserved_bundle', $data ?? [], null);
        $this->setIfExists('average_purchase_price', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets item_id
     *
     * @return int|null
     */
    public function getItemId(): ?int
    {
        return $this->container['item_id'];
    }

    /**
     * Sets item_id
     *
     * @param int|null $item_id The ID of the item
     *
     * @return $this
     */
    public function setItemId(?int $item_id): static
    {
        if (is_null($item_id)) {
            throw new InvalidArgumentException('non-nullable item_id cannot be null');
        }
        $this->container['item_id'] = $item_id;

        return $this;
    }

    /**
     * Gets variation_id
     *
     * @return int|null
     */
    public function getVariationId(): ?int
    {
        return $this->container['variation_id'];
    }

    /**
     * Sets variation_id
     *
     * @param int|null $variation_id The ID of the variation
     *
     * @return $this
     */
    public function setVariationId(?int $variation_id): static
    {
        if (is_null($variation_id)) {
            throw new InvalidArgumentException('non-nullable variation_id cannot be null');
        }
        $this->container['variation_id'] = $variation_id;

        return $this;
    }

    /**
     * Gets warehouse_id
     *
     * @return int|null
     */
    public function getWarehouseId(): ?int
    {
        return $this->container['warehouse_id'];
    }

    /**
     * Sets warehouse_id
     *
     * @param int|null $warehouse_id The ID of the warehouse
     *
     * @return $this
     */
    public function setWarehouseId(?int $warehouse_id): static
    {
        if (is_null($warehouse_id)) {
            throw new InvalidArgumentException('non-nullable warehouse_id cannot be null');
        }
        $this->container['warehouse_id'] = $warehouse_id;

        return $this;
    }

    /**
     * Gets stock_physical
     *
     * @return float|null
     */
    public function getStockPhysical(): ?float
    {
        return $this->container['stock_physical'];
    }

    /**
     * Sets stock_physical
     *
     * @param float|null $stock_physical The physical stock
     *
     * @return $this
     */
    public function setStockPhysical(?float $stock_physical): static
    {
        if (is_null($stock_physical)) {
            throw new InvalidArgumentException('non-nullable stock_physical cannot be null');
        }
        $this->container['stock_physical'] = $stock_physical;

        return $this;
    }

    /**
     * Gets reserved_stock
     *
     * @return float|null
     */
    public function getReservedStock(): ?float
    {
        return $this->container['reserved_stock'];
    }

    /**
     * Sets reserved_stock
     *
     * @param float|null $reserved_stock The reserved stock
     *
     * @return $this
     */
    public function setReservedStock(?float $reserved_stock): static
    {
        if (is_null($reserved_stock)) {
            throw new InvalidArgumentException('non-nullable reserved_stock cannot be null');
        }
        $this->container['reserved_stock'] = $reserved_stock;

        return $this;
    }

    /**
     * Gets reserved_ebay
     *
     * @return float|null
     */
    public function getReservedEbay(): ?float
    {
        return $this->container['reserved_ebay'];
    }

    /**
     * Sets reserved_ebay
     *
     * @param float|null $reserved_ebay The stock reserved for ebay
     *
     * @return $this
     */
    public function setReservedEbay(?float $reserved_ebay): static
    {
        if (is_null($reserved_ebay)) {
            throw new InvalidArgumentException('non-nullable reserved_ebay cannot be null');
        }
        $this->container['reserved_ebay'] = $reserved_ebay;

        return $this;
    }

    /**
     * Gets reorder_delta
     *
     * @return float|null
     */
    public function getReorderDelta(): ?float
    {
        return $this->container['reorder_delta'];
    }

    /**
     * Sets reorder_delta
     *
     * @param float|null $reorder_delta The reorder delta
     *
     * @return $this
     */
    public function setReorderDelta(?float $reorder_delta): static
    {
        if (is_null($reorder_delta)) {
            throw new InvalidArgumentException('non-nullable reorder_delta cannot be null');
        }
        $this->container['reorder_delta'] = $reorder_delta;

        return $this;
    }

    /**
     * Gets stock_net
     *
     * @return float|null
     */
    public function getStockNet(): ?float
    {
        return $this->container['stock_net'];
    }

    /**
     * Sets stock_net
     *
     * @param float|null $stock_net The net stock
     *
     * @return $this
     */
    public function setStockNet(?float $stock_net): static
    {
        if (is_null($stock_net)) {
            throw new InvalidArgumentException('non-nullable stock_net cannot be null');
        }
        $this->container['stock_net'] = $stock_net;

        return $this;
    }

    /**
     * Gets reordered
     *
     * @return int|null
     */
    public function getReordered(): ?int
    {
        return $this->container['reordered'];
    }

    /**
     * Sets reordered
     *
     * @param int|null $reordered The reordered quantity of a variation
     *
     * @return $this
     */
    public function setReordered(?int $reordered): static
    {
        if (is_null($reordered)) {
            throw new InvalidArgumentException('non-nullable reordered cannot be null');
        }
        $this->container['reordered'] = $reordered;

        return $this;
    }

    /**
     * Gets warehouse_priority
     *
     * @return int|null
     */
    public function getWarehousePriority(): ?int
    {
        return $this->container['warehouse_priority'];
    }

    /**
     * Sets warehouse_priority
     *
     * @param int|null $warehouse_priority The priority of the warehouse
     *
     * @return $this
     */
    public function setWarehousePriority(?int $warehouse_priority): static
    {
        if (is_null($warehouse_priority)) {
            throw new InvalidArgumentException('non-nullable warehouse_priority cannot be null');
        }
        $this->container['warehouse_priority'] = $warehouse_priority;

        return $this;
    }

    /**
     * Gets reserved_bundle
     *
     * @return float|null
     */
    public function getReservedBundle(): ?float
    {
        return $this->container['reserved_bundle'];
    }

    /**
     * Sets reserved_bundle
     *
     * @param float|null $reserved_bundle Reserved bundle
     *
     * @return $this
     */
    public function setReservedBundle(?float $reserved_bundle): static
    {
        if (is_null($reserved_bundle)) {
            throw new InvalidArgumentException('non-nullable reserved_bundle cannot be null');
        }
        $this->container['reserved_bundle'] = $reserved_bundle;

        return $this;
    }

    /**
     * Gets average_purchase_price
     *
     * @return float|null
     */
    public function getAveragePurchasePrice(): ?float
    {
        return $this->container['average_purchase_price'];
    }

    /**
     * Sets average_purchase_price
     *
     * @param float|null $average_purchase_price The average purchase price
     *
     * @return $this
     */
    public function setAveragePurchasePrice(?float $average_purchase_price): static
    {
        if (is_null($average_purchase_price)) {
            throw new InvalidArgumentException('non-nullable average_purchase_price cannot be null');
        }
        $this->container['average_purchase_price'] = $average_purchase_price;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt(): ?string
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at The time the stock was last updated
     *
     * @return $this
     */
    public function setUpdatedAt(?string $updated_at): static
    {
        if (is_null($updated_at)) {
            throw new InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


