<?php
/**
 * RestOrdersPostRequest
 *
 * PHP version 8.1
 *
 * @package  ck/plenty-client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ck/plenty-client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use ck/plenty-client\ObjectSerializer;

/**
 * RestOrdersPostRequest Class Doc Comment
 *
 * @package  ck/plenty-client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class RestOrdersPostRequest implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = '_rest_orders_post_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'type_id' => 'int',
        'plenty_id' => 'int',
        'status_id' => 'float',
        'owner_id' => 'int',
        'lock_status' => 'string',
        'order_items' => 'object[]',
        'properties' => 'object[]',
        'address_relations' => 'object[]',
        'relations' => 'object[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'type_id' => null,
        'plenty_id' => null,
        'status_id' => null,
        'owner_id' => null,
        'lock_status' => null,
        'order_items' => null,
        'properties' => null,
        'address_relations' => null,
        'relations' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'type_id' => false,
		'plenty_id' => false,
		'status_id' => false,
		'owner_id' => false,
		'lock_status' => false,
		'order_items' => false,
		'properties' => false,
		'address_relations' => false,
		'relations' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'type_id' => 'typeId',
        'plenty_id' => 'plentyId',
        'status_id' => 'statusId',
        'owner_id' => 'ownerId',
        'lock_status' => 'lockStatus',
        'order_items' => 'orderItems',
        'properties' => 'properties',
        'address_relations' => 'addressRelations',
        'relations' => 'relations'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'type_id' => 'setTypeId',
        'plenty_id' => 'setPlentyId',
        'status_id' => 'setStatusId',
        'owner_id' => 'setOwnerId',
        'lock_status' => 'setLockStatus',
        'order_items' => 'setOrderItems',
        'properties' => 'setProperties',
        'address_relations' => 'setAddressRelations',
        'relations' => 'setRelations'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'type_id' => 'getTypeId',
        'plenty_id' => 'getPlentyId',
        'status_id' => 'getStatusId',
        'owner_id' => 'getOwnerId',
        'lock_status' => 'getLockStatus',
        'order_items' => 'getOrderItems',
        'properties' => 'getProperties',
        'address_relations' => 'getAddressRelations',
        'relations' => 'getRelations'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('type_id', $data ?? [], null);
        $this->setIfExists('plenty_id', $data ?? [], null);
        $this->setIfExists('status_id', $data ?? [], null);
        $this->setIfExists('owner_id', $data ?? [], null);
        $this->setIfExists('lock_status', $data ?? [], null);
        $this->setIfExists('order_items', $data ?? [], null);
        $this->setIfExists('properties', $data ?? [], null);
        $this->setIfExists('address_relations', $data ?? [], null);
        $this->setIfExists('relations', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['type_id'] === null) {
            $invalidProperties[] = "'type_id' can't be null";
        }
        if ($this->container['plenty_id'] === null) {
            $invalidProperties[] = "'plenty_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type_id
     *
     * @return int
     */
    public function getTypeId(): int
    {
        return $this->container['type_id'];
    }

    /**
     * Sets type_id
     *
     * @param int $type_id The ID of the order type                                                               It is possible to define individual order types. However,                                                               the following types are available by default:      1 = Sales order     2 = Delivery     3 = Returns     4 = Credit note     5 = Warranty     6 = Repair     7 = Offer     8 = Advance order     9 = Multi-order     10 = Multi credit note     11 = Multi delivery     12 = Reorder     13 = Partial delivery     14 = Subscription     15 = Redistribution
     *
     * @return $this
     */
    public function setTypeId(int $type_id): static
    {
        if (is_null($type_id)) {
            throw new InvalidArgumentException('non-nullable type_id cannot be null');
        }
        $this->container['type_id'] = $type_id;

        return $this;
    }

    /**
     * Gets plenty_id
     *
     * @return int
     */
    public function getPlentyId(): int
    {
        return $this->container['plenty_id'];
    }

    /**
     * Sets plenty_id
     *
     * @param int $plenty_id The plenty ID of the client that the order belongs to
     *
     * @return $this
     */
    public function setPlentyId(int $plenty_id): static
    {
        if (is_null($plenty_id)) {
            throw new InvalidArgumentException('non-nullable plenty_id cannot be null');
        }
        $this->container['plenty_id'] = $plenty_id;

        return $this;
    }

    /**
     * Gets status_id
     *
     * @return float|null
     */
    public function getStatusId(): ?float
    {
        return $this->container['status_id'];
    }

    /**
     * Sets status_id
     *
     * @param float|null $status_id The ID of the order status optional
     *
     * @return $this
     */
    public function setStatusId(?float $status_id): static
    {
        if (is_null($status_id)) {
            throw new InvalidArgumentException('non-nullable status_id cannot be null');
        }
        $this->container['status_id'] = $status_id;

        return $this;
    }

    /**
     * Gets owner_id
     *
     * @return int|null
     */
    public function getOwnerId(): ?int
    {
        return $this->container['owner_id'];
    }

    /**
     * Sets owner_id
     *
     * @param int|null $owner_id The user ID of the order's owner optional
     *
     * @return $this
     */
    public function setOwnerId(?int $owner_id): static
    {
        if (is_null($owner_id)) {
            throw new InvalidArgumentException('non-nullable owner_id cannot be null');
        }
        $this->container['owner_id'] = $owner_id;

        return $this;
    }

    /**
     * Gets lock_status
     *
     * @return string|null
     */
    public function getLockStatus(): ?string
    {
        return $this->container['lock_status'];
    }

    /**
     * Sets lock_status
     *
     * @param string|null $lock_status The lock status of the order. The following statuses are available:   unlocked  permanentlyLocked  reversibleLocked  allowed values are unlocked, permanentlyLocked, reversibleLocked
     *
     * @return $this
     */
    public function setLockStatus(?string $lock_status): static
    {
        if (is_null($lock_status)) {
            throw new InvalidArgumentException('non-nullable lock_status cannot be null');
        }
        $this->container['lock_status'] = $lock_status;

        return $this;
    }

    /**
     * Gets order_items
     *
     * @return object[]|null
     */
    public function getOrderItems(): ?array
    {
        return $this->container['order_items'];
    }

    /**
     * Sets order_items
     *
     * @param object[]|null $order_items order_items
     *
     * @return $this
     */
    public function setOrderItems(?array $order_items): static
    {
        if (is_null($order_items)) {
            throw new InvalidArgumentException('non-nullable order_items cannot be null');
        }
        $this->container['order_items'] = $order_items;

        return $this;
    }

    /**
     * Gets properties
     *
     * @return object[]|null
     */
    public function getProperties(): ?array
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     *
     * @param object[]|null $properties properties
     *
     * @return $this
     */
    public function setProperties(?array $properties): static
    {
        if (is_null($properties)) {
            throw new InvalidArgumentException('non-nullable properties cannot be null');
        }
        $this->container['properties'] = $properties;

        return $this;
    }

    /**
     * Gets address_relations
     *
     * @return object[]|null
     */
    public function getAddressRelations(): ?array
    {
        return $this->container['address_relations'];
    }

    /**
     * Sets address_relations
     *
     * @param object[]|null $address_relations address_relations
     *
     * @return $this
     */
    public function setAddressRelations(?array $address_relations): static
    {
        if (is_null($address_relations)) {
            throw new InvalidArgumentException('non-nullable address_relations cannot be null');
        }
        $this->container['address_relations'] = $address_relations;

        return $this;
    }

    /**
     * Gets relations
     *
     * @return object[]|null
     */
    public function getRelations(): ?array
    {
        return $this->container['relations'];
    }

    /**
     * Sets relations
     *
     * @param object[]|null $relations relations
     *
     * @return $this
     */
    public function setRelations(?array $relations): static
    {
        if (is_null($relations)) {
            throw new InvalidArgumentException('non-nullable relations cannot be null');
        }
        $this->container['relations'] = $relations;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


