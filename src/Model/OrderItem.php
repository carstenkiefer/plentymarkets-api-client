<?php
/**
 * OrderItem
 *
 * PHP version 8.1
 *
 * @package  ck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ck\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use ck\ObjectSerializer;

/**
 * OrderItem Class Doc Comment
 *
 * @package  ck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class OrderItem implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'OrderItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'int',
        'order_id' => 'int',
        'type_id' => 'int',
        'referrer_id' => 'float',
        'item_variation_id' => 'int',
        'quantity' => 'float',
        'order_item_name' => 'string',
        'attribute_values' => 'string',
        'shipping_profile_id' => 'int',
        'country_vat_id' => 'int',
        'vat_field' => 'int',
        'vat_rate' => 'float',
        'position' => 'int',
        'warehouse_id' => 'int',
        'created_at' => 'string',
        'updated_at' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => null,
        'order_id' => null,
        'type_id' => null,
        'referrer_id' => null,
        'item_variation_id' => null,
        'quantity' => null,
        'order_item_name' => null,
        'attribute_values' => null,
        'shipping_profile_id' => null,
        'country_vat_id' => null,
        'vat_field' => null,
        'vat_rate' => null,
        'position' => null,
        'warehouse_id' => null,
        'created_at' => null,
        'updated_at' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
		'order_id' => false,
		'type_id' => false,
		'referrer_id' => false,
		'item_variation_id' => false,
		'quantity' => false,
		'order_item_name' => false,
		'attribute_values' => false,
		'shipping_profile_id' => false,
		'country_vat_id' => false,
		'vat_field' => false,
		'vat_rate' => false,
		'position' => false,
		'warehouse_id' => false,
		'created_at' => false,
		'updated_at' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'order_id' => 'orderId',
        'type_id' => 'typeId',
        'referrer_id' => 'referrerId',
        'item_variation_id' => 'itemVariationId',
        'quantity' => 'quantity',
        'order_item_name' => 'orderItemName',
        'attribute_values' => 'attributeValues',
        'shipping_profile_id' => 'shippingProfileId',
        'country_vat_id' => 'countryVatId',
        'vat_field' => 'vatField',
        'vat_rate' => 'vatRate',
        'position' => 'position',
        'warehouse_id' => 'warehouseId',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'order_id' => 'setOrderId',
        'type_id' => 'setTypeId',
        'referrer_id' => 'setReferrerId',
        'item_variation_id' => 'setItemVariationId',
        'quantity' => 'setQuantity',
        'order_item_name' => 'setOrderItemName',
        'attribute_values' => 'setAttributeValues',
        'shipping_profile_id' => 'setShippingProfileId',
        'country_vat_id' => 'setCountryVatId',
        'vat_field' => 'setVatField',
        'vat_rate' => 'setVatRate',
        'position' => 'setPosition',
        'warehouse_id' => 'setWarehouseId',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'order_id' => 'getOrderId',
        'type_id' => 'getTypeId',
        'referrer_id' => 'getReferrerId',
        'item_variation_id' => 'getItemVariationId',
        'quantity' => 'getQuantity',
        'order_item_name' => 'getOrderItemName',
        'attribute_values' => 'getAttributeValues',
        'shipping_profile_id' => 'getShippingProfileId',
        'country_vat_id' => 'getCountryVatId',
        'vat_field' => 'getVatField',
        'vat_rate' => 'getVatRate',
        'position' => 'getPosition',
        'warehouse_id' => 'getWarehouseId',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('order_id', $data ?? [], null);
        $this->setIfExists('type_id', $data ?? [], null);
        $this->setIfExists('referrer_id', $data ?? [], null);
        $this->setIfExists('item_variation_id', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('order_item_name', $data ?? [], null);
        $this->setIfExists('attribute_values', $data ?? [], null);
        $this->setIfExists('shipping_profile_id', $data ?? [], null);
        $this->setIfExists('country_vat_id', $data ?? [], null);
        $this->setIfExists('vat_field', $data ?? [], null);
        $this->setIfExists('vat_rate', $data ?? [], null);
        $this->setIfExists('position', $data ?? [], null);
        $this->setIfExists('warehouse_id', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The ID of the order item
     *
     * @return $this
     */
    public function setId(?int $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return int|null
     */
    public function getOrderId(): ?int
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param int|null $order_id The ID of the order that the order item belongs to
     *
     * @return $this
     */
    public function setOrderId(?int $order_id): static
    {
        if (is_null($order_id)) {
            throw new InvalidArgumentException('non-nullable order_id cannot be null');
        }
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets type_id
     *
     * @return int|null
     */
    public function getTypeId(): ?int
    {
        return $this->container['type_id'];
    }

    /**
     * Sets type_id
     *
     * @param int|null $type_id The ID of the order item type <ul> <li>VARIATION   = 1</li> <li>ITEM_BUNDLE   = 2</li> <li>BUNDLE_COMPONENT  = 3</li> <li>PROMOTIONAL_COUPON = 4</li> <li>GIFT_CARD   = 5</li> <li>SHIPPING_COSTS  = 6</li> <li>PAYMENT_SURCHARGE = 7</li> <li>GIFT_WRAP   = 8</li> <li>UNASSIGEND_VARIATION = 9</li> <li>DEPOSIT    = 10</li> <li>ORDER    = 11</li> <li>DUNNING_CHARGE  =   12</li> <li>ITEM_SET          =   13</li> <li>SET_COMPONENT  =   14</li> </ul>
     *
     * @return $this
     */
    public function setTypeId(?int $type_id): static
    {
        if (is_null($type_id)) {
            throw new InvalidArgumentException('non-nullable type_id cannot be null');
        }
        $this->container['type_id'] = $type_id;

        return $this;
    }

    /**
     * Gets referrer_id
     *
     * @return float|null
     */
    public function getReferrerId(): ?float
    {
        return $this->container['referrer_id'];
    }

    /**
     * Sets referrer_id
     *
     * @param float|null $referrer_id The ID of order item referrer
     *
     * @return $this
     */
    public function setReferrerId(?float $referrer_id): static
    {
        if (is_null($referrer_id)) {
            throw new InvalidArgumentException('non-nullable referrer_id cannot be null');
        }
        $this->container['referrer_id'] = $referrer_id;

        return $this;
    }

    /**
     * Gets item_variation_id
     *
     * @return int|null
     */
    public function getItemVariationId(): ?int
    {
        return $this->container['item_variation_id'];
    }

    /**
     * Sets item_variation_id
     *
     * @param int|null $item_variation_id The ID of the item variation
     *
     * @return $this
     */
    public function setItemVariationId(?int $item_variation_id): static
    {
        if (is_null($item_variation_id)) {
            throw new InvalidArgumentException('non-nullable item_variation_id cannot be null');
        }
        $this->container['item_variation_id'] = $item_variation_id;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float|null
     */
    public function getQuantity(): ?float
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float|null $quantity The quantity.
     *
     * @return $this
     */
    public function setQuantity(?float $quantity): static
    {
        if (is_null($quantity)) {
            throw new InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets order_item_name
     *
     * @return string|null
     */
    public function getOrderItemName(): ?string
    {
        return $this->container['order_item_name'];
    }

    /**
     * Sets order_item_name
     *
     * @param string|null $order_item_name The name of the order item
     *
     * @return $this
     */
    public function setOrderItemName(?string $order_item_name): static
    {
        if (is_null($order_item_name)) {
            throw new InvalidArgumentException('non-nullable order_item_name cannot be null');
        }
        $this->container['order_item_name'] = $order_item_name;

        return $this;
    }

    /**
     * Gets attribute_values
     *
     * @return string|null
     */
    public function getAttributeValues(): ?string
    {
        return $this->container['attribute_values'];
    }

    /**
     * Sets attribute_values
     *
     * @param string|null $attribute_values The attribute value names
     *
     * @return $this
     */
    public function setAttributeValues(?string $attribute_values): static
    {
        if (is_null($attribute_values)) {
            throw new InvalidArgumentException('non-nullable attribute_values cannot be null');
        }
        $this->container['attribute_values'] = $attribute_values;

        return $this;
    }

    /**
     * Gets shipping_profile_id
     *
     * @return int|null
     */
    public function getShippingProfileId(): ?int
    {
        return $this->container['shipping_profile_id'];
    }

    /**
     * Sets shipping_profile_id
     *
     * @param int|null $shipping_profile_id The ID of the order item's shipping profile
     *
     * @return $this
     */
    public function setShippingProfileId(?int $shipping_profile_id): static
    {
        if (is_null($shipping_profile_id)) {
            throw new InvalidArgumentException('non-nullable shipping_profile_id cannot be null');
        }
        $this->container['shipping_profile_id'] = $shipping_profile_id;

        return $this;
    }

    /**
     * Gets country_vat_id
     *
     * @return int|null
     */
    public function getCountryVatId(): ?int
    {
        return $this->container['country_vat_id'];
    }

    /**
     * Sets country_vat_id
     *
     * @param int|null $country_vat_id The ID of the country vat
     *
     * @return $this
     */
    public function setCountryVatId(?int $country_vat_id): static
    {
        if (is_null($country_vat_id)) {
            throw new InvalidArgumentException('non-nullable country_vat_id cannot be null');
        }
        $this->container['country_vat_id'] = $country_vat_id;

        return $this;
    }

    /**
     * Gets vat_field
     *
     * @return int|null
     */
    public function getVatField(): ?int
    {
        return $this->container['vat_field'];
    }

    /**
     * Sets vat_field
     *
     * @param int|null $vat_field The vat id (0-3).
     *
     * @return $this
     */
    public function setVatField(?int $vat_field): static
    {
        if (is_null($vat_field)) {
            throw new InvalidArgumentException('non-nullable vat_field cannot be null');
        }
        $this->container['vat_field'] = $vat_field;

        return $this;
    }

    /**
     * Gets vat_rate
     *
     * @return float|null
     */
    public function getVatRate(): ?float
    {
        return $this->container['vat_rate'];
    }

    /**
     * Sets vat_rate
     *
     * @param float|null $vat_rate The vat amount, e.g. 19.0 for 19% VAT.
     *
     * @return $this
     */
    public function setVatRate(?float $vat_rate): static
    {
        if (is_null($vat_rate)) {
            throw new InvalidArgumentException('non-nullable vat_rate cannot be null');
        }
        $this->container['vat_rate'] = $vat_rate;

        return $this;
    }

    /**
     * Gets position
     *
     * @return int|null
     */
    public function getPosition(): ?int
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param int|null $position The order items position in the order.
     *
     * @return $this
     */
    public function setPosition(?int $position): static
    {
        if (is_null($position)) {
            throw new InvalidArgumentException('non-nullable position cannot be null');
        }
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets warehouse_id
     *
     * @return int|null
     */
    public function getWarehouseId(): ?int
    {
        return $this->container['warehouse_id'];
    }

    /**
     * Sets warehouse_id
     *
     * @param int|null $warehouse_id The ID of the warehouse.
     *
     * @return $this
     */
    public function setWarehouseId(?int $warehouse_id): static
    {
        if (is_null($warehouse_id)) {
            throw new InvalidArgumentException('non-nullable warehouse_id cannot be null');
        }
        $this->container['warehouse_id'] = $warehouse_id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt(): ?string
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at The date at which the order item was created.
     *
     * @return $this
     */
    public function setCreatedAt(?string $created_at): static
    {
        if (is_null($created_at)) {
            throw new InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt(): ?string
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at The date that the order item was last updated.
     *
     * @return $this
     */
    public function setUpdatedAt(?string $updated_at): static
    {
        if (is_null($updated_at)) {
            throw new InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


