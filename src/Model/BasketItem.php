<?php
/**
 * BasketItem
 *
 * PHP version 8.1
 *
 * @package  ck/plenty-client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ck/plenty-client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use ck/plenty-client\ObjectSerializer;

/**
 * BasketItem Class Doc Comment
 *
 * @package  ck/plenty-client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class BasketItem implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'BasketItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'int',
        'basket_id' => 'int',
        'session_id' => 'string',
        'order_row_id' => 'int',
        'quantity' => 'float',
        'quantity_originally' => 'float',
        'item_id' => 'int',
        'price_id' => 'int',
        'attribute_value_set_id' => 'int',
        'rebate' => 'int',
        'vat' => 'float',
        'price' => 'float',
        'given_price' => 'float',
        'use_given_price' => 'bool',
        'input_width' => 'int',
        'input_length' => 'int',
        'input_height' => 'int',
        'item_type' => 'int',
        'external_item_id' => 'string',
        'no_edit_by_customer' => 'bool',
        'cost_center_id' => 'int',
        'gift_package_for_row_id' => 'int',
        'position' => 'int',
        'size' => 'string',
        'shipping_profile_id' => 'int',
        'referrer_id' => 'float',
        'delivery_date' => 'string',
        'category_id' => 'int',
        'reservation_datetime' => 'int',
        'variation_id' => 'int',
        'bundle_variation_id' => 'int',
        'created_at' => 'string',
        'updated_at' => 'string',
        'attribute_total_markup' => 'float',
        'basket_item_order_params' => 'object[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => null,
        'basket_id' => null,
        'session_id' => null,
        'order_row_id' => null,
        'quantity' => null,
        'quantity_originally' => null,
        'item_id' => null,
        'price_id' => null,
        'attribute_value_set_id' => null,
        'rebate' => null,
        'vat' => null,
        'price' => null,
        'given_price' => null,
        'use_given_price' => null,
        'input_width' => null,
        'input_length' => null,
        'input_height' => null,
        'item_type' => null,
        'external_item_id' => null,
        'no_edit_by_customer' => null,
        'cost_center_id' => null,
        'gift_package_for_row_id' => null,
        'position' => null,
        'size' => null,
        'shipping_profile_id' => null,
        'referrer_id' => null,
        'delivery_date' => null,
        'category_id' => null,
        'reservation_datetime' => null,
        'variation_id' => null,
        'bundle_variation_id' => null,
        'created_at' => null,
        'updated_at' => null,
        'attribute_total_markup' => null,
        'basket_item_order_params' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
		'basket_id' => false,
		'session_id' => false,
		'order_row_id' => false,
		'quantity' => false,
		'quantity_originally' => false,
		'item_id' => false,
		'price_id' => false,
		'attribute_value_set_id' => false,
		'rebate' => false,
		'vat' => false,
		'price' => false,
		'given_price' => false,
		'use_given_price' => false,
		'input_width' => false,
		'input_length' => false,
		'input_height' => false,
		'item_type' => false,
		'external_item_id' => false,
		'no_edit_by_customer' => false,
		'cost_center_id' => false,
		'gift_package_for_row_id' => false,
		'position' => false,
		'size' => false,
		'shipping_profile_id' => false,
		'referrer_id' => false,
		'delivery_date' => false,
		'category_id' => false,
		'reservation_datetime' => false,
		'variation_id' => false,
		'bundle_variation_id' => false,
		'created_at' => false,
		'updated_at' => false,
		'attribute_total_markup' => false,
		'basket_item_order_params' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'basket_id' => 'basketId',
        'session_id' => 'sessionId',
        'order_row_id' => 'orderRowId',
        'quantity' => 'quantity',
        'quantity_originally' => 'quantityOriginally',
        'item_id' => 'itemId',
        'price_id' => 'priceId',
        'attribute_value_set_id' => 'attributeValueSetId',
        'rebate' => 'rebate',
        'vat' => 'vat',
        'price' => 'price',
        'given_price' => 'givenPrice',
        'use_given_price' => 'useGivenPrice',
        'input_width' => 'inputWidth',
        'input_length' => 'inputLength',
        'input_height' => 'inputHeight',
        'item_type' => 'itemType',
        'external_item_id' => 'externalItemId',
        'no_edit_by_customer' => 'noEditByCustomer',
        'cost_center_id' => 'costCenterId',
        'gift_package_for_row_id' => 'giftPackageForRowId',
        'position' => 'position',
        'size' => 'size',
        'shipping_profile_id' => 'shippingProfileId',
        'referrer_id' => 'referrerId',
        'delivery_date' => 'deliveryDate',
        'category_id' => 'categoryId',
        'reservation_datetime' => 'reservationDatetime',
        'variation_id' => 'variationId',
        'bundle_variation_id' => 'bundleVariationId',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt',
        'attribute_total_markup' => 'attributeTotalMarkup',
        'basket_item_order_params' => 'basketItemOrderParams'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'basket_id' => 'setBasketId',
        'session_id' => 'setSessionId',
        'order_row_id' => 'setOrderRowId',
        'quantity' => 'setQuantity',
        'quantity_originally' => 'setQuantityOriginally',
        'item_id' => 'setItemId',
        'price_id' => 'setPriceId',
        'attribute_value_set_id' => 'setAttributeValueSetId',
        'rebate' => 'setRebate',
        'vat' => 'setVat',
        'price' => 'setPrice',
        'given_price' => 'setGivenPrice',
        'use_given_price' => 'setUseGivenPrice',
        'input_width' => 'setInputWidth',
        'input_length' => 'setInputLength',
        'input_height' => 'setInputHeight',
        'item_type' => 'setItemType',
        'external_item_id' => 'setExternalItemId',
        'no_edit_by_customer' => 'setNoEditByCustomer',
        'cost_center_id' => 'setCostCenterId',
        'gift_package_for_row_id' => 'setGiftPackageForRowId',
        'position' => 'setPosition',
        'size' => 'setSize',
        'shipping_profile_id' => 'setShippingProfileId',
        'referrer_id' => 'setReferrerId',
        'delivery_date' => 'setDeliveryDate',
        'category_id' => 'setCategoryId',
        'reservation_datetime' => 'setReservationDatetime',
        'variation_id' => 'setVariationId',
        'bundle_variation_id' => 'setBundleVariationId',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'attribute_total_markup' => 'setAttributeTotalMarkup',
        'basket_item_order_params' => 'setBasketItemOrderParams'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'basket_id' => 'getBasketId',
        'session_id' => 'getSessionId',
        'order_row_id' => 'getOrderRowId',
        'quantity' => 'getQuantity',
        'quantity_originally' => 'getQuantityOriginally',
        'item_id' => 'getItemId',
        'price_id' => 'getPriceId',
        'attribute_value_set_id' => 'getAttributeValueSetId',
        'rebate' => 'getRebate',
        'vat' => 'getVat',
        'price' => 'getPrice',
        'given_price' => 'getGivenPrice',
        'use_given_price' => 'getUseGivenPrice',
        'input_width' => 'getInputWidth',
        'input_length' => 'getInputLength',
        'input_height' => 'getInputHeight',
        'item_type' => 'getItemType',
        'external_item_id' => 'getExternalItemId',
        'no_edit_by_customer' => 'getNoEditByCustomer',
        'cost_center_id' => 'getCostCenterId',
        'gift_package_for_row_id' => 'getGiftPackageForRowId',
        'position' => 'getPosition',
        'size' => 'getSize',
        'shipping_profile_id' => 'getShippingProfileId',
        'referrer_id' => 'getReferrerId',
        'delivery_date' => 'getDeliveryDate',
        'category_id' => 'getCategoryId',
        'reservation_datetime' => 'getReservationDatetime',
        'variation_id' => 'getVariationId',
        'bundle_variation_id' => 'getBundleVariationId',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'attribute_total_markup' => 'getAttributeTotalMarkup',
        'basket_item_order_params' => 'getBasketItemOrderParams'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('basket_id', $data ?? [], null);
        $this->setIfExists('session_id', $data ?? [], null);
        $this->setIfExists('order_row_id', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('quantity_originally', $data ?? [], null);
        $this->setIfExists('item_id', $data ?? [], null);
        $this->setIfExists('price_id', $data ?? [], null);
        $this->setIfExists('attribute_value_set_id', $data ?? [], null);
        $this->setIfExists('rebate', $data ?? [], null);
        $this->setIfExists('vat', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('given_price', $data ?? [], null);
        $this->setIfExists('use_given_price', $data ?? [], null);
        $this->setIfExists('input_width', $data ?? [], null);
        $this->setIfExists('input_length', $data ?? [], null);
        $this->setIfExists('input_height', $data ?? [], null);
        $this->setIfExists('item_type', $data ?? [], null);
        $this->setIfExists('external_item_id', $data ?? [], null);
        $this->setIfExists('no_edit_by_customer', $data ?? [], null);
        $this->setIfExists('cost_center_id', $data ?? [], null);
        $this->setIfExists('gift_package_for_row_id', $data ?? [], null);
        $this->setIfExists('position', $data ?? [], null);
        $this->setIfExists('size', $data ?? [], null);
        $this->setIfExists('shipping_profile_id', $data ?? [], null);
        $this->setIfExists('referrer_id', $data ?? [], null);
        $this->setIfExists('delivery_date', $data ?? [], null);
        $this->setIfExists('category_id', $data ?? [], null);
        $this->setIfExists('reservation_datetime', $data ?? [], null);
        $this->setIfExists('variation_id', $data ?? [], null);
        $this->setIfExists('bundle_variation_id', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('attribute_total_markup', $data ?? [], null);
        $this->setIfExists('basket_item_order_params', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The ID of the item in the shopping cart
     *
     * @return $this
     */
    public function setId(?int $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets basket_id
     *
     * @return int|null
     */
    public function getBasketId(): ?int
    {
        return $this->container['basket_id'];
    }

    /**
     * Sets basket_id
     *
     * @param int|null $basket_id The ID of the shopping cart. The ID increases by 1 when a new customer enters the online store and adds an item to the shopping cart.
     *
     * @return $this
     */
    public function setBasketId(?int $basket_id): static
    {
        if (is_null($basket_id)) {
            throw new InvalidArgumentException('non-nullable basket_id cannot be null');
        }
        $this->container['basket_id'] = $basket_id;

        return $this;
    }

    /**
     * Gets session_id
     *
     * @return string|null
     */
    public function getSessionId(): ?string
    {
        return $this->container['session_id'];
    }

    /**
     * Sets session_id
     *
     * @param string|null $session_id The ID of the current customer session
     *
     * @return $this
     */
    public function setSessionId(?string $session_id): static
    {
        if (is_null($session_id)) {
            throw new InvalidArgumentException('non-nullable session_id cannot be null');
        }
        $this->container['session_id'] = $session_id;

        return $this;
    }

    /**
     * Gets order_row_id
     *
     * @return int|null
     */
    public function getOrderRowId(): ?int
    {
        return $this->container['order_row_id'];
    }

    /**
     * Sets order_row_id
     *
     * @param int|null $order_row_id 
     *
     * @return $this
     */
    public function setOrderRowId(?int $order_row_id): static
    {
        if (is_null($order_row_id)) {
            throw new InvalidArgumentException('non-nullable order_row_id cannot be null');
        }
        $this->container['order_row_id'] = $order_row_id;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float|null
     */
    public function getQuantity(): ?float
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float|null $quantity The current quantity of the item
     *
     * @return $this
     */
    public function setQuantity(?float $quantity): static
    {
        if (is_null($quantity)) {
            throw new InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets quantity_originally
     *
     * @return float|null
     */
    public function getQuantityOriginally(): ?float
    {
        return $this->container['quantity_originally'];
    }

    /**
     * Sets quantity_originally
     *
     * @param float|null $quantity_originally The initial quantity of the item
     *
     * @return $this
     */
    public function setQuantityOriginally(?float $quantity_originally): static
    {
        if (is_null($quantity_originally)) {
            throw new InvalidArgumentException('non-nullable quantity_originally cannot be null');
        }
        $this->container['quantity_originally'] = $quantity_originally;

        return $this;
    }

    /**
     * Gets item_id
     *
     * @return int|null
     */
    public function getItemId(): ?int
    {
        return $this->container['item_id'];
    }

    /**
     * Sets item_id
     *
     * @param int|null $item_id The ID of the item
     *
     * @return $this
     */
    public function setItemId(?int $item_id): static
    {
        if (is_null($item_id)) {
            throw new InvalidArgumentException('non-nullable item_id cannot be null');
        }
        $this->container['item_id'] = $item_id;

        return $this;
    }

    /**
     * Gets price_id
     *
     * @return int|null
     */
    public function getPriceId(): ?int
    {
        return $this->container['price_id'];
    }

    /**
     * Sets price_id
     *
     * @param int|null $price_id The ID of the item price
     *
     * @return $this
     */
    public function setPriceId(?int $price_id): static
    {
        if (is_null($price_id)) {
            throw new InvalidArgumentException('non-nullable price_id cannot be null');
        }
        $this->container['price_id'] = $price_id;

        return $this;
    }

    /**
     * Gets attribute_value_set_id
     *
     * @return int|null
     */
    public function getAttributeValueSetId(): ?int
    {
        return $this->container['attribute_value_set_id'];
    }

    /**
     * Sets attribute_value_set_id
     *
     * @param int|null $attribute_value_set_id The ID of the attribute value set
     *
     * @return $this
     */
    public function setAttributeValueSetId(?int $attribute_value_set_id): static
    {
        if (is_null($attribute_value_set_id)) {
            throw new InvalidArgumentException('non-nullable attribute_value_set_id cannot be null');
        }
        $this->container['attribute_value_set_id'] = $attribute_value_set_id;

        return $this;
    }

    /**
     * Gets rebate
     *
     * @return int|null
     */
    public function getRebate(): ?int
    {
        return $this->container['rebate'];
    }

    /**
     * Sets rebate
     *
     * @param int|null $rebate The discount on the item
     *
     * @return $this
     */
    public function setRebate(?int $rebate): static
    {
        if (is_null($rebate)) {
            throw new InvalidArgumentException('non-nullable rebate cannot be null');
        }
        $this->container['rebate'] = $rebate;

        return $this;
    }

    /**
     * Gets vat
     *
     * @return float|null
     */
    public function getVat(): ?float
    {
        return $this->container['vat'];
    }

    /**
     * Sets vat
     *
     * @param float|null $vat The VAT
     *
     * @return $this
     */
    public function setVat(?float $vat): static
    {
        if (is_null($vat)) {
            throw new InvalidArgumentException('non-nullable vat cannot be null');
        }
        $this->container['vat'] = $vat;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float|null
     */
    public function getPrice(): ?float
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float|null $price The item price
     *
     * @return $this
     */
    public function setPrice(?float $price): static
    {
        if (is_null($price)) {
            throw new InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets given_price
     *
     * @return float|null
     */
    public function getGivenPrice(): ?float
    {
        return $this->container['given_price'];
    }

    /**
     * Sets given_price
     *
     * @param float|null $given_price 
     *
     * @return $this
     */
    public function setGivenPrice(?float $given_price): static
    {
        if (is_null($given_price)) {
            throw new InvalidArgumentException('non-nullable given_price cannot be null');
        }
        $this->container['given_price'] = $given_price;

        return $this;
    }

    /**
     * Gets use_given_price
     *
     * @return bool|null
     */
    public function getUseGivenPrice(): ?bool
    {
        return $this->container['use_given_price'];
    }

    /**
     * Sets use_given_price
     *
     * @param bool|null $use_given_price 
     *
     * @return $this
     */
    public function setUseGivenPrice(?bool $use_given_price): static
    {
        if (is_null($use_given_price)) {
            throw new InvalidArgumentException('non-nullable use_given_price cannot be null');
        }
        $this->container['use_given_price'] = $use_given_price;

        return $this;
    }

    /**
     * Gets input_width
     *
     * @return int|null
     */
    public function getInputWidth(): ?int
    {
        return $this->container['input_width'];
    }

    /**
     * Sets input_width
     *
     * @param int|null $input_width The width of the item
     *
     * @return $this
     */
    public function setInputWidth(?int $input_width): static
    {
        if (is_null($input_width)) {
            throw new InvalidArgumentException('non-nullable input_width cannot be null');
        }
        $this->container['input_width'] = $input_width;

        return $this;
    }

    /**
     * Gets input_length
     *
     * @return int|null
     */
    public function getInputLength(): ?int
    {
        return $this->container['input_length'];
    }

    /**
     * Sets input_length
     *
     * @param int|null $input_length The length of the item
     *
     * @return $this
     */
    public function setInputLength(?int $input_length): static
    {
        if (is_null($input_length)) {
            throw new InvalidArgumentException('non-nullable input_length cannot be null');
        }
        $this->container['input_length'] = $input_length;

        return $this;
    }

    /**
     * Gets input_height
     *
     * @return int|null
     */
    public function getInputHeight(): ?int
    {
        return $this->container['input_height'];
    }

    /**
     * Sets input_height
     *
     * @param int|null $input_height The height of the item
     *
     * @return $this
     */
    public function setInputHeight(?int $input_height): static
    {
        if (is_null($input_height)) {
            throw new InvalidArgumentException('non-nullable input_height cannot be null');
        }
        $this->container['input_height'] = $input_height;

        return $this;
    }

    /**
     * Gets item_type
     *
     * @return int|null
     */
    public function getItemType(): ?int
    {
        return $this->container['item_type'];
    }

    /**
     * Sets item_type
     *
     * @param int|null $item_type The item type
     *
     * @return $this
     */
    public function setItemType(?int $item_type): static
    {
        if (is_null($item_type)) {
            throw new InvalidArgumentException('non-nullable item_type cannot be null');
        }
        $this->container['item_type'] = $item_type;

        return $this;
    }

    /**
     * Gets external_item_id
     *
     * @return string|null
     */
    public function getExternalItemId(): ?string
    {
        return $this->container['external_item_id'];
    }

    /**
     * Sets external_item_id
     *
     * @param string|null $external_item_id The external variation ID
     *
     * @return $this
     */
    public function setExternalItemId(?string $external_item_id): static
    {
        if (is_null($external_item_id)) {
            throw new InvalidArgumentException('non-nullable external_item_id cannot be null');
        }
        $this->container['external_item_id'] = $external_item_id;

        return $this;
    }

    /**
     * Gets no_edit_by_customer
     *
     * @return bool|null
     */
    public function getNoEditByCustomer(): ?bool
    {
        return $this->container['no_edit_by_customer'];
    }

    /**
     * Sets no_edit_by_customer
     *
     * @param bool|null $no_edit_by_customer Shows whether the item was edited by the customer
     *
     * @return $this
     */
    public function setNoEditByCustomer(?bool $no_edit_by_customer): static
    {
        if (is_null($no_edit_by_customer)) {
            throw new InvalidArgumentException('non-nullable no_edit_by_customer cannot be null');
        }
        $this->container['no_edit_by_customer'] = $no_edit_by_customer;

        return $this;
    }

    /**
     * Gets cost_center_id
     *
     * @return int|null
     */
    public function getCostCenterId(): ?int
    {
        return $this->container['cost_center_id'];
    }

    /**
     * Sets cost_center_id
     *
     * @param int|null $cost_center_id 
     *
     * @return $this
     */
    public function setCostCenterId(?int $cost_center_id): static
    {
        if (is_null($cost_center_id)) {
            throw new InvalidArgumentException('non-nullable cost_center_id cannot be null');
        }
        $this->container['cost_center_id'] = $cost_center_id;

        return $this;
    }

    /**
     * Gets gift_package_for_row_id
     *
     * @return int|null
     */
    public function getGiftPackageForRowId(): ?int
    {
        return $this->container['gift_package_for_row_id'];
    }

    /**
     * Sets gift_package_for_row_id
     *
     * @param int|null $gift_package_for_row_id 
     *
     * @return $this
     */
    public function setGiftPackageForRowId(?int $gift_package_for_row_id): static
    {
        if (is_null($gift_package_for_row_id)) {
            throw new InvalidArgumentException('non-nullable gift_package_for_row_id cannot be null');
        }
        $this->container['gift_package_for_row_id'] = $gift_package_for_row_id;

        return $this;
    }

    /**
     * Gets position
     *
     * @return int|null
     */
    public function getPosition(): ?int
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param int|null $position The item position
     *
     * @return $this
     */
    public function setPosition(?int $position): static
    {
        if (is_null($position)) {
            throw new InvalidArgumentException('non-nullable position cannot be null');
        }
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets size
     *
     * @return string|null
     */
    public function getSize(): ?string
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param string|null $size The item size
     *
     * @return $this
     */
    public function setSize(?string $size): static
    {
        if (is_null($size)) {
            throw new InvalidArgumentException('non-nullable size cannot be null');
        }
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets shipping_profile_id
     *
     * @return int|null
     */
    public function getShippingProfileId(): ?int
    {
        return $this->container['shipping_profile_id'];
    }

    /**
     * Sets shipping_profile_id
     *
     * @param int|null $shipping_profile_id The ID of the shipping profile
     *
     * @return $this
     */
    public function setShippingProfileId(?int $shipping_profile_id): static
    {
        if (is_null($shipping_profile_id)) {
            throw new InvalidArgumentException('non-nullable shipping_profile_id cannot be null');
        }
        $this->container['shipping_profile_id'] = $shipping_profile_id;

        return $this;
    }

    /**
     * Gets referrer_id
     *
     * @return float|null
     */
    public function getReferrerId(): ?float
    {
        return $this->container['referrer_id'];
    }

    /**
     * Sets referrer_id
     *
     * @param float|null $referrer_id The ID of the order referrer
     *
     * @return $this
     */
    public function setReferrerId(?float $referrer_id): static
    {
        if (is_null($referrer_id)) {
            throw new InvalidArgumentException('non-nullable referrer_id cannot be null');
        }
        $this->container['referrer_id'] = $referrer_id;

        return $this;
    }

    /**
     * Gets delivery_date
     *
     * @return string|null
     */
    public function getDeliveryDate(): ?string
    {
        return $this->container['delivery_date'];
    }

    /**
     * Sets delivery_date
     *
     * @param string|null $delivery_date The delivery date
     *
     * @return $this
     */
    public function setDeliveryDate(?string $delivery_date): static
    {
        if (is_null($delivery_date)) {
            throw new InvalidArgumentException('non-nullable delivery_date cannot be null');
        }
        $this->container['delivery_date'] = $delivery_date;

        return $this;
    }

    /**
     * Gets category_id
     *
     * @return int|null
     */
    public function getCategoryId(): ?int
    {
        return $this->container['category_id'];
    }

    /**
     * Sets category_id
     *
     * @param int|null $category_id The ID of the item category
     *
     * @return $this
     */
    public function setCategoryId(?int $category_id): static
    {
        if (is_null($category_id)) {
            throw new InvalidArgumentException('non-nullable category_id cannot be null');
        }
        $this->container['category_id'] = $category_id;

        return $this;
    }

    /**
     * Gets reservation_datetime
     *
     * @return int|null
     */
    public function getReservationDatetime(): ?int
    {
        return $this->container['reservation_datetime'];
    }

    /**
     * Sets reservation_datetime
     *
     * @param int|null $reservation_datetime 
     *
     * @return $this
     */
    public function setReservationDatetime(?int $reservation_datetime): static
    {
        if (is_null($reservation_datetime)) {
            throw new InvalidArgumentException('non-nullable reservation_datetime cannot be null');
        }
        $this->container['reservation_datetime'] = $reservation_datetime;

        return $this;
    }

    /**
     * Gets variation_id
     *
     * @return int|null
     */
    public function getVariationId(): ?int
    {
        return $this->container['variation_id'];
    }

    /**
     * Sets variation_id
     *
     * @param int|null $variation_id The ID of the item variation
     *
     * @return $this
     */
    public function setVariationId(?int $variation_id): static
    {
        if (is_null($variation_id)) {
            throw new InvalidArgumentException('non-nullable variation_id cannot be null');
        }
        $this->container['variation_id'] = $variation_id;

        return $this;
    }

    /**
     * Gets bundle_variation_id
     *
     * @return int|null
     */
    public function getBundleVariationId(): ?int
    {
        return $this->container['bundle_variation_id'];
    }

    /**
     * Sets bundle_variation_id
     *
     * @param int|null $bundle_variation_id The ID of the item bundle type
     *
     * @return $this
     */
    public function setBundleVariationId(?int $bundle_variation_id): static
    {
        if (is_null($bundle_variation_id)) {
            throw new InvalidArgumentException('non-nullable bundle_variation_id cannot be null');
        }
        $this->container['bundle_variation_id'] = $bundle_variation_id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt(): ?string
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at The date that the shopping cart was created
     *
     * @return $this
     */
    public function setCreatedAt(?string $created_at): static
    {
        if (is_null($created_at)) {
            throw new InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt(): ?string
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at The date that the shopping cart was updated last
     *
     * @return $this
     */
    public function setUpdatedAt(?string $updated_at): static
    {
        if (is_null($updated_at)) {
            throw new InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets attribute_total_markup
     *
     * @return float|null
     */
    public function getAttributeTotalMarkup(): ?float
    {
        return $this->container['attribute_total_markup'];
    }

    /**
     * Sets attribute_total_markup
     *
     * @param float|null $attribute_total_markup attribute total markup
     *
     * @return $this
     */
    public function setAttributeTotalMarkup(?float $attribute_total_markup): static
    {
        if (is_null($attribute_total_markup)) {
            throw new InvalidArgumentException('non-nullable attribute_total_markup cannot be null');
        }
        $this->container['attribute_total_markup'] = $attribute_total_markup;

        return $this;
    }

    /**
     * Gets basket_item_order_params
     *
     * @return object[]|null
     */
    public function getBasketItemOrderParams(): ?array
    {
        return $this->container['basket_item_order_params'];
    }

    /**
     * Sets basket_item_order_params
     *
     * @param object[]|null $basket_item_order_params Array of BasketItemParams
     *
     * @return $this
     */
    public function setBasketItemOrderParams(?array $basket_item_order_params): static
    {
        if (is_null($basket_item_order_params)) {
            throw new InvalidArgumentException('non-nullable basket_item_order_params cannot be null');
        }
        $this->container['basket_item_order_params'] = $basket_item_order_params;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


