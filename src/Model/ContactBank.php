<?php
/**
 * ContactBank
 *
 * PHP version 8.1
 *
 * @package  ck/plenty-client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ck/plenty-client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use ck/plenty-client\ObjectSerializer;

/**
 * ContactBank Class Doc Comment
 *
 * @package  ck/plenty-client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ContactBank implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ContactBank';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'int',
        'contact_id' => 'int',
        'order_id' => 'int',
        'account_owner' => 'string',
        'bank_name' => 'string',
        'bank_address' => 'string',
        'bank_postal_code_town' => 'string',
        'bank_country' => 'string',
        'iban' => 'string',
        'bic' => 'string',
        'account_number' => 'string',
        'sort_code' => 'string',
        'last_update_by' => 'string',
        'direct_debit_mandate_available' => 'int',
        'direct_debit_mandate_at' => 'string',
        'direct_debit_method' => 'string',
        'direct_debit_type' => 'string',
        'payment_method' => 'string',
        'created_at' => 'string',
        'updated_at' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => null,
        'contact_id' => null,
        'order_id' => null,
        'account_owner' => null,
        'bank_name' => null,
        'bank_address' => null,
        'bank_postal_code_town' => null,
        'bank_country' => null,
        'iban' => null,
        'bic' => null,
        'account_number' => null,
        'sort_code' => null,
        'last_update_by' => null,
        'direct_debit_mandate_available' => null,
        'direct_debit_mandate_at' => null,
        'direct_debit_method' => null,
        'direct_debit_type' => null,
        'payment_method' => null,
        'created_at' => null,
        'updated_at' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
		'contact_id' => false,
		'order_id' => false,
		'account_owner' => false,
		'bank_name' => false,
		'bank_address' => false,
		'bank_postal_code_town' => false,
		'bank_country' => false,
		'iban' => false,
		'bic' => false,
		'account_number' => false,
		'sort_code' => false,
		'last_update_by' => false,
		'direct_debit_mandate_available' => false,
		'direct_debit_mandate_at' => false,
		'direct_debit_method' => false,
		'direct_debit_type' => false,
		'payment_method' => false,
		'created_at' => false,
		'updated_at' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'contact_id' => 'contactId',
        'order_id' => 'orderId',
        'account_owner' => 'accountOwner',
        'bank_name' => 'bankName',
        'bank_address' => 'bankAddress',
        'bank_postal_code_town' => 'bankPostalCodeTown',
        'bank_country' => 'bankCountry',
        'iban' => 'iban',
        'bic' => 'bic',
        'account_number' => 'accountNumber',
        'sort_code' => 'sortCode',
        'last_update_by' => 'lastUpdateBy',
        'direct_debit_mandate_available' => 'directDebitMandateAvailable',
        'direct_debit_mandate_at' => 'directDebitMandateAt',
        'direct_debit_method' => 'directDebitMethod',
        'direct_debit_type' => 'directDebitType',
        'payment_method' => 'paymentMethod',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'contact_id' => 'setContactId',
        'order_id' => 'setOrderId',
        'account_owner' => 'setAccountOwner',
        'bank_name' => 'setBankName',
        'bank_address' => 'setBankAddress',
        'bank_postal_code_town' => 'setBankPostalCodeTown',
        'bank_country' => 'setBankCountry',
        'iban' => 'setIban',
        'bic' => 'setBic',
        'account_number' => 'setAccountNumber',
        'sort_code' => 'setSortCode',
        'last_update_by' => 'setLastUpdateBy',
        'direct_debit_mandate_available' => 'setDirectDebitMandateAvailable',
        'direct_debit_mandate_at' => 'setDirectDebitMandateAt',
        'direct_debit_method' => 'setDirectDebitMethod',
        'direct_debit_type' => 'setDirectDebitType',
        'payment_method' => 'setPaymentMethod',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'contact_id' => 'getContactId',
        'order_id' => 'getOrderId',
        'account_owner' => 'getAccountOwner',
        'bank_name' => 'getBankName',
        'bank_address' => 'getBankAddress',
        'bank_postal_code_town' => 'getBankPostalCodeTown',
        'bank_country' => 'getBankCountry',
        'iban' => 'getIban',
        'bic' => 'getBic',
        'account_number' => 'getAccountNumber',
        'sort_code' => 'getSortCode',
        'last_update_by' => 'getLastUpdateBy',
        'direct_debit_mandate_available' => 'getDirectDebitMandateAvailable',
        'direct_debit_mandate_at' => 'getDirectDebitMandateAt',
        'direct_debit_method' => 'getDirectDebitMethod',
        'direct_debit_type' => 'getDirectDebitType',
        'payment_method' => 'getPaymentMethod',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('contact_id', $data ?? [], null);
        $this->setIfExists('order_id', $data ?? [], null);
        $this->setIfExists('account_owner', $data ?? [], null);
        $this->setIfExists('bank_name', $data ?? [], null);
        $this->setIfExists('bank_address', $data ?? [], null);
        $this->setIfExists('bank_postal_code_town', $data ?? [], null);
        $this->setIfExists('bank_country', $data ?? [], null);
        $this->setIfExists('iban', $data ?? [], null);
        $this->setIfExists('bic', $data ?? [], null);
        $this->setIfExists('account_number', $data ?? [], null);
        $this->setIfExists('sort_code', $data ?? [], null);
        $this->setIfExists('last_update_by', $data ?? [], null);
        $this->setIfExists('direct_debit_mandate_available', $data ?? [], null);
        $this->setIfExists('direct_debit_mandate_at', $data ?? [], null);
        $this->setIfExists('direct_debit_method', $data ?? [], null);
        $this->setIfExists('direct_debit_type', $data ?? [], null);
        $this->setIfExists('payment_method', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The ID of the bank account
     *
     * @return $this
     */
    public function setId(?int $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets contact_id
     *
     * @return int|null
     */
    public function getContactId(): ?int
    {
        return $this->container['contact_id'];
    }

    /**
     * Sets contact_id
     *
     * @param int|null $contact_id The ID of the contact the bank account belongs to
     *
     * @return $this
     */
    public function setContactId(?int $contact_id): static
    {
        if (is_null($contact_id)) {
            throw new InvalidArgumentException('non-nullable contact_id cannot be null');
        }
        $this->container['contact_id'] = $contact_id;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return int|null
     */
    public function getOrderId(): ?int
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param int|null $order_id The ID of the order the bank account belongs to
     *
     * @return $this
     */
    public function setOrderId(?int $order_id): static
    {
        if (is_null($order_id)) {
            throw new InvalidArgumentException('non-nullable order_id cannot be null');
        }
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets account_owner
     *
     * @return string|null
     */
    public function getAccountOwner(): ?string
    {
        return $this->container['account_owner'];
    }

    /**
     * Sets account_owner
     *
     * @param string|null $account_owner The owner of the bank account
     *
     * @return $this
     */
    public function setAccountOwner(?string $account_owner): static
    {
        if (is_null($account_owner)) {
            throw new InvalidArgumentException('non-nullable account_owner cannot be null');
        }
        $this->container['account_owner'] = $account_owner;

        return $this;
    }

    /**
     * Gets bank_name
     *
     * @return string|null
     */
    public function getBankName(): ?string
    {
        return $this->container['bank_name'];
    }

    /**
     * Sets bank_name
     *
     * @param string|null $bank_name The name of the bank
     *
     * @return $this
     */
    public function setBankName(?string $bank_name): static
    {
        if (is_null($bank_name)) {
            throw new InvalidArgumentException('non-nullable bank_name cannot be null');
        }
        $this->container['bank_name'] = $bank_name;

        return $this;
    }

    /**
     * Gets bank_address
     *
     * @return string|null
     */
    public function getBankAddress(): ?string
    {
        return $this->container['bank_address'];
    }

    /**
     * Sets bank_address
     *
     * @param string|null $bank_address The address of the bank
     *
     * @return $this
     */
    public function setBankAddress(?string $bank_address): static
    {
        if (is_null($bank_address)) {
            throw new InvalidArgumentException('non-nullable bank_address cannot be null');
        }
        $this->container['bank_address'] = $bank_address;

        return $this;
    }

    /**
     * Gets bank_postal_code_town
     *
     * @return string|null
     */
    public function getBankPostalCodeTown(): ?string
    {
        return $this->container['bank_postal_code_town'];
    }

    /**
     * Sets bank_postal_code_town
     *
     * @param string|null $bank_postal_code_town The postcode and town of the bank
     *
     * @return $this
     */
    public function setBankPostalCodeTown(?string $bank_postal_code_town): static
    {
        if (is_null($bank_postal_code_town)) {
            throw new InvalidArgumentException('non-nullable bank_postal_code_town cannot be null');
        }
        $this->container['bank_postal_code_town'] = $bank_postal_code_town;

        return $this;
    }

    /**
     * Gets bank_country
     *
     * @return string|null
     */
    public function getBankCountry(): ?string
    {
        return $this->container['bank_country'];
    }

    /**
     * Sets bank_country
     *
     * @param string|null $bank_country The country of the bank
     *
     * @return $this
     */
    public function setBankCountry(?string $bank_country): static
    {
        if (is_null($bank_country)) {
            throw new InvalidArgumentException('non-nullable bank_country cannot be null');
        }
        $this->container['bank_country'] = $bank_country;

        return $this;
    }

    /**
     * Gets iban
     *
     * @return string|null
     */
    public function getIban(): ?string
    {
        return $this->container['iban'];
    }

    /**
     * Sets iban
     *
     * @param string|null $iban The IBAN of the bank account
     *
     * @return $this
     */
    public function setIban(?string $iban): static
    {
        if (is_null($iban)) {
            throw new InvalidArgumentException('non-nullable iban cannot be null');
        }
        $this->container['iban'] = $iban;

        return $this;
    }

    /**
     * Gets bic
     *
     * @return string|null
     */
    public function getBic(): ?string
    {
        return $this->container['bic'];
    }

    /**
     * Sets bic
     *
     * @param string|null $bic The BIC of the bank account
     *
     * @return $this
     */
    public function setBic(?string $bic): static
    {
        if (is_null($bic)) {
            throw new InvalidArgumentException('non-nullable bic cannot be null');
        }
        $this->container['bic'] = $bic;

        return $this;
    }

    /**
     * Gets account_number
     *
     * @return string|null
     */
    public function getAccountNumber(): ?string
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string|null $account_number The account number of the bank account
     *
     * @return $this
     */
    public function setAccountNumber(?string $account_number): static
    {
        if (is_null($account_number)) {
            throw new InvalidArgumentException('non-nullable account_number cannot be null');
        }
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets sort_code
     *
     * @return string|null
     */
    public function getSortCode(): ?string
    {
        return $this->container['sort_code'];
    }

    /**
     * Sets sort_code
     *
     * @param string|null $sort_code The sort code of the bank account
     *
     * @return $this
     */
    public function setSortCode(?string $sort_code): static
    {
        if (is_null($sort_code)) {
            throw new InvalidArgumentException('non-nullable sort_code cannot be null');
        }
        $this->container['sort_code'] = $sort_code;

        return $this;
    }

    /**
     * Gets last_update_by
     *
     * @return string|null
     */
    public function getLastUpdateBy(): ?string
    {
        return $this->container['last_update_by'];
    }

    /**
     * Sets last_update_by
     *
     * @param string|null $last_update_by The source of the last change (possible values: `customer`, `backend`, `import`)
     *
     * @return $this
     */
    public function setLastUpdateBy(?string $last_update_by): static
    {
        if (is_null($last_update_by)) {
            throw new InvalidArgumentException('non-nullable last_update_by cannot be null');
        }
        $this->container['last_update_by'] = $last_update_by;

        return $this;
    }

    /**
     * Gets direct_debit_mandate_available
     *
     * @return int|null
     */
    public function getDirectDebitMandateAvailable(): ?int
    {
        return $this->container['direct_debit_mandate_available'];
    }

    /**
     * Sets direct_debit_mandate_available
     *
     * @param int|null $direct_debit_mandate_available Flag that indicates if a direct debit mandate is available
     *
     * @return $this
     */
    public function setDirectDebitMandateAvailable(?int $direct_debit_mandate_available): static
    {
        if (is_null($direct_debit_mandate_available)) {
            throw new InvalidArgumentException('non-nullable direct_debit_mandate_available cannot be null');
        }
        $this->container['direct_debit_mandate_available'] = $direct_debit_mandate_available;

        return $this;
    }

    /**
     * Gets direct_debit_mandate_at
     *
     * @return string|null
     */
    public function getDirectDebitMandateAt(): ?string
    {
        return $this->container['direct_debit_mandate_at'];
    }

    /**
     * Sets direct_debit_mandate_at
     *
     * @param string|null $direct_debit_mandate_at The time the direct debit mandate was created as unix timestamp
     *
     * @return $this
     */
    public function setDirectDebitMandateAt(?string $direct_debit_mandate_at): static
    {
        if (is_null($direct_debit_mandate_at)) {
            throw new InvalidArgumentException('non-nullable direct_debit_mandate_at cannot be null');
        }
        $this->container['direct_debit_mandate_at'] = $direct_debit_mandate_at;

        return $this;
    }

    /**
     * Gets direct_debit_method
     *
     * @return string|null
     */
    public function getDirectDebitMethod(): ?string
    {
        return $this->container['direct_debit_method'];
    }

    /**
     * Sets direct_debit_method
     *
     * @param string|null $direct_debit_method The direct debit method (possible values: `sepaDirectDebit`, `sepaB2bDirectDebit`)
     *
     * @return $this
     */
    public function setDirectDebitMethod(?string $direct_debit_method): static
    {
        if (is_null($direct_debit_method)) {
            throw new InvalidArgumentException('non-nullable direct_debit_method cannot be null');
        }
        $this->container['direct_debit_method'] = $direct_debit_method;

        return $this;
    }

    /**
     * Gets direct_debit_type
     *
     * @return string|null
     */
    public function getDirectDebitType(): ?string
    {
        return $this->container['direct_debit_type'];
    }

    /**
     * Sets direct_debit_type
     *
     * @param string|null $direct_debit_type The direct debit type (possible values: `first`, `next`)
     *
     * @return $this
     */
    public function setDirectDebitType(?string $direct_debit_type): static
    {
        if (is_null($direct_debit_type)) {
            throw new InvalidArgumentException('non-nullable direct_debit_type cannot be null');
        }
        $this->container['direct_debit_type'] = $direct_debit_type;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return string|null
     */
    public function getPaymentMethod(): ?string
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param string|null $payment_method The payment method (possible values: `recurrent`, `onOff`)
     *
     * @return $this
     */
    public function setPaymentMethod(?string $payment_method): static
    {
        if (is_null($payment_method)) {
            throw new InvalidArgumentException('non-nullable payment_method cannot be null');
        }
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt(): ?string
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at The time the bank account was created as  unix timestamp
     *
     * @return $this
     */
    public function setCreatedAt(?string $created_at): static
    {
        if (is_null($created_at)) {
            throw new InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt(): ?string
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at The time the bank account was last updated as  unix timestamp
     *
     * @return $this
     */
    public function setUpdatedAt(?string $updated_at): static
    {
        if (is_null($updated_at)) {
            throw new InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


