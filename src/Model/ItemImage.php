<?php
/**
 * ItemImage
 *
 * PHP version 8.1
 *
 * @package  ck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ck\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use ck\ObjectSerializer;

/**
 * ItemImage Class Doc Comment
 *
 * @package  ck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ItemImage implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ItemImage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'int',
        'item_id' => 'int',
        'file_type' => 'string',
        'path' => 'string',
        'position' => 'int',
        'created_at' => 'string',
        'updated_at' => 'string',
        'md5_checksum' => 'string',
        'md5_checksum_original' => 'string',
        'size' => 'int',
        'width' => 'int',
        'height' => 'int',
        'url' => 'string',
        'url_middle' => 'string',
        'url_preview' => 'string',
        'url_second_preview' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => null,
        'item_id' => null,
        'file_type' => null,
        'path' => null,
        'position' => null,
        'created_at' => null,
        'updated_at' => null,
        'md5_checksum' => null,
        'md5_checksum_original' => null,
        'size' => null,
        'width' => null,
        'height' => null,
        'url' => null,
        'url_middle' => null,
        'url_preview' => null,
        'url_second_preview' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
		'item_id' => false,
		'file_type' => false,
		'path' => false,
		'position' => false,
		'created_at' => false,
		'updated_at' => false,
		'md5_checksum' => false,
		'md5_checksum_original' => false,
		'size' => false,
		'width' => false,
		'height' => false,
		'url' => false,
		'url_middle' => false,
		'url_preview' => false,
		'url_second_preview' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'item_id' => 'itemId',
        'file_type' => 'fileType',
        'path' => 'path',
        'position' => 'position',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt',
        'md5_checksum' => 'md5Checksum',
        'md5_checksum_original' => 'md5ChecksumOriginal',
        'size' => 'size',
        'width' => 'width',
        'height' => 'height',
        'url' => 'url',
        'url_middle' => 'urlMiddle',
        'url_preview' => 'urlPreview',
        'url_second_preview' => 'urlSecondPreview'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'item_id' => 'setItemId',
        'file_type' => 'setFileType',
        'path' => 'setPath',
        'position' => 'setPosition',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'md5_checksum' => 'setMd5Checksum',
        'md5_checksum_original' => 'setMd5ChecksumOriginal',
        'size' => 'setSize',
        'width' => 'setWidth',
        'height' => 'setHeight',
        'url' => 'setUrl',
        'url_middle' => 'setUrlMiddle',
        'url_preview' => 'setUrlPreview',
        'url_second_preview' => 'setUrlSecondPreview'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'item_id' => 'getItemId',
        'file_type' => 'getFileType',
        'path' => 'getPath',
        'position' => 'getPosition',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'md5_checksum' => 'getMd5Checksum',
        'md5_checksum_original' => 'getMd5ChecksumOriginal',
        'size' => 'getSize',
        'width' => 'getWidth',
        'height' => 'getHeight',
        'url' => 'getUrl',
        'url_middle' => 'getUrlMiddle',
        'url_preview' => 'getUrlPreview',
        'url_second_preview' => 'getUrlSecondPreview'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('item_id', $data ?? [], null);
        $this->setIfExists('file_type', $data ?? [], null);
        $this->setIfExists('path', $data ?? [], null);
        $this->setIfExists('position', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('md5_checksum', $data ?? [], null);
        $this->setIfExists('md5_checksum_original', $data ?? [], null);
        $this->setIfExists('size', $data ?? [], null);
        $this->setIfExists('width', $data ?? [], null);
        $this->setIfExists('height', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('url_middle', $data ?? [], null);
        $this->setIfExists('url_preview', $data ?? [], null);
        $this->setIfExists('url_second_preview', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The unique ID of the image
     *
     * @return $this
     */
    public function setId(?int $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets item_id
     *
     * @return int|null
     */
    public function getItemId(): ?int
    {
        return $this->container['item_id'];
    }

    /**
     * Sets item_id
     *
     * @param int|null $item_id The unique ID of the item the image is associated with
     *
     * @return $this
     */
    public function setItemId(?int $item_id): static
    {
        if (is_null($item_id)) {
            throw new InvalidArgumentException('non-nullable item_id cannot be null');
        }
        $this->container['item_id'] = $item_id;

        return $this;
    }

    /**
     * Gets file_type
     *
     * @return string|null
     */
    public function getFileType(): ?string
    {
        return $this->container['file_type'];
    }

    /**
     * Sets file_type
     *
     * @param string|null $file_type The file format of the image. Possible file formats: jpg, jpeg, png, gif, svg
     *
     * @return $this
     */
    public function setFileType(?string $file_type): static
    {
        if (is_null($file_type)) {
            throw new InvalidArgumentException('non-nullable file_type cannot be null');
        }
        $this->container['file_type'] = $file_type;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string|null
     */
    public function getPath(): ?string
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string|null $path The path under which the image is saved.
     *
     * @return $this
     */
    public function setPath(?string $path): static
    {
        if (is_null($path)) {
            throw new InvalidArgumentException('non-nullable path cannot be null');
        }
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets position
     *
     * @return int|null
     */
    public function getPosition(): ?int
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param int|null $position The position of the image. The position is used for sorting images in the online store.
     *
     * @return $this
     */
    public function setPosition(?int $position): static
    {
        if (is_null($position)) {
            throw new InvalidArgumentException('non-nullable position cannot be null');
        }
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt(): ?string
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at The time the image was uploaded.
     *
     * @return $this
     */
    public function setCreatedAt(?string $created_at): static
    {
        if (is_null($created_at)) {
            throw new InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt(): ?string
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at The time the image details were last updated.
     *
     * @return $this
     */
    public function setUpdatedAt(?string $updated_at): static
    {
        if (is_null($updated_at)) {
            throw new InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets md5_checksum
     *
     * @return string|null
     */
    public function getMd5Checksum(): ?string
    {
        return $this->container['md5_checksum'];
    }

    /**
     * Sets md5_checksum
     *
     * @param string|null $md5_checksum The MD5 hash value of the image file
     *
     * @return $this
     */
    public function setMd5Checksum(?string $md5_checksum): static
    {
        if (is_null($md5_checksum)) {
            throw new InvalidArgumentException('non-nullable md5_checksum cannot be null');
        }
        $this->container['md5_checksum'] = $md5_checksum;

        return $this;
    }

    /**
     * Gets md5_checksum_original
     *
     * @return string|null
     */
    public function getMd5ChecksumOriginal(): ?string
    {
        return $this->container['md5_checksum_original'];
    }

    /**
     * Sets md5_checksum_original
     *
     * @param string|null $md5_checksum_original The MD5 hash value of the original image file
     *
     * @return $this
     */
    public function setMd5ChecksumOriginal(?string $md5_checksum_original): static
    {
        if (is_null($md5_checksum_original)) {
            throw new InvalidArgumentException('non-nullable md5_checksum_original cannot be null');
        }
        $this->container['md5_checksum_original'] = $md5_checksum_original;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int|null
     */
    public function getSize(): ?int
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int|null $size The size of the image in pixels
     *
     * @return $this
     */
    public function setSize(?int $size): static
    {
        if (is_null($size)) {
            throw new InvalidArgumentException('non-nullable size cannot be null');
        }
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets width
     *
     * @return int|null
     */
    public function getWidth(): ?int
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param int|null $width The width of the image in pixels
     *
     * @return $this
     */
    public function setWidth(?int $width): static
    {
        if (is_null($width)) {
            throw new InvalidArgumentException('non-nullable width cannot be null');
        }
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets height
     *
     * @return int|null
     */
    public function getHeight(): ?int
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param int|null $height The height of the image in pixels
     *
     * @return $this
     */
    public function setHeight(?int $height): static
    {
        if (is_null($height)) {
            throw new InvalidArgumentException('non-nullable height cannot be null');
        }
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl(): ?string
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url The URL under which the image can be accessed after the upload.
     *
     * @return $this
     */
    public function setUrl(?string $url): static
    {
        if (is_null($url)) {
            throw new InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets url_middle
     *
     * @return string|null
     */
    public function getUrlMiddle(): ?string
    {
        return $this->container['url_middle'];
    }

    /**
     * Sets url_middle
     *
     * @param string|null $url_middle The URL that points to the  medium-sized version of the item image.
     *
     * @return $this
     */
    public function setUrlMiddle(?string $url_middle): static
    {
        if (is_null($url_middle)) {
            throw new InvalidArgumentException('non-nullable url_middle cannot be null');
        }
        $this->container['url_middle'] = $url_middle;

        return $this;
    }

    /**
     * Gets url_preview
     *
     * @return string|null
     */
    public function getUrlPreview(): ?string
    {
        return $this->container['url_preview'];
    }

    /**
     * Sets url_preview
     *
     * @param string|null $url_preview The URL that points to the  first preview version of the item image.
     *
     * @return $this
     */
    public function setUrlPreview(?string $url_preview): static
    {
        if (is_null($url_preview)) {
            throw new InvalidArgumentException('non-nullable url_preview cannot be null');
        }
        $this->container['url_preview'] = $url_preview;

        return $this;
    }

    /**
     * Gets url_second_preview
     *
     * @return string|null
     */
    public function getUrlSecondPreview(): ?string
    {
        return $this->container['url_second_preview'];
    }

    /**
     * Sets url_second_preview
     *
     * @param string|null $url_second_preview The URL that points to the second preview version of the item image.
     *
     * @return $this
     */
    public function setUrlSecondPreview(?string $url_second_preview): static
    {
        if (is_null($url_second_preview)) {
            throw new InvalidArgumentException('non-nullable url_second_preview cannot be null');
        }
        $this->container['url_second_preview'] = $url_second_preview;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


