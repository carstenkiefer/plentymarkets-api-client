<?php
/**
 * User
 *
 * PHP version 8.1
 *
 * @package  ck/plenty-client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ck/plenty-client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use ck/plenty-client\ObjectSerializer;

/**
 * User Class Doc Comment
 *
 * @package  ck/plenty-client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class User implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'User';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'int',
        'user' => 'string',
        'real_name' => 'string',
        'lang' => 'string',
        'ip_limit' => 'string',
        'ustatus' => 'bool',
        'member_id' => 'int',
        'timestamp' => 'string',
        'email' => 'string',
        'timezone' => 'string',
        'google_email' => 'string',
        'skype' => 'string',
        'ical' => 'string',
        'ps_config' => 'bool',
        'ps_item' => 'bool',
        'ps_ebay' => 'bool',
        'ps_stock' => 'bool',
        'ps_customer' => 'bool',
        'ps_order' => 'bool',
        'ps_stats' => 'bool',
        'ps_data' => 'bool',
        'pc_config' => 'bool',
        'pc_content' => 'bool',
        'pc_newsletter' => 'bool',
        'pc_layout' => 'bool',
        'pc_dialog' => 'bool',
        'pc_stats' => 'bool',
        'pc_data' => 'bool',
        'pc_blog' => 'bool',
        'signature' => 'string',
        'color' => 'string',
        'eks' => 'bool',
        'payments' => 'bool',
        'accept_agb' => 'int',
        'api' => 'bool',
        'image' => 'string',
        'del_order' => 'bool',
        'del_article' => 'bool',
        'del_record' => 'bool',
        'plentystat' => 'bool',
        'plentyconnect' => 'bool',
        'webspace_access' => 'bool',
        'access_control_list' => 'string',
        'plentymarkets_shipping_order_id' => 'bool',
        'plentymarkets_shipping_item' => 'bool',
        'plentymarkets_shipping_auto' => 'bool',
        'plentymarkets_shipping_label' => 'bool',
        'plentymarkets_shipping_config' => 'bool',
        'warehouse_id' => 'int',
        'calendar' => 'bool',
        'order_status' => 'string',
        'warehouse_repair_id' => 'int',
        'project' => 'bool',
        'ticket' => 'bool',
        'order' => 'bool',
        'blog' => 'bool',
        'lead' => 'bool',
        'customer' => 'bool',
        'total_vacation_days' => 'float',
        'role_id' => 'int',
        'salutation' => 'string',
        'data_lang' => 'string',
        'disabled' => 'bool',
        'scheduler' => 'bool',
        'item' => 'bool',
        'incoming_items' => 'bool',
        'backend_plugin_set_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => null,
        'user' => null,
        'real_name' => null,
        'lang' => null,
        'ip_limit' => null,
        'ustatus' => null,
        'member_id' => null,
        'timestamp' => null,
        'email' => null,
        'timezone' => null,
        'google_email' => null,
        'skype' => null,
        'ical' => null,
        'ps_config' => null,
        'ps_item' => null,
        'ps_ebay' => null,
        'ps_stock' => null,
        'ps_customer' => null,
        'ps_order' => null,
        'ps_stats' => null,
        'ps_data' => null,
        'pc_config' => null,
        'pc_content' => null,
        'pc_newsletter' => null,
        'pc_layout' => null,
        'pc_dialog' => null,
        'pc_stats' => null,
        'pc_data' => null,
        'pc_blog' => null,
        'signature' => null,
        'color' => null,
        'eks' => null,
        'payments' => null,
        'accept_agb' => null,
        'api' => null,
        'image' => null,
        'del_order' => null,
        'del_article' => null,
        'del_record' => null,
        'plentystat' => null,
        'plentyconnect' => null,
        'webspace_access' => null,
        'access_control_list' => null,
        'plentymarkets_shipping_order_id' => null,
        'plentymarkets_shipping_item' => null,
        'plentymarkets_shipping_auto' => null,
        'plentymarkets_shipping_label' => null,
        'plentymarkets_shipping_config' => null,
        'warehouse_id' => null,
        'calendar' => null,
        'order_status' => null,
        'warehouse_repair_id' => null,
        'project' => null,
        'ticket' => null,
        'order' => null,
        'blog' => null,
        'lead' => null,
        'customer' => null,
        'total_vacation_days' => null,
        'role_id' => null,
        'salutation' => null,
        'data_lang' => null,
        'disabled' => null,
        'scheduler' => null,
        'item' => null,
        'incoming_items' => null,
        'backend_plugin_set_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
		'user' => false,
		'real_name' => false,
		'lang' => false,
		'ip_limit' => false,
		'ustatus' => false,
		'member_id' => false,
		'timestamp' => false,
		'email' => false,
		'timezone' => false,
		'google_email' => false,
		'skype' => false,
		'ical' => false,
		'ps_config' => false,
		'ps_item' => false,
		'ps_ebay' => false,
		'ps_stock' => false,
		'ps_customer' => false,
		'ps_order' => false,
		'ps_stats' => false,
		'ps_data' => false,
		'pc_config' => false,
		'pc_content' => false,
		'pc_newsletter' => false,
		'pc_layout' => false,
		'pc_dialog' => false,
		'pc_stats' => false,
		'pc_data' => false,
		'pc_blog' => false,
		'signature' => false,
		'color' => false,
		'eks' => false,
		'payments' => false,
		'accept_agb' => false,
		'api' => false,
		'image' => false,
		'del_order' => false,
		'del_article' => false,
		'del_record' => false,
		'plentystat' => false,
		'plentyconnect' => false,
		'webspace_access' => false,
		'access_control_list' => false,
		'plentymarkets_shipping_order_id' => false,
		'plentymarkets_shipping_item' => false,
		'plentymarkets_shipping_auto' => false,
		'plentymarkets_shipping_label' => false,
		'plentymarkets_shipping_config' => false,
		'warehouse_id' => false,
		'calendar' => false,
		'order_status' => false,
		'warehouse_repair_id' => false,
		'project' => false,
		'ticket' => false,
		'order' => false,
		'blog' => false,
		'lead' => false,
		'customer' => false,
		'total_vacation_days' => false,
		'role_id' => false,
		'salutation' => false,
		'data_lang' => false,
		'disabled' => false,
		'scheduler' => false,
		'item' => false,
		'incoming_items' => false,
		'backend_plugin_set_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'user' => 'user',
        'real_name' => 'realName',
        'lang' => 'lang',
        'ip_limit' => 'ipLimit',
        'ustatus' => 'ustatus',
        'member_id' => 'memberId',
        'timestamp' => 'timestamp',
        'email' => 'email',
        'timezone' => 'timezone',
        'google_email' => 'googleEmail',
        'skype' => 'skype',
        'ical' => 'ical',
        'ps_config' => 'psConfig',
        'ps_item' => 'psItem',
        'ps_ebay' => 'psEbay',
        'ps_stock' => 'psStock',
        'ps_customer' => 'psCustomer',
        'ps_order' => 'psOrder',
        'ps_stats' => 'psStats',
        'ps_data' => 'psData',
        'pc_config' => 'pcConfig',
        'pc_content' => 'pcContent',
        'pc_newsletter' => 'pcNewsletter',
        'pc_layout' => 'pcLayout',
        'pc_dialog' => 'pcDialog',
        'pc_stats' => 'pcStats',
        'pc_data' => 'pcData',
        'pc_blog' => 'pcBlog',
        'signature' => 'signature',
        'color' => 'color',
        'eks' => 'eks',
        'payments' => 'payments',
        'accept_agb' => 'acceptAgb',
        'api' => 'api',
        'image' => 'image',
        'del_order' => 'delOrder',
        'del_article' => 'delArticle',
        'del_record' => 'delRecord',
        'plentystat' => 'plentystat',
        'plentyconnect' => 'plentyconnect',
        'webspace_access' => 'webspaceAccess',
        'access_control_list' => 'accessControlList',
        'plentymarkets_shipping_order_id' => 'plentymarketsShippingOrderId',
        'plentymarkets_shipping_item' => 'plentymarketsShippingItem',
        'plentymarkets_shipping_auto' => 'plentymarketsShippingAuto',
        'plentymarkets_shipping_label' => 'plentymarketsShippingLabel',
        'plentymarkets_shipping_config' => 'plentymarketsShippingConfig',
        'warehouse_id' => 'warehouseId',
        'calendar' => 'calendar',
        'order_status' => 'orderStatus',
        'warehouse_repair_id' => 'warehouseRepairId',
        'project' => 'project',
        'ticket' => 'ticket',
        'order' => 'order',
        'blog' => 'blog',
        'lead' => 'lead',
        'customer' => 'customer',
        'total_vacation_days' => 'totalVacationDays',
        'role_id' => 'roleId',
        'salutation' => 'salutation',
        'data_lang' => 'dataLang',
        'disabled' => 'disabled',
        'scheduler' => 'scheduler',
        'item' => 'item',
        'incoming_items' => 'incomingItems',
        'backend_plugin_set_id' => 'backendPluginSetId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'user' => 'setUser',
        'real_name' => 'setRealName',
        'lang' => 'setLang',
        'ip_limit' => 'setIpLimit',
        'ustatus' => 'setUstatus',
        'member_id' => 'setMemberId',
        'timestamp' => 'setTimestamp',
        'email' => 'setEmail',
        'timezone' => 'setTimezone',
        'google_email' => 'setGoogleEmail',
        'skype' => 'setSkype',
        'ical' => 'setIcal',
        'ps_config' => 'setPsConfig',
        'ps_item' => 'setPsItem',
        'ps_ebay' => 'setPsEbay',
        'ps_stock' => 'setPsStock',
        'ps_customer' => 'setPsCustomer',
        'ps_order' => 'setPsOrder',
        'ps_stats' => 'setPsStats',
        'ps_data' => 'setPsData',
        'pc_config' => 'setPcConfig',
        'pc_content' => 'setPcContent',
        'pc_newsletter' => 'setPcNewsletter',
        'pc_layout' => 'setPcLayout',
        'pc_dialog' => 'setPcDialog',
        'pc_stats' => 'setPcStats',
        'pc_data' => 'setPcData',
        'pc_blog' => 'setPcBlog',
        'signature' => 'setSignature',
        'color' => 'setColor',
        'eks' => 'setEks',
        'payments' => 'setPayments',
        'accept_agb' => 'setAcceptAgb',
        'api' => 'setApi',
        'image' => 'setImage',
        'del_order' => 'setDelOrder',
        'del_article' => 'setDelArticle',
        'del_record' => 'setDelRecord',
        'plentystat' => 'setPlentystat',
        'plentyconnect' => 'setPlentyconnect',
        'webspace_access' => 'setWebspaceAccess',
        'access_control_list' => 'setAccessControlList',
        'plentymarkets_shipping_order_id' => 'setPlentymarketsShippingOrderId',
        'plentymarkets_shipping_item' => 'setPlentymarketsShippingItem',
        'plentymarkets_shipping_auto' => 'setPlentymarketsShippingAuto',
        'plentymarkets_shipping_label' => 'setPlentymarketsShippingLabel',
        'plentymarkets_shipping_config' => 'setPlentymarketsShippingConfig',
        'warehouse_id' => 'setWarehouseId',
        'calendar' => 'setCalendar',
        'order_status' => 'setOrderStatus',
        'warehouse_repair_id' => 'setWarehouseRepairId',
        'project' => 'setProject',
        'ticket' => 'setTicket',
        'order' => 'setOrder',
        'blog' => 'setBlog',
        'lead' => 'setLead',
        'customer' => 'setCustomer',
        'total_vacation_days' => 'setTotalVacationDays',
        'role_id' => 'setRoleId',
        'salutation' => 'setSalutation',
        'data_lang' => 'setDataLang',
        'disabled' => 'setDisabled',
        'scheduler' => 'setScheduler',
        'item' => 'setItem',
        'incoming_items' => 'setIncomingItems',
        'backend_plugin_set_id' => 'setBackendPluginSetId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'user' => 'getUser',
        'real_name' => 'getRealName',
        'lang' => 'getLang',
        'ip_limit' => 'getIpLimit',
        'ustatus' => 'getUstatus',
        'member_id' => 'getMemberId',
        'timestamp' => 'getTimestamp',
        'email' => 'getEmail',
        'timezone' => 'getTimezone',
        'google_email' => 'getGoogleEmail',
        'skype' => 'getSkype',
        'ical' => 'getIcal',
        'ps_config' => 'getPsConfig',
        'ps_item' => 'getPsItem',
        'ps_ebay' => 'getPsEbay',
        'ps_stock' => 'getPsStock',
        'ps_customer' => 'getPsCustomer',
        'ps_order' => 'getPsOrder',
        'ps_stats' => 'getPsStats',
        'ps_data' => 'getPsData',
        'pc_config' => 'getPcConfig',
        'pc_content' => 'getPcContent',
        'pc_newsletter' => 'getPcNewsletter',
        'pc_layout' => 'getPcLayout',
        'pc_dialog' => 'getPcDialog',
        'pc_stats' => 'getPcStats',
        'pc_data' => 'getPcData',
        'pc_blog' => 'getPcBlog',
        'signature' => 'getSignature',
        'color' => 'getColor',
        'eks' => 'getEks',
        'payments' => 'getPayments',
        'accept_agb' => 'getAcceptAgb',
        'api' => 'getApi',
        'image' => 'getImage',
        'del_order' => 'getDelOrder',
        'del_article' => 'getDelArticle',
        'del_record' => 'getDelRecord',
        'plentystat' => 'getPlentystat',
        'plentyconnect' => 'getPlentyconnect',
        'webspace_access' => 'getWebspaceAccess',
        'access_control_list' => 'getAccessControlList',
        'plentymarkets_shipping_order_id' => 'getPlentymarketsShippingOrderId',
        'plentymarkets_shipping_item' => 'getPlentymarketsShippingItem',
        'plentymarkets_shipping_auto' => 'getPlentymarketsShippingAuto',
        'plentymarkets_shipping_label' => 'getPlentymarketsShippingLabel',
        'plentymarkets_shipping_config' => 'getPlentymarketsShippingConfig',
        'warehouse_id' => 'getWarehouseId',
        'calendar' => 'getCalendar',
        'order_status' => 'getOrderStatus',
        'warehouse_repair_id' => 'getWarehouseRepairId',
        'project' => 'getProject',
        'ticket' => 'getTicket',
        'order' => 'getOrder',
        'blog' => 'getBlog',
        'lead' => 'getLead',
        'customer' => 'getCustomer',
        'total_vacation_days' => 'getTotalVacationDays',
        'role_id' => 'getRoleId',
        'salutation' => 'getSalutation',
        'data_lang' => 'getDataLang',
        'disabled' => 'getDisabled',
        'scheduler' => 'getScheduler',
        'item' => 'getItem',
        'incoming_items' => 'getIncomingItems',
        'backend_plugin_set_id' => 'getBackendPluginSetId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('real_name', $data ?? [], null);
        $this->setIfExists('lang', $data ?? [], null);
        $this->setIfExists('ip_limit', $data ?? [], null);
        $this->setIfExists('ustatus', $data ?? [], null);
        $this->setIfExists('member_id', $data ?? [], null);
        $this->setIfExists('timestamp', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('timezone', $data ?? [], null);
        $this->setIfExists('google_email', $data ?? [], null);
        $this->setIfExists('skype', $data ?? [], null);
        $this->setIfExists('ical', $data ?? [], null);
        $this->setIfExists('ps_config', $data ?? [], null);
        $this->setIfExists('ps_item', $data ?? [], null);
        $this->setIfExists('ps_ebay', $data ?? [], null);
        $this->setIfExists('ps_stock', $data ?? [], null);
        $this->setIfExists('ps_customer', $data ?? [], null);
        $this->setIfExists('ps_order', $data ?? [], null);
        $this->setIfExists('ps_stats', $data ?? [], null);
        $this->setIfExists('ps_data', $data ?? [], null);
        $this->setIfExists('pc_config', $data ?? [], null);
        $this->setIfExists('pc_content', $data ?? [], null);
        $this->setIfExists('pc_newsletter', $data ?? [], null);
        $this->setIfExists('pc_layout', $data ?? [], null);
        $this->setIfExists('pc_dialog', $data ?? [], null);
        $this->setIfExists('pc_stats', $data ?? [], null);
        $this->setIfExists('pc_data', $data ?? [], null);
        $this->setIfExists('pc_blog', $data ?? [], null);
        $this->setIfExists('signature', $data ?? [], null);
        $this->setIfExists('color', $data ?? [], null);
        $this->setIfExists('eks', $data ?? [], null);
        $this->setIfExists('payments', $data ?? [], null);
        $this->setIfExists('accept_agb', $data ?? [], null);
        $this->setIfExists('api', $data ?? [], null);
        $this->setIfExists('image', $data ?? [], null);
        $this->setIfExists('del_order', $data ?? [], null);
        $this->setIfExists('del_article', $data ?? [], null);
        $this->setIfExists('del_record', $data ?? [], null);
        $this->setIfExists('plentystat', $data ?? [], null);
        $this->setIfExists('plentyconnect', $data ?? [], null);
        $this->setIfExists('webspace_access', $data ?? [], null);
        $this->setIfExists('access_control_list', $data ?? [], null);
        $this->setIfExists('plentymarkets_shipping_order_id', $data ?? [], null);
        $this->setIfExists('plentymarkets_shipping_item', $data ?? [], null);
        $this->setIfExists('plentymarkets_shipping_auto', $data ?? [], null);
        $this->setIfExists('plentymarkets_shipping_label', $data ?? [], null);
        $this->setIfExists('plentymarkets_shipping_config', $data ?? [], null);
        $this->setIfExists('warehouse_id', $data ?? [], null);
        $this->setIfExists('calendar', $data ?? [], null);
        $this->setIfExists('order_status', $data ?? [], null);
        $this->setIfExists('warehouse_repair_id', $data ?? [], null);
        $this->setIfExists('project', $data ?? [], null);
        $this->setIfExists('ticket', $data ?? [], null);
        $this->setIfExists('order', $data ?? [], null);
        $this->setIfExists('blog', $data ?? [], null);
        $this->setIfExists('lead', $data ?? [], null);
        $this->setIfExists('customer', $data ?? [], null);
        $this->setIfExists('total_vacation_days', $data ?? [], null);
        $this->setIfExists('role_id', $data ?? [], null);
        $this->setIfExists('salutation', $data ?? [], null);
        $this->setIfExists('data_lang', $data ?? [], null);
        $this->setIfExists('disabled', $data ?? [], null);
        $this->setIfExists('scheduler', $data ?? [], null);
        $this->setIfExists('item', $data ?? [], null);
        $this->setIfExists('incoming_items', $data ?? [], null);
        $this->setIfExists('backend_plugin_set_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id 
     *
     * @return $this
     */
    public function setId(?int $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets user
     *
     * @return string|null
     */
    public function getUser(): ?string
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param string|null $user 
     *
     * @return $this
     */
    public function setUser(?string $user): static
    {
        if (is_null($user)) {
            throw new InvalidArgumentException('non-nullable user cannot be null');
        }
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets real_name
     *
     * @return string|null
     */
    public function getRealName(): ?string
    {
        return $this->container['real_name'];
    }

    /**
     * Sets real_name
     *
     * @param string|null $real_name 
     *
     * @return $this
     */
    public function setRealName(?string $real_name): static
    {
        if (is_null($real_name)) {
            throw new InvalidArgumentException('non-nullable real_name cannot be null');
        }
        $this->container['real_name'] = $real_name;

        return $this;
    }

    /**
     * Gets lang
     *
     * @return string|null
     */
    public function getLang(): ?string
    {
        return $this->container['lang'];
    }

    /**
     * Sets lang
     *
     * @param string|null $lang 
     *
     * @return $this
     */
    public function setLang(?string $lang): static
    {
        if (is_null($lang)) {
            throw new InvalidArgumentException('non-nullable lang cannot be null');
        }
        $this->container['lang'] = $lang;

        return $this;
    }

    /**
     * Gets ip_limit
     *
     * @return string|null
     */
    public function getIpLimit(): ?string
    {
        return $this->container['ip_limit'];
    }

    /**
     * Sets ip_limit
     *
     * @param string|null $ip_limit 
     *
     * @return $this
     */
    public function setIpLimit(?string $ip_limit): static
    {
        if (is_null($ip_limit)) {
            throw new InvalidArgumentException('non-nullable ip_limit cannot be null');
        }
        $this->container['ip_limit'] = $ip_limit;

        return $this;
    }

    /**
     * Gets ustatus
     *
     * @return bool|null
     */
    public function getUstatus(): ?bool
    {
        return $this->container['ustatus'];
    }

    /**
     * Sets ustatus
     *
     * @param bool|null $ustatus 
     *
     * @return $this
     */
    public function setUstatus(?bool $ustatus): static
    {
        if (is_null($ustatus)) {
            throw new InvalidArgumentException('non-nullable ustatus cannot be null');
        }
        $this->container['ustatus'] = $ustatus;

        return $this;
    }

    /**
     * Gets member_id
     *
     * @return int|null
     */
    public function getMemberId(): ?int
    {
        return $this->container['member_id'];
    }

    /**
     * Sets member_id
     *
     * @param int|null $member_id 
     *
     * @return $this
     */
    public function setMemberId(?int $member_id): static
    {
        if (is_null($member_id)) {
            throw new InvalidArgumentException('non-nullable member_id cannot be null');
        }
        $this->container['member_id'] = $member_id;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return string|null
     */
    public function getTimestamp(): ?string
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param string|null $timestamp 
     *
     * @return $this
     */
    public function setTimestamp(?string $timestamp): static
    {
        if (is_null($timestamp)) {
            throw new InvalidArgumentException('non-nullable timestamp cannot be null');
        }
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail(): ?string
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email 
     *
     * @return $this
     */
    public function setEmail(?string $email): static
    {
        if (is_null($email)) {
            throw new InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string|null
     */
    public function getTimezone(): ?string
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string|null $timezone 
     *
     * @return $this
     */
    public function setTimezone(?string $timezone): static
    {
        if (is_null($timezone)) {
            throw new InvalidArgumentException('non-nullable timezone cannot be null');
        }
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets google_email
     *
     * @return string|null
     */
    public function getGoogleEmail(): ?string
    {
        return $this->container['google_email'];
    }

    /**
     * Sets google_email
     *
     * @param string|null $google_email 
     *
     * @return $this
     */
    public function setGoogleEmail(?string $google_email): static
    {
        if (is_null($google_email)) {
            throw new InvalidArgumentException('non-nullable google_email cannot be null');
        }
        $this->container['google_email'] = $google_email;

        return $this;
    }

    /**
     * Gets skype
     *
     * @return string|null
     */
    public function getSkype(): ?string
    {
        return $this->container['skype'];
    }

    /**
     * Sets skype
     *
     * @param string|null $skype 
     *
     * @return $this
     */
    public function setSkype(?string $skype): static
    {
        if (is_null($skype)) {
            throw new InvalidArgumentException('non-nullable skype cannot be null');
        }
        $this->container['skype'] = $skype;

        return $this;
    }

    /**
     * Gets ical
     *
     * @return string|null
     */
    public function getIcal(): ?string
    {
        return $this->container['ical'];
    }

    /**
     * Sets ical
     *
     * @param string|null $ical 
     *
     * @return $this
     */
    public function setIcal(?string $ical): static
    {
        if (is_null($ical)) {
            throw new InvalidArgumentException('non-nullable ical cannot be null');
        }
        $this->container['ical'] = $ical;

        return $this;
    }

    /**
     * Gets ps_config
     *
     * @return bool|null
     */
    public function getPsConfig(): ?bool
    {
        return $this->container['ps_config'];
    }

    /**
     * Sets ps_config
     *
     * @param bool|null $ps_config 
     *
     * @return $this
     */
    public function setPsConfig(?bool $ps_config): static
    {
        if (is_null($ps_config)) {
            throw new InvalidArgumentException('non-nullable ps_config cannot be null');
        }
        $this->container['ps_config'] = $ps_config;

        return $this;
    }

    /**
     * Gets ps_item
     *
     * @return bool|null
     */
    public function getPsItem(): ?bool
    {
        return $this->container['ps_item'];
    }

    /**
     * Sets ps_item
     *
     * @param bool|null $ps_item 
     *
     * @return $this
     */
    public function setPsItem(?bool $ps_item): static
    {
        if (is_null($ps_item)) {
            throw new InvalidArgumentException('non-nullable ps_item cannot be null');
        }
        $this->container['ps_item'] = $ps_item;

        return $this;
    }

    /**
     * Gets ps_ebay
     *
     * @return bool|null
     */
    public function getPsEbay(): ?bool
    {
        return $this->container['ps_ebay'];
    }

    /**
     * Sets ps_ebay
     *
     * @param bool|null $ps_ebay 
     *
     * @return $this
     */
    public function setPsEbay(?bool $ps_ebay): static
    {
        if (is_null($ps_ebay)) {
            throw new InvalidArgumentException('non-nullable ps_ebay cannot be null');
        }
        $this->container['ps_ebay'] = $ps_ebay;

        return $this;
    }

    /**
     * Gets ps_stock
     *
     * @return bool|null
     */
    public function getPsStock(): ?bool
    {
        return $this->container['ps_stock'];
    }

    /**
     * Sets ps_stock
     *
     * @param bool|null $ps_stock 
     *
     * @return $this
     */
    public function setPsStock(?bool $ps_stock): static
    {
        if (is_null($ps_stock)) {
            throw new InvalidArgumentException('non-nullable ps_stock cannot be null');
        }
        $this->container['ps_stock'] = $ps_stock;

        return $this;
    }

    /**
     * Gets ps_customer
     *
     * @return bool|null
     */
    public function getPsCustomer(): ?bool
    {
        return $this->container['ps_customer'];
    }

    /**
     * Sets ps_customer
     *
     * @param bool|null $ps_customer 
     *
     * @return $this
     */
    public function setPsCustomer(?bool $ps_customer): static
    {
        if (is_null($ps_customer)) {
            throw new InvalidArgumentException('non-nullable ps_customer cannot be null');
        }
        $this->container['ps_customer'] = $ps_customer;

        return $this;
    }

    /**
     * Gets ps_order
     *
     * @return bool|null
     */
    public function getPsOrder(): ?bool
    {
        return $this->container['ps_order'];
    }

    /**
     * Sets ps_order
     *
     * @param bool|null $ps_order 
     *
     * @return $this
     */
    public function setPsOrder(?bool $ps_order): static
    {
        if (is_null($ps_order)) {
            throw new InvalidArgumentException('non-nullable ps_order cannot be null');
        }
        $this->container['ps_order'] = $ps_order;

        return $this;
    }

    /**
     * Gets ps_stats
     *
     * @return bool|null
     */
    public function getPsStats(): ?bool
    {
        return $this->container['ps_stats'];
    }

    /**
     * Sets ps_stats
     *
     * @param bool|null $ps_stats 
     *
     * @return $this
     */
    public function setPsStats(?bool $ps_stats): static
    {
        if (is_null($ps_stats)) {
            throw new InvalidArgumentException('non-nullable ps_stats cannot be null');
        }
        $this->container['ps_stats'] = $ps_stats;

        return $this;
    }

    /**
     * Gets ps_data
     *
     * @return bool|null
     */
    public function getPsData(): ?bool
    {
        return $this->container['ps_data'];
    }

    /**
     * Sets ps_data
     *
     * @param bool|null $ps_data 
     *
     * @return $this
     */
    public function setPsData(?bool $ps_data): static
    {
        if (is_null($ps_data)) {
            throw new InvalidArgumentException('non-nullable ps_data cannot be null');
        }
        $this->container['ps_data'] = $ps_data;

        return $this;
    }

    /**
     * Gets pc_config
     *
     * @return bool|null
     */
    public function getPcConfig(): ?bool
    {
        return $this->container['pc_config'];
    }

    /**
     * Sets pc_config
     *
     * @param bool|null $pc_config 
     *
     * @return $this
     */
    public function setPcConfig(?bool $pc_config): static
    {
        if (is_null($pc_config)) {
            throw new InvalidArgumentException('non-nullable pc_config cannot be null');
        }
        $this->container['pc_config'] = $pc_config;

        return $this;
    }

    /**
     * Gets pc_content
     *
     * @return bool|null
     */
    public function getPcContent(): ?bool
    {
        return $this->container['pc_content'];
    }

    /**
     * Sets pc_content
     *
     * @param bool|null $pc_content 
     *
     * @return $this
     */
    public function setPcContent(?bool $pc_content): static
    {
        if (is_null($pc_content)) {
            throw new InvalidArgumentException('non-nullable pc_content cannot be null');
        }
        $this->container['pc_content'] = $pc_content;

        return $this;
    }

    /**
     * Gets pc_newsletter
     *
     * @return bool|null
     */
    public function getPcNewsletter(): ?bool
    {
        return $this->container['pc_newsletter'];
    }

    /**
     * Sets pc_newsletter
     *
     * @param bool|null $pc_newsletter 
     *
     * @return $this
     */
    public function setPcNewsletter(?bool $pc_newsletter): static
    {
        if (is_null($pc_newsletter)) {
            throw new InvalidArgumentException('non-nullable pc_newsletter cannot be null');
        }
        $this->container['pc_newsletter'] = $pc_newsletter;

        return $this;
    }

    /**
     * Gets pc_layout
     *
     * @return bool|null
     */
    public function getPcLayout(): ?bool
    {
        return $this->container['pc_layout'];
    }

    /**
     * Sets pc_layout
     *
     * @param bool|null $pc_layout 
     *
     * @return $this
     */
    public function setPcLayout(?bool $pc_layout): static
    {
        if (is_null($pc_layout)) {
            throw new InvalidArgumentException('non-nullable pc_layout cannot be null');
        }
        $this->container['pc_layout'] = $pc_layout;

        return $this;
    }

    /**
     * Gets pc_dialog
     *
     * @return bool|null
     */
    public function getPcDialog(): ?bool
    {
        return $this->container['pc_dialog'];
    }

    /**
     * Sets pc_dialog
     *
     * @param bool|null $pc_dialog 
     *
     * @return $this
     */
    public function setPcDialog(?bool $pc_dialog): static
    {
        if (is_null($pc_dialog)) {
            throw new InvalidArgumentException('non-nullable pc_dialog cannot be null');
        }
        $this->container['pc_dialog'] = $pc_dialog;

        return $this;
    }

    /**
     * Gets pc_stats
     *
     * @return bool|null
     */
    public function getPcStats(): ?bool
    {
        return $this->container['pc_stats'];
    }

    /**
     * Sets pc_stats
     *
     * @param bool|null $pc_stats 
     *
     * @return $this
     */
    public function setPcStats(?bool $pc_stats): static
    {
        if (is_null($pc_stats)) {
            throw new InvalidArgumentException('non-nullable pc_stats cannot be null');
        }
        $this->container['pc_stats'] = $pc_stats;

        return $this;
    }

    /**
     * Gets pc_data
     *
     * @return bool|null
     */
    public function getPcData(): ?bool
    {
        return $this->container['pc_data'];
    }

    /**
     * Sets pc_data
     *
     * @param bool|null $pc_data 
     *
     * @return $this
     */
    public function setPcData(?bool $pc_data): static
    {
        if (is_null($pc_data)) {
            throw new InvalidArgumentException('non-nullable pc_data cannot be null');
        }
        $this->container['pc_data'] = $pc_data;

        return $this;
    }

    /**
     * Gets pc_blog
     *
     * @return bool|null
     */
    public function getPcBlog(): ?bool
    {
        return $this->container['pc_blog'];
    }

    /**
     * Sets pc_blog
     *
     * @param bool|null $pc_blog 
     *
     * @return $this
     */
    public function setPcBlog(?bool $pc_blog): static
    {
        if (is_null($pc_blog)) {
            throw new InvalidArgumentException('non-nullable pc_blog cannot be null');
        }
        $this->container['pc_blog'] = $pc_blog;

        return $this;
    }

    /**
     * Gets signature
     *
     * @return string|null
     */
    public function getSignature(): ?string
    {
        return $this->container['signature'];
    }

    /**
     * Sets signature
     *
     * @param string|null $signature 
     *
     * @return $this
     */
    public function setSignature(?string $signature): static
    {
        if (is_null($signature)) {
            throw new InvalidArgumentException('non-nullable signature cannot be null');
        }
        $this->container['signature'] = $signature;

        return $this;
    }

    /**
     * Gets color
     *
     * @return string|null
     */
    public function getColor(): ?string
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string|null $color 
     *
     * @return $this
     */
    public function setColor(?string $color): static
    {
        if (is_null($color)) {
            throw new InvalidArgumentException('non-nullable color cannot be null');
        }
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets eks
     *
     * @return bool|null
     */
    public function getEks(): ?bool
    {
        return $this->container['eks'];
    }

    /**
     * Sets eks
     *
     * @param bool|null $eks 
     *
     * @return $this
     */
    public function setEks(?bool $eks): static
    {
        if (is_null($eks)) {
            throw new InvalidArgumentException('non-nullable eks cannot be null');
        }
        $this->container['eks'] = $eks;

        return $this;
    }

    /**
     * Gets payments
     *
     * @return bool|null
     */
    public function getPayments(): ?bool
    {
        return $this->container['payments'];
    }

    /**
     * Sets payments
     *
     * @param bool|null $payments 
     *
     * @return $this
     */
    public function setPayments(?bool $payments): static
    {
        if (is_null($payments)) {
            throw new InvalidArgumentException('non-nullable payments cannot be null');
        }
        $this->container['payments'] = $payments;

        return $this;
    }

    /**
     * Gets accept_agb
     *
     * @return int|null
     */
    public function getAcceptAgb(): ?int
    {
        return $this->container['accept_agb'];
    }

    /**
     * Sets accept_agb
     *
     * @param int|null $accept_agb 
     *
     * @return $this
     */
    public function setAcceptAgb(?int $accept_agb): static
    {
        if (is_null($accept_agb)) {
            throw new InvalidArgumentException('non-nullable accept_agb cannot be null');
        }
        $this->container['accept_agb'] = $accept_agb;

        return $this;
    }

    /**
     * Gets api
     *
     * @return bool|null
     */
    public function getApi(): ?bool
    {
        return $this->container['api'];
    }

    /**
     * Sets api
     *
     * @param bool|null $api 
     *
     * @return $this
     */
    public function setApi(?bool $api): static
    {
        if (is_null($api)) {
            throw new InvalidArgumentException('non-nullable api cannot be null');
        }
        $this->container['api'] = $api;

        return $this;
    }

    /**
     * Gets image
     *
     * @return string|null
     */
    public function getImage(): ?string
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param string|null $image 
     *
     * @return $this
     */
    public function setImage(?string $image): static
    {
        if (is_null($image)) {
            throw new InvalidArgumentException('non-nullable image cannot be null');
        }
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets del_order
     *
     * @return bool|null
     */
    public function getDelOrder(): ?bool
    {
        return $this->container['del_order'];
    }

    /**
     * Sets del_order
     *
     * @param bool|null $del_order 
     *
     * @return $this
     */
    public function setDelOrder(?bool $del_order): static
    {
        if (is_null($del_order)) {
            throw new InvalidArgumentException('non-nullable del_order cannot be null');
        }
        $this->container['del_order'] = $del_order;

        return $this;
    }

    /**
     * Gets del_article
     *
     * @return bool|null
     */
    public function getDelArticle(): ?bool
    {
        return $this->container['del_article'];
    }

    /**
     * Sets del_article
     *
     * @param bool|null $del_article 
     *
     * @return $this
     */
    public function setDelArticle(?bool $del_article): static
    {
        if (is_null($del_article)) {
            throw new InvalidArgumentException('non-nullable del_article cannot be null');
        }
        $this->container['del_article'] = $del_article;

        return $this;
    }

    /**
     * Gets del_record
     *
     * @return bool|null
     */
    public function getDelRecord(): ?bool
    {
        return $this->container['del_record'];
    }

    /**
     * Sets del_record
     *
     * @param bool|null $del_record 
     *
     * @return $this
     */
    public function setDelRecord(?bool $del_record): static
    {
        if (is_null($del_record)) {
            throw new InvalidArgumentException('non-nullable del_record cannot be null');
        }
        $this->container['del_record'] = $del_record;

        return $this;
    }

    /**
     * Gets plentystat
     *
     * @return bool|null
     */
    public function getPlentystat(): ?bool
    {
        return $this->container['plentystat'];
    }

    /**
     * Sets plentystat
     *
     * @param bool|null $plentystat 
     *
     * @return $this
     */
    public function setPlentystat(?bool $plentystat): static
    {
        if (is_null($plentystat)) {
            throw new InvalidArgumentException('non-nullable plentystat cannot be null');
        }
        $this->container['plentystat'] = $plentystat;

        return $this;
    }

    /**
     * Gets plentyconnect
     *
     * @return bool|null
     */
    public function getPlentyconnect(): ?bool
    {
        return $this->container['plentyconnect'];
    }

    /**
     * Sets plentyconnect
     *
     * @param bool|null $plentyconnect 
     *
     * @return $this
     */
    public function setPlentyconnect(?bool $plentyconnect): static
    {
        if (is_null($plentyconnect)) {
            throw new InvalidArgumentException('non-nullable plentyconnect cannot be null');
        }
        $this->container['plentyconnect'] = $plentyconnect;

        return $this;
    }

    /**
     * Gets webspace_access
     *
     * @return bool|null
     */
    public function getWebspaceAccess(): ?bool
    {
        return $this->container['webspace_access'];
    }

    /**
     * Sets webspace_access
     *
     * @param bool|null $webspace_access 
     *
     * @return $this
     */
    public function setWebspaceAccess(?bool $webspace_access): static
    {
        if (is_null($webspace_access)) {
            throw new InvalidArgumentException('non-nullable webspace_access cannot be null');
        }
        $this->container['webspace_access'] = $webspace_access;

        return $this;
    }

    /**
     * Gets access_control_list
     *
     * @return string|null
     */
    public function getAccessControlList(): ?string
    {
        return $this->container['access_control_list'];
    }

    /**
     * Sets access_control_list
     *
     * @param string|null $access_control_list 
     *
     * @return $this
     */
    public function setAccessControlList(?string $access_control_list): static
    {
        if (is_null($access_control_list)) {
            throw new InvalidArgumentException('non-nullable access_control_list cannot be null');
        }
        $this->container['access_control_list'] = $access_control_list;

        return $this;
    }

    /**
     * Gets plentymarkets_shipping_order_id
     *
     * @return bool|null
     */
    public function getPlentymarketsShippingOrderId(): ?bool
    {
        return $this->container['plentymarkets_shipping_order_id'];
    }

    /**
     * Sets plentymarkets_shipping_order_id
     *
     * @param bool|null $plentymarkets_shipping_order_id 
     *
     * @return $this
     */
    public function setPlentymarketsShippingOrderId(?bool $plentymarkets_shipping_order_id): static
    {
        if (is_null($plentymarkets_shipping_order_id)) {
            throw new InvalidArgumentException('non-nullable plentymarkets_shipping_order_id cannot be null');
        }
        $this->container['plentymarkets_shipping_order_id'] = $plentymarkets_shipping_order_id;

        return $this;
    }

    /**
     * Gets plentymarkets_shipping_item
     *
     * @return bool|null
     */
    public function getPlentymarketsShippingItem(): ?bool
    {
        return $this->container['plentymarkets_shipping_item'];
    }

    /**
     * Sets plentymarkets_shipping_item
     *
     * @param bool|null $plentymarkets_shipping_item 
     *
     * @return $this
     */
    public function setPlentymarketsShippingItem(?bool $plentymarkets_shipping_item): static
    {
        if (is_null($plentymarkets_shipping_item)) {
            throw new InvalidArgumentException('non-nullable plentymarkets_shipping_item cannot be null');
        }
        $this->container['plentymarkets_shipping_item'] = $plentymarkets_shipping_item;

        return $this;
    }

    /**
     * Gets plentymarkets_shipping_auto
     *
     * @return bool|null
     */
    public function getPlentymarketsShippingAuto(): ?bool
    {
        return $this->container['plentymarkets_shipping_auto'];
    }

    /**
     * Sets plentymarkets_shipping_auto
     *
     * @param bool|null $plentymarkets_shipping_auto 
     *
     * @return $this
     */
    public function setPlentymarketsShippingAuto(?bool $plentymarkets_shipping_auto): static
    {
        if (is_null($plentymarkets_shipping_auto)) {
            throw new InvalidArgumentException('non-nullable plentymarkets_shipping_auto cannot be null');
        }
        $this->container['plentymarkets_shipping_auto'] = $plentymarkets_shipping_auto;

        return $this;
    }

    /**
     * Gets plentymarkets_shipping_label
     *
     * @return bool|null
     */
    public function getPlentymarketsShippingLabel(): ?bool
    {
        return $this->container['plentymarkets_shipping_label'];
    }

    /**
     * Sets plentymarkets_shipping_label
     *
     * @param bool|null $plentymarkets_shipping_label 
     *
     * @return $this
     */
    public function setPlentymarketsShippingLabel(?bool $plentymarkets_shipping_label): static
    {
        if (is_null($plentymarkets_shipping_label)) {
            throw new InvalidArgumentException('non-nullable plentymarkets_shipping_label cannot be null');
        }
        $this->container['plentymarkets_shipping_label'] = $plentymarkets_shipping_label;

        return $this;
    }

    /**
     * Gets plentymarkets_shipping_config
     *
     * @return bool|null
     */
    public function getPlentymarketsShippingConfig(): ?bool
    {
        return $this->container['plentymarkets_shipping_config'];
    }

    /**
     * Sets plentymarkets_shipping_config
     *
     * @param bool|null $plentymarkets_shipping_config 
     *
     * @return $this
     */
    public function setPlentymarketsShippingConfig(?bool $plentymarkets_shipping_config): static
    {
        if (is_null($plentymarkets_shipping_config)) {
            throw new InvalidArgumentException('non-nullable plentymarkets_shipping_config cannot be null');
        }
        $this->container['plentymarkets_shipping_config'] = $plentymarkets_shipping_config;

        return $this;
    }

    /**
     * Gets warehouse_id
     *
     * @return int|null
     */
    public function getWarehouseId(): ?int
    {
        return $this->container['warehouse_id'];
    }

    /**
     * Sets warehouse_id
     *
     * @param int|null $warehouse_id 
     *
     * @return $this
     */
    public function setWarehouseId(?int $warehouse_id): static
    {
        if (is_null($warehouse_id)) {
            throw new InvalidArgumentException('non-nullable warehouse_id cannot be null');
        }
        $this->container['warehouse_id'] = $warehouse_id;

        return $this;
    }

    /**
     * Gets calendar
     *
     * @return bool|null
     */
    public function getCalendar(): ?bool
    {
        return $this->container['calendar'];
    }

    /**
     * Sets calendar
     *
     * @param bool|null $calendar 
     *
     * @return $this
     */
    public function setCalendar(?bool $calendar): static
    {
        if (is_null($calendar)) {
            throw new InvalidArgumentException('non-nullable calendar cannot be null');
        }
        $this->container['calendar'] = $calendar;

        return $this;
    }

    /**
     * Gets order_status
     *
     * @return string|null
     */
    public function getOrderStatus(): ?string
    {
        return $this->container['order_status'];
    }

    /**
     * Sets order_status
     *
     * @param string|null $order_status 
     *
     * @return $this
     */
    public function setOrderStatus(?string $order_status): static
    {
        if (is_null($order_status)) {
            throw new InvalidArgumentException('non-nullable order_status cannot be null');
        }
        $this->container['order_status'] = $order_status;

        return $this;
    }

    /**
     * Gets warehouse_repair_id
     *
     * @return int|null
     */
    public function getWarehouseRepairId(): ?int
    {
        return $this->container['warehouse_repair_id'];
    }

    /**
     * Sets warehouse_repair_id
     *
     * @param int|null $warehouse_repair_id 
     *
     * @return $this
     */
    public function setWarehouseRepairId(?int $warehouse_repair_id): static
    {
        if (is_null($warehouse_repair_id)) {
            throw new InvalidArgumentException('non-nullable warehouse_repair_id cannot be null');
        }
        $this->container['warehouse_repair_id'] = $warehouse_repair_id;

        return $this;
    }

    /**
     * Gets project
     *
     * @return bool|null
     */
    public function getProject(): ?bool
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param bool|null $project 
     *
     * @return $this
     */
    public function setProject(?bool $project): static
    {
        if (is_null($project)) {
            throw new InvalidArgumentException('non-nullable project cannot be null');
        }
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets ticket
     *
     * @return bool|null
     */
    public function getTicket(): ?bool
    {
        return $this->container['ticket'];
    }

    /**
     * Sets ticket
     *
     * @param bool|null $ticket 
     *
     * @return $this
     */
    public function setTicket(?bool $ticket): static
    {
        if (is_null($ticket)) {
            throw new InvalidArgumentException('non-nullable ticket cannot be null');
        }
        $this->container['ticket'] = $ticket;

        return $this;
    }

    /**
     * Gets order
     *
     * @return bool|null
     */
    public function getOrder(): ?bool
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param bool|null $order 
     *
     * @return $this
     */
    public function setOrder(?bool $order): static
    {
        if (is_null($order)) {
            throw new InvalidArgumentException('non-nullable order cannot be null');
        }
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets blog
     *
     * @return bool|null
     */
    public function getBlog(): ?bool
    {
        return $this->container['blog'];
    }

    /**
     * Sets blog
     *
     * @param bool|null $blog 
     *
     * @return $this
     */
    public function setBlog(?bool $blog): static
    {
        if (is_null($blog)) {
            throw new InvalidArgumentException('non-nullable blog cannot be null');
        }
        $this->container['blog'] = $blog;

        return $this;
    }

    /**
     * Gets lead
     *
     * @return bool|null
     */
    public function getLead(): ?bool
    {
        return $this->container['lead'];
    }

    /**
     * Sets lead
     *
     * @param bool|null $lead 
     *
     * @return $this
     */
    public function setLead(?bool $lead): static
    {
        if (is_null($lead)) {
            throw new InvalidArgumentException('non-nullable lead cannot be null');
        }
        $this->container['lead'] = $lead;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return bool|null
     */
    public function getCustomer(): ?bool
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param bool|null $customer 
     *
     * @return $this
     */
    public function setCustomer(?bool $customer): static
    {
        if (is_null($customer)) {
            throw new InvalidArgumentException('non-nullable customer cannot be null');
        }
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets total_vacation_days
     *
     * @return float|null
     */
    public function getTotalVacationDays(): ?float
    {
        return $this->container['total_vacation_days'];
    }

    /**
     * Sets total_vacation_days
     *
     * @param float|null $total_vacation_days 
     *
     * @return $this
     */
    public function setTotalVacationDays(?float $total_vacation_days): static
    {
        if (is_null($total_vacation_days)) {
            throw new InvalidArgumentException('non-nullable total_vacation_days cannot be null');
        }
        $this->container['total_vacation_days'] = $total_vacation_days;

        return $this;
    }

    /**
     * Gets role_id
     *
     * @return int|null
     */
    public function getRoleId(): ?int
    {
        return $this->container['role_id'];
    }

    /**
     * Sets role_id
     *
     * @param int|null $role_id 
     *
     * @return $this
     */
    public function setRoleId(?int $role_id): static
    {
        if (is_null($role_id)) {
            throw new InvalidArgumentException('non-nullable role_id cannot be null');
        }
        $this->container['role_id'] = $role_id;

        return $this;
    }

    /**
     * Gets salutation
     *
     * @return string|null
     */
    public function getSalutation(): ?string
    {
        return $this->container['salutation'];
    }

    /**
     * Sets salutation
     *
     * @param string|null $salutation 
     *
     * @return $this
     */
    public function setSalutation(?string $salutation): static
    {
        if (is_null($salutation)) {
            throw new InvalidArgumentException('non-nullable salutation cannot be null');
        }
        $this->container['salutation'] = $salutation;

        return $this;
    }

    /**
     * Gets data_lang
     *
     * @return string|null
     */
    public function getDataLang(): ?string
    {
        return $this->container['data_lang'];
    }

    /**
     * Sets data_lang
     *
     * @param string|null $data_lang 
     *
     * @return $this
     */
    public function setDataLang(?string $data_lang): static
    {
        if (is_null($data_lang)) {
            throw new InvalidArgumentException('non-nullable data_lang cannot be null');
        }
        $this->container['data_lang'] = $data_lang;

        return $this;
    }

    /**
     * Gets disabled
     *
     * @return bool|null
     */
    public function getDisabled(): ?bool
    {
        return $this->container['disabled'];
    }

    /**
     * Sets disabled
     *
     * @param bool|null $disabled 
     *
     * @return $this
     */
    public function setDisabled(?bool $disabled): static
    {
        if (is_null($disabled)) {
            throw new InvalidArgumentException('non-nullable disabled cannot be null');
        }
        $this->container['disabled'] = $disabled;

        return $this;
    }

    /**
     * Gets scheduler
     *
     * @return bool|null
     */
    public function getScheduler(): ?bool
    {
        return $this->container['scheduler'];
    }

    /**
     * Sets scheduler
     *
     * @param bool|null $scheduler 
     *
     * @return $this
     */
    public function setScheduler(?bool $scheduler): static
    {
        if (is_null($scheduler)) {
            throw new InvalidArgumentException('non-nullable scheduler cannot be null');
        }
        $this->container['scheduler'] = $scheduler;

        return $this;
    }

    /**
     * Gets item
     *
     * @return bool|null
     */
    public function getItem(): ?bool
    {
        return $this->container['item'];
    }

    /**
     * Sets item
     *
     * @param bool|null $item 
     *
     * @return $this
     */
    public function setItem(?bool $item): static
    {
        if (is_null($item)) {
            throw new InvalidArgumentException('non-nullable item cannot be null');
        }
        $this->container['item'] = $item;

        return $this;
    }

    /**
     * Gets incoming_items
     *
     * @return bool|null
     */
    public function getIncomingItems(): ?bool
    {
        return $this->container['incoming_items'];
    }

    /**
     * Sets incoming_items
     *
     * @param bool|null $incoming_items 
     *
     * @return $this
     */
    public function setIncomingItems(?bool $incoming_items): static
    {
        if (is_null($incoming_items)) {
            throw new InvalidArgumentException('non-nullable incoming_items cannot be null');
        }
        $this->container['incoming_items'] = $incoming_items;

        return $this;
    }

    /**
     * Gets backend_plugin_set_id
     *
     * @return int|null
     */
    public function getBackendPluginSetId(): ?int
    {
        return $this->container['backend_plugin_set_id'];
    }

    /**
     * Sets backend_plugin_set_id
     *
     * @param int|null $backend_plugin_set_id The ID of the user's selected backend set
     *
     * @return $this
     */
    public function setBackendPluginSetId(?int $backend_plugin_set_id): static
    {
        if (is_null($backend_plugin_set_id)) {
            throw new InvalidArgumentException('non-nullable backend_plugin_set_id cannot be null');
        }
        $this->container['backend_plugin_set_id'] = $backend_plugin_set_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


