<?php
/**
 * Manufacturer
 *
 * PHP version 8.1
 *
 * @package  ck/plenty-client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ck/plenty-client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use ck/plenty-client\ObjectSerializer;

/**
 * Manufacturer Class Doc Comment
 *
 * @package  ck/plenty-client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class Manufacturer implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Manufacturer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'external_name' => 'string',
        'logo' => 'string',
        'url' => 'string',
        'street' => 'string',
        'house_no' => 'string',
        'postcode' => 'string',
        'town' => 'string',
        'phone_number' => 'string',
        'fax_number' => 'string',
        'email' => 'string',
        'country_id' => 'int',
        'pixmania_brand_id' => 'int',
        'neckermann_at_ep_brand_id' => 'int',
        'la_redoute_brand_id' => 'int',
        'position' => 'int',
        'comment' => 'string',
        'updated_at' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => null,
        'name' => null,
        'external_name' => null,
        'logo' => null,
        'url' => null,
        'street' => null,
        'house_no' => null,
        'postcode' => null,
        'town' => null,
        'phone_number' => null,
        'fax_number' => null,
        'email' => null,
        'country_id' => null,
        'pixmania_brand_id' => null,
        'neckermann_at_ep_brand_id' => null,
        'la_redoute_brand_id' => null,
        'position' => null,
        'comment' => null,
        'updated_at' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
		'name' => false,
		'external_name' => false,
		'logo' => false,
		'url' => false,
		'street' => false,
		'house_no' => false,
		'postcode' => false,
		'town' => false,
		'phone_number' => false,
		'fax_number' => false,
		'email' => false,
		'country_id' => false,
		'pixmania_brand_id' => false,
		'neckermann_at_ep_brand_id' => false,
		'la_redoute_brand_id' => false,
		'position' => false,
		'comment' => false,
		'updated_at' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'external_name' => 'externalName',
        'logo' => 'logo',
        'url' => 'url',
        'street' => 'street',
        'house_no' => 'houseNo',
        'postcode' => 'postcode',
        'town' => 'town',
        'phone_number' => 'phoneNumber',
        'fax_number' => 'faxNumber',
        'email' => 'email',
        'country_id' => 'countryId',
        'pixmania_brand_id' => 'pixmaniaBrandId',
        'neckermann_at_ep_brand_id' => 'neckermannAtEpBrandId',
        'la_redoute_brand_id' => 'laRedouteBrandId',
        'position' => 'position',
        'comment' => 'comment',
        'updated_at' => 'updatedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'external_name' => 'setExternalName',
        'logo' => 'setLogo',
        'url' => 'setUrl',
        'street' => 'setStreet',
        'house_no' => 'setHouseNo',
        'postcode' => 'setPostcode',
        'town' => 'setTown',
        'phone_number' => 'setPhoneNumber',
        'fax_number' => 'setFaxNumber',
        'email' => 'setEmail',
        'country_id' => 'setCountryId',
        'pixmania_brand_id' => 'setPixmaniaBrandId',
        'neckermann_at_ep_brand_id' => 'setNeckermannAtEpBrandId',
        'la_redoute_brand_id' => 'setLaRedouteBrandId',
        'position' => 'setPosition',
        'comment' => 'setComment',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'external_name' => 'getExternalName',
        'logo' => 'getLogo',
        'url' => 'getUrl',
        'street' => 'getStreet',
        'house_no' => 'getHouseNo',
        'postcode' => 'getPostcode',
        'town' => 'getTown',
        'phone_number' => 'getPhoneNumber',
        'fax_number' => 'getFaxNumber',
        'email' => 'getEmail',
        'country_id' => 'getCountryId',
        'pixmania_brand_id' => 'getPixmaniaBrandId',
        'neckermann_at_ep_brand_id' => 'getNeckermannAtEpBrandId',
        'la_redoute_brand_id' => 'getLaRedouteBrandId',
        'position' => 'getPosition',
        'comment' => 'getComment',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('external_name', $data ?? [], null);
        $this->setIfExists('logo', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('street', $data ?? [], null);
        $this->setIfExists('house_no', $data ?? [], null);
        $this->setIfExists('postcode', $data ?? [], null);
        $this->setIfExists('town', $data ?? [], null);
        $this->setIfExists('phone_number', $data ?? [], null);
        $this->setIfExists('fax_number', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('country_id', $data ?? [], null);
        $this->setIfExists('pixmania_brand_id', $data ?? [], null);
        $this->setIfExists('neckermann_at_ep_brand_id', $data ?? [], null);
        $this->setIfExists('la_redoute_brand_id', $data ?? [], null);
        $this->setIfExists('position', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The unique ID of the manufacturer.
     *
     * @return $this
     */
    public function setId(?int $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of the manufacturer
     *
     * @return $this
     */
    public function setName(?string $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets external_name
     *
     * @return string|null
     */
    public function getExternalName(): ?string
    {
        return $this->container['external_name'];
    }

    /**
     * Sets external_name
     *
     * @param string|null $external_name The external name of the manufacturer. The external name is used for the item export to external markets. If no external name is saved, the Name will be used. The external name will also be transferred to FINDOLOGIC and will be indexed for item searches.
     *
     * @return $this
     */
    public function setExternalName(?string $external_name): static
    {
        if (is_null($external_name)) {
            throw new InvalidArgumentException('non-nullable external_name cannot be null');
        }
        $this->container['external_name'] = $external_name;

        return $this;
    }

    /**
     * Gets logo
     *
     * @return string|null
     */
    public function getLogo(): ?string
    {
        return $this->container['logo'];
    }

    /**
     * Sets logo
     *
     * @param string|null $logo The URL of the manufacturer's logo
     *
     * @return $this
     */
    public function setLogo(?string $logo): static
    {
        if (is_null($logo)) {
            throw new InvalidArgumentException('non-nullable logo cannot be null');
        }
        $this->container['logo'] = $logo;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl(): ?string
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url The URL of the manufacturer's website
     *
     * @return $this
     */
    public function setUrl(?string $url): static
    {
        if (is_null($url)) {
            throw new InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets street
     *
     * @return string|null
     */
    public function getStreet(): ?string
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param string|null $street The street of the manufacturer's address
     *
     * @return $this
     */
    public function setStreet(?string $street): static
    {
        if (is_null($street)) {
            throw new InvalidArgumentException('non-nullable street cannot be null');
        }
        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets house_no
     *
     * @return string|null
     */
    public function getHouseNo(): ?string
    {
        return $this->container['house_no'];
    }

    /**
     * Sets house_no
     *
     * @param string|null $house_no The house number of the manufacturer's address
     *
     * @return $this
     */
    public function setHouseNo(?string $house_no): static
    {
        if (is_null($house_no)) {
            throw new InvalidArgumentException('non-nullable house_no cannot be null');
        }
        $this->container['house_no'] = $house_no;

        return $this;
    }

    /**
     * Gets postcode
     *
     * @return string|null
     */
    public function getPostcode(): ?string
    {
        return $this->container['postcode'];
    }

    /**
     * Sets postcode
     *
     * @param string|null $postcode The postal code of the manufacturer's address
     *
     * @return $this
     */
    public function setPostcode(?string $postcode): static
    {
        if (is_null($postcode)) {
            throw new InvalidArgumentException('non-nullable postcode cannot be null');
        }
        $this->container['postcode'] = $postcode;

        return $this;
    }

    /**
     * Gets town
     *
     * @return string|null
     */
    public function getTown(): ?string
    {
        return $this->container['town'];
    }

    /**
     * Sets town
     *
     * @param string|null $town The town of the manufacturer's address
     *
     * @return $this
     */
    public function setTown(?string $town): static
    {
        if (is_null($town)) {
            throw new InvalidArgumentException('non-nullable town cannot be null');
        }
        $this->container['town'] = $town;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string|null
     */
    public function getPhoneNumber(): ?string
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string|null $phone_number The phone number of the manufacturer
     *
     * @return $this
     */
    public function setPhoneNumber(?string $phone_number): static
    {
        if (is_null($phone_number)) {
            throw new InvalidArgumentException('non-nullable phone_number cannot be null');
        }
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets fax_number
     *
     * @return string|null
     */
    public function getFaxNumber(): ?string
    {
        return $this->container['fax_number'];
    }

    /**
     * Sets fax_number
     *
     * @param string|null $fax_number The fax number of the manufacturer
     *
     * @return $this
     */
    public function setFaxNumber(?string $fax_number): static
    {
        if (is_null($fax_number)) {
            throw new InvalidArgumentException('non-nullable fax_number cannot be null');
        }
        $this->container['fax_number'] = $fax_number;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail(): ?string
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email The email address of the manufacturer
     *
     * @return $this
     */
    public function setEmail(?string $email): static
    {
        if (is_null($email)) {
            throw new InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets country_id
     *
     * @return int|null
     */
    public function getCountryId(): ?int
    {
        return $this->container['country_id'];
    }

    /**
     * Sets country_id
     *
     * @param int|null $country_id The ID of the <a href=\"https://developers.plentymarkets.com/rest-doc/introduction#countries\" target=\"_blank\">country</a> in which the manufacturer is based; 0 = unknown.
     *
     * @return $this
     */
    public function setCountryId(?int $country_id): static
    {
        if (is_null($country_id)) {
            throw new InvalidArgumentException('non-nullable country_id cannot be null');
        }
        $this->container['country_id'] = $country_id;

        return $this;
    }

    /**
     * Gets pixmania_brand_id
     *
     * @return int|null
     */
    public function getPixmaniaBrandId(): ?int
    {
        return $this->container['pixmania_brand_id'];
    }

    /**
     * Sets pixmania_brand_id
     *
     * @param int|null $pixmania_brand_id The manufacturer's ID on the market Pixmania
     *
     * @return $this
     */
    public function setPixmaniaBrandId(?int $pixmania_brand_id): static
    {
        if (is_null($pixmania_brand_id)) {
            throw new InvalidArgumentException('non-nullable pixmania_brand_id cannot be null');
        }
        $this->container['pixmania_brand_id'] = $pixmania_brand_id;

        return $this;
    }

    /**
     * Gets neckermann_at_ep_brand_id
     *
     * @return int|null
     */
    public function getNeckermannAtEpBrandId(): ?int
    {
        return $this->container['neckermann_at_ep_brand_id'];
    }

    /**
     * Sets neckermann_at_ep_brand_id
     *
     * @param int|null $neckermann_at_ep_brand_id The manufacturer's ID on the market Neckermann Austria, Enterprise version
     *
     * @return $this
     */
    public function setNeckermannAtEpBrandId(?int $neckermann_at_ep_brand_id): static
    {
        if (is_null($neckermann_at_ep_brand_id)) {
            throw new InvalidArgumentException('non-nullable neckermann_at_ep_brand_id cannot be null');
        }
        $this->container['neckermann_at_ep_brand_id'] = $neckermann_at_ep_brand_id;

        return $this;
    }

    /**
     * Gets la_redoute_brand_id
     *
     * @return int|null
     */
    public function getLaRedouteBrandId(): ?int
    {
        return $this->container['la_redoute_brand_id'];
    }

    /**
     * Sets la_redoute_brand_id
     *
     * @param int|null $la_redoute_brand_id The manufacturer's ID on the market La Redoute
     *
     * @return $this
     */
    public function setLaRedouteBrandId(?int $la_redoute_brand_id): static
    {
        if (is_null($la_redoute_brand_id)) {
            throw new InvalidArgumentException('non-nullable la_redoute_brand_id cannot be null');
        }
        $this->container['la_redoute_brand_id'] = $la_redoute_brand_id;

        return $this;
    }

    /**
     * Gets position
     *
     * @return int|null
     */
    public function getPosition(): ?int
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param int|null $position The position of the manufacturer
     *
     * @return $this
     */
    public function setPosition(?int $position): static
    {
        if (is_null($position)) {
            throw new InvalidArgumentException('non-nullable position cannot be null');
        }
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment(): ?string
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment Internal comments about the manufacturer (optional)
     *
     * @return $this
     */
    public function setComment(?string $comment): static
    {
        if (is_null($comment)) {
            throw new InvalidArgumentException('non-nullable comment cannot be null');
        }
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt(): ?string
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at The time the manufacturer information was last updated.
     *
     * @return $this
     */
    public function setUpdatedAt(?string $updated_at): static
    {
        if (is_null($updated_at)) {
            throw new InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


