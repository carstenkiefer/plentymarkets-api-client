<?php
/**
 * Basket
 *
 * PHP version 8.1
 *
 * @package  ck/plenty-client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ck/plenty-client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use ck/plenty-client\ObjectSerializer;

/**
 * Basket Class Doc Comment
 *
 * @package  ck/plenty-client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class Basket implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Basket';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'int',
        'session_id' => 'string',
        'order_id' => 'int',
        'customer_id' => 'int',
        'customer_invoice_address_id' => 'int',
        'customer_shipping_address_id' => 'int',
        'currency' => 'string',
        'referrer_id' => 'float',
        'shipping_country_id' => 'int',
        'method_of_payment_id' => 'int',
        'shipping_provider_id' => 'int',
        'shipping_profile_id' => 'int',
        'item_sum' => 'float',
        'item_sum_net' => 'float',
        'basket_amount' => 'float',
        'basket_amount_net' => 'float',
        'shipping_amount' => 'float',
        'shipping_amount_net' => 'float',
        'payment_amount' => 'float',
        'coupon_code' => 'string',
        'coupon_discount' => 'float',
        'shipping_delete_by_coupon' => 'bool',
        'basket_rebate' => 'float',
        'basket_rebate_type' => 'int',
        'max_fsk' => 'int',
        'order_timestamp' => 'int',
        'created_at' => 'string',
        'updated_at' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => null,
        'session_id' => null,
        'order_id' => null,
        'customer_id' => null,
        'customer_invoice_address_id' => null,
        'customer_shipping_address_id' => null,
        'currency' => null,
        'referrer_id' => null,
        'shipping_country_id' => null,
        'method_of_payment_id' => null,
        'shipping_provider_id' => null,
        'shipping_profile_id' => null,
        'item_sum' => null,
        'item_sum_net' => null,
        'basket_amount' => null,
        'basket_amount_net' => null,
        'shipping_amount' => null,
        'shipping_amount_net' => null,
        'payment_amount' => null,
        'coupon_code' => null,
        'coupon_discount' => null,
        'shipping_delete_by_coupon' => null,
        'basket_rebate' => null,
        'basket_rebate_type' => null,
        'max_fsk' => null,
        'order_timestamp' => null,
        'created_at' => null,
        'updated_at' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
		'session_id' => false,
		'order_id' => false,
		'customer_id' => false,
		'customer_invoice_address_id' => false,
		'customer_shipping_address_id' => false,
		'currency' => false,
		'referrer_id' => false,
		'shipping_country_id' => false,
		'method_of_payment_id' => false,
		'shipping_provider_id' => false,
		'shipping_profile_id' => false,
		'item_sum' => false,
		'item_sum_net' => false,
		'basket_amount' => false,
		'basket_amount_net' => false,
		'shipping_amount' => false,
		'shipping_amount_net' => false,
		'payment_amount' => false,
		'coupon_code' => false,
		'coupon_discount' => false,
		'shipping_delete_by_coupon' => false,
		'basket_rebate' => false,
		'basket_rebate_type' => false,
		'max_fsk' => false,
		'order_timestamp' => false,
		'created_at' => false,
		'updated_at' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'session_id' => 'sessionId',
        'order_id' => 'orderId',
        'customer_id' => 'customerId',
        'customer_invoice_address_id' => 'customerInvoiceAddressId',
        'customer_shipping_address_id' => 'customerShippingAddressId',
        'currency' => 'currency',
        'referrer_id' => 'referrerId',
        'shipping_country_id' => 'shippingCountryId',
        'method_of_payment_id' => 'methodOfPaymentId',
        'shipping_provider_id' => 'shippingProviderId',
        'shipping_profile_id' => 'shippingProfileId',
        'item_sum' => 'itemSum',
        'item_sum_net' => 'itemSumNet',
        'basket_amount' => 'basketAmount',
        'basket_amount_net' => 'basketAmountNet',
        'shipping_amount' => 'shippingAmount',
        'shipping_amount_net' => 'shippingAmountNet',
        'payment_amount' => 'paymentAmount',
        'coupon_code' => 'couponCode',
        'coupon_discount' => 'couponDiscount',
        'shipping_delete_by_coupon' => 'shippingDeleteByCoupon',
        'basket_rebate' => 'basketRebate',
        'basket_rebate_type' => 'basketRebateType',
        'max_fsk' => 'maxFsk',
        'order_timestamp' => 'orderTimestamp',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'session_id' => 'setSessionId',
        'order_id' => 'setOrderId',
        'customer_id' => 'setCustomerId',
        'customer_invoice_address_id' => 'setCustomerInvoiceAddressId',
        'customer_shipping_address_id' => 'setCustomerShippingAddressId',
        'currency' => 'setCurrency',
        'referrer_id' => 'setReferrerId',
        'shipping_country_id' => 'setShippingCountryId',
        'method_of_payment_id' => 'setMethodOfPaymentId',
        'shipping_provider_id' => 'setShippingProviderId',
        'shipping_profile_id' => 'setShippingProfileId',
        'item_sum' => 'setItemSum',
        'item_sum_net' => 'setItemSumNet',
        'basket_amount' => 'setBasketAmount',
        'basket_amount_net' => 'setBasketAmountNet',
        'shipping_amount' => 'setShippingAmount',
        'shipping_amount_net' => 'setShippingAmountNet',
        'payment_amount' => 'setPaymentAmount',
        'coupon_code' => 'setCouponCode',
        'coupon_discount' => 'setCouponDiscount',
        'shipping_delete_by_coupon' => 'setShippingDeleteByCoupon',
        'basket_rebate' => 'setBasketRebate',
        'basket_rebate_type' => 'setBasketRebateType',
        'max_fsk' => 'setMaxFsk',
        'order_timestamp' => 'setOrderTimestamp',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'session_id' => 'getSessionId',
        'order_id' => 'getOrderId',
        'customer_id' => 'getCustomerId',
        'customer_invoice_address_id' => 'getCustomerInvoiceAddressId',
        'customer_shipping_address_id' => 'getCustomerShippingAddressId',
        'currency' => 'getCurrency',
        'referrer_id' => 'getReferrerId',
        'shipping_country_id' => 'getShippingCountryId',
        'method_of_payment_id' => 'getMethodOfPaymentId',
        'shipping_provider_id' => 'getShippingProviderId',
        'shipping_profile_id' => 'getShippingProfileId',
        'item_sum' => 'getItemSum',
        'item_sum_net' => 'getItemSumNet',
        'basket_amount' => 'getBasketAmount',
        'basket_amount_net' => 'getBasketAmountNet',
        'shipping_amount' => 'getShippingAmount',
        'shipping_amount_net' => 'getShippingAmountNet',
        'payment_amount' => 'getPaymentAmount',
        'coupon_code' => 'getCouponCode',
        'coupon_discount' => 'getCouponDiscount',
        'shipping_delete_by_coupon' => 'getShippingDeleteByCoupon',
        'basket_rebate' => 'getBasketRebate',
        'basket_rebate_type' => 'getBasketRebateType',
        'max_fsk' => 'getMaxFsk',
        'order_timestamp' => 'getOrderTimestamp',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('session_id', $data ?? [], null);
        $this->setIfExists('order_id', $data ?? [], null);
        $this->setIfExists('customer_id', $data ?? [], null);
        $this->setIfExists('customer_invoice_address_id', $data ?? [], null);
        $this->setIfExists('customer_shipping_address_id', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('referrer_id', $data ?? [], null);
        $this->setIfExists('shipping_country_id', $data ?? [], null);
        $this->setIfExists('method_of_payment_id', $data ?? [], null);
        $this->setIfExists('shipping_provider_id', $data ?? [], null);
        $this->setIfExists('shipping_profile_id', $data ?? [], null);
        $this->setIfExists('item_sum', $data ?? [], null);
        $this->setIfExists('item_sum_net', $data ?? [], null);
        $this->setIfExists('basket_amount', $data ?? [], null);
        $this->setIfExists('basket_amount_net', $data ?? [], null);
        $this->setIfExists('shipping_amount', $data ?? [], null);
        $this->setIfExists('shipping_amount_net', $data ?? [], null);
        $this->setIfExists('payment_amount', $data ?? [], null);
        $this->setIfExists('coupon_code', $data ?? [], null);
        $this->setIfExists('coupon_discount', $data ?? [], null);
        $this->setIfExists('shipping_delete_by_coupon', $data ?? [], null);
        $this->setIfExists('basket_rebate', $data ?? [], null);
        $this->setIfExists('basket_rebate_type', $data ?? [], null);
        $this->setIfExists('max_fsk', $data ?? [], null);
        $this->setIfExists('order_timestamp', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The ID of the shopping cart. The ID increases by 1 when a new customer enters the online store and adds an item to the shopping cart.
     *
     * @return $this
     */
    public function setId(?int $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets session_id
     *
     * @return string|null
     */
    public function getSessionId(): ?string
    {
        return $this->container['session_id'];
    }

    /**
     * Sets session_id
     *
     * @param string|null $session_id The ID of the current customer session
     *
     * @return $this
     */
    public function setSessionId(?string $session_id): static
    {
        if (is_null($session_id)) {
            throw new InvalidArgumentException('non-nullable session_id cannot be null');
        }
        $this->container['session_id'] = $session_id;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return int|null
     */
    public function getOrderId(): ?int
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param int|null $order_id The ID of the order
     *
     * @return $this
     */
    public function setOrderId(?int $order_id): static
    {
        if (is_null($order_id)) {
            throw new InvalidArgumentException('non-nullable order_id cannot be null');
        }
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return int|null
     */
    public function getCustomerId(): ?int
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param int|null $customer_id The ID of the customer
     *
     * @return $this
     */
    public function setCustomerId(?int $customer_id): static
    {
        if (is_null($customer_id)) {
            throw new InvalidArgumentException('non-nullable customer_id cannot be null');
        }
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets customer_invoice_address_id
     *
     * @return int|null
     */
    public function getCustomerInvoiceAddressId(): ?int
    {
        return $this->container['customer_invoice_address_id'];
    }

    /**
     * Sets customer_invoice_address_id
     *
     * @param int|null $customer_invoice_address_id The ID of the customer's invoice address
     *
     * @return $this
     */
    public function setCustomerInvoiceAddressId(?int $customer_invoice_address_id): static
    {
        if (is_null($customer_invoice_address_id)) {
            throw new InvalidArgumentException('non-nullable customer_invoice_address_id cannot be null');
        }
        $this->container['customer_invoice_address_id'] = $customer_invoice_address_id;

        return $this;
    }

    /**
     * Gets customer_shipping_address_id
     *
     * @return int|null
     */
    public function getCustomerShippingAddressId(): ?int
    {
        return $this->container['customer_shipping_address_id'];
    }

    /**
     * Sets customer_shipping_address_id
     *
     * @param int|null $customer_shipping_address_id The ID of the customer's shipping address
     *
     * @return $this
     */
    public function setCustomerShippingAddressId(?int $customer_shipping_address_id): static
    {
        if (is_null($customer_shipping_address_id)) {
            throw new InvalidArgumentException('non-nullable customer_shipping_address_id cannot be null');
        }
        $this->container['customer_shipping_address_id'] = $customer_shipping_address_id;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency(): ?string
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency The currency
     *
     * @return $this
     */
    public function setCurrency(?string $currency): static
    {
        if (is_null($currency)) {
            throw new InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets referrer_id
     *
     * @return float|null
     */
    public function getReferrerId(): ?float
    {
        return $this->container['referrer_id'];
    }

    /**
     * Sets referrer_id
     *
     * @param float|null $referrer_id The ID of the order referrer
     *
     * @return $this
     */
    public function setReferrerId(?float $referrer_id): static
    {
        if (is_null($referrer_id)) {
            throw new InvalidArgumentException('non-nullable referrer_id cannot be null');
        }
        $this->container['referrer_id'] = $referrer_id;

        return $this;
    }

    /**
     * Gets shipping_country_id
     *
     * @return int|null
     */
    public function getShippingCountryId(): ?int
    {
        return $this->container['shipping_country_id'];
    }

    /**
     * Sets shipping_country_id
     *
     * @param int|null $shipping_country_id The ID of the shipping country
     *
     * @return $this
     */
    public function setShippingCountryId(?int $shipping_country_id): static
    {
        if (is_null($shipping_country_id)) {
            throw new InvalidArgumentException('non-nullable shipping_country_id cannot be null');
        }
        $this->container['shipping_country_id'] = $shipping_country_id;

        return $this;
    }

    /**
     * Gets method_of_payment_id
     *
     * @return int|null
     */
    public function getMethodOfPaymentId(): ?int
    {
        return $this->container['method_of_payment_id'];
    }

    /**
     * Sets method_of_payment_id
     *
     * @param int|null $method_of_payment_id The ID of the payment method
     *
     * @return $this
     */
    public function setMethodOfPaymentId(?int $method_of_payment_id): static
    {
        if (is_null($method_of_payment_id)) {
            throw new InvalidArgumentException('non-nullable method_of_payment_id cannot be null');
        }
        $this->container['method_of_payment_id'] = $method_of_payment_id;

        return $this;
    }

    /**
     * Gets shipping_provider_id
     *
     * @return int|null
     */
    public function getShippingProviderId(): ?int
    {
        return $this->container['shipping_provider_id'];
    }

    /**
     * Sets shipping_provider_id
     *
     * @param int|null $shipping_provider_id The ID of the shipping provider
     *
     * @return $this
     */
    public function setShippingProviderId(?int $shipping_provider_id): static
    {
        if (is_null($shipping_provider_id)) {
            throw new InvalidArgumentException('non-nullable shipping_provider_id cannot be null');
        }
        $this->container['shipping_provider_id'] = $shipping_provider_id;

        return $this;
    }

    /**
     * Gets shipping_profile_id
     *
     * @return int|null
     */
    public function getShippingProfileId(): ?int
    {
        return $this->container['shipping_profile_id'];
    }

    /**
     * Sets shipping_profile_id
     *
     * @param int|null $shipping_profile_id The ID of the shipping profile
     *
     * @return $this
     */
    public function setShippingProfileId(?int $shipping_profile_id): static
    {
        if (is_null($shipping_profile_id)) {
            throw new InvalidArgumentException('non-nullable shipping_profile_id cannot be null');
        }
        $this->container['shipping_profile_id'] = $shipping_profile_id;

        return $this;
    }

    /**
     * Gets item_sum
     *
     * @return float|null
     */
    public function getItemSum(): ?float
    {
        return $this->container['item_sum'];
    }

    /**
     * Sets item_sum
     *
     * @param float|null $item_sum The gross value of items in the shopping cart
     *
     * @return $this
     */
    public function setItemSum(?float $item_sum): static
    {
        if (is_null($item_sum)) {
            throw new InvalidArgumentException('non-nullable item_sum cannot be null');
        }
        $this->container['item_sum'] = $item_sum;

        return $this;
    }

    /**
     * Gets item_sum_net
     *
     * @return float|null
     */
    public function getItemSumNet(): ?float
    {
        return $this->container['item_sum_net'];
    }

    /**
     * Sets item_sum_net
     *
     * @param float|null $item_sum_net The net value of items in the shopping cart
     *
     * @return $this
     */
    public function setItemSumNet(?float $item_sum_net): static
    {
        if (is_null($item_sum_net)) {
            throw new InvalidArgumentException('non-nullable item_sum_net cannot be null');
        }
        $this->container['item_sum_net'] = $item_sum_net;

        return $this;
    }

    /**
     * Gets basket_amount
     *
     * @return float|null
     */
    public function getBasketAmount(): ?float
    {
        return $this->container['basket_amount'];
    }

    /**
     * Sets basket_amount
     *
     * @param float|null $basket_amount The total gross value of the shopping cart
     *
     * @return $this
     */
    public function setBasketAmount(?float $basket_amount): static
    {
        if (is_null($basket_amount)) {
            throw new InvalidArgumentException('non-nullable basket_amount cannot be null');
        }
        $this->container['basket_amount'] = $basket_amount;

        return $this;
    }

    /**
     * Gets basket_amount_net
     *
     * @return float|null
     */
    public function getBasketAmountNet(): ?float
    {
        return $this->container['basket_amount_net'];
    }

    /**
     * Sets basket_amount_net
     *
     * @param float|null $basket_amount_net The total net value of the shopping cart
     *
     * @return $this
     */
    public function setBasketAmountNet(?float $basket_amount_net): static
    {
        if (is_null($basket_amount_net)) {
            throw new InvalidArgumentException('non-nullable basket_amount_net cannot be null');
        }
        $this->container['basket_amount_net'] = $basket_amount_net;

        return $this;
    }

    /**
     * Gets shipping_amount
     *
     * @return float|null
     */
    public function getShippingAmount(): ?float
    {
        return $this->container['shipping_amount'];
    }

    /**
     * Sets shipping_amount
     *
     * @param float|null $shipping_amount The gross shipping costs
     *
     * @return $this
     */
    public function setShippingAmount(?float $shipping_amount): static
    {
        if (is_null($shipping_amount)) {
            throw new InvalidArgumentException('non-nullable shipping_amount cannot be null');
        }
        $this->container['shipping_amount'] = $shipping_amount;

        return $this;
    }

    /**
     * Gets shipping_amount_net
     *
     * @return float|null
     */
    public function getShippingAmountNet(): ?float
    {
        return $this->container['shipping_amount_net'];
    }

    /**
     * Sets shipping_amount_net
     *
     * @param float|null $shipping_amount_net The net shipping costs
     *
     * @return $this
     */
    public function setShippingAmountNet(?float $shipping_amount_net): static
    {
        if (is_null($shipping_amount_net)) {
            throw new InvalidArgumentException('non-nullable shipping_amount_net cannot be null');
        }
        $this->container['shipping_amount_net'] = $shipping_amount_net;

        return $this;
    }

    /**
     * Gets payment_amount
     *
     * @return float|null
     */
    public function getPaymentAmount(): ?float
    {
        return $this->container['payment_amount'];
    }

    /**
     * Sets payment_amount
     *
     * @param float|null $payment_amount The amount of the payment
     *
     * @return $this
     */
    public function setPaymentAmount(?float $payment_amount): static
    {
        if (is_null($payment_amount)) {
            throw new InvalidArgumentException('non-nullable payment_amount cannot be null');
        }
        $this->container['payment_amount'] = $payment_amount;

        return $this;
    }

    /**
     * Gets coupon_code
     *
     * @return string|null
     */
    public function getCouponCode(): ?string
    {
        return $this->container['coupon_code'];
    }

    /**
     * Sets coupon_code
     *
     * @param string|null $coupon_code The entered coupon code
     *
     * @return $this
     */
    public function setCouponCode(?string $coupon_code): static
    {
        if (is_null($coupon_code)) {
            throw new InvalidArgumentException('non-nullable coupon_code cannot be null');
        }
        $this->container['coupon_code'] = $coupon_code;

        return $this;
    }

    /**
     * Gets coupon_discount
     *
     * @return float|null
     */
    public function getCouponDiscount(): ?float
    {
        return $this->container['coupon_discount'];
    }

    /**
     * Sets coupon_discount
     *
     * @param float|null $coupon_discount The received discount due to the coupon code
     *
     * @return $this
     */
    public function setCouponDiscount(?float $coupon_discount): static
    {
        if (is_null($coupon_discount)) {
            throw new InvalidArgumentException('non-nullable coupon_discount cannot be null');
        }
        $this->container['coupon_discount'] = $coupon_discount;

        return $this;
    }

    /**
     * Gets shipping_delete_by_coupon
     *
     * @return bool|null
     */
    public function getShippingDeleteByCoupon(): ?bool
    {
        return $this->container['shipping_delete_by_coupon'];
    }

    /**
     * Sets shipping_delete_by_coupon
     *
     * @param bool|null $shipping_delete_by_coupon Shows whether the shipping costs are subtracted due to a coupon code. Shopping carts that are free of shipping costs have the value true.
     *
     * @return $this
     */
    public function setShippingDeleteByCoupon(?bool $shipping_delete_by_coupon): static
    {
        if (is_null($shipping_delete_by_coupon)) {
            throw new InvalidArgumentException('non-nullable shipping_delete_by_coupon cannot be null');
        }
        $this->container['shipping_delete_by_coupon'] = $shipping_delete_by_coupon;

        return $this;
    }

    /**
     * Gets basket_rebate
     *
     * @return float|null
     */
    public function getBasketRebate(): ?float
    {
        return $this->container['basket_rebate'];
    }

    /**
     * Sets basket_rebate
     *
     * @param float|null $basket_rebate The discount to the shopping cart value. The discount can either be set as a discount scale for items, as a customer class discount or as a discount based on the payment method.
     *
     * @return $this
     */
    public function setBasketRebate(?float $basket_rebate): static
    {
        if (is_null($basket_rebate)) {
            throw new InvalidArgumentException('non-nullable basket_rebate cannot be null');
        }
        $this->container['basket_rebate'] = $basket_rebate;

        return $this;
    }

    /**
     * Gets basket_rebate_type
     *
     * @return int|null
     */
    public function getBasketRebateType(): ?int
    {
        return $this->container['basket_rebate_type'];
    }

    /**
     * Sets basket_rebate_type
     *
     * @param int|null $basket_rebate_type The discount type. The following types are available: <ul>     <li>Discount scale based on net value of items = 4</li>     <li>    Discount based on method of payment = 5</li> </ul>
     *
     * @return $this
     */
    public function setBasketRebateType(?int $basket_rebate_type): static
    {
        if (is_null($basket_rebate_type)) {
            throw new InvalidArgumentException('non-nullable basket_rebate_type cannot be null');
        }
        $this->container['basket_rebate_type'] = $basket_rebate_type;

        return $this;
    }

    /**
     * Gets max_fsk
     *
     * @return int|null
     */
    public function getMaxFsk(): ?int
    {
        return $this->container['max_fsk'];
    }

    /**
     * Sets max_fsk
     *
     * @param int|null $max_fsk The age rating
     *
     * @return $this
     */
    public function setMaxFsk(?int $max_fsk): static
    {
        if (is_null($max_fsk)) {
            throw new InvalidArgumentException('non-nullable max_fsk cannot be null');
        }
        $this->container['max_fsk'] = $max_fsk;

        return $this;
    }

    /**
     * Gets order_timestamp
     *
     * @return int|null
     */
    public function getOrderTimestamp(): ?int
    {
        return $this->container['order_timestamp'];
    }

    /**
     * Sets order_timestamp
     *
     * @param int|null $order_timestamp The timestamp of the order
     *
     * @return $this
     */
    public function setOrderTimestamp(?int $order_timestamp): static
    {
        if (is_null($order_timestamp)) {
            throw new InvalidArgumentException('non-nullable order_timestamp cannot be null');
        }
        $this->container['order_timestamp'] = $order_timestamp;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt(): ?string
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at The date that the shopping cart was created.
     *
     * @return $this
     */
    public function setCreatedAt(?string $created_at): static
    {
        if (is_null($created_at)) {
            throw new InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt(): ?string
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at The date that the shopping cart was updated last.
     *
     * @return $this
     */
    public function setUpdatedAt(?string $updated_at): static
    {
        if (is_null($updated_at)) {
            throw new InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


