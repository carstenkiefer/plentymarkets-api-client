<?php
/**
 * RestVatPostRequest
 *
 * PHP version 8.1
 *
 * @package  ck/plenty-client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ck/plenty-client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use ck/plenty-client\ObjectSerializer;

/**
 * RestVatPostRequest Class Doc Comment
 *
 * @package  ck/plenty-client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class RestVatPostRequest implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = '_rest_vat_post_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'country_id' => 'int',
        'location_id' => 'int',
        'tax_id_number' => 'string',
        'started_at' => 'string',
        'invalid_from' => 'string',
        'is_restricted_to_digital_items' => 'bool',
        'margin_scheme' => 'string',
        'vat_rates' => '\ck/plenty-client\Model\VatRate[]',
        'id' => 'int',
        'name' => 'string',
        'vat_rate' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'country_id' => null,
        'location_id' => null,
        'tax_id_number' => null,
        'started_at' => null,
        'invalid_from' => null,
        'is_restricted_to_digital_items' => null,
        'margin_scheme' => null,
        'vat_rates' => null,
        'id' => null,
        'name' => null,
        'vat_rate' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'country_id' => false,
		'location_id' => false,
		'tax_id_number' => false,
		'started_at' => false,
		'invalid_from' => false,
		'is_restricted_to_digital_items' => false,
		'margin_scheme' => false,
		'vat_rates' => false,
		'id' => false,
		'name' => false,
		'vat_rate' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'country_id' => 'countryId',
        'location_id' => 'locationId',
        'tax_id_number' => 'taxIdNumber',
        'started_at' => 'startedAt',
        'invalid_from' => 'invalidFrom',
        'is_restricted_to_digital_items' => 'isRestrictedToDigitalItems',
        'margin_scheme' => 'marginScheme',
        'vat_rates' => 'vatRates',
        'id' => 'id',
        'name' => 'name',
        'vat_rate' => 'vatRate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'country_id' => 'setCountryId',
        'location_id' => 'setLocationId',
        'tax_id_number' => 'setTaxIdNumber',
        'started_at' => 'setStartedAt',
        'invalid_from' => 'setInvalidFrom',
        'is_restricted_to_digital_items' => 'setIsRestrictedToDigitalItems',
        'margin_scheme' => 'setMarginScheme',
        'vat_rates' => 'setVatRates',
        'id' => 'setId',
        'name' => 'setName',
        'vat_rate' => 'setVatRate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'country_id' => 'getCountryId',
        'location_id' => 'getLocationId',
        'tax_id_number' => 'getTaxIdNumber',
        'started_at' => 'getStartedAt',
        'invalid_from' => 'getInvalidFrom',
        'is_restricted_to_digital_items' => 'getIsRestrictedToDigitalItems',
        'margin_scheme' => 'getMarginScheme',
        'vat_rates' => 'getVatRates',
        'id' => 'getId',
        'name' => 'getName',
        'vat_rate' => 'getVatRate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('country_id', $data ?? [], null);
        $this->setIfExists('location_id', $data ?? [], null);
        $this->setIfExists('tax_id_number', $data ?? [], null);
        $this->setIfExists('started_at', $data ?? [], null);
        $this->setIfExists('invalid_from', $data ?? [], null);
        $this->setIfExists('is_restricted_to_digital_items', $data ?? [], null);
        $this->setIfExists('margin_scheme', $data ?? [], null);
        $this->setIfExists('vat_rates', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('vat_rate', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['country_id'] === null) {
            $invalidProperties[] = "'country_id' can't be null";
        }
        if ($this->container['location_id'] === null) {
            $invalidProperties[] = "'location_id' can't be null";
        }
        if ($this->container['started_at'] === null) {
            $invalidProperties[] = "'started_at' can't be null";
        }
        if ($this->container['vat_rates'] === null) {
            $invalidProperties[] = "'vat_rates' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['vat_rate'] === null) {
            $invalidProperties[] = "'vat_rate' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets country_id
     *
     * @return int
     */
    public function getCountryId(): int
    {
        return $this->container['country_id'];
    }

    /**
     * Sets country_id
     *
     * @param int $country_id The ID of the country that the VAT configuration belongs to
     *
     * @return $this
     */
    public function setCountryId(int $country_id): static
    {
        if (is_null($country_id)) {
            throw new InvalidArgumentException('non-nullable country_id cannot be null');
        }
        $this->container['country_id'] = $country_id;

        return $this;
    }

    /**
     * Gets location_id
     *
     * @return int
     */
    public function getLocationId(): int
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     *
     * @param int $location_id The ID of the location
     *
     * @return $this
     */
    public function setLocationId(int $location_id): static
    {
        if (is_null($location_id)) {
            throw new InvalidArgumentException('non-nullable location_id cannot be null');
        }
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets tax_id_number
     *
     * @return string|null
     */
    public function getTaxIdNumber(): ?string
    {
        return $this->container['tax_id_number'];
    }

    /**
     * Sets tax_id_number
     *
     * @param string|null $tax_id_number The tax id number of VAT configuration.
     *
     * @return $this
     */
    public function setTaxIdNumber(?string $tax_id_number): static
    {
        if (is_null($tax_id_number)) {
            throw new InvalidArgumentException('non-nullable tax_id_number cannot be null');
        }
        $this->container['tax_id_number'] = $tax_id_number;

        return $this;
    }

    /**
     * Gets started_at
     *
     * @return string
     */
    public function getStartedAt(): string
    {
        return $this->container['started_at'];
    }

    /**
     * Sets started_at
     *
     * @param string $started_at The date when the VAT configuration went into effect
     *
     * @return $this
     */
    public function setStartedAt(string $started_at): static
    {
        if (is_null($started_at)) {
            throw new InvalidArgumentException('non-nullable started_at cannot be null');
        }
        $this->container['started_at'] = $started_at;

        return $this;
    }

    /**
     * Gets invalid_from
     *
     * @return string|null
     */
    public function getInvalidFrom(): ?string
    {
        return $this->container['invalid_from'];
    }

    /**
     * Sets invalid_from
     *
     * @param string|null $invalid_from The date when the VAT configuration should not be used any more
     *
     * @return $this
     */
    public function setInvalidFrom(?string $invalid_from): static
    {
        if (is_null($invalid_from)) {
            throw new InvalidArgumentException('non-nullable invalid_from cannot be null');
        }
        $this->container['invalid_from'] = $invalid_from;

        return $this;
    }

    /**
     * Gets is_restricted_to_digital_items
     *
     * @return bool|null
     */
    public function getIsRestrictedToDigitalItems(): ?bool
    {
        return $this->container['is_restricted_to_digital_items'];
    }

    /**
     * Sets is_restricted_to_digital_items
     *
     * @param bool|null $is_restricted_to_digital_items Flag that indicates if the VAT configuration is used only applied to digital goods or not. True= The VAT set is only applied to digital goods. False = The VAT set is applied to all types of goods.
     *
     * @return $this
     */
    public function setIsRestrictedToDigitalItems(?bool $is_restricted_to_digital_items): static
    {
        if (is_null($is_restricted_to_digital_items)) {
            throw new InvalidArgumentException('non-nullable is_restricted_to_digital_items cannot be null');
        }
        $this->container['is_restricted_to_digital_items'] = $is_restricted_to_digital_items;

        return $this;
    }

    /**
     * Gets margin_scheme
     *
     * @return string|null
     */
    public function getMarginScheme(): ?string
    {
        return $this->container['margin_scheme'];
    }

    /**
     * Sets margin_scheme
     *
     * @param string|null $margin_scheme Specifies the tax rate that is used, when the margin scheme is applied. Available values: 'none', 'vat1', 'vat2', 'vat3', 'vat4'. allowed values are none, vat0, vat1, vat2, vat3
     *
     * @return $this
     */
    public function setMarginScheme(?string $margin_scheme): static
    {
        if (is_null($margin_scheme)) {
            throw new InvalidArgumentException('non-nullable margin_scheme cannot be null');
        }
        $this->container['margin_scheme'] = $margin_scheme;

        return $this;
    }

    /**
     * Gets vat_rates
     *
     * @return \ck/plenty-client\Model\VatRate[]
     */
    public function getVatRates(): array
    {
        return $this->container['vat_rates'];
    }

    /**
     * Sets vat_rates
     *
     * @param \ck/plenty-client\Model\VatRate[] $vat_rates vat_rates
     *
     * @return $this
     */
    public function setVatRates(array $vat_rates): static
    {
        if (is_null($vat_rates)) {
            throw new InvalidArgumentException('non-nullable vat_rates cannot be null');
        }
        $this->container['vat_rates'] = $vat_rates;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId(): int
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The ID of the VAT rate  allowed values are 0, 1, 2, 3
     *
     * @return $this
     */
    public function setId(int $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of a VAT rate
     *
     * @return $this
     */
    public function setName(?string $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets vat_rate
     *
     * @return float
     */
    public function getVatRate(): float
    {
        return $this->container['vat_rate'];
    }

    /**
     * Sets vat_rate
     *
     * @param float $vat_rate The percentage of the VAT rate, e.g. 19.00 for 19 %
     *
     * @return $this
     */
    public function setVatRate(float $vat_rate): static
    {
        if (is_null($vat_rate)) {
            throw new InvalidArgumentException('non-nullable vat_rate cannot be null');
        }
        $this->container['vat_rate'] = $vat_rate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


