<?php
/**
 * Address
 *
 * PHP version 8.1
 *
 * @package  ck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ck\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use ck\ObjectSerializer;

/**
 * Address Class Doc Comment
 *
 * @package  ck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class Address implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Address';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'int',
        'gender' => 'string',
        'name1' => 'string',
        'name2' => 'string',
        'name3' => 'string',
        'name4' => 'string',
        'address1' => 'string',
        'address2' => 'string',
        'address3' => 'string',
        'address4' => 'string',
        'postal_code' => 'string',
        'town' => 'string',
        'country_id' => 'int',
        'state_id' => 'int',
        'read_only' => 'bool',
        'company_name' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'care_of' => 'string',
        'street' => 'string',
        'house_number' => 'string',
        'additional' => 'string',
        'checked_at' => 'string',
        'created_at' => 'string',
        'updated_at' => 'string',
        'tax_id_number' => 'string',
        'external_id' => 'string',
        'entry_certificate' => 'bool',
        'phone' => 'string',
        'email' => 'string',
        'postident' => 'string',
        'personal_number' => 'string',
        'fsk' => 'string',
        'birthday' => 'string',
        'title' => 'string',
        'session_id' => 'string',
        'contact_person' => 'string',
        'packstation_no' => 'string',
        'is_packstation' => 'bool',
        'is_postfiliale' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => null,
        'gender' => null,
        'name1' => null,
        'name2' => null,
        'name3' => null,
        'name4' => null,
        'address1' => null,
        'address2' => null,
        'address3' => null,
        'address4' => null,
        'postal_code' => null,
        'town' => null,
        'country_id' => null,
        'state_id' => null,
        'read_only' => null,
        'company_name' => null,
        'first_name' => null,
        'last_name' => null,
        'care_of' => null,
        'street' => null,
        'house_number' => null,
        'additional' => null,
        'checked_at' => null,
        'created_at' => null,
        'updated_at' => null,
        'tax_id_number' => null,
        'external_id' => null,
        'entry_certificate' => null,
        'phone' => null,
        'email' => null,
        'postident' => null,
        'personal_number' => null,
        'fsk' => null,
        'birthday' => null,
        'title' => null,
        'session_id' => null,
        'contact_person' => null,
        'packstation_no' => null,
        'is_packstation' => null,
        'is_postfiliale' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
		'gender' => false,
		'name1' => false,
		'name2' => false,
		'name3' => false,
		'name4' => false,
		'address1' => false,
		'address2' => false,
		'address3' => false,
		'address4' => false,
		'postal_code' => false,
		'town' => false,
		'country_id' => false,
		'state_id' => false,
		'read_only' => false,
		'company_name' => false,
		'first_name' => false,
		'last_name' => false,
		'care_of' => false,
		'street' => false,
		'house_number' => false,
		'additional' => false,
		'checked_at' => false,
		'created_at' => false,
		'updated_at' => false,
		'tax_id_number' => false,
		'external_id' => false,
		'entry_certificate' => false,
		'phone' => false,
		'email' => false,
		'postident' => false,
		'personal_number' => false,
		'fsk' => false,
		'birthday' => false,
		'title' => false,
		'session_id' => false,
		'contact_person' => false,
		'packstation_no' => false,
		'is_packstation' => false,
		'is_postfiliale' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'gender' => 'gender',
        'name1' => 'name1',
        'name2' => 'name2',
        'name3' => 'name3',
        'name4' => 'name4',
        'address1' => 'address1',
        'address2' => 'address2',
        'address3' => 'address3',
        'address4' => 'address4',
        'postal_code' => 'postalCode',
        'town' => 'town',
        'country_id' => 'countryId',
        'state_id' => 'stateId',
        'read_only' => 'readOnly',
        'company_name' => 'companyName',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'care_of' => 'careOf',
        'street' => 'street',
        'house_number' => 'houseNumber',
        'additional' => 'additional',
        'checked_at' => 'checkedAt',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt',
        'tax_id_number' => 'taxIdNumber',
        'external_id' => 'externalId',
        'entry_certificate' => 'entryCertificate',
        'phone' => 'phone',
        'email' => 'email',
        'postident' => 'postident',
        'personal_number' => 'personalNumber',
        'fsk' => 'fsk',
        'birthday' => 'birthday',
        'title' => 'title',
        'session_id' => 'sessionId',
        'contact_person' => 'contactPerson',
        'packstation_no' => 'packstationNo',
        'is_packstation' => 'isPackstation',
        'is_postfiliale' => 'isPostfiliale'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'gender' => 'setGender',
        'name1' => 'setName1',
        'name2' => 'setName2',
        'name3' => 'setName3',
        'name4' => 'setName4',
        'address1' => 'setAddress1',
        'address2' => 'setAddress2',
        'address3' => 'setAddress3',
        'address4' => 'setAddress4',
        'postal_code' => 'setPostalCode',
        'town' => 'setTown',
        'country_id' => 'setCountryId',
        'state_id' => 'setStateId',
        'read_only' => 'setReadOnly',
        'company_name' => 'setCompanyName',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'care_of' => 'setCareOf',
        'street' => 'setStreet',
        'house_number' => 'setHouseNumber',
        'additional' => 'setAdditional',
        'checked_at' => 'setCheckedAt',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'tax_id_number' => 'setTaxIdNumber',
        'external_id' => 'setExternalId',
        'entry_certificate' => 'setEntryCertificate',
        'phone' => 'setPhone',
        'email' => 'setEmail',
        'postident' => 'setPostident',
        'personal_number' => 'setPersonalNumber',
        'fsk' => 'setFsk',
        'birthday' => 'setBirthday',
        'title' => 'setTitle',
        'session_id' => 'setSessionId',
        'contact_person' => 'setContactPerson',
        'packstation_no' => 'setPackstationNo',
        'is_packstation' => 'setIsPackstation',
        'is_postfiliale' => 'setIsPostfiliale'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'gender' => 'getGender',
        'name1' => 'getName1',
        'name2' => 'getName2',
        'name3' => 'getName3',
        'name4' => 'getName4',
        'address1' => 'getAddress1',
        'address2' => 'getAddress2',
        'address3' => 'getAddress3',
        'address4' => 'getAddress4',
        'postal_code' => 'getPostalCode',
        'town' => 'getTown',
        'country_id' => 'getCountryId',
        'state_id' => 'getStateId',
        'read_only' => 'getReadOnly',
        'company_name' => 'getCompanyName',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'care_of' => 'getCareOf',
        'street' => 'getStreet',
        'house_number' => 'getHouseNumber',
        'additional' => 'getAdditional',
        'checked_at' => 'getCheckedAt',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'tax_id_number' => 'getTaxIdNumber',
        'external_id' => 'getExternalId',
        'entry_certificate' => 'getEntryCertificate',
        'phone' => 'getPhone',
        'email' => 'getEmail',
        'postident' => 'getPostident',
        'personal_number' => 'getPersonalNumber',
        'fsk' => 'getFsk',
        'birthday' => 'getBirthday',
        'title' => 'getTitle',
        'session_id' => 'getSessionId',
        'contact_person' => 'getContactPerson',
        'packstation_no' => 'getPackstationNo',
        'is_packstation' => 'getIsPackstation',
        'is_postfiliale' => 'getIsPostfiliale'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('gender', $data ?? [], null);
        $this->setIfExists('name1', $data ?? [], null);
        $this->setIfExists('name2', $data ?? [], null);
        $this->setIfExists('name3', $data ?? [], null);
        $this->setIfExists('name4', $data ?? [], null);
        $this->setIfExists('address1', $data ?? [], null);
        $this->setIfExists('address2', $data ?? [], null);
        $this->setIfExists('address3', $data ?? [], null);
        $this->setIfExists('address4', $data ?? [], null);
        $this->setIfExists('postal_code', $data ?? [], null);
        $this->setIfExists('town', $data ?? [], null);
        $this->setIfExists('country_id', $data ?? [], null);
        $this->setIfExists('state_id', $data ?? [], null);
        $this->setIfExists('read_only', $data ?? [], null);
        $this->setIfExists('company_name', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('care_of', $data ?? [], null);
        $this->setIfExists('street', $data ?? [], null);
        $this->setIfExists('house_number', $data ?? [], null);
        $this->setIfExists('additional', $data ?? [], null);
        $this->setIfExists('checked_at', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('tax_id_number', $data ?? [], null);
        $this->setIfExists('external_id', $data ?? [], null);
        $this->setIfExists('entry_certificate', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('postident', $data ?? [], null);
        $this->setIfExists('personal_number', $data ?? [], null);
        $this->setIfExists('fsk', $data ?? [], null);
        $this->setIfExists('birthday', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('session_id', $data ?? [], null);
        $this->setIfExists('contact_person', $data ?? [], null);
        $this->setIfExists('packstation_no', $data ?? [], null);
        $this->setIfExists('is_packstation', $data ?? [], null);
        $this->setIfExists('is_postfiliale', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The ID of the address
     *
     * @return $this
     */
    public function setId(?int $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string|null
     */
    public function getGender(): ?string
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string|null $gender The gender (\"female\", \"male\" or \"diverse\")
     *
     * @return $this
     */
    public function setGender(?string $gender): static
    {
        if (is_null($gender)) {
            throw new InvalidArgumentException('non-nullable gender cannot be null');
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets name1
     *
     * @return string|null
     */
    public function getName1(): ?string
    {
        return $this->container['name1'];
    }

    /**
     * Sets name1
     *
     * @param string|null $name1 The name 1 field (defaults to: company name)
     *
     * @return $this
     */
    public function setName1(?string $name1): static
    {
        if (is_null($name1)) {
            throw new InvalidArgumentException('non-nullable name1 cannot be null');
        }
        $this->container['name1'] = $name1;

        return $this;
    }

    /**
     * Gets name2
     *
     * @return string|null
     */
    public function getName2(): ?string
    {
        return $this->container['name2'];
    }

    /**
     * Sets name2
     *
     * @param string|null $name2 The name 2 field (defaults to: first name)
     *
     * @return $this
     */
    public function setName2(?string $name2): static
    {
        if (is_null($name2)) {
            throw new InvalidArgumentException('non-nullable name2 cannot be null');
        }
        $this->container['name2'] = $name2;

        return $this;
    }

    /**
     * Gets name3
     *
     * @return string|null
     */
    public function getName3(): ?string
    {
        return $this->container['name3'];
    }

    /**
     * Sets name3
     *
     * @param string|null $name3 The name 3 field (defaults to: last name)
     *
     * @return $this
     */
    public function setName3(?string $name3): static
    {
        if (is_null($name3)) {
            throw new InvalidArgumentException('non-nullable name3 cannot be null');
        }
        $this->container['name3'] = $name3;

        return $this;
    }

    /**
     * Gets name4
     *
     * @return string|null
     */
    public function getName4(): ?string
    {
        return $this->container['name4'];
    }

    /**
     * Sets name4
     *
     * @param string|null $name4 The name 4 field (defaults to: c/o)
     *
     * @return $this
     */
    public function setName4(?string $name4): static
    {
        if (is_null($name4)) {
            throw new InvalidArgumentException('non-nullable name4 cannot be null');
        }
        $this->container['name4'] = $name4;

        return $this;
    }

    /**
     * Gets address1
     *
     * @return string|null
     */
    public function getAddress1(): ?string
    {
        return $this->container['address1'];
    }

    /**
     * Sets address1
     *
     * @param string|null $address1 The address 1 field (defaults to: street|'PACKSTATION'|'POSTFILIALE')
     *
     * @return $this
     */
    public function setAddress1(?string $address1): static
    {
        if (is_null($address1)) {
            throw new InvalidArgumentException('non-nullable address1 cannot be null');
        }
        $this->container['address1'] = $address1;

        return $this;
    }

    /**
     * Gets address2
     *
     * @return string|null
     */
    public function getAddress2(): ?string
    {
        return $this->container['address2'];
    }

    /**
     * Sets address2
     *
     * @param string|null $address2 The address 2 field (defaults to: houseNumber|packstationNo)
     *
     * @return $this
     */
    public function setAddress2(?string $address2): static
    {
        if (is_null($address2)) {
            throw new InvalidArgumentException('non-nullable address2 cannot be null');
        }
        $this->container['address2'] = $address2;

        return $this;
    }

    /**
     * Gets address3
     *
     * @return string|null
     */
    public function getAddress3(): ?string
    {
        return $this->container['address3'];
    }

    /**
     * Sets address3
     *
     * @param string|null $address3 The address 3 field (defaults to: additional)
     *
     * @return $this
     */
    public function setAddress3(?string $address3): static
    {
        if (is_null($address3)) {
            throw new InvalidArgumentException('non-nullable address3 cannot be null');
        }
        $this->container['address3'] = $address3;

        return $this;
    }

    /**
     * Gets address4
     *
     * @return string|null
     */
    public function getAddress4(): ?string
    {
        return $this->container['address4'];
    }

    /**
     * Sets address4
     *
     * @param string|null $address4 The address 4 field is currently undefined and can be freely used.
     *
     * @return $this
     */
    public function setAddress4(?string $address4): static
    {
        if (is_null($address4)) {
            throw new InvalidArgumentException('non-nullable address4 cannot be null');
        }
        $this->container['address4'] = $address4;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string|null
     */
    public function getPostalCode(): ?string
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string|null $postal_code The postcode
     *
     * @return $this
     */
    public function setPostalCode(?string $postal_code): static
    {
        if (is_null($postal_code)) {
            throw new InvalidArgumentException('non-nullable postal_code cannot be null');
        }
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets town
     *
     * @return string|null
     */
    public function getTown(): ?string
    {
        return $this->container['town'];
    }

    /**
     * Sets town
     *
     * @param string|null $town The town
     *
     * @return $this
     */
    public function setTown(?string $town): static
    {
        if (is_null($town)) {
            throw new InvalidArgumentException('non-nullable town cannot be null');
        }
        $this->container['town'] = $town;

        return $this;
    }

    /**
     * Gets country_id
     *
     * @return int|null
     */
    public function getCountryId(): ?int
    {
        return $this->container['country_id'];
    }

    /**
     * Sets country_id
     *
     * @param int|null $country_id The ID of the country
     *
     * @return $this
     */
    public function setCountryId(?int $country_id): static
    {
        if (is_null($country_id)) {
            throw new InvalidArgumentException('non-nullable country_id cannot be null');
        }
        $this->container['country_id'] = $country_id;

        return $this;
    }

    /**
     * Gets state_id
     *
     * @return int|null
     */
    public function getStateId(): ?int
    {
        return $this->container['state_id'];
    }

    /**
     * Sets state_id
     *
     * @param int|null $state_id The ID of the state
     *
     * @return $this
     */
    public function setStateId(?int $state_id): static
    {
        if (is_null($state_id)) {
            throw new InvalidArgumentException('non-nullable state_id cannot be null');
        }
        $this->container['state_id'] = $state_id;

        return $this;
    }

    /**
     * Gets read_only
     *
     * @return bool|null
     */
    public function getReadOnly(): ?bool
    {
        return $this->container['read_only'];
    }

    /**
     * Sets read_only
     *
     * @param bool|null $read_only Flag that indicates if the data record is read only
     *
     * @return $this
     */
    public function setReadOnly(?bool $read_only): static
    {
        if (is_null($read_only)) {
            throw new InvalidArgumentException('non-nullable read_only cannot be null');
        }
        $this->container['read_only'] = $read_only;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string|null
     */
    public function getCompanyName(): ?string
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string|null $company_name The company name (alias for name1, <i>read only</i>)
     *
     * @return $this
     */
    public function setCompanyName(?string $company_name): static
    {
        if (is_null($company_name)) {
            throw new InvalidArgumentException('non-nullable company_name cannot be null');
        }
        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName(): ?string
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name The first name (alias for name2, <i>read only</i>)
     *
     * @return $this
     */
    public function setFirstName(?string $first_name): static
    {
        if (is_null($first_name)) {
            throw new InvalidArgumentException('non-nullable first_name cannot be null');
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName(): ?string
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name The last name (alias for name3, <i>read only</i>)
     *
     * @return $this
     */
    public function setLastName(?string $last_name): static
    {
        if (is_null($last_name)) {
            throw new InvalidArgumentException('non-nullable last_name cannot be null');
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets care_of
     *
     * @return string|null
     */
    public function getCareOf(): ?string
    {
        return $this->container['care_of'];
    }

    /**
     * Sets care_of
     *
     * @param string|null $care_of The c/o (alias for name4, <i>read only</i>)
     *
     * @return $this
     */
    public function setCareOf(?string $care_of): static
    {
        if (is_null($care_of)) {
            throw new InvalidArgumentException('non-nullable care_of cannot be null');
        }
        $this->container['care_of'] = $care_of;

        return $this;
    }

    /**
     * Gets street
     *
     * @return string|null
     */
    public function getStreet(): ?string
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param string|null $street The street (alias for address1, <i>read only</i>)
     *
     * @return $this
     */
    public function setStreet(?string $street): static
    {
        if (is_null($street)) {
            throw new InvalidArgumentException('non-nullable street cannot be null');
        }
        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets house_number
     *
     * @return string|null
     */
    public function getHouseNumber(): ?string
    {
        return $this->container['house_number'];
    }

    /**
     * Sets house_number
     *
     * @param string|null $house_number The house number (alias for address2, <i>read only</i>)
     *
     * @return $this
     */
    public function setHouseNumber(?string $house_number): static
    {
        if (is_null($house_number)) {
            throw new InvalidArgumentException('non-nullable house_number cannot be null');
        }
        $this->container['house_number'] = $house_number;

        return $this;
    }

    /**
     * Gets additional
     *
     * @return string|null
     */
    public function getAdditional(): ?string
    {
        return $this->container['additional'];
    }

    /**
     * Sets additional
     *
     * @param string|null $additional The additional address information (alias for address3, <i>read only</i>)
     *
     * @return $this
     */
    public function setAdditional(?string $additional): static
    {
        if (is_null($additional)) {
            throw new InvalidArgumentException('non-nullable additional cannot be null');
        }
        $this->container['additional'] = $additional;

        return $this;
    }

    /**
     * Gets checked_at
     *
     * @return string|null
     */
    public function getCheckedAt(): ?string
    {
        return $this->container['checked_at'];
    }

    /**
     * Sets checked_at
     *
     * @param string|null $checked_at The time the address was checked as unix timestamp
     *
     * @return $this
     */
    public function setCheckedAt(?string $checked_at): static
    {
        if (is_null($checked_at)) {
            throw new InvalidArgumentException('non-nullable checked_at cannot be null');
        }
        $this->container['checked_at'] = $checked_at;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt(): ?string
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at The time the address was created as unix timestamp
     *
     * @return $this
     */
    public function setCreatedAt(?string $created_at): static
    {
        if (is_null($created_at)) {
            throw new InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt(): ?string
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at The time the address was last updated as unix timestamp
     *
     * @return $this
     */
    public function setUpdatedAt(?string $updated_at): static
    {
        if (is_null($updated_at)) {
            throw new InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets tax_id_number
     *
     * @return string|null
     */
    public function getTaxIdNumber(): ?string
    {
        return $this->container['tax_id_number'];
    }

    /**
     * Sets tax_id_number
     *
     * @param string|null $tax_id_number The taxIdNumber option (alias for option with typeId 1, <i>read only</i>)
     *
     * @return $this
     */
    public function setTaxIdNumber(?string $tax_id_number): static
    {
        if (is_null($tax_id_number)) {
            throw new InvalidArgumentException('non-nullable tax_id_number cannot be null');
        }
        $this->container['tax_id_number'] = $tax_id_number;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId(): ?string
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id The externalId option (alias for option with typeId 2, <i>read only</i>)
     *
     * @return $this
     */
    public function setExternalId(?string $external_id): static
    {
        if (is_null($external_id)) {
            throw new InvalidArgumentException('non-nullable external_id cannot be null');
        }
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets entry_certificate
     *
     * @return bool|null
     */
    public function getEntryCertificate(): ?bool
    {
        return $this->container['entry_certificate'];
    }

    /**
     * Sets entry_certificate
     *
     * @param bool|null $entry_certificate The entryCertificate option (alias for option with typeId 3, <i>read only</i>)
     *
     * @return $this
     */
    public function setEntryCertificate(?bool $entry_certificate): static
    {
        if (is_null($entry_certificate)) {
            throw new InvalidArgumentException('non-nullable entry_certificate cannot be null');
        }
        $this->container['entry_certificate'] = $entry_certificate;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone(): ?string
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone The phone option (alias for option with typeId 4, <i>read only</i>)
     *
     * @return $this
     */
    public function setPhone(?string $phone): static
    {
        if (is_null($phone)) {
            throw new InvalidArgumentException('non-nullable phone cannot be null');
        }
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail(): ?string
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email The email option (alias for option with typeId 5, <i>read only</i>)
     *
     * @return $this
     */
    public function setEmail(?string $email): static
    {
        if (is_null($email)) {
            throw new InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets postident
     *
     * @return string|null
     */
    public function getPostident(): ?string
    {
        return $this->container['postident'];
    }

    /**
     * Sets postident
     *
     * @param string|null $postident The PostIdent option (alias for option with typeId 6, <i>read only</i>)
     *
     * @return $this
     */
    public function setPostident(?string $postident): static
    {
        if (is_null($postident)) {
            throw new InvalidArgumentException('non-nullable postident cannot be null');
        }
        $this->container['postident'] = $postident;

        return $this;
    }

    /**
     * Gets personal_number
     *
     * @return string|null
     */
    public function getPersonalNumber(): ?string
    {
        return $this->container['personal_number'];
    }

    /**
     * Sets personal_number
     *
     * @param string|null $personal_number The personal number option (alias for option with typeId 7, <i>read only</i>)
     *
     * @return $this
     */
    public function setPersonalNumber(?string $personal_number): static
    {
        if (is_null($personal_number)) {
            throw new InvalidArgumentException('non-nullable personal_number cannot be null');
        }
        $this->container['personal_number'] = $personal_number;

        return $this;
    }

    /**
     * Gets fsk
     *
     * @return string|null
     */
    public function getFsk(): ?string
    {
        return $this->container['fsk'];
    }

    /**
     * Sets fsk
     *
     * @param string|null $fsk The age rating option (alias for option with typeId 8, <i>read only</i>)
     *
     * @return $this
     */
    public function setFsk(?string $fsk): static
    {
        if (is_null($fsk)) {
            throw new InvalidArgumentException('non-nullable fsk cannot be null');
        }
        $this->container['fsk'] = $fsk;

        return $this;
    }

    /**
     * Gets birthday
     *
     * @return string|null
     */
    public function getBirthday(): ?string
    {
        return $this->container['birthday'];
    }

    /**
     * Sets birthday
     *
     * @param string|null $birthday The birthday option (alias for option with typeId 9, <i>read only</i>)
     *
     * @return $this
     */
    public function setBirthday(?string $birthday): static
    {
        if (is_null($birthday)) {
            throw new InvalidArgumentException('non-nullable birthday cannot be null');
        }
        $this->container['birthday'] = $birthday;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle(): ?string
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title The title option (alias for option with typeId 11, <i>read only</i>)
     *
     * @return $this
     */
    public function setTitle(?string $title): static
    {
        if (is_null($title)) {
            throw new InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets session_id
     *
     * @return string|null
     */
    public function getSessionId(): ?string
    {
        return $this->container['session_id'];
    }

    /**
     * Sets session_id
     *
     * @param string|null $session_id The fronetnd session ID that was used when the address was created (alias for option with typeId 10, <i>read only</i>)
     *
     * @return $this
     */
    public function setSessionId(?string $session_id): static
    {
        if (is_null($session_id)) {
            throw new InvalidArgumentException('non-nullable session_id cannot be null');
        }
        $this->container['session_id'] = $session_id;

        return $this;
    }

    /**
     * Gets contact_person
     *
     * @return string|null
     */
    public function getContactPerson(): ?string
    {
        return $this->container['contact_person'];
    }

    /**
     * Sets contact_person
     *
     * @param string|null $contact_person The contact person option (alias for option with typeId 12, <i>read only</i>)
     *
     * @return $this
     */
    public function setContactPerson(?string $contact_person): static
    {
        if (is_null($contact_person)) {
            throw new InvalidArgumentException('non-nullable contact_person cannot be null');
        }
        $this->container['contact_person'] = $contact_person;

        return $this;
    }

    /**
     * Gets packstation_no
     *
     * @return string|null
     */
    public function getPackstationNo(): ?string
    {
        return $this->container['packstation_no'];
    }

    /**
     * Sets packstation_no
     *
     * @param string|null $packstation_no The packstation number (alias for houseNumber and address2, <i>read only</i>)
     *
     * @return $this
     */
    public function setPackstationNo(?string $packstation_no): static
    {
        if (is_null($packstation_no)) {
            throw new InvalidArgumentException('non-nullable packstation_no cannot be null');
        }
        $this->container['packstation_no'] = $packstation_no;

        return $this;
    }

    /**
     * Gets is_packstation
     *
     * @return bool|null
     */
    public function getIsPackstation(): ?bool
    {
        return $this->container['is_packstation'];
    }

    /**
     * Sets is_packstation
     *
     * @param bool|null $is_packstation Flag that indicates if the address is a packstation
     *
     * @return $this
     */
    public function setIsPackstation(?bool $is_packstation): static
    {
        if (is_null($is_packstation)) {
            throw new InvalidArgumentException('non-nullable is_packstation cannot be null');
        }
        $this->container['is_packstation'] = $is_packstation;

        return $this;
    }

    /**
     * Gets is_postfiliale
     *
     * @return bool|null
     */
    public function getIsPostfiliale(): ?bool
    {
        return $this->container['is_postfiliale'];
    }

    /**
     * Sets is_postfiliale
     *
     * @param bool|null $is_postfiliale Flag that indicates if the address is a postfiliale (post office)
     *
     * @return $this
     */
    public function setIsPostfiliale(?bool $is_postfiliale): static
    {
        if (is_null($is_postfiliale)) {
            throw new InvalidArgumentException('non-nullable is_postfiliale cannot be null');
        }
        $this->container['is_postfiliale'] = $is_postfiliale;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


