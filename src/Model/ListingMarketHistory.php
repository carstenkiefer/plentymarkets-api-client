<?php
/**
 * ListingMarketHistory
 *
 * PHP version 8.1
 *
 * @package  ck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ck\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use ck\ObjectSerializer;

/**
 * ListingMarketHistory Class Doc Comment
 *
 * @package  ck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ListingMarketHistory implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ListingMarketHistory';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'int',
        'listing_market_id' => 'int',
        'referrer_id' => 'int',
        'external_id' => 'string',
        'status_id' => 'int',
        'quantity' => 'int',
        'quantity_sold' => 'int',
        'quantity_sold_delta' => 'int',
        'quantity_remain' => 'int',
        'price' => 'float',
        'currency' => 'string',
        'sku' => 'string',
        'created_at' => 'string',
        'updated_at' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => null,
        'listing_market_id' => null,
        'referrer_id' => null,
        'external_id' => null,
        'status_id' => null,
        'quantity' => null,
        'quantity_sold' => null,
        'quantity_sold_delta' => null,
        'quantity_remain' => null,
        'price' => null,
        'currency' => null,
        'sku' => null,
        'created_at' => null,
        'updated_at' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
		'listing_market_id' => false,
		'referrer_id' => false,
		'external_id' => false,
		'status_id' => false,
		'quantity' => false,
		'quantity_sold' => false,
		'quantity_sold_delta' => false,
		'quantity_remain' => false,
		'price' => false,
		'currency' => false,
		'sku' => false,
		'created_at' => false,
		'updated_at' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'listing_market_id' => 'listingMarketId',
        'referrer_id' => 'referrerId',
        'external_id' => 'externalId',
        'status_id' => 'statusId',
        'quantity' => 'quantity',
        'quantity_sold' => 'quantitySold',
        'quantity_sold_delta' => 'quantitySoldDelta',
        'quantity_remain' => 'quantityRemain',
        'price' => 'price',
        'currency' => 'currency',
        'sku' => 'sku',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'listing_market_id' => 'setListingMarketId',
        'referrer_id' => 'setReferrerId',
        'external_id' => 'setExternalId',
        'status_id' => 'setStatusId',
        'quantity' => 'setQuantity',
        'quantity_sold' => 'setQuantitySold',
        'quantity_sold_delta' => 'setQuantitySoldDelta',
        'quantity_remain' => 'setQuantityRemain',
        'price' => 'setPrice',
        'currency' => 'setCurrency',
        'sku' => 'setSku',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'listing_market_id' => 'getListingMarketId',
        'referrer_id' => 'getReferrerId',
        'external_id' => 'getExternalId',
        'status_id' => 'getStatusId',
        'quantity' => 'getQuantity',
        'quantity_sold' => 'getQuantitySold',
        'quantity_sold_delta' => 'getQuantitySoldDelta',
        'quantity_remain' => 'getQuantityRemain',
        'price' => 'getPrice',
        'currency' => 'getCurrency',
        'sku' => 'getSku',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('listing_market_id', $data ?? [], null);
        $this->setIfExists('referrer_id', $data ?? [], null);
        $this->setIfExists('external_id', $data ?? [], null);
        $this->setIfExists('status_id', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('quantity_sold', $data ?? [], null);
        $this->setIfExists('quantity_sold_delta', $data ?? [], null);
        $this->setIfExists('quantity_remain', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('sku', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The listing market history ID.
     *
     * @return $this
     */
    public function setId(?int $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets listing_market_id
     *
     * @return int|null
     */
    public function getListingMarketId(): ?int
    {
        return $this->container['listing_market_id'];
    }

    /**
     * Sets listing_market_id
     *
     * @param int|null $listing_market_id The listing market ID of the current listing market history.
     *
     * @return $this
     */
    public function setListingMarketId(?int $listing_market_id): static
    {
        if (is_null($listing_market_id)) {
            throw new InvalidArgumentException('non-nullable listing_market_id cannot be null');
        }
        $this->container['listing_market_id'] = $listing_market_id;

        return $this;
    }

    /**
     * Gets referrer_id
     *
     * @return int|null
     */
    public function getReferrerId(): ?int
    {
        return $this->container['referrer_id'];
    }

    /**
     * Sets referrer_id
     *
     * @param int|null $referrer_id The referrer ID.
     *
     * @return $this
     */
    public function setReferrerId(?int $referrer_id): static
    {
        if (is_null($referrer_id)) {
            throw new InvalidArgumentException('non-nullable referrer_id cannot be null');
        }
        $this->container['referrer_id'] = $referrer_id;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId(): ?string
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id The external ID of the listing market history.
     *
     * @return $this
     */
    public function setExternalId(?string $external_id): static
    {
        if (is_null($external_id)) {
            throw new InvalidArgumentException('non-nullable external_id cannot be null');
        }
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets status_id
     *
     * @return int|null
     */
    public function getStatusId(): ?int
    {
        return $this->container['status_id'];
    }

    /**
     * Sets status_id
     *
     * @param int|null $status_id The status ID of the current listing market history. The following properties are available: <ul> <li>1 = Active</li> <li>2 = Ended</li> <li>3 = Relisted</li> <li>4 = Hidden</li> </ul>
     *
     * @return $this
     */
    public function setStatusId(?int $status_id): static
    {
        if (is_null($status_id)) {
            throw new InvalidArgumentException('non-nullable status_id cannot be null');
        }
        $this->container['status_id'] = $status_id;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int|null
     */
    public function getQuantity(): ?int
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int|null $quantity The quantity available for sale on the marketplace.
     *
     * @return $this
     */
    public function setQuantity(?int $quantity): static
    {
        if (is_null($quantity)) {
            throw new InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets quantity_sold
     *
     * @return int|null
     */
    public function getQuantitySold(): ?int
    {
        return $this->container['quantity_sold'];
    }

    /**
     * Sets quantity_sold
     *
     * @param int|null $quantity_sold The quantity sold currently on the marketplace.
     *
     * @return $this
     */
    public function setQuantitySold(?int $quantity_sold): static
    {
        if (is_null($quantity_sold)) {
            throw new InvalidArgumentException('non-nullable quantity_sold cannot be null');
        }
        $this->container['quantity_sold'] = $quantity_sold;

        return $this;
    }

    /**
     * Gets quantity_sold_delta
     *
     * @return int|null
     */
    public function getQuantitySoldDelta(): ?int
    {
        return $this->container['quantity_sold_delta'];
    }

    /**
     * Sets quantity_sold_delta
     *
     * @param int|null $quantity_sold_delta The difference between the sold quantity and orders imported for this listing market history.
     *
     * @return $this
     */
    public function setQuantitySoldDelta(?int $quantity_sold_delta): static
    {
        if (is_null($quantity_sold_delta)) {
            throw new InvalidArgumentException('non-nullable quantity_sold_delta cannot be null');
        }
        $this->container['quantity_sold_delta'] = $quantity_sold_delta;

        return $this;
    }

    /**
     * Gets quantity_remain
     *
     * @return int|null
     */
    public function getQuantityRemain(): ?int
    {
        return $this->container['quantity_remain'];
    }

    /**
     * Sets quantity_remain
     *
     * @param int|null $quantity_remain The quantity remaining on the marketplace.
     *
     * @return $this
     */
    public function setQuantityRemain(?int $quantity_remain): static
    {
        if (is_null($quantity_remain)) {
            throw new InvalidArgumentException('non-nullable quantity_remain cannot be null');
        }
        $this->container['quantity_remain'] = $quantity_remain;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float|null
     */
    public function getPrice(): ?float
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float|null $price The price offered for this listing market. @see ListingMarketHistoryVariation if the listing market history contains variations.
     *
     * @return $this
     */
    public function setPrice(?float $price): static
    {
        if (is_null($price)) {
            throw new InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency(): ?string
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency The currency for the price of this listing market.
     *
     * @return $this
     */
    public function setCurrency(?string $currency): static
    {
        if (is_null($currency)) {
            throw new InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string|null
     */
    public function getSku(): ?string
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string|null $sku The stock keeping unit of this listing market history.
     *
     * @return $this
     */
    public function setSku(?string $sku): static
    {
        if (is_null($sku)) {
            throw new InvalidArgumentException('non-nullable sku cannot be null');
        }
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt(): ?string
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at The date that the entry was created.
     *
     * @return $this
     */
    public function setCreatedAt(?string $created_at): static
    {
        if (is_null($created_at)) {
            throw new InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt(): ?string
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at The date that the entry was updated last.
     *
     * @return $this
     */
    public function setUpdatedAt(?string $updated_at): static
    {
        if (is_null($updated_at)) {
            throw new InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


