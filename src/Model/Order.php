<?php
/**
 * Order
 *
 * PHP version 8.1
 *
 * @package  ck/plenty-client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ck/plenty-client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use ck/plenty-client\ObjectSerializer;

/**
 * Order Class Doc Comment
 *
 * @package  ck/plenty-client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class Order implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Order';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'int',
        'type_id' => 'int',
        'status_id' => 'float',
        'status_name' => 'string',
        'owner_id' => 'int',
        'referrer_id' => 'float',
        'created_at' => 'string',
        'updated_at' => 'string',
        'plenty_id' => 'int',
        'location_id' => 'int',
        'round_totals_only' => 'bool',
        'number_of_decimals' => 'int',
        'lock_status' => 'string',
        'has_tax_relevant_documents' => 'bool',
        'has_delivery_orders' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => null,
        'type_id' => null,
        'status_id' => null,
        'status_name' => null,
        'owner_id' => null,
        'referrer_id' => null,
        'created_at' => null,
        'updated_at' => null,
        'plenty_id' => null,
        'location_id' => null,
        'round_totals_only' => null,
        'number_of_decimals' => null,
        'lock_status' => null,
        'has_tax_relevant_documents' => null,
        'has_delivery_orders' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
		'type_id' => false,
		'status_id' => false,
		'status_name' => false,
		'owner_id' => false,
		'referrer_id' => false,
		'created_at' => false,
		'updated_at' => false,
		'plenty_id' => false,
		'location_id' => false,
		'round_totals_only' => false,
		'number_of_decimals' => false,
		'lock_status' => false,
		'has_tax_relevant_documents' => false,
		'has_delivery_orders' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'type_id' => 'typeId',
        'status_id' => 'statusId',
        'status_name' => 'statusName',
        'owner_id' => 'ownerId',
        'referrer_id' => 'referrerId',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt',
        'plenty_id' => 'plentyId',
        'location_id' => 'locationId',
        'round_totals_only' => 'roundTotalsOnly',
        'number_of_decimals' => 'numberOfDecimals',
        'lock_status' => 'lockStatus',
        'has_tax_relevant_documents' => 'hasTaxRelevantDocuments',
        'has_delivery_orders' => 'hasDeliveryOrders'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'type_id' => 'setTypeId',
        'status_id' => 'setStatusId',
        'status_name' => 'setStatusName',
        'owner_id' => 'setOwnerId',
        'referrer_id' => 'setReferrerId',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'plenty_id' => 'setPlentyId',
        'location_id' => 'setLocationId',
        'round_totals_only' => 'setRoundTotalsOnly',
        'number_of_decimals' => 'setNumberOfDecimals',
        'lock_status' => 'setLockStatus',
        'has_tax_relevant_documents' => 'setHasTaxRelevantDocuments',
        'has_delivery_orders' => 'setHasDeliveryOrders'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'type_id' => 'getTypeId',
        'status_id' => 'getStatusId',
        'status_name' => 'getStatusName',
        'owner_id' => 'getOwnerId',
        'referrer_id' => 'getReferrerId',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'plenty_id' => 'getPlentyId',
        'location_id' => 'getLocationId',
        'round_totals_only' => 'getRoundTotalsOnly',
        'number_of_decimals' => 'getNumberOfDecimals',
        'lock_status' => 'getLockStatus',
        'has_tax_relevant_documents' => 'getHasTaxRelevantDocuments',
        'has_delivery_orders' => 'getHasDeliveryOrders'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('type_id', $data ?? [], null);
        $this->setIfExists('status_id', $data ?? [], null);
        $this->setIfExists('status_name', $data ?? [], null);
        $this->setIfExists('owner_id', $data ?? [], null);
        $this->setIfExists('referrer_id', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('plenty_id', $data ?? [], null);
        $this->setIfExists('location_id', $data ?? [], null);
        $this->setIfExists('round_totals_only', $data ?? [], null);
        $this->setIfExists('number_of_decimals', $data ?? [], null);
        $this->setIfExists('lock_status', $data ?? [], null);
        $this->setIfExists('has_tax_relevant_documents', $data ?? [], null);
        $this->setIfExists('has_delivery_orders', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The ID of the order
     *
     * @return $this
     */
    public function setId(?int $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type_id
     *
     * @return int|null
     */
    public function getTypeId(): ?int
    {
        return $this->container['type_id'];
    }

    /**
     * Sets type_id
     *
     * @param int|null $type_id The ID of the order type                                                               It is possible to define individual order types. However,                                                               the following types are available by default: <ul>     <li>1 = Sales order</li>     <li>2 = Delivery</li>     <li>3 = Returns</li>     <li>4 = Credit note</li>     <li>5 = Warranty</li>     <li>6 = Repair</li>     <li>7 = Offer</li>     <li>8 = Advance order</li>     <li>9 = Multi-order</li>     <li>10 = Multi credit note</li>     <li>11 = Multi delivery</li>     <li>12 = Reorder</li>     <li>13 = Partial delivery</li>     <li>14 = Subscription</li>     <li>15 = Redistribution</li> </ul>
     *
     * @return $this
     */
    public function setTypeId(?int $type_id): static
    {
        if (is_null($type_id)) {
            throw new InvalidArgumentException('non-nullable type_id cannot be null');
        }
        $this->container['type_id'] = $type_id;

        return $this;
    }

    /**
     * Gets status_id
     *
     * @return float|null
     */
    public function getStatusId(): ?float
    {
        return $this->container['status_id'];
    }

    /**
     * Sets status_id
     *
     * @param float|null $status_id The ID of the order status
     *
     * @return $this
     */
    public function setStatusId(?float $status_id): static
    {
        if (is_null($status_id)) {
            throw new InvalidArgumentException('non-nullable status_id cannot be null');
        }
        $this->container['status_id'] = $status_id;

        return $this;
    }

    /**
     * Gets status_name
     *
     * @return string|null
     */
    public function getStatusName(): ?string
    {
        return $this->container['status_name'];
    }

    /**
     * Sets status_name
     *
     * @param string|null $status_name The name for the status ID (read only)
     *
     * @return $this
     */
    public function setStatusName(?string $status_name): static
    {
        if (is_null($status_name)) {
            throw new InvalidArgumentException('non-nullable status_name cannot be null');
        }
        $this->container['status_name'] = $status_name;

        return $this;
    }

    /**
     * Gets owner_id
     *
     * @return int|null
     */
    public function getOwnerId(): ?int
    {
        return $this->container['owner_id'];
    }

    /**
     * Sets owner_id
     *
     * @param int|null $owner_id The user ID of the order's owner
     *
     * @return $this
     */
    public function setOwnerId(?int $owner_id): static
    {
        if (is_null($owner_id)) {
            throw new InvalidArgumentException('non-nullable owner_id cannot be null');
        }
        $this->container['owner_id'] = $owner_id;

        return $this;
    }

    /**
     * Gets referrer_id
     *
     * @return float|null
     */
    public function getReferrerId(): ?float
    {
        return $this->container['referrer_id'];
    }

    /**
     * Sets referrer_id
     *
     * @param float|null $referrer_id The referrer ID of the order
     *
     * @return $this
     */
    public function setReferrerId(?float $referrer_id): static
    {
        if (is_null($referrer_id)) {
            throw new InvalidArgumentException('non-nullable referrer_id cannot be null');
        }
        $this->container['referrer_id'] = $referrer_id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt(): ?string
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at The date that the order was created
     *
     * @return $this
     */
    public function setCreatedAt(?string $created_at): static
    {
        if (is_null($created_at)) {
            throw new InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt(): ?string
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at The date that the order was updated last
     *
     * @return $this
     */
    public function setUpdatedAt(?string $updated_at): static
    {
        if (is_null($updated_at)) {
            throw new InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets plenty_id
     *
     * @return int|null
     */
    public function getPlentyId(): ?int
    {
        return $this->container['plenty_id'];
    }

    /**
     * Sets plenty_id
     *
     * @param int|null $plenty_id The plenty ID of the client that the order belongs to
     *
     * @return $this
     */
    public function setPlentyId(?int $plenty_id): static
    {
        if (is_null($plenty_id)) {
            throw new InvalidArgumentException('non-nullable plenty_id cannot be null');
        }
        $this->container['plenty_id'] = $plenty_id;

        return $this;
    }

    /**
     * Gets location_id
     *
     * @return int|null
     */
    public function getLocationId(): ?int
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     *
     * @param int|null $location_id The ID of the location that the order belongs to
     *
     * @return $this
     */
    public function setLocationId(?int $location_id): static
    {
        if (is_null($location_id)) {
            throw new InvalidArgumentException('non-nullable location_id cannot be null');
        }
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets round_totals_only
     *
     * @return bool|null
     */
    public function getRoundTotalsOnly(): ?bool
    {
        return $this->container['round_totals_only'];
    }

    /**
     * Sets round_totals_only
     *
     * @param bool|null $round_totals_only True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *
     * @return $this
     */
    public function setRoundTotalsOnly(?bool $round_totals_only): static
    {
        if (is_null($round_totals_only)) {
            throw new InvalidArgumentException('non-nullable round_totals_only cannot be null');
        }
        $this->container['round_totals_only'] = $round_totals_only;

        return $this;
    }

    /**
     * Gets number_of_decimals
     *
     * @return int|null
     */
    public function getNumberOfDecimals(): ?int
    {
        return $this->container['number_of_decimals'];
    }

    /**
     * Sets number_of_decimals
     *
     * @param int|null $number_of_decimals The number of decimals this order was rounded with. (read-only)
     *
     * @return $this
     */
    public function setNumberOfDecimals(?int $number_of_decimals): static
    {
        if (is_null($number_of_decimals)) {
            throw new InvalidArgumentException('non-nullable number_of_decimals cannot be null');
        }
        $this->container['number_of_decimals'] = $number_of_decimals;

        return $this;
    }

    /**
     * Gets lock_status
     *
     * @return string|null
     */
    public function getLockStatus(): ?string
    {
        return $this->container['lock_status'];
    }

    /**
     * Sets lock_status
     *
     * @param string|null $lock_status The lock status of the order. The following statuses are available: <ul>  <li>unlocked</li>  <li>permanentlyLocked</li>  <li>reversibleLocked</li> </ul>
     *
     * @return $this
     */
    public function setLockStatus(?string $lock_status): static
    {
        if (is_null($lock_status)) {
            throw new InvalidArgumentException('non-nullable lock_status cannot be null');
        }
        $this->container['lock_status'] = $lock_status;

        return $this;
    }

    /**
     * Gets has_tax_relevant_documents
     *
     * @return bool|null
     */
    public function getHasTaxRelevantDocuments(): ?bool
    {
        return $this->container['has_tax_relevant_documents'];
    }

    /**
     * Sets has_tax_relevant_documents
     *
     * @param bool|null $has_tax_relevant_documents 
     *
     * @return $this
     */
    public function setHasTaxRelevantDocuments(?bool $has_tax_relevant_documents): static
    {
        if (is_null($has_tax_relevant_documents)) {
            throw new InvalidArgumentException('non-nullable has_tax_relevant_documents cannot be null');
        }
        $this->container['has_tax_relevant_documents'] = $has_tax_relevant_documents;

        return $this;
    }

    /**
     * Gets has_delivery_orders
     *
     * @return bool|null
     */
    public function getHasDeliveryOrders(): ?bool
    {
        return $this->container['has_delivery_orders'];
    }

    /**
     * Sets has_delivery_orders
     *
     * @param bool|null $has_delivery_orders Has the order delivery orders?
     *
     * @return $this
     */
    public function setHasDeliveryOrders(?bool $has_delivery_orders): static
    {
        if (is_null($has_delivery_orders)) {
            throw new InvalidArgumentException('non-nullable has_delivery_orders cannot be null');
        }
        $this->container['has_delivery_orders'] = $has_delivery_orders;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


