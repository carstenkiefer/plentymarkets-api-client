<?php
/**
 * RestMessagesPostRequest
 *
 * PHP version 8.1
 *
 * @package  ck/plenty-client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ck/plenty-client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use ck/plenty-client\ObjectSerializer;

/**
 * RestMessagesPostRequest Class Doc Comment
 *
 * @package  ck/plenty-client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class RestMessagesPostRequest implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = '_rest_messages_post_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'message' => 'string',
        'whispered' => 'bool',
        'to' => '\ck/plenty-client\Model\MessageTo[]',
        'linked_to' => '\ck/plenty-client\Model\MessageLinkedTo[]',
        'meta_data' => '\ck/plenty-client\Model\MessageMetaData[]',
        'from' => '\ck/plenty-client\Model\MessageFrom[]',
        'tags' => 'object[]',
        'referrer' => '\ck/plenty-client\Model\MessageReferrer[]',
        'attachments' => '\ck/plenty-client\Model\Attachment[]',
        'name' => 'string',
        'size' => 'int',
        'content_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'message' => null,
        'whispered' => null,
        'to' => null,
        'linked_to' => null,
        'meta_data' => null,
        'from' => null,
        'tags' => null,
        'referrer' => null,
        'attachments' => null,
        'name' => null,
        'size' => null,
        'content_type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'message' => false,
		'whispered' => false,
		'to' => false,
		'linked_to' => false,
		'meta_data' => false,
		'from' => false,
		'tags' => false,
		'referrer' => false,
		'attachments' => false,
		'name' => false,
		'size' => false,
		'content_type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'message' => 'message',
        'whispered' => 'whispered',
        'to' => 'to',
        'linked_to' => 'linkedTo',
        'meta_data' => 'metaData',
        'from' => 'from',
        'tags' => 'tags',
        'referrer' => 'referrer',
        'attachments' => 'attachments',
        'name' => 'name',
        'size' => 'size',
        'content_type' => 'contentType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'message' => 'setMessage',
        'whispered' => 'setWhispered',
        'to' => 'setTo',
        'linked_to' => 'setLinkedTo',
        'meta_data' => 'setMetaData',
        'from' => 'setFrom',
        'tags' => 'setTags',
        'referrer' => 'setReferrer',
        'attachments' => 'setAttachments',
        'name' => 'setName',
        'size' => 'setSize',
        'content_type' => 'setContentType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'message' => 'getMessage',
        'whispered' => 'getWhispered',
        'to' => 'getTo',
        'linked_to' => 'getLinkedTo',
        'meta_data' => 'getMetaData',
        'from' => 'getFrom',
        'tags' => 'getTags',
        'referrer' => 'getReferrer',
        'attachments' => 'getAttachments',
        'name' => 'getName',
        'size' => 'getSize',
        'content_type' => 'getContentType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('message', $data ?? [], null);
        $this->setIfExists('whispered', $data ?? [], null);
        $this->setIfExists('to', $data ?? [], null);
        $this->setIfExists('linked_to', $data ?? [], null);
        $this->setIfExists('meta_data', $data ?? [], null);
        $this->setIfExists('from', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('referrer', $data ?? [], null);
        $this->setIfExists('attachments', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('size', $data ?? [], null);
        $this->setIfExists('content_type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['message'] === null) {
            $invalidProperties[] = "'message' can't be null";
        }
        if ($this->container['to'] === null) {
            $invalidProperties[] = "'to' can't be null";
        }
        if ($this->container['from'] === null) {
            $invalidProperties[] = "'from' can't be null";
        }
        if ($this->container['referrer'] === null) {
            $invalidProperties[] = "'referrer' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['size'] === null) {
            $invalidProperties[] = "'size' can't be null";
        }
        if ($this->container['content_type'] === null) {
            $invalidProperties[] = "'content_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage(): string
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message The content of the message
     *
     * @return $this
     */
    public function setMessage(string $message): static
    {
        if (is_null($message)) {
            throw new InvalidArgumentException('non-nullable message cannot be null');
        }
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets whispered
     *
     * @return bool|null
     */
    public function getWhispered(): ?bool
    {
        return $this->container['whispered'];
    }

    /**
     * Sets whispered
     *
     * @param bool|null $whispered Whether the message is whispered (not visible for the contact/order linked to the message) or not optional
     *
     * @return $this
     */
    public function setWhispered(?bool $whispered): static
    {
        if (is_null($whispered)) {
            throw new InvalidArgumentException('non-nullable whispered cannot be null');
        }
        $this->container['whispered'] = $whispered;

        return $this;
    }

    /**
     * Gets to
     *
     * @return \ck/plenty-client\Model\MessageTo[]
     */
    public function getTo(): array
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param \ck/plenty-client\Model\MessageTo[] $to to
     *
     * @return $this
     */
    public function setTo(array $to): static
    {
        if (is_null($to)) {
            throw new InvalidArgumentException('non-nullable to cannot be null');
        }
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets linked_to
     *
     * @return \ck/plenty-client\Model\MessageLinkedTo[]|null
     */
    public function getLinkedTo(): ?array
    {
        return $this->container['linked_to'];
    }

    /**
     * Sets linked_to
     *
     * @param \ck/plenty-client\Model\MessageLinkedTo[]|null $linked_to linked_to
     *
     * @return $this
     */
    public function setLinkedTo(?array $linked_to): static
    {
        if (is_null($linked_to)) {
            throw new InvalidArgumentException('non-nullable linked_to cannot be null');
        }
        $this->container['linked_to'] = $linked_to;

        return $this;
    }

    /**
     * Gets meta_data
     *
     * @return \ck/plenty-client\Model\MessageMetaData[]|null
     */
    public function getMetaData(): ?array
    {
        return $this->container['meta_data'];
    }

    /**
     * Sets meta_data
     *
     * @param \ck/plenty-client\Model\MessageMetaData[]|null $meta_data meta_data
     *
     * @return $this
     */
    public function setMetaData(?array $meta_data): static
    {
        if (is_null($meta_data)) {
            throw new InvalidArgumentException('non-nullable meta_data cannot be null');
        }
        $this->container['meta_data'] = $meta_data;

        return $this;
    }

    /**
     * Gets from
     *
     * @return \ck/plenty-client\Model\MessageFrom[]
     */
    public function getFrom(): array
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param \ck/plenty-client\Model\MessageFrom[] $from from
     *
     * @return $this
     */
    public function setFrom(array $from): static
    {
        if (is_null($from)) {
            throw new InvalidArgumentException('non-nullable from cannot be null');
        }
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return object[]|null
     */
    public function getTags(): ?array
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param object[]|null $tags tags
     *
     * @return $this
     */
    public function setTags(?array $tags): static
    {
        if (is_null($tags)) {
            throw new InvalidArgumentException('non-nullable tags cannot be null');
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets referrer
     *
     * @return \ck/plenty-client\Model\MessageReferrer[]
     */
    public function getReferrer(): array
    {
        return $this->container['referrer'];
    }

    /**
     * Sets referrer
     *
     * @param \ck/plenty-client\Model\MessageReferrer[] $referrer referrer
     *
     * @return $this
     */
    public function setReferrer(array $referrer): static
    {
        if (is_null($referrer)) {
            throw new InvalidArgumentException('non-nullable referrer cannot be null');
        }
        $this->container['referrer'] = $referrer;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \ck/plenty-client\Model\Attachment[]|null
     */
    public function getAttachments(): ?array
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param \ck/plenty-client\Model\Attachment[]|null $attachments attachments
     *
     * @return $this
     */
    public function setAttachments(?array $attachments): static
    {
        if (is_null($attachments)) {
            throw new InvalidArgumentException('non-nullable attachments cannot be null');
        }
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName(): string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The file name of the attachment
     *
     * @return $this
     */
    public function setName(string $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int
     */
    public function getSize(): int
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int $size The size of the attachment in bytes
     *
     * @return $this
     */
    public function setSize(int $size): static
    {
        if (is_null($size)) {
            throw new InvalidArgumentException('non-nullable size cannot be null');
        }
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets content_type
     *
     * @return string
     */
    public function getContentType(): string
    {
        return $this->container['content_type'];
    }

    /**
     * Sets content_type
     *
     * @param string $content_type The content type fo the attachment  allowed values are image/png, image/jpeg, image/gif, image/bmp, image/tiff, application/pdf, application/zip, application/json, application/octet-stream, text/plain, text/csv
     *
     * @return $this
     */
    public function setContentType(string $content_type): static
    {
        if (is_null($content_type)) {
            throw new InvalidArgumentException('non-nullable content_type cannot be null');
        }
        $this->container['content_type'] = $content_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


