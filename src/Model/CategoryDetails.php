<?php
/**
 * CategoryDetails
 *
 * PHP version 8.1
 *
 * @package  ck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ck\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use ck\ObjectSerializer;

/**
 * CategoryDetails Class Doc Comment
 *
 * @package  ck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class CategoryDetails implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'CategoryDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'category_id' => 'int',
        'plenty_id' => 'int',
        'lang' => 'string',
        'name' => 'string',
        'description' => 'string',
        'description2' => 'string',
        'short_description' => 'string',
        'meta_keywords' => 'string',
        'meta_description' => 'string',
        'name_url' => 'string',
        'meta_title' => 'string',
        'image' => 'string',
        'image2' => 'string',
        'image_path' => 'string',
        'image2_path' => 'string',
        'preview_url' => 'string',
        'position' => 'int',
        'item_list_view' => 'string',
        'single_item_view' => 'string',
        'page_view' => 'string',
        'fulltext' => 'bool',
        'meta_robots' => 'string',
        'canonical_link' => 'string',
        'updated_at' => 'string',
        'updated_by' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'category_id' => null,
        'plenty_id' => null,
        'lang' => null,
        'name' => null,
        'description' => null,
        'description2' => null,
        'short_description' => null,
        'meta_keywords' => null,
        'meta_description' => null,
        'name_url' => null,
        'meta_title' => null,
        'image' => null,
        'image2' => null,
        'image_path' => null,
        'image2_path' => null,
        'preview_url' => null,
        'position' => null,
        'item_list_view' => null,
        'single_item_view' => null,
        'page_view' => null,
        'fulltext' => null,
        'meta_robots' => null,
        'canonical_link' => null,
        'updated_at' => null,
        'updated_by' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'category_id' => false,
		'plenty_id' => false,
		'lang' => false,
		'name' => false,
		'description' => false,
		'description2' => false,
		'short_description' => false,
		'meta_keywords' => false,
		'meta_description' => false,
		'name_url' => false,
		'meta_title' => false,
		'image' => false,
		'image2' => false,
		'image_path' => false,
		'image2_path' => false,
		'preview_url' => false,
		'position' => false,
		'item_list_view' => false,
		'single_item_view' => false,
		'page_view' => false,
		'fulltext' => false,
		'meta_robots' => false,
		'canonical_link' => false,
		'updated_at' => false,
		'updated_by' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'category_id' => 'categoryId',
        'plenty_id' => 'plentyId',
        'lang' => 'lang',
        'name' => 'name',
        'description' => 'description',
        'description2' => 'description2',
        'short_description' => 'shortDescription',
        'meta_keywords' => 'metaKeywords',
        'meta_description' => 'metaDescription',
        'name_url' => 'nameUrl',
        'meta_title' => 'metaTitle',
        'image' => 'image',
        'image2' => 'image2',
        'image_path' => 'imagePath',
        'image2_path' => 'image2Path',
        'preview_url' => 'previewUrl',
        'position' => 'position',
        'item_list_view' => 'itemListView',
        'single_item_view' => 'singleItemView',
        'page_view' => 'pageView',
        'fulltext' => 'fulltext',
        'meta_robots' => 'metaRobots',
        'canonical_link' => 'canonicalLink',
        'updated_at' => 'updatedAt',
        'updated_by' => 'updatedBy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'category_id' => 'setCategoryId',
        'plenty_id' => 'setPlentyId',
        'lang' => 'setLang',
        'name' => 'setName',
        'description' => 'setDescription',
        'description2' => 'setDescription2',
        'short_description' => 'setShortDescription',
        'meta_keywords' => 'setMetaKeywords',
        'meta_description' => 'setMetaDescription',
        'name_url' => 'setNameUrl',
        'meta_title' => 'setMetaTitle',
        'image' => 'setImage',
        'image2' => 'setImage2',
        'image_path' => 'setImagePath',
        'image2_path' => 'setImage2Path',
        'preview_url' => 'setPreviewUrl',
        'position' => 'setPosition',
        'item_list_view' => 'setItemListView',
        'single_item_view' => 'setSingleItemView',
        'page_view' => 'setPageView',
        'fulltext' => 'setFulltext',
        'meta_robots' => 'setMetaRobots',
        'canonical_link' => 'setCanonicalLink',
        'updated_at' => 'setUpdatedAt',
        'updated_by' => 'setUpdatedBy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'category_id' => 'getCategoryId',
        'plenty_id' => 'getPlentyId',
        'lang' => 'getLang',
        'name' => 'getName',
        'description' => 'getDescription',
        'description2' => 'getDescription2',
        'short_description' => 'getShortDescription',
        'meta_keywords' => 'getMetaKeywords',
        'meta_description' => 'getMetaDescription',
        'name_url' => 'getNameUrl',
        'meta_title' => 'getMetaTitle',
        'image' => 'getImage',
        'image2' => 'getImage2',
        'image_path' => 'getImagePath',
        'image2_path' => 'getImage2Path',
        'preview_url' => 'getPreviewUrl',
        'position' => 'getPosition',
        'item_list_view' => 'getItemListView',
        'single_item_view' => 'getSingleItemView',
        'page_view' => 'getPageView',
        'fulltext' => 'getFulltext',
        'meta_robots' => 'getMetaRobots',
        'canonical_link' => 'getCanonicalLink',
        'updated_at' => 'getUpdatedAt',
        'updated_by' => 'getUpdatedBy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('category_id', $data ?? [], null);
        $this->setIfExists('plenty_id', $data ?? [], null);
        $this->setIfExists('lang', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('description2', $data ?? [], null);
        $this->setIfExists('short_description', $data ?? [], null);
        $this->setIfExists('meta_keywords', $data ?? [], null);
        $this->setIfExists('meta_description', $data ?? [], null);
        $this->setIfExists('name_url', $data ?? [], null);
        $this->setIfExists('meta_title', $data ?? [], null);
        $this->setIfExists('image', $data ?? [], null);
        $this->setIfExists('image2', $data ?? [], null);
        $this->setIfExists('image_path', $data ?? [], null);
        $this->setIfExists('image2_path', $data ?? [], null);
        $this->setIfExists('preview_url', $data ?? [], null);
        $this->setIfExists('position', $data ?? [], null);
        $this->setIfExists('item_list_view', $data ?? [], null);
        $this->setIfExists('single_item_view', $data ?? [], null);
        $this->setIfExists('page_view', $data ?? [], null);
        $this->setIfExists('fulltext', $data ?? [], null);
        $this->setIfExists('meta_robots', $data ?? [], null);
        $this->setIfExists('canonical_link', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('updated_by', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets category_id
     *
     * @return int|null
     */
    public function getCategoryId(): ?int
    {
        return $this->container['category_id'];
    }

    /**
     * Sets category_id
     *
     * @param int|null $category_id The unique ID of the category these category details belong to
     *
     * @return $this
     */
    public function setCategoryId(?int $category_id): static
    {
        if (is_null($category_id)) {
            throw new InvalidArgumentException('non-nullable category_id cannot be null');
        }
        $this->container['category_id'] = $category_id;

        return $this;
    }

    /**
     * Gets plenty_id
     *
     * @return int|null
     */
    public function getPlentyId(): ?int
    {
        return $this->container['plenty_id'];
    }

    /**
     * Sets plenty_id
     *
     * @param int|null $plenty_id The unique plenty ID of the client (store) in which the category is visible. If a subcategory is linked to a client, its parent categories will be linked to this client as well.
     *
     * @return $this
     */
    public function setPlentyId(?int $plenty_id): static
    {
        if (is_null($plenty_id)) {
            throw new InvalidArgumentException('non-nullable plenty_id cannot be null');
        }
        $this->container['plenty_id'] = $plenty_id;

        return $this;
    }

    /**
     * Gets lang
     *
     * @return string|null
     */
    public function getLang(): ?string
    {
        return $this->container['lang'];
    }

    /**
     * Sets lang
     *
     * @param string|null $lang The <a href=\"https://developers.plentymarkets.com/rest-doc/introduction#languages\" target=\"_blank\">language</a> of the category
     *
     * @return $this
     */
    public function setLang(?string $lang): static
    {
        if (is_null($lang)) {
            throw new InvalidArgumentException('non-nullable lang cannot be null');
        }
        $this->container['lang'] = $lang;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of the category. The same category name can be used more than once in different categories or on different category levels. However, category names must be unique within the same category or level.
     *
     * @return $this
     */
    public function setName(?string $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription(): ?string
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The category text. The description is inserted into the online store using template variables.
     *
     * @return $this
     */
    public function setDescription(?string $description): static
    {
        if (is_null($description)) {
            throw new InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets description2
     *
     * @return string|null
     */
    public function getDescription2(): ?string
    {
        return $this->container['description2'];
    }

    /**
     * Sets description2
     *
     * @param string|null $description2 The category text 2. The description 2 is inserted into the online store using template variables.
     *
     * @return $this
     */
    public function setDescription2(?string $description2): static
    {
        if (is_null($description2)) {
            throw new InvalidArgumentException('non-nullable description2 cannot be null');
        }
        $this->container['description2'] = $description2;

        return $this;
    }

    /**
     * Gets short_description
     *
     * @return string|null
     */
    public function getShortDescription(): ?string
    {
        return $this->container['short_description'];
    }

    /**
     * Sets short_description
     *
     * @param string|null $short_description The short description of the category. The short description can be inserted into the store's design using template variables.
     *
     * @return $this
     */
    public function setShortDescription(?string $short_description): static
    {
        if (is_null($short_description)) {
            throw new InvalidArgumentException('non-nullable short_description cannot be null');
        }
        $this->container['short_description'] = $short_description;

        return $this;
    }

    /**
     * Gets meta_keywords
     *
     * @return string|null
     */
    public function getMetaKeywords(): ?string
    {
        return $this->container['meta_keywords'];
    }

    /**
     * Sets meta_keywords
     *
     * @param string|null $meta_keywords HTML meta keywords to tag the category for search engines. More than one keyword can be separated by commas.
     *
     * @return $this
     */
    public function setMetaKeywords(?string $meta_keywords): static
    {
        if (is_null($meta_keywords)) {
            throw new InvalidArgumentException('non-nullable meta_keywords cannot be null');
        }
        $this->container['meta_keywords'] = $meta_keywords;

        return $this;
    }

    /**
     * Gets meta_description
     *
     * @return string|null
     */
    public function getMetaDescription(): ?string
    {
        return $this->container['meta_description'];
    }

    /**
     * Sets meta_description
     *
     * @param string|null $meta_description The meta description of the category. This description is analysed by search engines and displayed in search results. This text should be treated as an advertising text to maximise click-through from search engine result pages. Current recommended limit is 156 characters.
     *
     * @return $this
     */
    public function setMetaDescription(?string $meta_description): static
    {
        if (is_null($meta_description)) {
            throw new InvalidArgumentException('non-nullable meta_description cannot be null');
        }
        $this->container['meta_description'] = $meta_description;

        return $this;
    }

    /**
     * Gets name_url
     *
     * @return string|null
     */
    public function getNameUrl(): ?string
    {
        return $this->container['name_url'];
    }

    /**
     * Sets name_url
     *
     * @param string|null $name_url The category name to be used for the category's URL. The same URL name can be used more than once in different categories or on different category levels. However, URL names must be unique within the same category or level. The URL name should not be changed once the category is indexed by search engines. If no URL name is specified, the name will automatically be used as the URL name when the category is created.<br />Important: Name should contain ASCII code only and no special characters. The following character strings may not be used as prefixes to URL names: a-, b-, c-, f-, fa-, p-, t-. These prefixes will be removed automatically. For instance, a-class will be changed to class automatically. However, the URL name aclass can be used for a category named A-class.
     *
     * @return $this
     */
    public function setNameUrl(?string $name_url): static
    {
        if (is_null($name_url)) {
            throw new InvalidArgumentException('non-nullable name_url cannot be null');
        }
        $this->container['name_url'] = $name_url;

        return $this;
    }

    /**
     * Gets meta_title
     *
     * @return string|null
     */
    public function getMetaTitle(): ?string
    {
        return $this->container['meta_title'];
    }

    /**
     * Sets meta_title
     *
     * @param string|null $meta_title This will be displayed as the title of a tab in the web browser and as a search result in search engines. If this is left blank, the category name will be used as the title. Current recommended limit is 50 characters. Longer titles will be cut off.
     *
     * @return $this
     */
    public function setMetaTitle(?string $meta_title): static
    {
        if (is_null($meta_title)) {
            throw new InvalidArgumentException('non-nullable meta_title cannot be null');
        }
        $this->container['meta_title'] = $meta_title;

        return $this;
    }

    /**
     * Gets image
     *
     * @return string|null
     */
    public function getImage(): ?string
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param string|null $image The ID to the image1 of the category.
     *
     * @return $this
     */
    public function setImage(?string $image): static
    {
        if (is_null($image)) {
            throw new InvalidArgumentException('non-nullable image cannot be null');
        }
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets image2
     *
     * @return string|null
     */
    public function getImage2(): ?string
    {
        return $this->container['image2'];
    }

    /**
     * Sets image2
     *
     * @param string|null $image2 The ID to the image2 of the category.
     *
     * @return $this
     */
    public function setImage2(?string $image2): static
    {
        if (is_null($image2)) {
            throw new InvalidArgumentException('non-nullable image2 cannot be null');
        }
        $this->container['image2'] = $image2;

        return $this;
    }

    /**
     * Gets image_path
     *
     * @return string|null
     */
    public function getImagePath(): ?string
    {
        return $this->container['image_path'];
    }

    /**
     * Sets image_path
     *
     * @param string|null $image_path The path to the image1 of the category.
     *
     * @return $this
     */
    public function setImagePath(?string $image_path): static
    {
        if (is_null($image_path)) {
            throw new InvalidArgumentException('non-nullable image_path cannot be null');
        }
        $this->container['image_path'] = $image_path;

        return $this;
    }

    /**
     * Gets image2_path
     *
     * @return string|null
     */
    public function getImage2Path(): ?string
    {
        return $this->container['image2_path'];
    }

    /**
     * Sets image2_path
     *
     * @param string|null $image2_path The path to the image2 of the category.
     *
     * @return $this
     */
    public function setImage2Path(?string $image2_path): static
    {
        if (is_null($image2_path)) {
            throw new InvalidArgumentException('non-nullable image2_path cannot be null');
        }
        $this->container['image2_path'] = $image2_path;

        return $this;
    }

    /**
     * Gets preview_url
     *
     * @return string|null
     */
    public function getPreviewUrl(): ?string
    {
        return $this->container['preview_url'];
    }

    /**
     * Sets preview_url
     *
     * @param string|null $preview_url The category's URL.
     *
     * @return $this
     */
    public function setPreviewUrl(?string $preview_url): static
    {
        if (is_null($preview_url)) {
            throw new InvalidArgumentException('non-nullable preview_url cannot be null');
        }
        $this->container['preview_url'] = $preview_url;

        return $this;
    }

    /**
     * Gets position
     *
     * @return int|null
     */
    public function getPosition(): ?int
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param int|null $position The position of the category within a category level.
     *
     * @return $this
     */
    public function setPosition(?int $position): static
    {
        if (is_null($position)) {
            throw new InvalidArgumentException('non-nullable position cannot be null');
        }
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets item_list_view
     *
     * @return string|null
     */
    public function getItemListView(): ?string
    {
        return $this->container['item_list_view'];
    }

    /**
     * Sets item_list_view
     *
     * @param string|null $item_list_view The template the category is linked to for the category overview. The template determines what the category overview will look like for this category. This option is available for categories of the type <strong>Item</strong> only. Possible values: ItemViewCategoriesList, ItemViewCategoriesList2 to ItemViewCategoriesList10.
     *
     * @return $this
     */
    public function setItemListView(?string $item_list_view): static
    {
        if (is_null($item_list_view)) {
            throw new InvalidArgumentException('non-nullable item_list_view cannot be null');
        }
        $this->container['item_list_view'] = $item_list_view;

        return $this;
    }

    /**
     * Gets single_item_view
     *
     * @return string|null
     */
    public function getSingleItemView(): ?string
    {
        return $this->container['single_item_view'];
    }

    /**
     * Sets single_item_view
     *
     * @param string|null $single_item_view The template the category is linked to for the single item view. The template determines the appearance of the single item design for this category. This option is available for categories of the type <strong>Item</strong> only. Possible values: ItemViewSingleItem, ItemViewSingleItem2 to ItemViewSingleItem5.
     *
     * @return $this
     */
    public function setSingleItemView(?string $single_item_view): static
    {
        if (is_null($single_item_view)) {
            throw new InvalidArgumentException('non-nullable single_item_view cannot be null');
        }
        $this->container['single_item_view'] = $single_item_view;

        return $this;
    }

    /**
     * Gets page_view
     *
     * @return string|null
     */
    public function getPageView(): ?string
    {
        return $this->container['page_view'];
    }

    /**
     * Sets page_view
     *
     * @param string|null $page_view 
     *
     * @return $this
     */
    public function setPageView(?string $page_view): static
    {
        if (is_null($page_view)) {
            throw new InvalidArgumentException('non-nullable page_view cannot be null');
        }
        $this->container['page_view'] = $page_view;

        return $this;
    }

    /**
     * Gets fulltext
     *
     * @return bool|null
     */
    public function getFulltext(): ?bool
    {
        return $this->container['fulltext'];
    }

    /**
     * Sets fulltext
     *
     * @param bool|null $fulltext Flag that indicates if the complete category text, i.e. the complete description, will be searched.<ul><li>Y = Complete text will be searched.</li><li>N = Text will not be searched completely.</li></ul>
     *
     * @return $this
     */
    public function setFulltext(?bool $fulltext): static
    {
        if (is_null($fulltext)) {
            throw new InvalidArgumentException('non-nullable fulltext cannot be null');
        }
        $this->container['fulltext'] = $fulltext;

        return $this;
    }

    /**
     * Gets meta_robots
     *
     * @return string|null
     */
    public function getMetaRobots(): ?string
    {
        return $this->container['meta_robots'];
    }

    /**
     * Sets meta_robots
     *
     * @param string|null $meta_robots Values from the meta element Robots are analyzed by Web crawlers. These values tell the crawler what it should do with the page and with the links on the page.<ul><li>all = Include this category in the search engine index and follow the links on the page.</li><li>index = Include in the search engine index.</li><li>nofollow = Do not follow the links on the page.</li><li>noindex = Do not include in the search engine index.</li><li>nofollow, noindex = Do not follow the links and do not include the category in the search engine index.</li></ul>
     *
     * @return $this
     */
    public function setMetaRobots(?string $meta_robots): static
    {
        if (is_null($meta_robots)) {
            throw new InvalidArgumentException('non-nullable meta_robots cannot be null');
        }
        $this->container['meta_robots'] = $meta_robots;

        return $this;
    }

    /**
     * Gets canonical_link
     *
     * @return string|null
     */
    public function getCanonicalLink(): ?string
    {
        return $this->container['canonical_link'];
    }

    /**
     * Sets canonical_link
     *
     * @param string|null $canonical_link The URL of any category that contains the same content. This will avoid duplicate content.
     *
     * @return $this
     */
    public function setCanonicalLink(?string $canonical_link): static
    {
        if (is_null($canonical_link)) {
            throw new InvalidArgumentException('non-nullable canonical_link cannot be null');
        }
        $this->container['canonical_link'] = $canonical_link;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt(): ?string
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at The time the category details were last updated
     *
     * @return $this
     */
    public function setUpdatedAt(?string $updated_at): static
    {
        if (is_null($updated_at)) {
            throw new InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return string|null
     */
    public function getUpdatedBy(): ?string
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param string|null $updated_by The user who last updated the category details
     *
     * @return $this
     */
    public function setUpdatedBy(?string $updated_by): static
    {
        if (is_null($updated_by)) {
            throw new InvalidArgumentException('non-nullable updated_by cannot be null');
        }
        $this->container['updated_by'] = $updated_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


