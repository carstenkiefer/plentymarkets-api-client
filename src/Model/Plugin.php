<?php
/**
 * Plugin
 *
 * PHP version 8.1
 *
 * @package  ck/plenty-client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ck/plenty-client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use ck/plenty-client\ObjectSerializer;

/**
 * Plugin Class Doc Comment
 *
 * @package  ck/plenty-client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class Plugin implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Plugin';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'position' => 'int',
        'active_stage' => 'bool',
        'active_productive' => 'bool',
        'created_at' => 'string',
        'updated_at' => 'string',
        'in_stage' => 'bool',
        'in_productive' => 'bool',
        'is_connected_with_git' => 'bool',
        'update_information' => 'object[]',
        'type' => 'string',
        'installed' => 'bool',
        'version' => 'string',
        'version_stage' => 'string',
        'version_productive' => 'string',
        'description' => 'string',
        'namespace' => 'string',
        'dependencies' => 'object[]',
        'author' => 'string',
        'price' => 'float',
        'keywords' => 'object[]',
        'require' => 'object[]',
        'not_installed_requirements' => 'object[]',
        'not_active_stage_requirements' => 'object[]',
        'not_active_productive_requirements' => 'object[]',
        'run_on_build' => 'object[]',
        'check_on_build' => 'object[]',
        'author_icon' => 'string',
        'plugin_icon' => 'string',
        'license' => 'string',
        'short_description' => 'object[]',
        'is_closed_source' => 'bool',
        'inbox_path' => 'string',
        'marketplace_name' => 'object[]',
        'source' => 'string',
        'java_script_files' => 'object[]',
        'containers' => 'object[]',
        'data_providers' => 'object[]',
        'categories' => 'object[]',
        'webhook_url' => 'string',
        'is_external_tool' => 'bool',
        'direct_download_links' => 'object[]',
        'forward_link' => 'string',
        'branch' => 'string',
        'commit' => 'string',
        'offer_trial' => 'bool',
        'offer_freemium' => 'bool',
        'plugin_set_ids' => 'object[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => null,
        'name' => null,
        'position' => null,
        'active_stage' => null,
        'active_productive' => null,
        'created_at' => null,
        'updated_at' => null,
        'in_stage' => null,
        'in_productive' => null,
        'is_connected_with_git' => null,
        'update_information' => null,
        'type' => null,
        'installed' => null,
        'version' => null,
        'version_stage' => null,
        'version_productive' => null,
        'description' => null,
        'namespace' => null,
        'dependencies' => null,
        'author' => null,
        'price' => null,
        'keywords' => null,
        'require' => null,
        'not_installed_requirements' => null,
        'not_active_stage_requirements' => null,
        'not_active_productive_requirements' => null,
        'run_on_build' => null,
        'check_on_build' => null,
        'author_icon' => null,
        'plugin_icon' => null,
        'license' => null,
        'short_description' => null,
        'is_closed_source' => null,
        'inbox_path' => null,
        'marketplace_name' => null,
        'source' => null,
        'java_script_files' => null,
        'containers' => null,
        'data_providers' => null,
        'categories' => null,
        'webhook_url' => null,
        'is_external_tool' => null,
        'direct_download_links' => null,
        'forward_link' => null,
        'branch' => null,
        'commit' => null,
        'offer_trial' => null,
        'offer_freemium' => null,
        'plugin_set_ids' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
		'name' => false,
		'position' => false,
		'active_stage' => false,
		'active_productive' => false,
		'created_at' => false,
		'updated_at' => false,
		'in_stage' => false,
		'in_productive' => false,
		'is_connected_with_git' => false,
		'update_information' => false,
		'type' => false,
		'installed' => false,
		'version' => false,
		'version_stage' => false,
		'version_productive' => false,
		'description' => false,
		'namespace' => false,
		'dependencies' => false,
		'author' => false,
		'price' => false,
		'keywords' => false,
		'require' => false,
		'not_installed_requirements' => false,
		'not_active_stage_requirements' => false,
		'not_active_productive_requirements' => false,
		'run_on_build' => false,
		'check_on_build' => false,
		'author_icon' => false,
		'plugin_icon' => false,
		'license' => false,
		'short_description' => false,
		'is_closed_source' => false,
		'inbox_path' => false,
		'marketplace_name' => false,
		'source' => false,
		'java_script_files' => false,
		'containers' => false,
		'data_providers' => false,
		'categories' => false,
		'webhook_url' => false,
		'is_external_tool' => false,
		'direct_download_links' => false,
		'forward_link' => false,
		'branch' => false,
		'commit' => false,
		'offer_trial' => false,
		'offer_freemium' => false,
		'plugin_set_ids' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'position' => 'position',
        'active_stage' => 'activeStage',
        'active_productive' => 'activeProductive',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'in_stage' => 'inStage',
        'in_productive' => 'inProductive',
        'is_connected_with_git' => 'isConnectedWithGit',
        'update_information' => 'updateInformation',
        'type' => 'type',
        'installed' => 'installed',
        'version' => 'version',
        'version_stage' => 'versionStage',
        'version_productive' => 'versionProductive',
        'description' => 'description',
        'namespace' => 'namespace',
        'dependencies' => 'dependencies',
        'author' => 'author',
        'price' => 'price',
        'keywords' => 'keywords',
        'require' => 'require',
        'not_installed_requirements' => 'notInstalledRequirements',
        'not_active_stage_requirements' => 'notActiveStageRequirements',
        'not_active_productive_requirements' => 'notActiveProductiveRequirements',
        'run_on_build' => 'runOnBuild',
        'check_on_build' => 'checkOnBuild',
        'author_icon' => 'authorIcon',
        'plugin_icon' => 'pluginIcon',
        'license' => 'license',
        'short_description' => 'shortDescription',
        'is_closed_source' => 'isClosedSource',
        'inbox_path' => 'inboxPath',
        'marketplace_name' => 'marketplaceName',
        'source' => 'source',
        'java_script_files' => 'javaScriptFiles',
        'containers' => 'containers',
        'data_providers' => 'dataProviders',
        'categories' => 'categories',
        'webhook_url' => 'webhookUrl',
        'is_external_tool' => 'isExternalTool',
        'direct_download_links' => 'directDownloadLinks',
        'forward_link' => 'forwardLink',
        'branch' => 'branch',
        'commit' => 'commit',
        'offer_trial' => 'offerTrial',
        'offer_freemium' => 'offerFreemium',
        'plugin_set_ids' => 'pluginSetIds'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'position' => 'setPosition',
        'active_stage' => 'setActiveStage',
        'active_productive' => 'setActiveProductive',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'in_stage' => 'setInStage',
        'in_productive' => 'setInProductive',
        'is_connected_with_git' => 'setIsConnectedWithGit',
        'update_information' => 'setUpdateInformation',
        'type' => 'setType',
        'installed' => 'setInstalled',
        'version' => 'setVersion',
        'version_stage' => 'setVersionStage',
        'version_productive' => 'setVersionProductive',
        'description' => 'setDescription',
        'namespace' => 'setNamespace',
        'dependencies' => 'setDependencies',
        'author' => 'setAuthor',
        'price' => 'setPrice',
        'keywords' => 'setKeywords',
        'require' => 'setRequire',
        'not_installed_requirements' => 'setNotInstalledRequirements',
        'not_active_stage_requirements' => 'setNotActiveStageRequirements',
        'not_active_productive_requirements' => 'setNotActiveProductiveRequirements',
        'run_on_build' => 'setRunOnBuild',
        'check_on_build' => 'setCheckOnBuild',
        'author_icon' => 'setAuthorIcon',
        'plugin_icon' => 'setPluginIcon',
        'license' => 'setLicense',
        'short_description' => 'setShortDescription',
        'is_closed_source' => 'setIsClosedSource',
        'inbox_path' => 'setInboxPath',
        'marketplace_name' => 'setMarketplaceName',
        'source' => 'setSource',
        'java_script_files' => 'setJavaScriptFiles',
        'containers' => 'setContainers',
        'data_providers' => 'setDataProviders',
        'categories' => 'setCategories',
        'webhook_url' => 'setWebhookUrl',
        'is_external_tool' => 'setIsExternalTool',
        'direct_download_links' => 'setDirectDownloadLinks',
        'forward_link' => 'setForwardLink',
        'branch' => 'setBranch',
        'commit' => 'setCommit',
        'offer_trial' => 'setOfferTrial',
        'offer_freemium' => 'setOfferFreemium',
        'plugin_set_ids' => 'setPluginSetIds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'position' => 'getPosition',
        'active_stage' => 'getActiveStage',
        'active_productive' => 'getActiveProductive',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'in_stage' => 'getInStage',
        'in_productive' => 'getInProductive',
        'is_connected_with_git' => 'getIsConnectedWithGit',
        'update_information' => 'getUpdateInformation',
        'type' => 'getType',
        'installed' => 'getInstalled',
        'version' => 'getVersion',
        'version_stage' => 'getVersionStage',
        'version_productive' => 'getVersionProductive',
        'description' => 'getDescription',
        'namespace' => 'getNamespace',
        'dependencies' => 'getDependencies',
        'author' => 'getAuthor',
        'price' => 'getPrice',
        'keywords' => 'getKeywords',
        'require' => 'getRequire',
        'not_installed_requirements' => 'getNotInstalledRequirements',
        'not_active_stage_requirements' => 'getNotActiveStageRequirements',
        'not_active_productive_requirements' => 'getNotActiveProductiveRequirements',
        'run_on_build' => 'getRunOnBuild',
        'check_on_build' => 'getCheckOnBuild',
        'author_icon' => 'getAuthorIcon',
        'plugin_icon' => 'getPluginIcon',
        'license' => 'getLicense',
        'short_description' => 'getShortDescription',
        'is_closed_source' => 'getIsClosedSource',
        'inbox_path' => 'getInboxPath',
        'marketplace_name' => 'getMarketplaceName',
        'source' => 'getSource',
        'java_script_files' => 'getJavaScriptFiles',
        'containers' => 'getContainers',
        'data_providers' => 'getDataProviders',
        'categories' => 'getCategories',
        'webhook_url' => 'getWebhookUrl',
        'is_external_tool' => 'getIsExternalTool',
        'direct_download_links' => 'getDirectDownloadLinks',
        'forward_link' => 'getForwardLink',
        'branch' => 'getBranch',
        'commit' => 'getCommit',
        'offer_trial' => 'getOfferTrial',
        'offer_freemium' => 'getOfferFreemium',
        'plugin_set_ids' => 'getPluginSetIds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('position', $data ?? [], null);
        $this->setIfExists('active_stage', $data ?? [], null);
        $this->setIfExists('active_productive', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('in_stage', $data ?? [], null);
        $this->setIfExists('in_productive', $data ?? [], null);
        $this->setIfExists('is_connected_with_git', $data ?? [], null);
        $this->setIfExists('update_information', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('installed', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('version_stage', $data ?? [], null);
        $this->setIfExists('version_productive', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('namespace', $data ?? [], null);
        $this->setIfExists('dependencies', $data ?? [], null);
        $this->setIfExists('author', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('keywords', $data ?? [], null);
        $this->setIfExists('require', $data ?? [], null);
        $this->setIfExists('not_installed_requirements', $data ?? [], null);
        $this->setIfExists('not_active_stage_requirements', $data ?? [], null);
        $this->setIfExists('not_active_productive_requirements', $data ?? [], null);
        $this->setIfExists('run_on_build', $data ?? [], null);
        $this->setIfExists('check_on_build', $data ?? [], null);
        $this->setIfExists('author_icon', $data ?? [], null);
        $this->setIfExists('plugin_icon', $data ?? [], null);
        $this->setIfExists('license', $data ?? [], null);
        $this->setIfExists('short_description', $data ?? [], null);
        $this->setIfExists('is_closed_source', $data ?? [], null);
        $this->setIfExists('inbox_path', $data ?? [], null);
        $this->setIfExists('marketplace_name', $data ?? [], null);
        $this->setIfExists('source', $data ?? [], null);
        $this->setIfExists('java_script_files', $data ?? [], null);
        $this->setIfExists('containers', $data ?? [], null);
        $this->setIfExists('data_providers', $data ?? [], null);
        $this->setIfExists('categories', $data ?? [], null);
        $this->setIfExists('webhook_url', $data ?? [], null);
        $this->setIfExists('is_external_tool', $data ?? [], null);
        $this->setIfExists('direct_download_links', $data ?? [], null);
        $this->setIfExists('forward_link', $data ?? [], null);
        $this->setIfExists('branch', $data ?? [], null);
        $this->setIfExists('commit', $data ?? [], null);
        $this->setIfExists('offer_trial', $data ?? [], null);
        $this->setIfExists('offer_freemium', $data ?? [], null);
        $this->setIfExists('plugin_set_ids', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The ID of the plugin
     *
     * @return $this
     */
    public function setId(?int $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of the plugin
     *
     * @return $this
     */
    public function setName(?string $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets position
     *
     * @return int|null
     */
    public function getPosition(): ?int
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param int|null $position The position of the plugin. The position is used to determine the plugin order.
     *
     * @return $this
     */
    public function setPosition(?int $position): static
    {
        if (is_null($position)) {
            throw new InvalidArgumentException('non-nullable position cannot be null');
        }
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets active_stage
     *
     * @return bool|null
     */
    public function getActiveStage(): ?bool
    {
        return $this->container['active_stage'];
    }

    /**
     * Sets active_stage
     *
     * @param bool|null $active_stage Shows whether the plugin is active in Stage. Inactive plugins will not be provisioned in Stage.
     *
     * @return $this
     */
    public function setActiveStage(?bool $active_stage): static
    {
        if (is_null($active_stage)) {
            throw new InvalidArgumentException('non-nullable active_stage cannot be null');
        }
        $this->container['active_stage'] = $active_stage;

        return $this;
    }

    /**
     * Gets active_productive
     *
     * @return bool|null
     */
    public function getActiveProductive(): ?bool
    {
        return $this->container['active_productive'];
    }

    /**
     * Sets active_productive
     *
     * @param bool|null $active_productive Shows whether the plugin is active in Productive. Inactive plugins will not be provisioned in Productive.
     *
     * @return $this
     */
    public function setActiveProductive(?bool $active_productive): static
    {
        if (is_null($active_productive)) {
            throw new InvalidArgumentException('non-nullable active_productive cannot be null');
        }
        $this->container['active_productive'] = $active_productive;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt(): ?string
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at The date that the plugin was created.
     *
     * @return $this
     */
    public function setCreatedAt(?string $created_at): static
    {
        if (is_null($created_at)) {
            throw new InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt(): ?string
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at The date that the plugin was updated last.
     *
     * @return $this
     */
    public function setUpdatedAt(?string $updated_at): static
    {
        if (is_null($updated_at)) {
            throw new InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets in_stage
     *
     * @return bool|null
     */
    public function getInStage(): ?bool
    {
        return $this->container['in_stage'];
    }

    /**
     * Sets in_stage
     *
     * @param bool|null $in_stage Shows whether the plugin is provisioned in Stage.
     *
     * @return $this
     */
    public function setInStage(?bool $in_stage): static
    {
        if (is_null($in_stage)) {
            throw new InvalidArgumentException('non-nullable in_stage cannot be null');
        }
        $this->container['in_stage'] = $in_stage;

        return $this;
    }

    /**
     * Gets in_productive
     *
     * @return bool|null
     */
    public function getInProductive(): ?bool
    {
        return $this->container['in_productive'];
    }

    /**
     * Sets in_productive
     *
     * @param bool|null $in_productive Shows whether the plugin is provisioned in Productive.
     *
     * @return $this
     */
    public function setInProductive(?bool $in_productive): static
    {
        if (is_null($in_productive)) {
            throw new InvalidArgumentException('non-nullable in_productive cannot be null');
        }
        $this->container['in_productive'] = $in_productive;

        return $this;
    }

    /**
     * Gets is_connected_with_git
     *
     * @return bool|null
     */
    public function getIsConnectedWithGit(): ?bool
    {
        return $this->container['is_connected_with_git'];
    }

    /**
     * Sets is_connected_with_git
     *
     * @param bool|null $is_connected_with_git 
     *
     * @return $this
     */
    public function setIsConnectedWithGit(?bool $is_connected_with_git): static
    {
        if (is_null($is_connected_with_git)) {
            throw new InvalidArgumentException('non-nullable is_connected_with_git cannot be null');
        }
        $this->container['is_connected_with_git'] = $is_connected_with_git;

        return $this;
    }

    /**
     * Gets update_information
     *
     * @return object[]|null
     */
    public function getUpdateInformation(): ?array
    {
        return $this->container['update_information'];
    }

    /**
     * Sets update_information
     *
     * @param object[]|null $update_information 
     *
     * @return $this
     */
    public function setUpdateInformation(?array $update_information): static
    {
        if (is_null($update_information)) {
            throw new InvalidArgumentException('non-nullable update_information cannot be null');
        }
        $this->container['update_information'] = $update_information;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType(): ?string
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type The type of the plugin. The following plugin types are available: <ul>     <li>Template</li>     <li>Export</li> </ul>
     *
     * @return $this
     */
    public function setType(?string $type): static
    {
        if (is_null($type)) {
            throw new InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets installed
     *
     * @return bool|null
     */
    public function getInstalled(): ?bool
    {
        return $this->container['installed'];
    }

    /**
     * Sets installed
     *
     * @param bool|null $installed Whether or not the plugin is installed. This will be false for plugins that have been purchased from the marketplace but have not yet been installed in any set.
     *
     * @return $this
     */
    public function setInstalled(?bool $installed): static
    {
        if (is_null($installed)) {
            throw new InvalidArgumentException('non-nullable installed cannot be null');
        }
        $this->container['installed'] = $installed;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion(): ?string
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version The version of the plugin
     *
     * @return $this
     */
    public function setVersion(?string $version): static
    {
        if (is_null($version)) {
            throw new InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets version_stage
     *
     * @return string|null
     */
    public function getVersionStage(): ?string
    {
        return $this->container['version_stage'];
    }

    /**
     * Sets version_stage
     *
     * @param string|null $version_stage The version of the plugin in stage
     *
     * @return $this
     */
    public function setVersionStage(?string $version_stage): static
    {
        if (is_null($version_stage)) {
            throw new InvalidArgumentException('non-nullable version_stage cannot be null');
        }
        $this->container['version_stage'] = $version_stage;

        return $this;
    }

    /**
     * Gets version_productive
     *
     * @return string|null
     */
    public function getVersionProductive(): ?string
    {
        return $this->container['version_productive'];
    }

    /**
     * Sets version_productive
     *
     * @param string|null $version_productive The version of the plugin in productive
     *
     * @return $this
     */
    public function setVersionProductive(?string $version_productive): static
    {
        if (is_null($version_productive)) {
            throw new InvalidArgumentException('non-nullable version_productive cannot be null');
        }
        $this->container['version_productive'] = $version_productive;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription(): ?string
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The description text of the plugin
     *
     * @return $this
     */
    public function setDescription(?string $description): static
    {
        if (is_null($description)) {
            throw new InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets namespace
     *
     * @return string|null
     */
    public function getNamespace(): ?string
    {
        return $this->container['namespace'];
    }

    /**
     * Sets namespace
     *
     * @param string|null $namespace The namespace of the plugin
     *
     * @return $this
     */
    public function setNamespace(?string $namespace): static
    {
        if (is_null($namespace)) {
            throw new InvalidArgumentException('non-nullable namespace cannot be null');
        }
        $this->container['namespace'] = $namespace;

        return $this;
    }

    /**
     * Gets dependencies
     *
     * @return object[]|null
     */
    public function getDependencies(): ?array
    {
        return $this->container['dependencies'];
    }

    /**
     * Sets dependencies
     *
     * @param object[]|null $dependencies A list of plugins with dependencies to the plugin
     *
     * @return $this
     */
    public function setDependencies(?array $dependencies): static
    {
        if (is_null($dependencies)) {
            throw new InvalidArgumentException('non-nullable dependencies cannot be null');
        }
        $this->container['dependencies'] = $dependencies;

        return $this;
    }

    /**
     * Gets author
     *
     * @return string|null
     */
    public function getAuthor(): ?string
    {
        return $this->container['author'];
    }

    /**
     * Sets author
     *
     * @param string|null $author The name of the plugin author
     *
     * @return $this
     */
    public function setAuthor(?string $author): static
    {
        if (is_null($author)) {
            throw new InvalidArgumentException('non-nullable author cannot be null');
        }
        $this->container['author'] = $author;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float|null
     */
    public function getPrice(): ?float
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float|null $price The price of the plugin
     *
     * @return $this
     */
    public function setPrice(?float $price): static
    {
        if (is_null($price)) {
            throw new InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets keywords
     *
     * @return object[]|null
     */
    public function getKeywords(): ?array
    {
        return $this->container['keywords'];
    }

    /**
     * Sets keywords
     *
     * @param object[]|null $keywords A list of plugin keywords
     *
     * @return $this
     */
    public function setKeywords(?array $keywords): static
    {
        if (is_null($keywords)) {
            throw new InvalidArgumentException('non-nullable keywords cannot be null');
        }
        $this->container['keywords'] = $keywords;

        return $this;
    }

    /**
     * Gets require
     *
     * @return object[]|null
     */
    public function getRequire(): ?array
    {
        return $this->container['require'];
    }

    /**
     * Sets require
     *
     * @param object[]|null $require A list of plugins that are required by the plugin
     *
     * @return $this
     */
    public function setRequire(?array $require): static
    {
        if (is_null($require)) {
            throw new InvalidArgumentException('non-nullable require cannot be null');
        }
        $this->container['require'] = $require;

        return $this;
    }

    /**
     * Gets not_installed_requirements
     *
     * @return object[]|null
     */
    public function getNotInstalledRequirements(): ?array
    {
        return $this->container['not_installed_requirements'];
    }

    /**
     * Sets not_installed_requirements
     *
     * @param object[]|null $not_installed_requirements A list of required plugins that are not installed
     *
     * @return $this
     */
    public function setNotInstalledRequirements(?array $not_installed_requirements): static
    {
        if (is_null($not_installed_requirements)) {
            throw new InvalidArgumentException('non-nullable not_installed_requirements cannot be null');
        }
        $this->container['not_installed_requirements'] = $not_installed_requirements;

        return $this;
    }

    /**
     * Gets not_active_stage_requirements
     *
     * @return object[]|null
     */
    public function getNotActiveStageRequirements(): ?array
    {
        return $this->container['not_active_stage_requirements'];
    }

    /**
     * Sets not_active_stage_requirements
     *
     * @param object[]|null $not_active_stage_requirements A list of required plugins that are not active in stage
     *
     * @return $this
     */
    public function setNotActiveStageRequirements(?array $not_active_stage_requirements): static
    {
        if (is_null($not_active_stage_requirements)) {
            throw new InvalidArgumentException('non-nullable not_active_stage_requirements cannot be null');
        }
        $this->container['not_active_stage_requirements'] = $not_active_stage_requirements;

        return $this;
    }

    /**
     * Gets not_active_productive_requirements
     *
     * @return object[]|null
     */
    public function getNotActiveProductiveRequirements(): ?array
    {
        return $this->container['not_active_productive_requirements'];
    }

    /**
     * Sets not_active_productive_requirements
     *
     * @param object[]|null $not_active_productive_requirements A list of required plugins that are not active in productive
     *
     * @return $this
     */
    public function setNotActiveProductiveRequirements(?array $not_active_productive_requirements): static
    {
        if (is_null($not_active_productive_requirements)) {
            throw new InvalidArgumentException('non-nullable not_active_productive_requirements cannot be null');
        }
        $this->container['not_active_productive_requirements'] = $not_active_productive_requirements;

        return $this;
    }

    /**
     * Gets run_on_build
     *
     * @return object[]|null
     */
    public function getRunOnBuild(): ?array
    {
        return $this->container['run_on_build'];
    }

    /**
     * Sets run_on_build
     *
     * @param object[]|null $run_on_build The list of classes to execute once on plugin build
     *
     * @return $this
     */
    public function setRunOnBuild(?array $run_on_build): static
    {
        if (is_null($run_on_build)) {
            throw new InvalidArgumentException('non-nullable run_on_build cannot be null');
        }
        $this->container['run_on_build'] = $run_on_build;

        return $this;
    }

    /**
     * Gets check_on_build
     *
     * @return object[]|null
     */
    public function getCheckOnBuild(): ?array
    {
        return $this->container['check_on_build'];
    }

    /**
     * Sets check_on_build
     *
     * @param object[]|null $check_on_build The list of classes to execute on every plugin build
     *
     * @return $this
     */
    public function setCheckOnBuild(?array $check_on_build): static
    {
        if (is_null($check_on_build)) {
            throw new InvalidArgumentException('non-nullable check_on_build cannot be null');
        }
        $this->container['check_on_build'] = $check_on_build;

        return $this;
    }

    /**
     * Gets author_icon
     *
     * @return string|null
     */
    public function getAuthorIcon(): ?string
    {
        return $this->container['author_icon'];
    }

    /**
     * Sets author_icon
     *
     * @param string|null $author_icon The author icon
     *
     * @return $this
     */
    public function setAuthorIcon(?string $author_icon): static
    {
        if (is_null($author_icon)) {
            throw new InvalidArgumentException('non-nullable author_icon cannot be null');
        }
        $this->container['author_icon'] = $author_icon;

        return $this;
    }

    /**
     * Gets plugin_icon
     *
     * @return string|null
     */
    public function getPluginIcon(): ?string
    {
        return $this->container['plugin_icon'];
    }

    /**
     * Sets plugin_icon
     *
     * @param string|null $plugin_icon The plugin icon
     *
     * @return $this
     */
    public function setPluginIcon(?string $plugin_icon): static
    {
        if (is_null($plugin_icon)) {
            throw new InvalidArgumentException('non-nullable plugin_icon cannot be null');
        }
        $this->container['plugin_icon'] = $plugin_icon;

        return $this;
    }

    /**
     * Gets license
     *
     * @return string|null
     */
    public function getLicense(): ?string
    {
        return $this->container['license'];
    }

    /**
     * Sets license
     *
     * @param string|null $license The plugin license
     *
     * @return $this
     */
    public function setLicense(?string $license): static
    {
        if (is_null($license)) {
            throw new InvalidArgumentException('non-nullable license cannot be null');
        }
        $this->container['license'] = $license;

        return $this;
    }

    /**
     * Gets short_description
     *
     * @return object[]|null
     */
    public function getShortDescription(): ?array
    {
        return $this->container['short_description'];
    }

    /**
     * Sets short_description
     *
     * @param object[]|null $short_description 
     *
     * @return $this
     */
    public function setShortDescription(?array $short_description): static
    {
        if (is_null($short_description)) {
            throw new InvalidArgumentException('non-nullable short_description cannot be null');
        }
        $this->container['short_description'] = $short_description;

        return $this;
    }

    /**
     * Gets is_closed_source
     *
     * @return bool|null
     */
    public function getIsClosedSource(): ?bool
    {
        return $this->container['is_closed_source'];
    }

    /**
     * Sets is_closed_source
     *
     * @param bool|null $is_closed_source is closed source
     *
     * @return $this
     */
    public function setIsClosedSource(?bool $is_closed_source): static
    {
        if (is_null($is_closed_source)) {
            throw new InvalidArgumentException('non-nullable is_closed_source cannot be null');
        }
        $this->container['is_closed_source'] = $is_closed_source;

        return $this;
    }

    /**
     * Gets inbox_path
     *
     * @return string|null
     */
    public function getInboxPath(): ?string
    {
        return $this->container['inbox_path'];
    }

    /**
     * Sets inbox_path
     *
     * @param string|null $inbox_path path in the inbox (closed source, open source)
     *
     * @return $this
     */
    public function setInboxPath(?string $inbox_path): static
    {
        if (is_null($inbox_path)) {
            throw new InvalidArgumentException('non-nullable inbox_path cannot be null');
        }
        $this->container['inbox_path'] = $inbox_path;

        return $this;
    }

    /**
     * Gets marketplace_name
     *
     * @return object[]|null
     */
    public function getMarketplaceName(): ?array
    {
        return $this->container['marketplace_name'];
    }

    /**
     * Sets marketplace_name
     *
     * @param object[]|null $marketplace_name The plugin name displayed in marketplace
     *
     * @return $this
     */
    public function setMarketplaceName(?array $marketplace_name): static
    {
        if (is_null($marketplace_name)) {
            throw new InvalidArgumentException('non-nullable marketplace_name cannot be null');
        }
        $this->container['marketplace_name'] = $marketplace_name;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string|null
     */
    public function getSource(): ?string
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string|null $source Whether this plugin was installed from marketplace, git or local
     *
     * @return $this
     */
    public function setSource(?string $source): static
    {
        if (is_null($source)) {
            throw new InvalidArgumentException('non-nullable source cannot be null');
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets java_script_files
     *
     * @return object[]|null
     */
    public function getJavaScriptFiles(): ?array
    {
        return $this->container['java_script_files'];
    }

    /**
     * Sets java_script_files
     *
     * @param object[]|null $java_script_files A list of included javascript files
     *
     * @return $this
     */
    public function setJavaScriptFiles(?array $java_script_files): static
    {
        if (is_null($java_script_files)) {
            throw new InvalidArgumentException('non-nullable java_script_files cannot be null');
        }
        $this->container['java_script_files'] = $java_script_files;

        return $this;
    }

    /**
     * Gets containers
     *
     * @return object[]|null
     */
    public function getContainers(): ?array
    {
        return $this->container['containers'];
    }

    /**
     * Sets containers
     *
     * @param object[]|null $containers A list of provided containers with name and description
     *
     * @return $this
     */
    public function setContainers(?array $containers): static
    {
        if (is_null($containers)) {
            throw new InvalidArgumentException('non-nullable containers cannot be null');
        }
        $this->container['containers'] = $containers;

        return $this;
    }

    /**
     * Gets data_providers
     *
     * @return object[]|null
     */
    public function getDataProviders(): ?array
    {
        return $this->container['data_providers'];
    }

    /**
     * Sets data_providers
     *
     * @param object[]|null $data_providers A list of data providers with name and description
     *
     * @return $this
     */
    public function setDataProviders(?array $data_providers): static
    {
        if (is_null($data_providers)) {
            throw new InvalidArgumentException('non-nullable data_providers cannot be null');
        }
        $this->container['data_providers'] = $data_providers;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return object[]|null
     */
    public function getCategories(): ?array
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param object[]|null $categories 
     *
     * @return $this
     */
    public function setCategories(?array $categories): static
    {
        if (is_null($categories)) {
            throw new InvalidArgumentException('non-nullable categories cannot be null');
        }
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets webhook_url
     *
     * @return string|null
     */
    public function getWebhookUrl(): ?string
    {
        return $this->container['webhook_url'];
    }

    /**
     * Sets webhook_url
     *
     * @param string|null $webhook_url webhookUrl
     *
     * @return $this
     */
    public function setWebhookUrl(?string $webhook_url): static
    {
        if (is_null($webhook_url)) {
            throw new InvalidArgumentException('non-nullable webhook_url cannot be null');
        }
        $this->container['webhook_url'] = $webhook_url;

        return $this;
    }

    /**
     * Gets is_external_tool
     *
     * @return bool|null
     */
    public function getIsExternalTool(): ?bool
    {
        return $this->container['is_external_tool'];
    }

    /**
     * Sets is_external_tool
     *
     * @param bool|null $is_external_tool is external tool
     *
     * @return $this
     */
    public function setIsExternalTool(?bool $is_external_tool): static
    {
        if (is_null($is_external_tool)) {
            throw new InvalidArgumentException('non-nullable is_external_tool cannot be null');
        }
        $this->container['is_external_tool'] = $is_external_tool;

        return $this;
    }

    /**
     * Gets direct_download_links
     *
     * @return object[]|null
     */
    public function getDirectDownloadLinks(): ?array
    {
        return $this->container['direct_download_links'];
    }

    /**
     * Sets direct_download_links
     *
     * @param object[]|null $direct_download_links A list of urls for the external tool
     *
     * @return $this
     */
    public function setDirectDownloadLinks(?array $direct_download_links): static
    {
        if (is_null($direct_download_links)) {
            throw new InvalidArgumentException('non-nullable direct_download_links cannot be null');
        }
        $this->container['direct_download_links'] = $direct_download_links;

        return $this;
    }

    /**
     * Gets forward_link
     *
     * @return string|null
     */
    public function getForwardLink(): ?string
    {
        return $this->container['forward_link'];
    }

    /**
     * Sets forward_link
     *
     * @param string|null $forward_link A forward link to the external tool developers page
     *
     * @return $this
     */
    public function setForwardLink(?string $forward_link): static
    {
        if (is_null($forward_link)) {
            throw new InvalidArgumentException('non-nullable forward_link cannot be null');
        }
        $this->container['forward_link'] = $forward_link;

        return $this;
    }

    /**
     * Gets branch
     *
     * @return string|null
     */
    public function getBranch(): ?string
    {
        return $this->container['branch'];
    }

    /**
     * Sets branch
     *
     * @param string|null $branch The branch to checkout for this particular Plugin
     *
     * @return $this
     */
    public function setBranch(?string $branch): static
    {
        if (is_null($branch)) {
            throw new InvalidArgumentException('non-nullable branch cannot be null');
        }
        $this->container['branch'] = $branch;

        return $this;
    }

    /**
     * Gets commit
     *
     * @return string|null
     */
    public function getCommit(): ?string
    {
        return $this->container['commit'];
    }

    /**
     * Sets commit
     *
     * @param string|null $commit The commit to checkout for this particular Plugin
     *
     * @return $this
     */
    public function setCommit(?string $commit): static
    {
        if (is_null($commit)) {
            throw new InvalidArgumentException('non-nullable commit cannot be null');
        }
        $this->container['commit'] = $commit;

        return $this;
    }

    /**
     * Gets offer_trial
     *
     * @return bool|null
     */
    public function getOfferTrial(): ?bool
    {
        return $this->container['offer_trial'];
    }

    /**
     * Sets offer_trial
     *
     * @param bool|null $offer_trial Determines if the plugin offers a trial period for plentyMarketplace
     *
     * @return $this
     */
    public function setOfferTrial(?bool $offer_trial): static
    {
        if (is_null($offer_trial)) {
            throw new InvalidArgumentException('non-nullable offer_trial cannot be null');
        }
        $this->container['offer_trial'] = $offer_trial;

        return $this;
    }

    /**
     * Gets offer_freemium
     *
     * @return bool|null
     */
    public function getOfferFreemium(): ?bool
    {
        return $this->container['offer_freemium'];
    }

    /**
     * Sets offer_freemium
     *
     * @param bool|null $offer_freemium Determines if the plugin offers freemium functionality
     *
     * @return $this
     */
    public function setOfferFreemium(?bool $offer_freemium): static
    {
        if (is_null($offer_freemium)) {
            throw new InvalidArgumentException('non-nullable offer_freemium cannot be null');
        }
        $this->container['offer_freemium'] = $offer_freemium;

        return $this;
    }

    /**
     * Gets plugin_set_ids
     *
     * @return object[]|null
     */
    public function getPluginSetIds(): ?array
    {
        return $this->container['plugin_set_ids'];
    }

    /**
     * Sets plugin_set_ids
     *
     * @param object[]|null $plugin_set_ids Array of PluginSet Ids where this plugin is contained.
     *
     * @return $this
     */
    public function setPluginSetIds(?array $plugin_set_ids): static
    {
        if (is_null($plugin_set_ids)) {
            throw new InvalidArgumentException('non-nullable plugin_set_ids cannot be null');
        }
        $this->container['plugin_set_ids'] = $plugin_set_ids;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


