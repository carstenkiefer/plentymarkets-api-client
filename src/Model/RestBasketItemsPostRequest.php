<?php
/**
 * RestBasketItemsPostRequest
 *
 * PHP version 8.1
 *
 * @package  ck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ck\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use ck\ObjectSerializer;

/**
 * RestBasketItemsPostRequest Class Doc Comment
 *
 * @package  ck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class RestBasketItemsPostRequest implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = '_rest_basket_items_post_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'variation_id' => 'int',
        'quantity' => 'float',
        'input_height' => 'int',
        'input_width' => 'int',
        'input_length' => 'int',
        'referrer_id' => 'float',
        'delivery_date' => 'string',
        'gift_package_for_row_id' => 'int',
        'category_id' => 'int',
        'no_edit_by_customer' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'variation_id' => null,
        'quantity' => null,
        'input_height' => null,
        'input_width' => null,
        'input_length' => null,
        'referrer_id' => null,
        'delivery_date' => null,
        'gift_package_for_row_id' => null,
        'category_id' => null,
        'no_edit_by_customer' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'variation_id' => false,
		'quantity' => false,
		'input_height' => false,
		'input_width' => false,
		'input_length' => false,
		'referrer_id' => false,
		'delivery_date' => false,
		'gift_package_for_row_id' => false,
		'category_id' => false,
		'no_edit_by_customer' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'variation_id' => 'variationId',
        'quantity' => 'quantity',
        'input_height' => 'inputHeight',
        'input_width' => 'inputWidth',
        'input_length' => 'inputLength',
        'referrer_id' => 'referrerId',
        'delivery_date' => 'deliveryDate',
        'gift_package_for_row_id' => 'giftPackageForRowId',
        'category_id' => 'categoryId',
        'no_edit_by_customer' => 'noEditByCustomer'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'variation_id' => 'setVariationId',
        'quantity' => 'setQuantity',
        'input_height' => 'setInputHeight',
        'input_width' => 'setInputWidth',
        'input_length' => 'setInputLength',
        'referrer_id' => 'setReferrerId',
        'delivery_date' => 'setDeliveryDate',
        'gift_package_for_row_id' => 'setGiftPackageForRowId',
        'category_id' => 'setCategoryId',
        'no_edit_by_customer' => 'setNoEditByCustomer'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'variation_id' => 'getVariationId',
        'quantity' => 'getQuantity',
        'input_height' => 'getInputHeight',
        'input_width' => 'getInputWidth',
        'input_length' => 'getInputLength',
        'referrer_id' => 'getReferrerId',
        'delivery_date' => 'getDeliveryDate',
        'gift_package_for_row_id' => 'getGiftPackageForRowId',
        'category_id' => 'getCategoryId',
        'no_edit_by_customer' => 'getNoEditByCustomer'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('variation_id', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('input_height', $data ?? [], null);
        $this->setIfExists('input_width', $data ?? [], null);
        $this->setIfExists('input_length', $data ?? [], null);
        $this->setIfExists('referrer_id', $data ?? [], null);
        $this->setIfExists('delivery_date', $data ?? [], null);
        $this->setIfExists('gift_package_for_row_id', $data ?? [], null);
        $this->setIfExists('category_id', $data ?? [], null);
        $this->setIfExists('no_edit_by_customer', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['variation_id'] === null) {
            $invalidProperties[] = "'variation_id' can't be null";
        }
        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets variation_id
     *
     * @return int
     */
    public function getVariationId(): int
    {
        return $this->container['variation_id'];
    }

    /**
     * Sets variation_id
     *
     * @param int $variation_id The ID of the item variation
     *
     * @return $this
     */
    public function setVariationId(int $variation_id): static
    {
        if (is_null($variation_id)) {
            throw new InvalidArgumentException('non-nullable variation_id cannot be null');
        }
        $this->container['variation_id'] = $variation_id;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float
     */
    public function getQuantity(): float
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float $quantity The current quantity of the item
     *
     * @return $this
     */
    public function setQuantity(float $quantity): static
    {
        if (is_null($quantity)) {
            throw new InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets input_height
     *
     * @return int|null
     */
    public function getInputHeight(): ?int
    {
        return $this->container['input_height'];
    }

    /**
     * Sets input_height
     *
     * @param int|null $input_height The height of the item optional
     *
     * @return $this
     */
    public function setInputHeight(?int $input_height): static
    {
        if (is_null($input_height)) {
            throw new InvalidArgumentException('non-nullable input_height cannot be null');
        }
        $this->container['input_height'] = $input_height;

        return $this;
    }

    /**
     * Gets input_width
     *
     * @return int|null
     */
    public function getInputWidth(): ?int
    {
        return $this->container['input_width'];
    }

    /**
     * Sets input_width
     *
     * @param int|null $input_width The width of the item optional
     *
     * @return $this
     */
    public function setInputWidth(?int $input_width): static
    {
        if (is_null($input_width)) {
            throw new InvalidArgumentException('non-nullable input_width cannot be null');
        }
        $this->container['input_width'] = $input_width;

        return $this;
    }

    /**
     * Gets input_length
     *
     * @return int|null
     */
    public function getInputLength(): ?int
    {
        return $this->container['input_length'];
    }

    /**
     * Sets input_length
     *
     * @param int|null $input_length The length of the item optional
     *
     * @return $this
     */
    public function setInputLength(?int $input_length): static
    {
        if (is_null($input_length)) {
            throw new InvalidArgumentException('non-nullable input_length cannot be null');
        }
        $this->container['input_length'] = $input_length;

        return $this;
    }

    /**
     * Gets referrer_id
     *
     * @return float|null
     */
    public function getReferrerId(): ?float
    {
        return $this->container['referrer_id'];
    }

    /**
     * Sets referrer_id
     *
     * @param float|null $referrer_id The ID of the order referrer optional
     *
     * @return $this
     */
    public function setReferrerId(?float $referrer_id): static
    {
        if (is_null($referrer_id)) {
            throw new InvalidArgumentException('non-nullable referrer_id cannot be null');
        }
        $this->container['referrer_id'] = $referrer_id;

        return $this;
    }

    /**
     * Gets delivery_date
     *
     * @return string|null
     */
    public function getDeliveryDate(): ?string
    {
        return $this->container['delivery_date'];
    }

    /**
     * Sets delivery_date
     *
     * @param string|null $delivery_date The delivery date optional
     *
     * @return $this
     */
    public function setDeliveryDate(?string $delivery_date): static
    {
        if (is_null($delivery_date)) {
            throw new InvalidArgumentException('non-nullable delivery_date cannot be null');
        }
        $this->container['delivery_date'] = $delivery_date;

        return $this;
    }

    /**
     * Gets gift_package_for_row_id
     *
     * @return int|null
     */
    public function getGiftPackageForRowId(): ?int
    {
        return $this->container['gift_package_for_row_id'];
    }

    /**
     * Sets gift_package_for_row_id
     *
     * @param int|null $gift_package_for_row_id optional
     *
     * @return $this
     */
    public function setGiftPackageForRowId(?int $gift_package_for_row_id): static
    {
        if (is_null($gift_package_for_row_id)) {
            throw new InvalidArgumentException('non-nullable gift_package_for_row_id cannot be null');
        }
        $this->container['gift_package_for_row_id'] = $gift_package_for_row_id;

        return $this;
    }

    /**
     * Gets category_id
     *
     * @return int|null
     */
    public function getCategoryId(): ?int
    {
        return $this->container['category_id'];
    }

    /**
     * Sets category_id
     *
     * @param int|null $category_id The ID of the item category optional
     *
     * @return $this
     */
    public function setCategoryId(?int $category_id): static
    {
        if (is_null($category_id)) {
            throw new InvalidArgumentException('non-nullable category_id cannot be null');
        }
        $this->container['category_id'] = $category_id;

        return $this;
    }

    /**
     * Gets no_edit_by_customer
     *
     * @return bool|null
     */
    public function getNoEditByCustomer(): ?bool
    {
        return $this->container['no_edit_by_customer'];
    }

    /**
     * Sets no_edit_by_customer
     *
     * @param bool|null $no_edit_by_customer Shows whether the item was edited by the customer optional
     *
     * @return $this
     */
    public function setNoEditByCustomer(?bool $no_edit_by_customer): static
    {
        if (is_null($no_edit_by_customer)) {
            throw new InvalidArgumentException('non-nullable no_edit_by_customer cannot be null');
        }
        $this->container['no_edit_by_customer'] = $no_edit_by_customer;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


