<?php
/**
 * Country
 *
 * PHP version 8.1
 *
 * @package  ck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ck\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use ck\ObjectSerializer;

/**
 * Country Class Doc Comment
 *
 * @package  ck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class Country implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Country';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'shipping_destination_id' => 'int',
        'active' => 'int',
        'storehouse_id' => 'int',
        'iso_code2' => 'string',
        'iso_code3' => 'string',
        'lang' => 'string',
        'is_country_state_mandatory' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => null,
        'name' => null,
        'shipping_destination_id' => null,
        'active' => null,
        'storehouse_id' => null,
        'iso_code2' => null,
        'iso_code3' => null,
        'lang' => null,
        'is_country_state_mandatory' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
		'name' => false,
		'shipping_destination_id' => false,
		'active' => false,
		'storehouse_id' => false,
		'iso_code2' => false,
		'iso_code3' => false,
		'lang' => false,
		'is_country_state_mandatory' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'shipping_destination_id' => 'shippingDestinationId',
        'active' => 'active',
        'storehouse_id' => 'storehouseId',
        'iso_code2' => 'isoCode2',
        'iso_code3' => 'isoCode3',
        'lang' => 'lang',
        'is_country_state_mandatory' => 'isCountryStateMandatory'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'shipping_destination_id' => 'setShippingDestinationId',
        'active' => 'setActive',
        'storehouse_id' => 'setStorehouseId',
        'iso_code2' => 'setIsoCode2',
        'iso_code3' => 'setIsoCode3',
        'lang' => 'setLang',
        'is_country_state_mandatory' => 'setIsCountryStateMandatory'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'shipping_destination_id' => 'getShippingDestinationId',
        'active' => 'getActive',
        'storehouse_id' => 'getStorehouseId',
        'iso_code2' => 'getIsoCode2',
        'iso_code3' => 'getIsoCode3',
        'lang' => 'getLang',
        'is_country_state_mandatory' => 'getIsCountryStateMandatory'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('shipping_destination_id', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], null);
        $this->setIfExists('storehouse_id', $data ?? [], null);
        $this->setIfExists('iso_code2', $data ?? [], null);
        $this->setIfExists('iso_code3', $data ?? [], null);
        $this->setIfExists('lang', $data ?? [], null);
        $this->setIfExists('is_country_state_mandatory', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The country id.
     *
     * @return $this
     */
    public function setId(?int $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The system country name.
     *
     * @return $this
     */
    public function setName(?string $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets shipping_destination_id
     *
     * @return int|null
     */
    public function getShippingDestinationId(): ?int
    {
        return $this->container['shipping_destination_id'];
    }

    /**
     * Sets shipping_destination_id
     *
     * @param int|null $shipping_destination_id The shipping destination (region) id.
     *
     * @return $this
     */
    public function setShippingDestinationId(?int $shipping_destination_id): static
    {
        if (is_null($shipping_destination_id)) {
            throw new InvalidArgumentException('non-nullable shipping_destination_id cannot be null');
        }
        $this->container['shipping_destination_id'] = $shipping_destination_id;

        return $this;
    }

    /**
     * Gets active
     *
     * @return int|null
     */
    public function getActive(): ?int
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param int|null $active The active flag (1: active, 2: backend active, 3: supplier active
     *
     * @return $this
     */
    public function setActive(?int $active): static
    {
        if (is_null($active)) {
            throw new InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets storehouse_id
     *
     * @return int|null
     */
    public function getStorehouseId(): ?int
    {
        return $this->container['storehouse_id'];
    }

    /**
     * Sets storehouse_id
     *
     * @param int|null $storehouse_id The id of the main warehouse in this country.
     *
     * @return $this
     */
    public function setStorehouseId(?int $storehouse_id): static
    {
        if (is_null($storehouse_id)) {
            throw new InvalidArgumentException('non-nullable storehouse_id cannot be null');
        }
        $this->container['storehouse_id'] = $storehouse_id;

        return $this;
    }

    /**
     * Gets iso_code2
     *
     * @return string|null
     */
    public function getIsoCode2(): ?string
    {
        return $this->container['iso_code2'];
    }

    /**
     * Sets iso_code2
     *
     * @param string|null $iso_code2 The ISO 3166 ALPHA-2 code of the country.
     *
     * @return $this
     */
    public function setIsoCode2(?string $iso_code2): static
    {
        if (is_null($iso_code2)) {
            throw new InvalidArgumentException('non-nullable iso_code2 cannot be null');
        }
        $this->container['iso_code2'] = $iso_code2;

        return $this;
    }

    /**
     * Gets iso_code3
     *
     * @return string|null
     */
    public function getIsoCode3(): ?string
    {
        return $this->container['iso_code3'];
    }

    /**
     * Sets iso_code3
     *
     * @param string|null $iso_code3 The ISO 3166 ALPHA-3 code of the country.
     *
     * @return $this
     */
    public function setIsoCode3(?string $iso_code3): static
    {
        if (is_null($iso_code3)) {
            throw new InvalidArgumentException('non-nullable iso_code3 cannot be null');
        }
        $this->container['iso_code3'] = $iso_code3;

        return $this;
    }

    /**
     * Gets lang
     *
     * @return string|null
     */
    public function getLang(): ?string
    {
        return $this->container['lang'];
    }

    /**
     * Sets lang
     *
     * @param string|null $lang The main language spoken in the country.
     *
     * @return $this
     */
    public function setLang(?string $lang): static
    {
        if (is_null($lang)) {
            throw new InvalidArgumentException('non-nullable lang cannot be null');
        }
        $this->container['lang'] = $lang;

        return $this;
    }

    /**
     * Gets is_country_state_mandatory
     *
     * @return bool|null
     */
    public function getIsCountryStateMandatory(): ?bool
    {
        return $this->container['is_country_state_mandatory'];
    }

    /**
     * Sets is_country_state_mandatory
     *
     * @param bool|null $is_country_state_mandatory Flag that states if a country state is mandatory for the country.
     *
     * @return $this
     */
    public function setIsCountryStateMandatory(?bool $is_country_state_mandatory): static
    {
        if (is_null($is_country_state_mandatory)) {
            throw new InvalidArgumentException('non-nullable is_country_state_mandatory cannot be null');
        }
        $this->container['is_country_state_mandatory'] = $is_country_state_mandatory;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


