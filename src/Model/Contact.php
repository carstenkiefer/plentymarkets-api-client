<?php
/**
 * Contact
 *
 * PHP version 8.1
 *
 * @package  ck/plenty-client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ck/plenty-client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use ck/plenty-client\ObjectSerializer;

/**
 * Contact Class Doc Comment
 *
 * @package  ck/plenty-client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class Contact implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Contact';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'int',
        'external_id' => 'string',
        'number' => 'string',
        'type_id' => 'int',
        'first_name' => 'string',
        'last_name' => 'string',
        'full_name' => 'string',
        'email' => 'string',
        'secondary_email' => 'string',
        'gender' => 'string',
        'title' => 'string',
        'form_of_address' => 'string',
        'newsletter_allowance_at' => 'string',
        'class_id' => 'int',
        'blocked' => 'int',
        'rating' => 'int',
        'book_account' => 'string',
        'lang' => 'string',
        'referrer_id' => 'float',
        'plenty_id' => 'int',
        'user_id' => 'int',
        'birthday_at' => 'string',
        'last_login_at' => 'string',
        'last_login_at_timestamp' => 'string',
        'last_order_at' => 'string',
        'created_at' => 'string',
        'updated_at' => 'string',
        'private_phone' => 'string',
        'private_fax' => 'string',
        'private_mobile' => 'string',
        'ebay_name' => 'string',
        'paypal_email' => 'string',
        'paypal_payer_id' => 'string',
        'klarna_personal_id' => 'string',
        'dhl_post_ident' => 'string',
        'forum_username' => 'string',
        'forum_group_id' => 'string',
        'single_access' => 'string',
        'contact_person' => 'string',
        'marketplace_partner' => 'string',
        'valuta' => 'int',
        'discount_days' => 'int',
        'discount_percent' => 'float',
        'time_for_payment_allowed_days' => 'int',
        'sales_representative_contact_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => null,
        'external_id' => null,
        'number' => null,
        'type_id' => null,
        'first_name' => null,
        'last_name' => null,
        'full_name' => null,
        'email' => null,
        'secondary_email' => null,
        'gender' => null,
        'title' => null,
        'form_of_address' => null,
        'newsletter_allowance_at' => null,
        'class_id' => null,
        'blocked' => null,
        'rating' => null,
        'book_account' => null,
        'lang' => null,
        'referrer_id' => null,
        'plenty_id' => null,
        'user_id' => null,
        'birthday_at' => null,
        'last_login_at' => null,
        'last_login_at_timestamp' => null,
        'last_order_at' => null,
        'created_at' => null,
        'updated_at' => null,
        'private_phone' => null,
        'private_fax' => null,
        'private_mobile' => null,
        'ebay_name' => null,
        'paypal_email' => null,
        'paypal_payer_id' => null,
        'klarna_personal_id' => null,
        'dhl_post_ident' => null,
        'forum_username' => null,
        'forum_group_id' => null,
        'single_access' => null,
        'contact_person' => null,
        'marketplace_partner' => null,
        'valuta' => null,
        'discount_days' => null,
        'discount_percent' => null,
        'time_for_payment_allowed_days' => null,
        'sales_representative_contact_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
		'external_id' => false,
		'number' => false,
		'type_id' => false,
		'first_name' => false,
		'last_name' => false,
		'full_name' => false,
		'email' => false,
		'secondary_email' => false,
		'gender' => false,
		'title' => false,
		'form_of_address' => false,
		'newsletter_allowance_at' => false,
		'class_id' => false,
		'blocked' => false,
		'rating' => false,
		'book_account' => false,
		'lang' => false,
		'referrer_id' => false,
		'plenty_id' => false,
		'user_id' => false,
		'birthday_at' => false,
		'last_login_at' => false,
		'last_login_at_timestamp' => false,
		'last_order_at' => false,
		'created_at' => false,
		'updated_at' => false,
		'private_phone' => false,
		'private_fax' => false,
		'private_mobile' => false,
		'ebay_name' => false,
		'paypal_email' => false,
		'paypal_payer_id' => false,
		'klarna_personal_id' => false,
		'dhl_post_ident' => false,
		'forum_username' => false,
		'forum_group_id' => false,
		'single_access' => false,
		'contact_person' => false,
		'marketplace_partner' => false,
		'valuta' => false,
		'discount_days' => false,
		'discount_percent' => false,
		'time_for_payment_allowed_days' => false,
		'sales_representative_contact_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'external_id' => 'externalId',
        'number' => 'number',
        'type_id' => 'typeId',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'full_name' => 'fullName',
        'email' => 'email',
        'secondary_email' => 'secondaryEmail',
        'gender' => 'gender',
        'title' => 'title',
        'form_of_address' => 'formOfAddress',
        'newsletter_allowance_at' => 'newsletterAllowanceAt',
        'class_id' => 'classId',
        'blocked' => 'blocked',
        'rating' => 'rating',
        'book_account' => 'bookAccount',
        'lang' => 'lang',
        'referrer_id' => 'referrerId',
        'plenty_id' => 'plentyId',
        'user_id' => 'userId',
        'birthday_at' => 'birthdayAt',
        'last_login_at' => 'lastLoginAt',
        'last_login_at_timestamp' => 'lastLoginAtTimestamp',
        'last_order_at' => 'lastOrderAt',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt',
        'private_phone' => 'privatePhone',
        'private_fax' => 'privateFax',
        'private_mobile' => 'privateMobile',
        'ebay_name' => 'ebayName',
        'paypal_email' => 'paypalEmail',
        'paypal_payer_id' => 'paypalPayerId',
        'klarna_personal_id' => 'klarnaPersonalId',
        'dhl_post_ident' => 'dhlPostIdent',
        'forum_username' => 'forumUsername',
        'forum_group_id' => 'forumGroupId',
        'single_access' => 'singleAccess',
        'contact_person' => 'contactPerson',
        'marketplace_partner' => 'marketplacePartner',
        'valuta' => 'valuta',
        'discount_days' => 'discountDays',
        'discount_percent' => 'discountPercent',
        'time_for_payment_allowed_days' => 'timeForPaymentAllowedDays',
        'sales_representative_contact_id' => 'salesRepresentativeContactId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'external_id' => 'setExternalId',
        'number' => 'setNumber',
        'type_id' => 'setTypeId',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'full_name' => 'setFullName',
        'email' => 'setEmail',
        'secondary_email' => 'setSecondaryEmail',
        'gender' => 'setGender',
        'title' => 'setTitle',
        'form_of_address' => 'setFormOfAddress',
        'newsletter_allowance_at' => 'setNewsletterAllowanceAt',
        'class_id' => 'setClassId',
        'blocked' => 'setBlocked',
        'rating' => 'setRating',
        'book_account' => 'setBookAccount',
        'lang' => 'setLang',
        'referrer_id' => 'setReferrerId',
        'plenty_id' => 'setPlentyId',
        'user_id' => 'setUserId',
        'birthday_at' => 'setBirthdayAt',
        'last_login_at' => 'setLastLoginAt',
        'last_login_at_timestamp' => 'setLastLoginAtTimestamp',
        'last_order_at' => 'setLastOrderAt',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'private_phone' => 'setPrivatePhone',
        'private_fax' => 'setPrivateFax',
        'private_mobile' => 'setPrivateMobile',
        'ebay_name' => 'setEbayName',
        'paypal_email' => 'setPaypalEmail',
        'paypal_payer_id' => 'setPaypalPayerId',
        'klarna_personal_id' => 'setKlarnaPersonalId',
        'dhl_post_ident' => 'setDhlPostIdent',
        'forum_username' => 'setForumUsername',
        'forum_group_id' => 'setForumGroupId',
        'single_access' => 'setSingleAccess',
        'contact_person' => 'setContactPerson',
        'marketplace_partner' => 'setMarketplacePartner',
        'valuta' => 'setValuta',
        'discount_days' => 'setDiscountDays',
        'discount_percent' => 'setDiscountPercent',
        'time_for_payment_allowed_days' => 'setTimeForPaymentAllowedDays',
        'sales_representative_contact_id' => 'setSalesRepresentativeContactId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'external_id' => 'getExternalId',
        'number' => 'getNumber',
        'type_id' => 'getTypeId',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'full_name' => 'getFullName',
        'email' => 'getEmail',
        'secondary_email' => 'getSecondaryEmail',
        'gender' => 'getGender',
        'title' => 'getTitle',
        'form_of_address' => 'getFormOfAddress',
        'newsletter_allowance_at' => 'getNewsletterAllowanceAt',
        'class_id' => 'getClassId',
        'blocked' => 'getBlocked',
        'rating' => 'getRating',
        'book_account' => 'getBookAccount',
        'lang' => 'getLang',
        'referrer_id' => 'getReferrerId',
        'plenty_id' => 'getPlentyId',
        'user_id' => 'getUserId',
        'birthday_at' => 'getBirthdayAt',
        'last_login_at' => 'getLastLoginAt',
        'last_login_at_timestamp' => 'getLastLoginAtTimestamp',
        'last_order_at' => 'getLastOrderAt',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'private_phone' => 'getPrivatePhone',
        'private_fax' => 'getPrivateFax',
        'private_mobile' => 'getPrivateMobile',
        'ebay_name' => 'getEbayName',
        'paypal_email' => 'getPaypalEmail',
        'paypal_payer_id' => 'getPaypalPayerId',
        'klarna_personal_id' => 'getKlarnaPersonalId',
        'dhl_post_ident' => 'getDhlPostIdent',
        'forum_username' => 'getForumUsername',
        'forum_group_id' => 'getForumGroupId',
        'single_access' => 'getSingleAccess',
        'contact_person' => 'getContactPerson',
        'marketplace_partner' => 'getMarketplacePartner',
        'valuta' => 'getValuta',
        'discount_days' => 'getDiscountDays',
        'discount_percent' => 'getDiscountPercent',
        'time_for_payment_allowed_days' => 'getTimeForPaymentAllowedDays',
        'sales_representative_contact_id' => 'getSalesRepresentativeContactId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('external_id', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('type_id', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('full_name', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('secondary_email', $data ?? [], null);
        $this->setIfExists('gender', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('form_of_address', $data ?? [], null);
        $this->setIfExists('newsletter_allowance_at', $data ?? [], null);
        $this->setIfExists('class_id', $data ?? [], null);
        $this->setIfExists('blocked', $data ?? [], null);
        $this->setIfExists('rating', $data ?? [], null);
        $this->setIfExists('book_account', $data ?? [], null);
        $this->setIfExists('lang', $data ?? [], null);
        $this->setIfExists('referrer_id', $data ?? [], null);
        $this->setIfExists('plenty_id', $data ?? [], null);
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('birthday_at', $data ?? [], null);
        $this->setIfExists('last_login_at', $data ?? [], null);
        $this->setIfExists('last_login_at_timestamp', $data ?? [], null);
        $this->setIfExists('last_order_at', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('private_phone', $data ?? [], null);
        $this->setIfExists('private_fax', $data ?? [], null);
        $this->setIfExists('private_mobile', $data ?? [], null);
        $this->setIfExists('ebay_name', $data ?? [], null);
        $this->setIfExists('paypal_email', $data ?? [], null);
        $this->setIfExists('paypal_payer_id', $data ?? [], null);
        $this->setIfExists('klarna_personal_id', $data ?? [], null);
        $this->setIfExists('dhl_post_ident', $data ?? [], null);
        $this->setIfExists('forum_username', $data ?? [], null);
        $this->setIfExists('forum_group_id', $data ?? [], null);
        $this->setIfExists('single_access', $data ?? [], null);
        $this->setIfExists('contact_person', $data ?? [], null);
        $this->setIfExists('marketplace_partner', $data ?? [], null);
        $this->setIfExists('valuta', $data ?? [], null);
        $this->setIfExists('discount_days', $data ?? [], null);
        $this->setIfExists('discount_percent', $data ?? [], null);
        $this->setIfExists('time_for_payment_allowed_days', $data ?? [], null);
        $this->setIfExists('sales_representative_contact_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The ID of the contact
     *
     * @return $this
     */
    public function setId(?int $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId(): ?string
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id The external ID of the contact
     *
     * @return $this
     */
    public function setExternalId(?string $external_id): static
    {
        if (is_null($external_id)) {
            throw new InvalidArgumentException('non-nullable external_id cannot be null');
        }
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string|null
     */
    public function getNumber(): ?string
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string|null $number The number of the contact (previous customer number)
     *
     * @return $this
     */
    public function setNumber(?string $number): static
    {
        if (is_null($number)) {
            throw new InvalidArgumentException('non-nullable number cannot be null');
        }
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets type_id
     *
     * @return int|null
     */
    public function getTypeId(): ?int
    {
        return $this->container['type_id'];
    }

    /**
     * Sets type_id
     *
     * @param int|null $type_id The ID of the contact type
     *
     * @return $this
     */
    public function setTypeId(?int $type_id): static
    {
        if (is_null($type_id)) {
            throw new InvalidArgumentException('non-nullable type_id cannot be null');
        }
        $this->container['type_id'] = $type_id;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName(): ?string
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name The first name of the contact
     *
     * @return $this
     */
    public function setFirstName(?string $first_name): static
    {
        if (is_null($first_name)) {
            throw new InvalidArgumentException('non-nullable first_name cannot be null');
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName(): ?string
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name The last name of the contact
     *
     * @return $this
     */
    public function setLastName(?string $last_name): static
    {
        if (is_null($last_name)) {
            throw new InvalidArgumentException('non-nullable last_name cannot be null');
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets full_name
     *
     * @return string|null
     */
    public function getFullName(): ?string
    {
        return $this->container['full_name'];
    }

    /**
     * Sets full_name
     *
     * @param string|null $full_name The full name of the contact. A concatenation of first and last name.
     *
     * @return $this
     */
    public function setFullName(?string $full_name): static
    {
        if (is_null($full_name)) {
            throw new InvalidArgumentException('non-nullable full_name cannot be null');
        }
        $this->container['full_name'] = $full_name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail(): ?string
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email The private email address of the contact
     *
     * @return $this
     */
    public function setEmail(?string $email): static
    {
        if (is_null($email)) {
            throw new InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets secondary_email
     *
     * @return string|null
     */
    public function getSecondaryEmail(): ?string
    {
        return $this->container['secondary_email'];
    }

    /**
     * Sets secondary_email
     *
     * @param string|null $secondary_email The secondary private email address of the contact
     *
     * @return $this
     */
    public function setSecondaryEmail(?string $secondary_email): static
    {
        if (is_null($secondary_email)) {
            throw new InvalidArgumentException('non-nullable secondary_email cannot be null');
        }
        $this->container['secondary_email'] = $secondary_email;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string|null
     */
    public function getGender(): ?string
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string|null $gender The gender of the contact (\"female\", \"male\" or \"diverse\")
     *
     * @return $this
     */
    public function setGender(?string $gender): static
    {
        if (is_null($gender)) {
            throw new InvalidArgumentException('non-nullable gender cannot be null');
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle(): ?string
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title The title of the contact, e.g. a doctorate
     *
     * @return $this
     */
    public function setTitle(?string $title): static
    {
        if (is_null($title)) {
            throw new InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets form_of_address
     *
     * @return string|null
     */
    public function getFormOfAddress(): ?string
    {
        return $this->container['form_of_address'];
    }

    /**
     * Sets form_of_address
     *
     * @param string|null $form_of_address The form of address for the contact
     *
     * @return $this
     */
    public function setFormOfAddress(?string $form_of_address): static
    {
        if (is_null($form_of_address)) {
            throw new InvalidArgumentException('non-nullable form_of_address cannot be null');
        }
        $this->container['form_of_address'] = $form_of_address;

        return $this;
    }

    /**
     * Gets newsletter_allowance_at
     *
     * @return string|null
     */
    public function getNewsletterAllowanceAt(): ?string
    {
        return $this->container['newsletter_allowance_at'];
    }

    /**
     * Sets newsletter_allowance_at
     *
     * @param string|null $newsletter_allowance_at The time the contact registered for the newsletter as unix timestamp
     *
     * @return $this
     */
    public function setNewsletterAllowanceAt(?string $newsletter_allowance_at): static
    {
        if (is_null($newsletter_allowance_at)) {
            throw new InvalidArgumentException('non-nullable newsletter_allowance_at cannot be null');
        }
        $this->container['newsletter_allowance_at'] = $newsletter_allowance_at;

        return $this;
    }

    /**
     * Gets class_id
     *
     * @return int|null
     */
    public function getClassId(): ?int
    {
        return $this->container['class_id'];
    }

    /**
     * Sets class_id
     *
     * @param int|null $class_id The ID of the contact class
     *
     * @return $this
     */
    public function setClassId(?int $class_id): static
    {
        if (is_null($class_id)) {
            throw new InvalidArgumentException('non-nullable class_id cannot be null');
        }
        $this->container['class_id'] = $class_id;

        return $this;
    }

    /**
     * Gets blocked
     *
     * @return int|null
     */
    public function getBlocked(): ?int
    {
        return $this->container['blocked'];
    }

    /**
     * Sets blocked
     *
     * @param int|null $blocked The blocked status of the contact. Contacts can be blocked for a specific client (store). Possible values: <ul> <li> 0 = not blocked</li> <li> 1 = blocked</li> </ul>
     *
     * @return $this
     */
    public function setBlocked(?int $blocked): static
    {
        if (is_null($blocked)) {
            throw new InvalidArgumentException('non-nullable blocked cannot be null');
        }
        $this->container['blocked'] = $blocked;

        return $this;
    }

    /**
     * Gets rating
     *
     * @return int|null
     */
    public function getRating(): ?int
    {
        return $this->container['rating'];
    }

    /**
     * Sets rating
     *
     * @param int|null $rating The rating of the contact. This rating is for internal use only. 5 red stars are for the worst and 5 yellow stars for the best rating. Possible values: <ul> <li>-5 = 5 red stars (worst rating)</li> <li>-4 = 4 red stars</li> <li>-3 = 3 red stars</li> <li>-2 = 2 red stars</li> <li>-1 = 1 red star</li> <li>0 = 5 grey stars, no rating saved for the contact</li> <li>1 = 1 yellow star</li> <li>2 = 2 yellow stars</li> <li>3 = 3 yellow stars</li> <li>4 = 4 yellow stars</li> <li>5 = 5 yellow stars (best rating)</li> </ul>
     *
     * @return $this
     */
    public function setRating(?int $rating): static
    {
        if (is_null($rating)) {
            throw new InvalidArgumentException('non-nullable rating cannot be null');
        }
        $this->container['rating'] = $rating;

        return $this;
    }

    /**
     * Gets book_account
     *
     * @return string|null
     */
    public function getBookAccount(): ?string
    {
        return $this->container['book_account'];
    }

    /**
     * Sets book_account
     *
     * @param string|null $book_account The book account (debtor account) of the contact. An additional, separate number that generally corresponds to the customer number or the debtor number in your financial accounting.
     *
     * @return $this
     */
    public function setBookAccount(?string $book_account): static
    {
        if (is_null($book_account)) {
            throw new InvalidArgumentException('non-nullable book_account cannot be null');
        }
        $this->container['book_account'] = $book_account;

        return $this;
    }

    /**
     * Gets lang
     *
     * @return string|null
     */
    public function getLang(): ?string
    {
        return $this->container['lang'];
    }

    /**
     * Sets lang
     *
     * @param string|null $lang The language of the contact
     *
     * @return $this
     */
    public function setLang(?string $lang): static
    {
        if (is_null($lang)) {
            throw new InvalidArgumentException('non-nullable lang cannot be null');
        }
        $this->container['lang'] = $lang;

        return $this;
    }

    /**
     * Gets referrer_id
     *
     * @return float|null
     */
    public function getReferrerId(): ?float
    {
        return $this->container['referrer_id'];
    }

    /**
     * Sets referrer_id
     *
     * @param float|null $referrer_id The origin of the contact
     *
     * @return $this
     */
    public function setReferrerId(?float $referrer_id): static
    {
        if (is_null($referrer_id)) {
            throw new InvalidArgumentException('non-nullable referrer_id cannot be null');
        }
        $this->container['referrer_id'] = $referrer_id;

        return $this;
    }

    /**
     * Gets plenty_id
     *
     * @return int|null
     */
    public function getPlentyId(): ?int
    {
        return $this->container['plenty_id'];
    }

    /**
     * Sets plenty_id
     *
     * @param int|null $plenty_id The client (store) that is assigned to the contact
     *
     * @return $this
     */
    public function setPlentyId(?int $plenty_id): static
    {
        if (is_null($plenty_id)) {
            throw new InvalidArgumentException('non-nullable plenty_id cannot be null');
        }
        $this->container['plenty_id'] = $plenty_id;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int|null
     */
    public function getUserId(): ?int
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int|null $user_id The owner ID of the contact
     *
     * @return $this
     */
    public function setUserId(?int $user_id): static
    {
        if (is_null($user_id)) {
            throw new InvalidArgumentException('non-nullable user_id cannot be null');
        }
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets birthday_at
     *
     * @return string|null
     */
    public function getBirthdayAt(): ?string
    {
        return $this->container['birthday_at'];
    }

    /**
     * Sets birthday_at
     *
     * @param string|null $birthday_at The date of birth of the contact
     *
     * @return $this
     */
    public function setBirthdayAt(?string $birthday_at): static
    {
        if (is_null($birthday_at)) {
            throw new InvalidArgumentException('non-nullable birthday_at cannot be null');
        }
        $this->container['birthday_at'] = $birthday_at;

        return $this;
    }

    /**
     * Gets last_login_at
     *
     * @return string|null
     */
    public function getLastLoginAt(): ?string
    {
        return $this->container['last_login_at'];
    }

    /**
     * Sets last_login_at
     *
     * @param string|null $last_login_at The date of the last login of the contact
     *
     * @return $this
     */
    public function setLastLoginAt(?string $last_login_at): static
    {
        if (is_null($last_login_at)) {
            throw new InvalidArgumentException('non-nullable last_login_at cannot be null');
        }
        $this->container['last_login_at'] = $last_login_at;

        return $this;
    }

    /**
     * Gets last_login_at_timestamp
     *
     * @return string|null
     */
    public function getLastLoginAtTimestamp(): ?string
    {
        return $this->container['last_login_at_timestamp'];
    }

    /**
     * Sets last_login_at_timestamp
     *
     * @param string|null $last_login_at_timestamp The date of the last login of the contact
     *
     * @return $this
     */
    public function setLastLoginAtTimestamp(?string $last_login_at_timestamp): static
    {
        if (is_null($last_login_at_timestamp)) {
            throw new InvalidArgumentException('non-nullable last_login_at_timestamp cannot be null');
        }
        $this->container['last_login_at_timestamp'] = $last_login_at_timestamp;

        return $this;
    }

    /**
     * Gets last_order_at
     *
     * @return string|null
     */
    public function getLastOrderAt(): ?string
    {
        return $this->container['last_order_at'];
    }

    /**
     * Sets last_order_at
     *
     * @param string|null $last_order_at The date of the last order
     *
     * @return $this
     */
    public function setLastOrderAt(?string $last_order_at): static
    {
        if (is_null($last_order_at)) {
            throw new InvalidArgumentException('non-nullable last_order_at cannot be null');
        }
        $this->container['last_order_at'] = $last_order_at;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt(): ?string
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at The date the contact was created
     *
     * @return $this
     */
    public function setCreatedAt(?string $created_at): static
    {
        if (is_null($created_at)) {
            throw new InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt(): ?string
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at The date the contact was last updated
     *
     * @return $this
     */
    public function setUpdatedAt(?string $updated_at): static
    {
        if (is_null($updated_at)) {
            throw new InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets private_phone
     *
     * @return string|null
     */
    public function getPrivatePhone(): ?string
    {
        return $this->container['private_phone'];
    }

    /**
     * Sets private_phone
     *
     * @param string|null $private_phone The private phone number of the contact
     *
     * @return $this
     */
    public function setPrivatePhone(?string $private_phone): static
    {
        if (is_null($private_phone)) {
            throw new InvalidArgumentException('non-nullable private_phone cannot be null');
        }
        $this->container['private_phone'] = $private_phone;

        return $this;
    }

    /**
     * Gets private_fax
     *
     * @return string|null
     */
    public function getPrivateFax(): ?string
    {
        return $this->container['private_fax'];
    }

    /**
     * Sets private_fax
     *
     * @param string|null $private_fax The private fax number of the contact
     *
     * @return $this
     */
    public function setPrivateFax(?string $private_fax): static
    {
        if (is_null($private_fax)) {
            throw new InvalidArgumentException('non-nullable private_fax cannot be null');
        }
        $this->container['private_fax'] = $private_fax;

        return $this;
    }

    /**
     * Gets private_mobile
     *
     * @return string|null
     */
    public function getPrivateMobile(): ?string
    {
        return $this->container['private_mobile'];
    }

    /**
     * Sets private_mobile
     *
     * @param string|null $private_mobile The private mobile phone number of the contact
     *
     * @return $this
     */
    public function setPrivateMobile(?string $private_mobile): static
    {
        if (is_null($private_mobile)) {
            throw new InvalidArgumentException('non-nullable private_mobile cannot be null');
        }
        $this->container['private_mobile'] = $private_mobile;

        return $this;
    }

    /**
     * Gets ebay_name
     *
     * @return string|null
     */
    public function getEbayName(): ?string
    {
        return $this->container['ebay_name'];
    }

    /**
     * Sets ebay_name
     *
     * @param string|null $ebay_name The eBay account name of the contact
     *
     * @return $this
     */
    public function setEbayName(?string $ebay_name): static
    {
        if (is_null($ebay_name)) {
            throw new InvalidArgumentException('non-nullable ebay_name cannot be null');
        }
        $this->container['ebay_name'] = $ebay_name;

        return $this;
    }

    /**
     * Gets paypal_email
     *
     * @return string|null
     */
    public function getPaypalEmail(): ?string
    {
        return $this->container['paypal_email'];
    }

    /**
     * Sets paypal_email
     *
     * @param string|null $paypal_email The email address of the PayPal account of the contact
     *
     * @return $this
     */
    public function setPaypalEmail(?string $paypal_email): static
    {
        if (is_null($paypal_email)) {
            throw new InvalidArgumentException('non-nullable paypal_email cannot be null');
        }
        $this->container['paypal_email'] = $paypal_email;

        return $this;
    }

    /**
     * Gets paypal_payer_id
     *
     * @return string|null
     */
    public function getPaypalPayerId(): ?string
    {
        return $this->container['paypal_payer_id'];
    }

    /**
     * Sets paypal_payer_id
     *
     * @param string|null $paypal_payer_id The PayPal payer id of the contact
     *
     * @return $this
     */
    public function setPaypalPayerId(?string $paypal_payer_id): static
    {
        if (is_null($paypal_payer_id)) {
            throw new InvalidArgumentException('non-nullable paypal_payer_id cannot be null');
        }
        $this->container['paypal_payer_id'] = $paypal_payer_id;

        return $this;
    }

    /**
     * Gets klarna_personal_id
     *
     * @return string|null
     */
    public function getKlarnaPersonalId(): ?string
    {
        return $this->container['klarna_personal_id'];
    }

    /**
     * Sets klarna_personal_id
     *
     * @param string|null $klarna_personal_id The Klarna personal id of the contact
     *
     * @return $this
     */
    public function setKlarnaPersonalId(?string $klarna_personal_id): static
    {
        if (is_null($klarna_personal_id)) {
            throw new InvalidArgumentException('non-nullable klarna_personal_id cannot be null');
        }
        $this->container['klarna_personal_id'] = $klarna_personal_id;

        return $this;
    }

    /**
     * Gets dhl_post_ident
     *
     * @return string|null
     */
    public function getDhlPostIdent(): ?string
    {
        return $this->container['dhl_post_ident'];
    }

    /**
     * Sets dhl_post_ident
     *
     * @param string|null $dhl_post_ident The DHL PostIdent of the contact
     *
     * @return $this
     */
    public function setDhlPostIdent(?string $dhl_post_ident): static
    {
        if (is_null($dhl_post_ident)) {
            throw new InvalidArgumentException('non-nullable dhl_post_ident cannot be null');
        }
        $this->container['dhl_post_ident'] = $dhl_post_ident;

        return $this;
    }

    /**
     * Gets forum_username
     *
     * @return string|null
     */
    public function getForumUsername(): ?string
    {
        return $this->container['forum_username'];
    }

    /**
     * Sets forum_username
     *
     * @param string|null $forum_username The user name of the contact in the forum
     *
     * @return $this
     */
    public function setForumUsername(?string $forum_username): static
    {
        if (is_null($forum_username)) {
            throw new InvalidArgumentException('non-nullable forum_username cannot be null');
        }
        $this->container['forum_username'] = $forum_username;

        return $this;
    }

    /**
     * Gets forum_group_id
     *
     * @return string|null
     */
    public function getForumGroupId(): ?string
    {
        return $this->container['forum_group_id'];
    }

    /**
     * Sets forum_group_id
     *
     * @param string|null $forum_group_id The ID of the forum group that is assigned to the contact
     *
     * @return $this
     */
    public function setForumGroupId(?string $forum_group_id): static
    {
        if (is_null($forum_group_id)) {
            throw new InvalidArgumentException('non-nullable forum_group_id cannot be null');
        }
        $this->container['forum_group_id'] = $forum_group_id;

        return $this;
    }

    /**
     * Gets single_access
     *
     * @return string|null
     */
    public function getSingleAccess(): ?string
    {
        return $this->container['single_access'];
    }

    /**
     * Sets single_access
     *
     * @param string|null $single_access The access type of the contact
     *
     * @return $this
     */
    public function setSingleAccess(?string $single_access): static
    {
        if (is_null($single_access)) {
            throw new InvalidArgumentException('non-nullable single_access cannot be null');
        }
        $this->container['single_access'] = $single_access;

        return $this;
    }

    /**
     * Gets contact_person
     *
     * @return string|null
     */
    public function getContactPerson(): ?string
    {
        return $this->container['contact_person'];
    }

    /**
     * Sets contact_person
     *
     * @param string|null $contact_person The contact person of the contact
     *
     * @return $this
     */
    public function setContactPerson(?string $contact_person): static
    {
        if (is_null($contact_person)) {
            throw new InvalidArgumentException('non-nullable contact_person cannot be null');
        }
        $this->container['contact_person'] = $contact_person;

        return $this;
    }

    /**
     * Gets marketplace_partner
     *
     * @return string|null
     */
    public function getMarketplacePartner(): ?string
    {
        return $this->container['marketplace_partner'];
    }

    /**
     * Sets marketplace_partner
     *
     * @param string|null $marketplace_partner The marketplace partner status of the contact
     *
     * @return $this
     */
    public function setMarketplacePartner(?string $marketplace_partner): static
    {
        if (is_null($marketplace_partner)) {
            throw new InvalidArgumentException('non-nullable marketplace_partner cannot be null');
        }
        $this->container['marketplace_partner'] = $marketplace_partner;

        return $this;
    }

    /**
     * Gets valuta
     *
     * @return int|null
     */
    public function getValuta(): ?int
    {
        return $this->container['valuta'];
    }

    /**
     * Sets valuta
     *
     * @param int|null $valuta The foreign currency of the contact
     *
     * @return $this
     */
    public function setValuta(?int $valuta): static
    {
        if (is_null($valuta)) {
            throw new InvalidArgumentException('non-nullable valuta cannot be null');
        }
        $this->container['valuta'] = $valuta;

        return $this;
    }

    /**
     * Gets discount_days
     *
     * @return int|null
     */
    public function getDiscountDays(): ?int
    {
        return $this->container['discount_days'];
    }

    /**
     * Sets discount_days
     *
     * @param int|null $discount_days The early payment discount period in days specified for the account
     *
     * @return $this
     */
    public function setDiscountDays(?int $discount_days): static
    {
        if (is_null($discount_days)) {
            throw new InvalidArgumentException('non-nullable discount_days cannot be null');
        }
        $this->container['discount_days'] = $discount_days;

        return $this;
    }

    /**
     * Gets discount_percent
     *
     * @return float|null
     */
    public function getDiscountPercent(): ?float
    {
        return $this->container['discount_percent'];
    }

    /**
     * Sets discount_percent
     *
     * @param float|null $discount_percent The early payment discount in percent specified for the account
     *
     * @return $this
     */
    public function setDiscountPercent(?float $discount_percent): static
    {
        if (is_null($discount_percent)) {
            throw new InvalidArgumentException('non-nullable discount_percent cannot be null');
        }
        $this->container['discount_percent'] = $discount_percent;

        return $this;
    }

    /**
     * Gets time_for_payment_allowed_days
     *
     * @return int|null
     */
    public function getTimeForPaymentAllowedDays(): ?int
    {
        return $this->container['time_for_payment_allowed_days'];
    }

    /**
     * Sets time_for_payment_allowed_days
     *
     * @param int|null $time_for_payment_allowed_days The payment due date in days specified for the account
     *
     * @return $this
     */
    public function setTimeForPaymentAllowedDays(?int $time_for_payment_allowed_days): static
    {
        if (is_null($time_for_payment_allowed_days)) {
            throw new InvalidArgumentException('non-nullable time_for_payment_allowed_days cannot be null');
        }
        $this->container['time_for_payment_allowed_days'] = $time_for_payment_allowed_days;

        return $this;
    }

    /**
     * Gets sales_representative_contact_id
     *
     * @return int|null
     */
    public function getSalesRepresentativeContactId(): ?int
    {
        return $this->container['sales_representative_contact_id'];
    }

    /**
     * Sets sales_representative_contact_id
     *
     * @param int|null $sales_representative_contact_id The salesRepresentative ID of the contact
     *
     * @return $this
     */
    public function setSalesRepresentativeContactId(?int $sales_representative_contact_id): static
    {
        if (is_null($sales_representative_contact_id)) {
            throw new InvalidArgumentException('non-nullable sales_representative_contact_id cannot be null');
        }
        $this->container['sales_representative_contact_id'] = $sales_representative_contact_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


