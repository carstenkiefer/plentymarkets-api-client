<?php
/**
 * Wizard
 *
 * PHP version 8.1
 *
 * @package  ck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ck\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use ck\ObjectSerializer;

/**
 * Wizard Class Doc Comment
 *
 * @package  ck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class Wizard implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Wizard';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'title' => 'string',
        'key' => 'string',
        'settings_handler_class' => 'string',
        'short_description' => 'string',
        'translation_key' => 'string',
        'delete_confirmation_text' => 'string',
        'topics' => 'object[]',
        'steps' => 'object[]',
        'priority' => 'int',
        'relevance' => 'string',
        'keywords' => 'object[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'title' => null,
        'key' => null,
        'settings_handler_class' => null,
        'short_description' => null,
        'translation_key' => null,
        'delete_confirmation_text' => null,
        'topics' => null,
        'steps' => null,
        'priority' => null,
        'relevance' => null,
        'keywords' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'title' => false,
		'key' => false,
		'settings_handler_class' => false,
		'short_description' => false,
		'translation_key' => false,
		'delete_confirmation_text' => false,
		'topics' => false,
		'steps' => false,
		'priority' => false,
		'relevance' => false,
		'keywords' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'title' => 'title',
        'key' => 'key',
        'settings_handler_class' => 'settingsHandlerClass',
        'short_description' => 'shortDescription',
        'translation_key' => 'translationKey',
        'delete_confirmation_text' => 'deleteConfirmationText',
        'topics' => 'topics',
        'steps' => 'steps',
        'priority' => 'priority',
        'relevance' => 'relevance',
        'keywords' => 'keywords'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'title' => 'setTitle',
        'key' => 'setKey',
        'settings_handler_class' => 'setSettingsHandlerClass',
        'short_description' => 'setShortDescription',
        'translation_key' => 'setTranslationKey',
        'delete_confirmation_text' => 'setDeleteConfirmationText',
        'topics' => 'setTopics',
        'steps' => 'setSteps',
        'priority' => 'setPriority',
        'relevance' => 'setRelevance',
        'keywords' => 'setKeywords'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'title' => 'getTitle',
        'key' => 'getKey',
        'settings_handler_class' => 'getSettingsHandlerClass',
        'short_description' => 'getShortDescription',
        'translation_key' => 'getTranslationKey',
        'delete_confirmation_text' => 'getDeleteConfirmationText',
        'topics' => 'getTopics',
        'steps' => 'getSteps',
        'priority' => 'getPriority',
        'relevance' => 'getRelevance',
        'keywords' => 'getKeywords'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('key', $data ?? [], null);
        $this->setIfExists('settings_handler_class', $data ?? [], null);
        $this->setIfExists('short_description', $data ?? [], null);
        $this->setIfExists('translation_key', $data ?? [], null);
        $this->setIfExists('delete_confirmation_text', $data ?? [], null);
        $this->setIfExists('topics', $data ?? [], null);
        $this->setIfExists('steps', $data ?? [], null);
        $this->setIfExists('priority', $data ?? [], null);
        $this->setIfExists('relevance', $data ?? [], null);
        $this->setIfExists('keywords', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle(): ?string
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title The title
     *
     * @return $this
     */
    public function setTitle(?string $title): static
    {
        if (is_null($title)) {
            throw new InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets key
     *
     * @return string|null
     */
    public function getKey(): ?string
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string|null $key The wizard's key
     *
     * @return $this
     */
    public function setKey(?string $key): static
    {
        if (is_null($key)) {
            throw new InvalidArgumentException('non-nullable key cannot be null');
        }
        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets settings_handler_class
     *
     * @return string|null
     */
    public function getSettingsHandlerClass(): ?string
    {
        return $this->container['settings_handler_class'];
    }

    /**
     * Sets settings_handler_class
     *
     * @param string|null $settings_handler_class Settings handler
     *
     * @return $this
     */
    public function setSettingsHandlerClass(?string $settings_handler_class): static
    {
        if (is_null($settings_handler_class)) {
            throw new InvalidArgumentException('non-nullable settings_handler_class cannot be null');
        }
        $this->container['settings_handler_class'] = $settings_handler_class;

        return $this;
    }

    /**
     * Gets short_description
     *
     * @return string|null
     */
    public function getShortDescription(): ?string
    {
        return $this->container['short_description'];
    }

    /**
     * Sets short_description
     *
     * @param string|null $short_description The short description
     *
     * @return $this
     */
    public function setShortDescription(?string $short_description): static
    {
        if (is_null($short_description)) {
            throw new InvalidArgumentException('non-nullable short_description cannot be null');
        }
        $this->container['short_description'] = $short_description;

        return $this;
    }

    /**
     * Gets translation_key
     *
     * @return string|null
     */
    public function getTranslationKey(): ?string
    {
        return $this->container['translation_key'];
    }

    /**
     * Sets translation_key
     *
     * @param string|null $translation_key The translation key
     *
     * @return $this
     */
    public function setTranslationKey(?string $translation_key): static
    {
        if (is_null($translation_key)) {
            throw new InvalidArgumentException('non-nullable translation_key cannot be null');
        }
        $this->container['translation_key'] = $translation_key;

        return $this;
    }

    /**
     * Gets delete_confirmation_text
     *
     * @return string|null
     */
    public function getDeleteConfirmationText(): ?string
    {
        return $this->container['delete_confirmation_text'];
    }

    /**
     * Sets delete_confirmation_text
     *
     * @param string|null $delete_confirmation_text Delete confirmation Text in deletion overlay
     *
     * @return $this
     */
    public function setDeleteConfirmationText(?string $delete_confirmation_text): static
    {
        if (is_null($delete_confirmation_text)) {
            throw new InvalidArgumentException('non-nullable delete_confirmation_text cannot be null');
        }
        $this->container['delete_confirmation_text'] = $delete_confirmation_text;

        return $this;
    }

    /**
     * Gets topics
     *
     * @return object[]|null
     */
    public function getTopics(): ?array
    {
        return $this->container['topics'];
    }

    /**
     * Sets topics
     *
     * @param object[]|null $topics The topics
     *
     * @return $this
     */
    public function setTopics(?array $topics): static
    {
        if (is_null($topics)) {
            throw new InvalidArgumentException('non-nullable topics cannot be null');
        }
        $this->container['topics'] = $topics;

        return $this;
    }

    /**
     * Gets steps
     *
     * @return object[]|null
     */
    public function getSteps(): ?array
    {
        return $this->container['steps'];
    }

    /**
     * Sets steps
     *
     * @param object[]|null $steps Wizard's structure
     *
     * @return $this
     */
    public function setSteps(?array $steps): static
    {
        if (is_null($steps)) {
            throw new InvalidArgumentException('non-nullable steps cannot be null');
        }
        $this->container['steps'] = $steps;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int|null
     */
    public function getPriority(): ?int
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int|null $priority Wizard's listing priority in the overview
     *
     * @return $this
     */
    public function setPriority(?int $priority): static
    {
        if (is_null($priority)) {
            throw new InvalidArgumentException('non-nullable priority cannot be null');
        }
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets relevance
     *
     * @return string|null
     */
    public function getRelevance(): ?string
    {
        return $this->container['relevance'];
    }

    /**
     * Sets relevance
     *
     * @param string|null $relevance Wizard's level of relevance
     *
     * @return $this
     */
    public function setRelevance(?string $relevance): static
    {
        if (is_null($relevance)) {
            throw new InvalidArgumentException('non-nullable relevance cannot be null');
        }
        $this->container['relevance'] = $relevance;

        return $this;
    }

    /**
     * Gets keywords
     *
     * @return object[]|null
     */
    public function getKeywords(): ?array
    {
        return $this->container['keywords'];
    }

    /**
     * Sets keywords
     *
     * @param object[]|null $keywords Keywords describing the wizard
     *
     * @return $this
     */
    public function setKeywords(?array $keywords): static
    {
        if (is_null($keywords)) {
            throw new InvalidArgumentException('non-nullable keywords cannot be null');
        }
        $this->container['keywords'] = $keywords;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


