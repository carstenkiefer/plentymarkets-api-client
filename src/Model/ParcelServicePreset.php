<?php
/**
 * ParcelServicePreset
 *
 * PHP version 8.1
 *
 * @package  ck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ck\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use ck\ObjectSerializer;

/**
 * ParcelServicePreset Class Doc Comment
 *
 * @package  ck
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ParcelServicePreset implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ParcelServicePreset';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'int',
        'parcel_service_id' => 'int',
        'backend_name' => 'string',
        'flag' => 'int',
        'priority' => 'int',
        'category' => 'int',
        'use_article_porto' => 'int',
        'is_insured' => 'int',
        'is_express' => 'int',
        'is_postident' => 'int',
        'is_default_enabled' => 'int',
        'island_fee' => 'float',
        'is_cod' => 'int',
        'supported_multishop' => 'object[]',
        'supported_referrer' => 'object[]',
        'subreferrer_support' => 'object[]',
        'excluded_payment_methods' => 'object[]',
        'excluded_customer_groups' => 'object[]',
        'shipping_group' => 'string',
        'dispatch_identifier' => 'string',
        'auction_type' => 'int',
        'supported_loyalty_programs' => 'object[]',
        'updated_at' => 'string',
        'show_data_privacy_agreement_hint' => 'int',
        'transmit_privacy_rule' => 'string',
        'alternative_email' => 'string',
        'alternative_phone' => 'string',
        'is_parcel_box' => 'int',
        'is_post_office' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => null,
        'parcel_service_id' => null,
        'backend_name' => null,
        'flag' => null,
        'priority' => null,
        'category' => null,
        'use_article_porto' => null,
        'is_insured' => null,
        'is_express' => null,
        'is_postident' => null,
        'is_default_enabled' => null,
        'island_fee' => null,
        'is_cod' => null,
        'supported_multishop' => null,
        'supported_referrer' => null,
        'subreferrer_support' => null,
        'excluded_payment_methods' => null,
        'excluded_customer_groups' => null,
        'shipping_group' => null,
        'dispatch_identifier' => null,
        'auction_type' => null,
        'supported_loyalty_programs' => null,
        'updated_at' => null,
        'show_data_privacy_agreement_hint' => null,
        'transmit_privacy_rule' => null,
        'alternative_email' => null,
        'alternative_phone' => null,
        'is_parcel_box' => null,
        'is_post_office' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
		'parcel_service_id' => false,
		'backend_name' => false,
		'flag' => false,
		'priority' => false,
		'category' => false,
		'use_article_porto' => false,
		'is_insured' => false,
		'is_express' => false,
		'is_postident' => false,
		'is_default_enabled' => false,
		'island_fee' => false,
		'is_cod' => false,
		'supported_multishop' => false,
		'supported_referrer' => false,
		'subreferrer_support' => false,
		'excluded_payment_methods' => false,
		'excluded_customer_groups' => false,
		'shipping_group' => false,
		'dispatch_identifier' => false,
		'auction_type' => false,
		'supported_loyalty_programs' => false,
		'updated_at' => false,
		'show_data_privacy_agreement_hint' => false,
		'transmit_privacy_rule' => false,
		'alternative_email' => false,
		'alternative_phone' => false,
		'is_parcel_box' => false,
		'is_post_office' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'parcel_service_id' => 'parcelServiceId',
        'backend_name' => 'backendName',
        'flag' => 'flag',
        'priority' => 'priority',
        'category' => 'category',
        'use_article_porto' => 'useArticlePorto',
        'is_insured' => 'isInsured',
        'is_express' => 'isExpress',
        'is_postident' => 'isPostident',
        'is_default_enabled' => 'isDefaultEnabled',
        'island_fee' => 'islandFee',
        'is_cod' => 'isCod',
        'supported_multishop' => 'supportedMultishop',
        'supported_referrer' => 'supportedReferrer',
        'subreferrer_support' => 'subreferrerSupport',
        'excluded_payment_methods' => 'excludedPaymentMethods',
        'excluded_customer_groups' => 'excludedCustomerGroups',
        'shipping_group' => 'shippingGroup',
        'dispatch_identifier' => 'dispatchIdentifier',
        'auction_type' => 'auctionType',
        'supported_loyalty_programs' => 'supportedLoyaltyPrograms',
        'updated_at' => 'updatedAt',
        'show_data_privacy_agreement_hint' => 'showDataPrivacyAgreementHint',
        'transmit_privacy_rule' => 'transmitPrivacyRule',
        'alternative_email' => 'alternativeEmail',
        'alternative_phone' => 'alternativePhone',
        'is_parcel_box' => 'isParcelBox',
        'is_post_office' => 'isPostOffice'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'parcel_service_id' => 'setParcelServiceId',
        'backend_name' => 'setBackendName',
        'flag' => 'setFlag',
        'priority' => 'setPriority',
        'category' => 'setCategory',
        'use_article_porto' => 'setUseArticlePorto',
        'is_insured' => 'setIsInsured',
        'is_express' => 'setIsExpress',
        'is_postident' => 'setIsPostident',
        'is_default_enabled' => 'setIsDefaultEnabled',
        'island_fee' => 'setIslandFee',
        'is_cod' => 'setIsCod',
        'supported_multishop' => 'setSupportedMultishop',
        'supported_referrer' => 'setSupportedReferrer',
        'subreferrer_support' => 'setSubreferrerSupport',
        'excluded_payment_methods' => 'setExcludedPaymentMethods',
        'excluded_customer_groups' => 'setExcludedCustomerGroups',
        'shipping_group' => 'setShippingGroup',
        'dispatch_identifier' => 'setDispatchIdentifier',
        'auction_type' => 'setAuctionType',
        'supported_loyalty_programs' => 'setSupportedLoyaltyPrograms',
        'updated_at' => 'setUpdatedAt',
        'show_data_privacy_agreement_hint' => 'setShowDataPrivacyAgreementHint',
        'transmit_privacy_rule' => 'setTransmitPrivacyRule',
        'alternative_email' => 'setAlternativeEmail',
        'alternative_phone' => 'setAlternativePhone',
        'is_parcel_box' => 'setIsParcelBox',
        'is_post_office' => 'setIsPostOffice'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'parcel_service_id' => 'getParcelServiceId',
        'backend_name' => 'getBackendName',
        'flag' => 'getFlag',
        'priority' => 'getPriority',
        'category' => 'getCategory',
        'use_article_porto' => 'getUseArticlePorto',
        'is_insured' => 'getIsInsured',
        'is_express' => 'getIsExpress',
        'is_postident' => 'getIsPostident',
        'is_default_enabled' => 'getIsDefaultEnabled',
        'island_fee' => 'getIslandFee',
        'is_cod' => 'getIsCod',
        'supported_multishop' => 'getSupportedMultishop',
        'supported_referrer' => 'getSupportedReferrer',
        'subreferrer_support' => 'getSubreferrerSupport',
        'excluded_payment_methods' => 'getExcludedPaymentMethods',
        'excluded_customer_groups' => 'getExcludedCustomerGroups',
        'shipping_group' => 'getShippingGroup',
        'dispatch_identifier' => 'getDispatchIdentifier',
        'auction_type' => 'getAuctionType',
        'supported_loyalty_programs' => 'getSupportedLoyaltyPrograms',
        'updated_at' => 'getUpdatedAt',
        'show_data_privacy_agreement_hint' => 'getShowDataPrivacyAgreementHint',
        'transmit_privacy_rule' => 'getTransmitPrivacyRule',
        'alternative_email' => 'getAlternativeEmail',
        'alternative_phone' => 'getAlternativePhone',
        'is_parcel_box' => 'getIsParcelBox',
        'is_post_office' => 'getIsPostOffice'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('parcel_service_id', $data ?? [], null);
        $this->setIfExists('backend_name', $data ?? [], null);
        $this->setIfExists('flag', $data ?? [], null);
        $this->setIfExists('priority', $data ?? [], null);
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('use_article_porto', $data ?? [], null);
        $this->setIfExists('is_insured', $data ?? [], null);
        $this->setIfExists('is_express', $data ?? [], null);
        $this->setIfExists('is_postident', $data ?? [], null);
        $this->setIfExists('is_default_enabled', $data ?? [], null);
        $this->setIfExists('island_fee', $data ?? [], null);
        $this->setIfExists('is_cod', $data ?? [], null);
        $this->setIfExists('supported_multishop', $data ?? [], null);
        $this->setIfExists('supported_referrer', $data ?? [], null);
        $this->setIfExists('subreferrer_support', $data ?? [], null);
        $this->setIfExists('excluded_payment_methods', $data ?? [], null);
        $this->setIfExists('excluded_customer_groups', $data ?? [], null);
        $this->setIfExists('shipping_group', $data ?? [], null);
        $this->setIfExists('dispatch_identifier', $data ?? [], null);
        $this->setIfExists('auction_type', $data ?? [], null);
        $this->setIfExists('supported_loyalty_programs', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('show_data_privacy_agreement_hint', $data ?? [], null);
        $this->setIfExists('transmit_privacy_rule', $data ?? [], null);
        $this->setIfExists('alternative_email', $data ?? [], null);
        $this->setIfExists('alternative_phone', $data ?? [], null);
        $this->setIfExists('is_parcel_box', $data ?? [], null);
        $this->setIfExists('is_post_office', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The ID of the shipping profile (autoincrement value)
     *
     * @return $this
     */
    public function setId(?int $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets parcel_service_id
     *
     * @return int|null
     */
    public function getParcelServiceId(): ?int
    {
        return $this->container['parcel_service_id'];
    }

    /**
     * Sets parcel_service_id
     *
     * @param int|null $parcel_service_id The ID of the shipping service provider
     *
     * @return $this
     */
    public function setParcelServiceId(?int $parcel_service_id): static
    {
        if (is_null($parcel_service_id)) {
            throw new InvalidArgumentException('non-nullable parcel_service_id cannot be null');
        }
        $this->container['parcel_service_id'] = $parcel_service_id;

        return $this;
    }

    /**
     * Gets backend_name
     *
     * @return string|null
     */
    public function getBackendName(): ?string
    {
        return $this->container['backend_name'];
    }

    /**
     * Sets backend_name
     *
     * @param string|null $backend_name The back end name of the shipping profile
     *
     * @return $this
     */
    public function setBackendName(?string $backend_name): static
    {
        if (is_null($backend_name)) {
            throw new InvalidArgumentException('non-nullable backend_name cannot be null');
        }
        $this->container['backend_name'] = $backend_name;

        return $this;
    }

    /**
     * Gets flag
     *
     * @return int|null
     */
    public function getFlag(): ?int
    {
        return $this->container['flag'];
    }

    /**
     * Sets flag
     *
     * @param int|null $flag The icon of the shipping profile
     *
     * @return $this
     */
    public function setFlag(?int $flag): static
    {
        if (is_null($flag)) {
            throw new InvalidArgumentException('non-nullable flag cannot be null');
        }
        $this->container['flag'] = $flag;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int|null
     */
    public function getPriority(): ?int
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int|null $priority The priority of the shipping profile
     *
     * @return $this
     */
    public function setPriority(?int $priority): static
    {
        if (is_null($priority)) {
            throw new InvalidArgumentException('non-nullable priority cannot be null');
        }
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets category
     *
     * @return int|null
     */
    public function getCategory(): ?int
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param int|null $category The category of the shipping profile
     *
     * @return $this
     */
    public function setCategory(?int $category): static
    {
        if (is_null($category)) {
            throw new InvalidArgumentException('non-nullable category cannot be null');
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets use_article_porto
     *
     * @return int|null
     */
    public function getUseArticlePorto(): ?int
    {
        return $this->container['use_article_porto'];
    }

    /**
     * Sets use_article_porto
     *
     * @param int|null $use_article_porto Flag that indicates if the extra shipping charge saved in the item data record is used
     *
     * @return $this
     */
    public function setUseArticlePorto(?int $use_article_porto): static
    {
        if (is_null($use_article_porto)) {
            throw new InvalidArgumentException('non-nullable use_article_porto cannot be null');
        }
        $this->container['use_article_porto'] = $use_article_porto;

        return $this;
    }

    /**
     * Gets is_insured
     *
     * @return int|null
     */
    public function getIsInsured(): ?int
    {
        return $this->container['is_insured'];
    }

    /**
     * Sets is_insured
     *
     * @param int|null $is_insured Flag that indicates if the shipping profile is insured
     *
     * @return $this
     */
    public function setIsInsured(?int $is_insured): static
    {
        if (is_null($is_insured)) {
            throw new InvalidArgumentException('non-nullable is_insured cannot be null');
        }
        $this->container['is_insured'] = $is_insured;

        return $this;
    }

    /**
     * Gets is_express
     *
     * @return int|null
     */
    public function getIsExpress(): ?int
    {
        return $this->container['is_express'];
    }

    /**
     * Sets is_express
     *
     * @param int|null $is_express Flag that indicates if the shipping profile is used for express delivery
     *
     * @return $this
     */
    public function setIsExpress(?int $is_express): static
    {
        if (is_null($is_express)) {
            throw new InvalidArgumentException('non-nullable is_express cannot be null');
        }
        $this->container['is_express'] = $is_express;

        return $this;
    }

    /**
     * Gets is_postident
     *
     * @return int|null
     */
    public function getIsPostident(): ?int
    {
        return $this->container['is_postident'];
    }

    /**
     * Sets is_postident
     *
     * @param int|null $is_postident Flag that indicates if the shipping profile includes an authority verification
     *
     * @return $this
     */
    public function setIsPostident(?int $is_postident): static
    {
        if (is_null($is_postident)) {
            throw new InvalidArgumentException('non-nullable is_postident cannot be null');
        }
        $this->container['is_postident'] = $is_postident;

        return $this;
    }

    /**
     * Gets is_default_enabled
     *
     * @return int|null
     */
    public function getIsDefaultEnabled(): ?int
    {
        return $this->container['is_default_enabled'];
    }

    /**
     * Sets is_default_enabled
     *
     * @param int|null $is_default_enabled Flag that indicates if the shipping profile is automatically assigned to new items
     *
     * @return $this
     */
    public function setIsDefaultEnabled(?int $is_default_enabled): static
    {
        if (is_null($is_default_enabled)) {
            throw new InvalidArgumentException('non-nullable is_default_enabled cannot be null');
        }
        $this->container['is_default_enabled'] = $is_default_enabled;

        return $this;
    }

    /**
     * Gets island_fee
     *
     * @return float|null
     */
    public function getIslandFee(): ?float
    {
        return $this->container['island_fee'];
    }

    /**
     * Sets island_fee
     *
     * @param float|null $island_fee The extra charge for islands saved in the shipping profile
     *
     * @return $this
     */
    public function setIslandFee(?float $island_fee): static
    {
        if (is_null($island_fee)) {
            throw new InvalidArgumentException('non-nullable island_fee cannot be null');
        }
        $this->container['island_fee'] = $island_fee;

        return $this;
    }

    /**
     * Gets is_cod
     *
     * @return int|null
     */
    public function getIsCod(): ?int
    {
        return $this->container['is_cod'];
    }

    /**
     * Sets is_cod
     *
     * @param int|null $is_cod Flag that indicates Cash on Delivery
     *
     * @return $this
     */
    public function setIsCod(?int $is_cod): static
    {
        if (is_null($is_cod)) {
            throw new InvalidArgumentException('non-nullable is_cod cannot be null');
        }
        $this->container['is_cod'] = $is_cod;

        return $this;
    }

    /**
     * Gets supported_multishop
     *
     * @return object[]|null
     */
    public function getSupportedMultishop(): ?array
    {
        return $this->container['supported_multishop'];
    }

    /**
     * Sets supported_multishop
     *
     * @param object[]|null $supported_multishop The clients (stores) that are activated for the shipping profile
     *
     * @return $this
     */
    public function setSupportedMultishop(?array $supported_multishop): static
    {
        if (is_null($supported_multishop)) {
            throw new InvalidArgumentException('non-nullable supported_multishop cannot be null');
        }
        $this->container['supported_multishop'] = $supported_multishop;

        return $this;
    }

    /**
     * Gets supported_referrer
     *
     * @return object[]|null
     */
    public function getSupportedReferrer(): ?array
    {
        return $this->container['supported_referrer'];
    }

    /**
     * Sets supported_referrer
     *
     * @param object[]|null $supported_referrer The order referrers that are activated for the shipping profile
     *
     * @return $this
     */
    public function setSupportedReferrer(?array $supported_referrer): static
    {
        if (is_null($supported_referrer)) {
            throw new InvalidArgumentException('non-nullable supported_referrer cannot be null');
        }
        $this->container['supported_referrer'] = $supported_referrer;

        return $this;
    }

    /**
     * Gets subreferrer_support
     *
     * @return object[]|null
     */
    public function getSubreferrerSupport(): ?array
    {
        return $this->container['subreferrer_support'];
    }

    /**
     * Sets subreferrer_support
     *
     * @param object[]|null $subreferrer_support This field is currently without any function.
     *
     * @return $this
     */
    public function setSubreferrerSupport(?array $subreferrer_support): static
    {
        if (is_null($subreferrer_support)) {
            throw new InvalidArgumentException('non-nullable subreferrer_support cannot be null');
        }
        $this->container['subreferrer_support'] = $subreferrer_support;

        return $this;
    }

    /**
     * Gets excluded_payment_methods
     *
     * @return object[]|null
     */
    public function getExcludedPaymentMethods(): ?array
    {
        return $this->container['excluded_payment_methods'];
    }

    /**
     * Sets excluded_payment_methods
     *
     * @param object[]|null $excluded_payment_methods The blocked payment methods that are not offered for the shipping profile
     *
     * @return $this
     */
    public function setExcludedPaymentMethods(?array $excluded_payment_methods): static
    {
        if (is_null($excluded_payment_methods)) {
            throw new InvalidArgumentException('non-nullable excluded_payment_methods cannot be null');
        }
        $this->container['excluded_payment_methods'] = $excluded_payment_methods;

        return $this;
    }

    /**
     * Gets excluded_customer_groups
     *
     * @return object[]|null
     */
    public function getExcludedCustomerGroups(): ?array
    {
        return $this->container['excluded_customer_groups'];
    }

    /**
     * Sets excluded_customer_groups
     *
     * @param object[]|null $excluded_customer_groups The blocked customer groups for the shipping profile. Blocked customer groups cannot select the shipping profile during checkout.
     *
     * @return $this
     */
    public function setExcludedCustomerGroups(?array $excluded_customer_groups): static
    {
        if (is_null($excluded_customer_groups)) {
            throw new InvalidArgumentException('non-nullable excluded_customer_groups cannot be null');
        }
        $this->container['excluded_customer_groups'] = $excluded_customer_groups;

        return $this;
    }

    /**
     * Gets shipping_group
     *
     * @return string|null
     */
    public function getShippingGroup(): ?string
    {
        return $this->container['shipping_group'];
    }

    /**
     * Sets shipping_group
     *
     * @param string|null $shipping_group The group of the shipping profile
     *
     * @return $this
     */
    public function setShippingGroup(?string $shipping_group): static
    {
        if (is_null($shipping_group)) {
            throw new InvalidArgumentException('non-nullable shipping_group cannot be null');
        }
        $this->container['shipping_group'] = $shipping_group;

        return $this;
    }

    /**
     * Gets dispatch_identifier
     *
     * @return string|null
     */
    public function getDispatchIdentifier(): ?string
    {
        return $this->container['dispatch_identifier'];
    }

    /**
     * Sets dispatch_identifier
     *
     * @param string|null $dispatch_identifier This field is currently without any function.
     *
     * @return $this
     */
    public function setDispatchIdentifier(?string $dispatch_identifier): static
    {
        if (is_null($dispatch_identifier)) {
            throw new InvalidArgumentException('non-nullable dispatch_identifier cannot be null');
        }
        $this->container['dispatch_identifier'] = $dispatch_identifier;

        return $this;
    }

    /**
     * Gets auction_type
     *
     * @return int|null
     */
    public function getAuctionType(): ?int
    {
        return $this->container['auction_type'];
    }

    /**
     * Sets auction_type
     *
     * @param int|null $auction_type The eBay listing type for the shipping profile
     *
     * @return $this
     */
    public function setAuctionType(?int $auction_type): static
    {
        if (is_null($auction_type)) {
            throw new InvalidArgumentException('non-nullable auction_type cannot be null');
        }
        $this->container['auction_type'] = $auction_type;

        return $this;
    }

    /**
     * Gets supported_loyalty_programs
     *
     * @return object[]|null
     */
    public function getSupportedLoyaltyPrograms(): ?array
    {
        return $this->container['supported_loyalty_programs'];
    }

    /**
     * Sets supported_loyalty_programs
     *
     * @param object[]|null $supported_loyalty_programs The loyalty programs that are supported by the shipping profile
     *
     * @return $this
     */
    public function setSupportedLoyaltyPrograms(?array $supported_loyalty_programs): static
    {
        if (is_null($supported_loyalty_programs)) {
            throw new InvalidArgumentException('non-nullable supported_loyalty_programs cannot be null');
        }
        $this->container['supported_loyalty_programs'] = $supported_loyalty_programs;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt(): ?string
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at The date the shipping profile was last updated
     *
     * @return $this
     */
    public function setUpdatedAt(?string $updated_at): static
    {
        if (is_null($updated_at)) {
            throw new InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets show_data_privacy_agreement_hint
     *
     * @return int|null
     */
    public function getShowDataPrivacyAgreementHint(): ?int
    {
        return $this->container['show_data_privacy_agreement_hint'];
    }

    /**
     * Sets show_data_privacy_agreement_hint
     *
     * @param int|null $show_data_privacy_agreement_hint 
     *
     * @return $this
     */
    public function setShowDataPrivacyAgreementHint(?int $show_data_privacy_agreement_hint): static
    {
        if (is_null($show_data_privacy_agreement_hint)) {
            throw new InvalidArgumentException('non-nullable show_data_privacy_agreement_hint cannot be null');
        }
        $this->container['show_data_privacy_agreement_hint'] = $show_data_privacy_agreement_hint;

        return $this;
    }

    /**
     * Gets transmit_privacy_rule
     *
     * @return string|null
     */
    public function getTransmitPrivacyRule(): ?string
    {
        return $this->container['transmit_privacy_rule'];
    }

    /**
     * Sets transmit_privacy_rule
     *
     * @param string|null $transmit_privacy_rule 
     *
     * @return $this
     */
    public function setTransmitPrivacyRule(?string $transmit_privacy_rule): static
    {
        if (is_null($transmit_privacy_rule)) {
            throw new InvalidArgumentException('non-nullable transmit_privacy_rule cannot be null');
        }
        $this->container['transmit_privacy_rule'] = $transmit_privacy_rule;

        return $this;
    }

    /**
     * Gets alternative_email
     *
     * @return string|null
     */
    public function getAlternativeEmail(): ?string
    {
        return $this->container['alternative_email'];
    }

    /**
     * Sets alternative_email
     *
     * @param string|null $alternative_email 
     *
     * @return $this
     */
    public function setAlternativeEmail(?string $alternative_email): static
    {
        if (is_null($alternative_email)) {
            throw new InvalidArgumentException('non-nullable alternative_email cannot be null');
        }
        $this->container['alternative_email'] = $alternative_email;

        return $this;
    }

    /**
     * Gets alternative_phone
     *
     * @return string|null
     */
    public function getAlternativePhone(): ?string
    {
        return $this->container['alternative_phone'];
    }

    /**
     * Sets alternative_phone
     *
     * @param string|null $alternative_phone 
     *
     * @return $this
     */
    public function setAlternativePhone(?string $alternative_phone): static
    {
        if (is_null($alternative_phone)) {
            throw new InvalidArgumentException('non-nullable alternative_phone cannot be null');
        }
        $this->container['alternative_phone'] = $alternative_phone;

        return $this;
    }

    /**
     * Gets is_parcel_box
     *
     * @return int|null
     */
    public function getIsParcelBox(): ?int
    {
        return $this->container['is_parcel_box'];
    }

    /**
     * Sets is_parcel_box
     *
     * @param int|null $is_parcel_box Indicates whether the e.g. paketshop is supported
     *
     * @return $this
     */
    public function setIsParcelBox(?int $is_parcel_box): static
    {
        if (is_null($is_parcel_box)) {
            throw new InvalidArgumentException('non-nullable is_parcel_box cannot be null');
        }
        $this->container['is_parcel_box'] = $is_parcel_box;

        return $this;
    }

    /**
     * Gets is_post_office
     *
     * @return int|null
     */
    public function getIsPostOffice(): ?int
    {
        return $this->container['is_post_office'];
    }

    /**
     * Sets is_post_office
     *
     * @param int|null $is_post_office Indicates whether the e.g. postfiliale is supported
     *
     * @return $this
     */
    public function setIsPostOffice(?int $is_post_office): static
    {
        if (is_null($is_post_office)) {
            throw new InvalidArgumentException('non-nullable is_post_office cannot be null');
        }
        $this->container['is_post_office'] = $is_post_office;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


